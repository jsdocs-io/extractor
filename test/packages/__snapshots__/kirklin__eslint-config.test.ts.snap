// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`@kirklin/eslint-config@2.1.0 1`] = `
{
  "analyzedAt": Any<String>,
  "analyzedIn": Any<Number>,
  "declarations": [
    {
      "docs": [
        "/**
 * Combine array and non-array configs into a single array.
 */",
      ],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.combine",
      "kind": "function",
      "line": 506,
      "name": "combine",
      "signature": "combine: (
  ...configs: Awaitable<UserConfigItem | UserConfigItem[]>[]
) => Promise<UserConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.comments",
      "kind": "function",
      "line": 393,
      "name": "comments",
      "signature": "comments: () => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [
        "/**
 * Construct an array of ESLint flat config items.
 */",
      ],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.default",
      "kind": "function",
      "line": 388,
      "name": "default",
      "signature": "default: (
  options?: OptionsConfig & FlatConfigItem,
  ...userConfigs: Awaitable<UserConfigItem | UserConfigItem[]>[]
) => Promise<UserConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.ensurePackages",
      "kind": "function",
      "line": 514,
      "name": "ensurePackages",
      "signature": "ensurePackages: (packages: string[]) => Promise<void>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.formatters",
      "kind": "function",
      "line": 416,
      "name": "formatters",
      "signature": "formatters: (
  options?: OptionsFormatters | true,
  stylistic?: StylisticConfig,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.getOverrides",
      "kind": "function",
      "line": 391,
      "name": "getOverrides",
      "signature": "getOverrides: <K extends keyof OptionsConfig>(
  options: OptionsConfig,
  key: K,
) => any;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.ignores",
      "kind": "function",
      "line": 395,
      "name": "ignores",
      "signature": "ignores: () => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.imports",
      "kind": "function",
      "line": 397,
      "name": "imports",
      "signature": "imports: (options?: OptionsStylistic) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.interopDefault",
      "kind": "function",
      "line": 511,
      "name": "interopDefault",
      "signature": "interopDefault: <T>(
  m: Awaitable<T>,
) => Promise<T extends { default: infer U } ? U : T>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.javascript",
      "kind": "function",
      "line": 399,
      "name": "javascript",
      "signature": "javascript: (
  options?: OptionsIsInEditor & OptionsOverrides,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.jsdoc",
      "kind": "function",
      "line": 401,
      "name": "jsdoc",
      "signature": "jsdoc: (options?: OptionsStylistic) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.jsonc",
      "kind": "function",
      "line": 403,
      "name": "jsonc",
      "signature": "jsonc: (
  options?: OptionsFiles & OptionsStylistic & OptionsOverrides,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [
        "/**
 * Construct an array of ESLint flat config items.
 */",
      ],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.kirklin",
      "kind": "function",
      "line": 388,
      "name": "kirklin",
      "signature": "kirklin: (
  options?: OptionsConfig & FlatConfigItem,
  ...userConfigs: Awaitable<UserConfigItem | UserConfigItem[]>[]
) => Promise<UserConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.markdown",
      "kind": "function",
      "line": 405,
      "name": "markdown",
      "signature": "markdown: (
  options?: OptionsFiles & OptionsComponentExts & OptionsOverrides,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.node",
      "kind": "function",
      "line": 407,
      "name": "node",
      "signature": "node: () => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [
        "/**
 * Optional perfectionist plugin for props and items sorting.
 *
 * @see https://github.com/azat-io/eslint-plugin-perfectionist
 */",
      ],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.perfectionist",
      "kind": "function",
      "line": 414,
      "name": "perfectionist",
      "signature": "perfectionist: () => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.react",
      "kind": "function",
      "line": 418,
      "name": "react",
      "signature": "react: (
  options?: OptionsHasTypeScript & OptionsOverrides & OptionsFiles,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.renameRules",
      "kind": "function",
      "line": 507,
      "name": "renameRules",
      "signature": "renameRules: (
  rules: Record<string, any>,
  from: string,
  to: string,
) => { [k: string]: any };",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.resolveSubOptions",
      "kind": "function",
      "line": 390,
      "name": "resolveSubOptions",
      "signature": "resolveSubOptions: <K extends keyof OptionsConfig>(
  options: OptionsConfig,
  key: K,
) => ResolvedOptions<OptionsConfig[K]>;",
    },
    {
      "docs": [
        "/**
 * Sort package.json
 *
 * Requires \`jsonc\` config
 */",
      ],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.sortPackageJson",
      "kind": "function",
      "line": 425,
      "name": "sortPackageJson",
      "signature": "sortPackageJson: () => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [
        "/**
 * Sort tsconfig.json
 *
 * Requires \`jsonc\` config
 */",
      ],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.sortTsconfig",
      "kind": "function",
      "line": 431,
      "name": "sortTsconfig",
      "signature": "sortTsconfig: () => FlatConfigItem[];",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.stylistic",
      "kind": "function",
      "line": 434,
      "name": "stylistic",
      "signature": "stylistic: (
  options?: StylisticConfig & OptionsOverrides,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.svelte",
      "kind": "function",
      "line": 436,
      "name": "svelte",
      "signature": "svelte: (
  options?: OptionsHasTypeScript &
    OptionsOverrides &
    OptionsStylistic &
    OptionsFiles,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.test",
      "kind": "function",
      "line": 438,
      "name": "test",
      "signature": "test: (
  options?: OptionsFiles & OptionsIsInEditor & OptionsOverrides,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.toArray",
      "kind": "function",
      "line": 510,
      "name": "toArray",
      "signature": "toArray: <T>(value: T | T[]) => T[];",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.toml",
      "kind": "function",
      "line": 450,
      "name": "toml",
      "signature": "toml: (
  options?: OptionsOverrides & OptionsStylistic & OptionsFiles,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.typescript",
      "kind": "function",
      "line": 440,
      "name": "typescript",
      "signature": "typescript: (
  options?: OptionsFiles &
    OptionsComponentExts &
    OptionsOverrides &
    OptionsTypeScriptWithTypes &
    OptionsTypeScriptParserOptions,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.unicorn",
      "kind": "function",
      "line": 442,
      "name": "unicorn",
      "signature": "unicorn: () => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.unocss",
      "kind": "function",
      "line": 444,
      "name": "unocss",
      "signature": "unocss: (options?: OptionsUnoCSS) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.vue",
      "kind": "function",
      "line": 446,
      "name": "vue",
      "signature": "vue: (
  options?: OptionsVue &
    OptionsHasTypeScript &
    OptionsOverrides &
    OptionsStylistic &
    OptionsFiles,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+function.yaml",
      "kind": "function",
      "line": 448,
      "name": "yaml",
      "signature": "yaml: (
  options?: OptionsOverrides & OptionsStylistic & OptionsFiles,
) => Promise<FlatConfigItem[]>;",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsComponentExts",
      "indexSignatures": [],
      "kind": "interface",
      "line": 193,
      "methods": [],
      "name": "OptionsComponentExts",
      "properties": [
        {
          "docs": [
            "/**
     * Additional extensions for components.
     *
     * @example ['vue']
     * @default []
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsComponentExts.+property.componentExts",
          "kind": "interface-property",
          "line": 200,
          "name": "componentExts",
          "signature": "componentExts?: string[];",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsComponentExts {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsConfig",
      "indexSignatures": [],
      "kind": "interface",
      "line": 246,
      "methods": [],
      "name": "OptionsConfig",
      "properties": [
        {
          "docs": [
            "/**
     * Use external formatters to format files.
     *
     * Requires installing:
     * - \`eslint-plugin-format\`
     *
     * When set to \`true\`, it will enable all formatters.
     *
     * @default false
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.formatters",
          "kind": "interface-property",
          "line": 359,
          "name": "formatters",
          "signature": "formatters?: boolean | OptionsFormatters;",
        },
        {
          "docs": [
            "/**
     * Enable gitignore support.
     *
     * Passing an object to configure the options.
     *
     * @see https://github.com/kirklin/eslint-config-flat-gitignore
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.gitignore",
          "kind": "interface-property",
          "line": 255,
          "name": "gitignore",
          "signature": "gitignore?: boolean | FlatGitignoreOptions;",
        },
        {
          "docs": [
            "/**
     * Control to disable some rules in editors.
     * @default auto-detect based on the process.env
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.isInEditor",
          "kind": "interface-property",
          "line": 364,
          "name": "isInEditor",
          "signature": "isInEditor?: boolean;",
        },
        {
          "docs": [
            "/**
     * Core rules. Can't be disabled.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.javascript",
          "kind": "interface-property",
          "line": 259,
          "name": "javascript",
          "signature": "javascript?: OptionsOverrides;",
        },
        {
          "docs": [
            "/**
     * Enable JSONC support.
     *
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.jsonc",
          "kind": "interface-property",
          "line": 293,
          "name": "jsonc",
          "signature": "jsonc?: boolean | OptionsOverrides;",
        },
        {
          "docs": [
            "/**
     * Enable JSX related rules.
     *
     * Currently only stylistic rules are included.
     *
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.jsx",
          "kind": "interface-property",
          "line": 275,
          "name": "jsx",
          "signature": "jsx?: boolean;",
        },
        {
          "docs": [
            "/**
     * Enable linting for **code snippets** in Markdown.
     *
     * For formatting Markdown content, enable also \`formatters.markdown\`.
     *
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.markdown",
          "kind": "interface-property",
          "line": 313,
          "name": "markdown",
          "signature": "markdown?: boolean | OptionsOverrides;",
        },
        {
          "docs": [
            "/**
     * Provide overrides for rules for each integration.
     *
     * @deprecated use \`overrides\` option in each integration key instead
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.overrides",
          "kind": "interface-property",
          "line": 370,
          "name": "overrides",
          "signature": "overrides?: {
  stylistic?: FlatConfigItem["rules"];
  javascript?: FlatConfigItem["rules"];
  typescript?: FlatConfigItem["rules"];
  test?: FlatConfigItem["rules"];
  vue?: FlatConfigItem["rules"];
  jsonc?: FlatConfigItem["rules"];
  markdown?: FlatConfigItem["rules"];
  yaml?: FlatConfigItem["rules"];
  toml?: FlatConfigItem["rules"];
  react?: FlatConfigItem["rules"];
  svelte?: FlatConfigItem["rules"];
};",
        },
        {
          "docs": [
            "/**
     * Enable react rules.
     *
     * Requires installing:
     * - \`eslint-plugin-react\`
     * - \`eslint-plugin-react-hooks\`
     * - \`eslint-plugin-react-refresh\`
     *
     * @default false
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.react",
          "kind": "interface-property",
          "line": 330,
          "name": "react",
          "signature": "react?: boolean | OptionsOverrides;",
        },
        {
          "docs": [
            "/**
     * Enable stylistic rules.
     *
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.stylistic",
          "kind": "interface-property",
          "line": 319,
          "name": "stylistic",
          "signature": "stylistic?: boolean | (StylisticConfig & OptionsOverrides);",
        },
        {
          "docs": [
            "/**
     * Enable svelte rules.
     *
     * Requires installing:
     * - \`eslint-plugin-svelte\`
     *
     * @default false
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.svelte",
          "kind": "interface-property",
          "line": 339,
          "name": "svelte",
          "signature": "svelte?: boolean;",
        },
        {
          "docs": [
            "/**
     * Enable test support.
     *
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.test",
          "kind": "interface-property",
          "line": 281,
          "name": "test",
          "signature": "test?: boolean | OptionsOverrides;",
        },
        {
          "docs": [
            "/**
     * Enable TOML support.
     *
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.toml",
          "kind": "interface-property",
          "line": 305,
          "name": "toml",
          "signature": "toml?: boolean | OptionsOverrides;",
        },
        {
          "docs": [
            "/**
     * Enable TypeScript support.
     *
     * Passing an object to enable TypeScript Language Server support.
     *
     * @default auto-detect based on the dependencies
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.typescript",
          "kind": "interface-property",
          "line": 267,
          "name": "typescript",
          "signature": "typescript?: boolean | OptionsTypescript;",
        },
        {
          "docs": [
            "/**
     * Enable unocss rules.
     *
     * Requires installing:
     * - \`@unocss/eslint-plugin\`
     *
     * @default false
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.unocss",
          "kind": "interface-property",
          "line": 348,
          "name": "unocss",
          "signature": "unocss?: boolean | OptionsUnoCSS;",
        },
        {
          "docs": [
            "/**
     * Enable Vue support.
     *
     * @default auto-detect based on the dependencies
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.vue",
          "kind": "interface-property",
          "line": 287,
          "name": "vue",
          "signature": "vue?: boolean | OptionsVue;",
        },
        {
          "docs": [
            "/**
     * Enable YAML support.
     *
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsConfig.+property.yaml",
          "kind": "interface-property",
          "line": 299,
          "name": "yaml",
          "signature": "yaml?: boolean | OptionsOverrides;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsConfig extends OptionsComponentExts {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsFiles",
      "indexSignatures": [],
      "kind": "interface",
      "line": 133,
      "methods": [],
      "name": "OptionsFiles",
      "properties": [
        {
          "docs": [
            "/**
     * Override the \`files\` option to provide custom globs.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsFiles.+property.files",
          "kind": "interface-property",
          "line": 137,
          "name": "files",
          "signature": "files?: string[];",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsFiles {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsFormatters",
      "indexSignatures": [],
      "kind": "interface",
      "line": 155,
      "methods": [],
      "name": "OptionsFormatters",
      "properties": [
        {
          "docs": [
            "/**
     * Enable formatting support for CSS, Less, Sass, and SCSS.
     *
     * Currently only support Prettier.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsFormatters.+property.css",
          "kind": "interface-property",
          "line": 161,
          "name": "css",
          "signature": "css?: "prettier" | boolean;",
        },
        {
          "docs": [
            "/**
     * Custom options for dprint.
     *
     * By default it's controlled by our own config.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsFormatters.+property.dprintOptions",
          "kind": "interface-property",
          "line": 191,
          "name": "dprintOptions",
          "signature": "dprintOptions?: boolean;",
        },
        {
          "docs": [
            "/**
     * Enable formatting support for GraphQL.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsFormatters.+property.graphql",
          "kind": "interface-property",
          "line": 179,
          "name": "graphql",
          "signature": "graphql?: "prettier" | boolean;",
        },
        {
          "docs": [
            "/**
     * Enable formatting support for HTML.
     *
     * Currently only support Prettier.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsFormatters.+property.html",
          "kind": "interface-property",
          "line": 167,
          "name": "html",
          "signature": "html?: "prettier" | boolean;",
        },
        {
          "docs": [
            "/**
     * Enable formatting support for Markdown.
     *
     * Support both Prettier and dprint.
     *
     * When set to \`true\`, it will use Prettier.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsFormatters.+property.markdown",
          "kind": "interface-property",
          "line": 175,
          "name": "markdown",
          "signature": "markdown?: "prettier" | "dprint" | boolean;",
        },
        {
          "docs": [
            "/**
     * Custom options for Prettier.
     *
     * By default it's controlled by our own config.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsFormatters.+property.prettierOptions",
          "kind": "interface-property",
          "line": 185,
          "name": "prettierOptions",
          "signature": "prettierOptions?: VendoredPrettierOptions;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsFormatters {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsHasTypeScript",
      "indexSignatures": [],
      "kind": "interface",
      "line": 220,
      "methods": [],
      "name": "OptionsHasTypeScript",
      "properties": [
        {
          "docs": [],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsHasTypeScript.+property.typescript",
          "kind": "interface-property",
          "line": 221,
          "name": "typescript",
          "signature": "typescript?: boolean;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsHasTypeScript {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsIsInEditor",
      "indexSignatures": [],
      "kind": "interface",
      "line": 231,
      "methods": [],
      "name": "OptionsIsInEditor",
      "properties": [
        {
          "docs": [],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsIsInEditor.+property.isInEditor",
          "kind": "interface-property",
          "line": 232,
          "name": "isInEditor",
          "signature": "isInEditor?: boolean;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsIsInEditor {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsOverrides",
      "indexSignatures": [],
      "kind": "interface",
      "line": 228,
      "methods": [],
      "name": "OptionsOverrides",
      "properties": [
        {
          "docs": [],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsOverrides.+property.overrides",
          "kind": "interface-property",
          "line": 229,
          "name": "overrides",
          "signature": "overrides?: FlatConfigItem["rules"];",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsOverrides {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsStylistic",
      "indexSignatures": [],
      "kind": "interface",
      "line": 223,
      "methods": [],
      "name": "OptionsStylistic",
      "properties": [
        {
          "docs": [],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsStylistic.+property.stylistic",
          "kind": "interface-property",
          "line": 224,
          "name": "stylistic",
          "signature": "stylistic?: boolean | StylisticConfig;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsStylistic {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsTypeScriptParserOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 202,
      "methods": [],
      "name": "OptionsTypeScriptParserOptions",
      "properties": [
        {
          "docs": [
            "/**
     * Glob patterns for files that should be type aware.
     * @default ['**\\/*.{ts,tsx}']
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsTypeScriptParserOptions.+property.filesTypeAware",
          "kind": "interface-property",
          "line": 211,
          "name": "filesTypeAware",
          "signature": "filesTypeAware?: string[];",
        },
        {
          "docs": [
            "/**
     * Additional parser options for TypeScript.
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsTypeScriptParserOptions.+property.parserOptions",
          "kind": "interface-property",
          "line": 206,
          "name": "parserOptions",
          "signature": "parserOptions?: Partial<ParserOptions>;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsTypeScriptParserOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsTypeScriptWithTypes",
      "indexSignatures": [],
      "kind": "interface",
      "line": 213,
      "methods": [],
      "name": "OptionsTypeScriptWithTypes",
      "properties": [
        {
          "docs": [
            "/**
     * When this options is provided, type aware rules will be enabled.
     * @see https://typescript-eslint.io/linting/typed-linting/
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsTypeScriptWithTypes.+property.tsconfigPath",
          "kind": "interface-property",
          "line": 218,
          "name": "tsconfigPath",
          "signature": "tsconfigPath?: string | string[];",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsTypeScriptWithTypes {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsUnoCSS",
      "indexSignatures": [],
      "kind": "interface",
      "line": 234,
      "methods": [],
      "name": "OptionsUnoCSS",
      "properties": [
        {
          "docs": [
            "/**
     * Enable attributify support.
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsUnoCSS.+property.attributify",
          "kind": "interface-property",
          "line": 239,
          "name": "attributify",
          "signature": "attributify?: boolean;",
        },
        {
          "docs": [
            "/**
     * Enable strict mode by throwing errors about blocklisted classes.
     * @default false
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsUnoCSS.+property.strict",
          "kind": "interface-property",
          "line": 244,
          "name": "strict",
          "signature": "strict?: boolean;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsUnoCSS extends OptionsOverrides {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.OptionsVue",
      "indexSignatures": [],
      "kind": "interface",
      "line": 139,
      "methods": [],
      "name": "OptionsVue",
      "properties": [
        {
          "docs": [
            "/**
     * Create virtual files for Vue SFC blocks to enable linting.
     *
     * @see https://github.com/kirklin/eslint-processor-vue-blocks
     * @default true
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsVue.+property.sfcBlocks",
          "kind": "interface-property",
          "line": 146,
          "name": "sfcBlocks",
          "signature": "sfcBlocks?: boolean | Options;",
        },
        {
          "docs": [
            "/**
     * Vue version. Apply different rules set from \`eslint-plugin-vue\`.
     *
     * @default 3
     */",
          ],
          "file": "/@kirklin/eslint-config/dist/index.d.ts",
          "id": "+interface.OptionsVue.+property.vueVersion",
          "kind": "interface-property",
          "line": 152,
          "name": "vueVersion",
          "signature": "vueVersion?: 2 | 3;",
        },
      ],
      "setAccessors": [],
      "signature": "interface OptionsVue extends OptionsOverrides {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "getAccessors": [],
      "id": "+interface.StylisticConfig",
      "indexSignatures": [],
      "kind": "interface",
      "line": 226,
      "methods": [],
      "name": "StylisticConfig",
      "properties": [],
      "setAccessors": [],
      "signature": "interface StylisticConfig
  extends Pick<
    StylisticCustomizeOptions,
    "indent" | "quotes" | "jsx" | "semi"
  > {}",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+type.Awaitable",
      "kind": "type",
      "line": 116,
      "name": "Awaitable",
      "signature": "type Awaitable<T> = T | Promise<T>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+type.FlatConfigItem",
      "kind": "type",
      "line": 120,
      "name": "FlatConfigItem",
      "signature": "type FlatConfigItem = Omit<FlatESLintConfigItem<Rules, false>, "plugins"> & {
  /**
   * Custom name of each config item
   */
  name?: string;
  /**
   * An object containing a name-value mapping of plugin names to plugin objects. When \`files\` is specified, these plugins are only available to the matching files.
   *
   * @see [Using plugins in your configuration](https://eslint.org/docs/latest/user-guide/configuring/configuration-files-new#using-plugins-in-your-configuration)
   */
  plugins?: Record<string, any>;
};",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+type.OptionsTypescript",
      "kind": "type",
      "line": 154,
      "name": "OptionsTypescript",
      "signature": "type OptionsTypescript =
  | (OptionsTypeScriptWithTypes & OptionsOverrides)
  | (OptionsTypeScriptParserOptions & OptionsOverrides);",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+type.ResolvedOptions",
      "kind": "type",
      "line": 389,
      "name": "ResolvedOptions",
      "signature": "type ResolvedOptions<T> = T extends boolean ? never : NonNullable<T>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+type.Rules",
      "kind": "type",
      "line": 117,
      "name": "Rules",
      "signature": "type Rules = WrapRuleConfig<
  MergeIntersection<
    RenamePrefix<RuleOptions, "@typescript-eslint/", "ts/"> &
      RenamePrefix<VitestRules, "vitest/", "test/"> &
      RenamePrefix<YmlRules, "yml/", "yaml/"> &
      RenamePrefix<NRules, "n/", "node/"> &
      Prefix<UnprefixedRuleOptions, "style/"> &
      Prefix<Rules$1, "kirklin/"> &
      ReactHooksRules &
      ReactRules &
      RuleOptions$1 &
      ImportRules &
      EslintRules &
      JsoncRules &
      VueRules &
      RuleOptions$2 &
      EslintCommentsRules & {
        "test/no-only-tests": RuleConfig<[]>;
      }
  >
>;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+type.UserConfigItem",
      "kind": "type",
      "line": 132,
      "name": "UserConfigItem",
      "signature": "type UserConfigItem = FlatConfigItem | Linter.FlatConfig;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+type.WrapRuleConfig",
      "kind": "type",
      "line": 111,
      "name": "WrapRuleConfig",
      "signature": "type WrapRuleConfig<
  T extends {
    [key: string]: any;
  },
> = {
  [K in keyof T]: T[K] extends RuleConfig ? T[K] : RuleConfig<T[K]>;
};",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_ALL_SRC",
      "kind": "variable",
      "line": 475,
      "name": "GLOB_ALL_SRC",
      "signature": "const GLOB_ALL_SRC: string[];",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_CSS",
      "kind": "variable",
      "line": 459,
      "name": "GLOB_CSS",
      "signature": "const GLOB_CSS: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_EXCLUDE",
      "kind": "variable",
      "line": 476,
      "name": "GLOB_EXCLUDE",
      "signature": "const GLOB_EXCLUDE: string[];",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_HTML",
      "kind": "variable",
      "line": 472,
      "name": "GLOB_HTML",
      "signature": "const GLOB_HTML: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_JS",
      "kind": "variable",
      "line": 454,
      "name": "GLOB_JS",
      "signature": "const GLOB_JS: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_JSON",
      "kind": "variable",
      "line": 463,
      "name": "GLOB_JSON",
      "signature": "const GLOB_JSON: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_JSON5",
      "kind": "variable",
      "line": 464,
      "name": "GLOB_JSON5",
      "signature": "const GLOB_JSON5: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_JSONC",
      "kind": "variable",
      "line": 465,
      "name": "GLOB_JSONC",
      "signature": "const GLOB_JSONC: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_JSX",
      "kind": "variable",
      "line": 455,
      "name": "GLOB_JSX",
      "signature": "const GLOB_JSX: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_LESS",
      "kind": "variable",
      "line": 461,
      "name": "GLOB_LESS",
      "signature": "const GLOB_LESS: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_MARKDOWN",
      "kind": "variable",
      "line": 466,
      "name": "GLOB_MARKDOWN",
      "signature": "const GLOB_MARKDOWN: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_MARKDOWN_CODE",
      "kind": "variable",
      "line": 473,
      "name": "GLOB_MARKDOWN_CODE",
      "signature": "const GLOB_MARKDOWN_CODE: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_MARKDOWN_IN_MARKDOWN",
      "kind": "variable",
      "line": 467,
      "name": "GLOB_MARKDOWN_IN_MARKDOWN",
      "signature": "const GLOB_MARKDOWN_IN_MARKDOWN: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_POSTCSS",
      "kind": "variable",
      "line": 460,
      "name": "GLOB_POSTCSS",
      "signature": "const GLOB_POSTCSS: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_SCSS",
      "kind": "variable",
      "line": 462,
      "name": "GLOB_SCSS",
      "signature": "const GLOB_SCSS: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_SRC",
      "kind": "variable",
      "line": 453,
      "name": "GLOB_SRC",
      "signature": "const GLOB_SRC: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_SRC_EXT",
      "kind": "variable",
      "line": 452,
      "name": "GLOB_SRC_EXT",
      "signature": "const GLOB_SRC_EXT: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_STYLE",
      "kind": "variable",
      "line": 458,
      "name": "GLOB_STYLE",
      "signature": "const GLOB_STYLE: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_SVELTE",
      "kind": "variable",
      "line": 468,
      "name": "GLOB_SVELTE",
      "signature": "const GLOB_SVELTE: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_TESTS",
      "kind": "variable",
      "line": 474,
      "name": "GLOB_TESTS",
      "signature": "const GLOB_TESTS: string[];",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_TOML",
      "kind": "variable",
      "line": 471,
      "name": "GLOB_TOML",
      "signature": "const GLOB_TOML: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_TS",
      "kind": "variable",
      "line": 456,
      "name": "GLOB_TS",
      "signature": "const GLOB_TS: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_TSX",
      "kind": "variable",
      "line": 457,
      "name": "GLOB_TSX",
      "signature": "const GLOB_TSX: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_VUE",
      "kind": "variable",
      "line": 469,
      "name": "GLOB_VUE",
      "signature": "const GLOB_VUE: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.GLOB_YAML",
      "kind": "variable",
      "line": 470,
      "name": "GLOB_YAML",
      "signature": "const GLOB_YAML: string;",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.parserPlain",
      "kind": "variable",
      "line": 478,
      "name": "parserPlain",
      "signature": "const parserPlain: {
  meta: { name: string };
  parseForESLint: (code: string) => {
    ast: {
      body: never[];
      comments: never[];
      loc: { end: number; start: number };
      range: number[];
      tokens: never[];
      type: string;
    };
    scopeManager: null;
    services: { isPlain: boolean };
    visitorKeys: { Program: never[] };
  };
};",
    },
    {
      "docs": [],
      "file": "/@kirklin/eslint-config/dist/index.d.ts",
      "id": "+variable.StylisticConfigDefaults",
      "kind": "variable",
      "line": 433,
      "name": "StylisticConfigDefaults",
      "signature": "const StylisticConfigDefaults: StylisticConfig;",
    },
  ],
  "dependencies": Any<Array>,
  "name": "@kirklin/eslint-config",
  "overview": undefined,
  "subpath": ".",
  "types": "./dist/index.d.ts",
  "version": "2.1.0",
}
`;
