// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`h3@1.10.1 1`] = `
{
  "analyzedAt": Any<String>,
  "analyzedIn": Any<Number>,
  "declarations": [
    {
      "constructors": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.constructor",
          "kind": "class-constructor",
          "line": 226,
          "name": "constructor",
          "signature": "constructor(message: string, opts?: { cause?: unknown });",
        },
      ],
      "docs": [
        "/**
 * H3 Runtime Error
 * @class
 * @extends Error
 * @property {number} statusCode - An integer indicating the HTTP response status code.
 * @property {string} statusMessage - A string representing the HTTP status message.
 * @property {boolean} fatal - Indicates if the error is a fatal error.
 * @property {boolean} unhandled - Indicates if the error was unhandled and auto captured.
 * @property {DataT} data - An extra data that will be included in the response.
 *                         This can be used to pass additional information about the error.
 * @property {boolean} internal - Setting this property to \`true\` will mark the error as an internal error.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "class.H3Error",
      "kind": "class",
      "line": 218,
      "methods": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.method.toJSON",
          "kind": "class-method",
          "line": 229,
          "name": "toJSON",
          "signature": "toJSON: () => Pick<
  H3Error<DataT>,
  "data" | "statusCode" | "statusMessage" | "message"
>;",
        },
      ],
      "name": "H3Error",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.property.__h3_error__",
          "kind": "class-property",
          "line": 219,
          "name": "__h3_error__",
          "signature": "static __h3_error__: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.property.cause",
          "kind": "class-property",
          "line": 225,
          "name": "cause",
          "signature": "cause?: {};",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.property.data",
          "kind": "class-property",
          "line": 224,
          "name": "data",
          "signature": "data?: {};",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.property.fatal",
          "kind": "class-property",
          "line": 221,
          "name": "fatal",
          "signature": "fatal: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.property.statusCode",
          "kind": "class-property",
          "line": 220,
          "name": "statusCode",
          "signature": "statusCode: number;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.property.statusMessage",
          "kind": "class-property",
          "line": 223,
          "name": "statusMessage",
          "signature": "statusMessage?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Error.property.unhandled",
          "kind": "class-property",
          "line": 222,
          "name": "unhandled",
          "signature": "unhandled: boolean;",
        },
      ],
      "signature": "class H3Error<DataT = unknown> extends Error {}",
    },
    {
      "constructors": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.constructor",
          "kind": "class-constructor",
          "line": 38,
          "name": "constructor",
          "signature": "constructor(req: IncomingMessage, res: ServerResponse);",
        },
      ],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "class.H3Event",
      "kind": "class",
      "line": 28,
      "methods": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.method.respondWith",
          "kind": "class-method",
          "line": 43,
          "name": "respondWith",
          "signature": "respondWith: (response: Response | PromiseLike<Response>) => Promise<void>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.method.toJSON",
          "kind": "class-method",
          "line": 45,
          "name": "toJSON",
          "signature": "toJSON: () => string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.method.toString",
          "kind": "class-method",
          "line": 44,
          "name": "toString",
          "signature": "toString: () => string;",
        },
      ],
      "name": "H3Event",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property."__is_event__"",
          "kind": "class-property",
          "line": 29,
          "name": ""__is_event__"",
          "signature": ""__is_event__": boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property._handled",
          "kind": "class-property",
          "line": 37,
          "name": "_handled",
          "signature": "_handled: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property._headers",
          "kind": "class-property",
          "line": 35,
          "name": "_headers",
          "signature": "_headers?: Headers;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property._method",
          "kind": "class-property",
          "line": 33,
          "name": "_method",
          "signature": "_method?: HTTPMethod;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property._path",
          "kind": "class-property",
          "line": 34,
          "name": "_path",
          "signature": "_path?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property._requestBody",
          "kind": "class-property",
          "line": 36,
          "name": "_requestBody",
          "signature": "_requestBody?: BodyInit;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.context",
          "kind": "class-property",
          "line": 32,
          "name": "context",
          "signature": "context: H3EventContext;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.handled",
          "kind": "class-property",
          "line": 42,
          "name": "handled",
          "signature": "readonly handled: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.headers",
          "kind": "class-property",
          "line": 41,
          "name": "headers",
          "signature": "readonly headers: Headers;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.method",
          "kind": "class-property",
          "line": 39,
          "name": "method",
          "signature": "readonly method: HTTPMethod;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.node",
          "kind": "class-property",
          "line": 30,
          "name": "node",
          "signature": "node: NodeEventContext;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.path",
          "kind": "class-property",
          "line": 40,
          "name": "path",
          "signature": "readonly path: string;",
        },
        {
          "docs": [
            "/** @deprecated Please use \`event.node.req\` instead. **/",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.req",
          "kind": "class-property",
          "line": 47,
          "name": "req",
          "signature": "readonly req: any;",
        },
        {
          "docs": [
            "/** @deprecated Please use \`event.node.res\` instead. **/",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.res",
          "kind": "class-property",
          "line": 51,
          "name": "res",
          "signature": "readonly res: ServerResponse<IncomingMessage>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "class.H3Event.property.web",
          "kind": "class-property",
          "line": 31,
          "name": "web",
          "signature": "web?: WebEventContext;",
        },
      ],
      "signature": "class H3Event<_RequestT extends EventHandlerRequest = EventHandlerRequest>
  implements Pick<FetchEvent, "respondWith"> {}",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.appendCorsHeaders",
      "kind": "function",
      "line": 477,
      "name": "appendCorsHeaders",
      "signature": "appendCorsHeaders: (event: H3Event, options: H3CorsOptions) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.appendCorsPreflightHeaders",
      "kind": "function",
      "line": 476,
      "name": "appendCorsPreflightHeaders",
      "signature": "appendCorsPreflightHeaders: (
  event: H3Event,
  options: H3CorsOptions,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.appendResponseHeader",
      "kind": "function",
      "line": 593,
      "name": "appendResponseHeader",
      "signature": "appendResponseHeader: (
  event: H3Event,
  name: HTTPHeaderName,
  value: string,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.appendResponseHeaders",
      "kind": "function",
      "line": 591,
      "name": "appendResponseHeaders",
      "signature": "appendResponseHeaders: (
  event: H3Event,
  headers: Record<string, string>,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.assertMethod",
      "kind": "function",
      "line": 447,
      "name": "assertMethod",
      "signature": "assertMethod: (
  event: H3Event,
  expected: HTTPMethod | HTTPMethod[],
  allowHead?: boolean,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.callNodeListener",
      "kind": "function",
      "line": 16,
      "name": "callNodeListener",
      "signature": "callNodeListener: (
  handler: NodeMiddleware,
  req: IncomingMessage,
  res: ServerResponse,
) => Promise<unknown>;",
    },
    {
      "docs": [
        "/**
 * Remove all response headers, or only those specified in the headerNames array.
 * @param event H3 event
 * @param headerNames Array of header names to remove
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.clearResponseHeaders",
      "kind": "function",
      "line": 600,
      "name": "clearResponseHeaders",
      "signature": "clearResponseHeaders: (event: H3Event, headerNames?: string[]) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.clearSession",
      "kind": "function",
      "line": 144,
      "name": "clearSession",
      "signature": "clearSession: (
  event: H3Event,
  config: Partial<SessionConfig>,
) => Promise<void>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.createApp",
      "kind": "function",
      "line": 296,
      "name": "createApp",
      "signature": "createApp: (options?: AppOptions) => App;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.createAppEventHandler",
      "kind": "function",
      "line": 298,
      "name": "createAppEventHandler",
      "signature": "createAppEventHandler: (
  stack: Stack,
  options: AppOptions,
) => EventHandler<EventHandlerRequest, Promise<void>>;",
    },
    {
      "docs": [
        "/**
 * Creates a new \`Error\` that can be used to handle both internal and runtime errors.
 *
 * @param input {string | (Partial<H3Error> & { status?: number; statusText?: string })} - The error message or an object containing error properties.
 * @return {H3Error} - An instance of H3Error.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.createError",
      "kind": "function",
      "line": 237,
      "name": "createError",
      "signature": "createError: <DataT = unknown>(
  input:
    | string
    | (Partial<H3Error<DataT>> & { status?: number; statusText?: string }),
) => H3Error<DataT>;",
    },
    {
      "docs": [
        "/**
 * Creates a new H3Event instance from the given Node.js request and response objects.
 * @param req - The NodeIncomingMessage object.
 * @param res - The NodeServerResponse object.
 * @returns A new H3Event instance.
 * @see H3Event
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.createEvent",
      "kind": "function",
      "line": 67,
      "name": "createEvent",
      "signature": "createEvent: (req: IncomingMessage, res: ServerResponse) => H3Event;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.createRouter",
      "kind": "function",
      "line": 163,
      "name": "createRouter",
      "signature": "createRouter: (opts?: CreateRouterOptions) => Router;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.defaultContentType",
      "kind": "function",
      "line": 583,
      "name": "defaultContentType",
      "signature": "defaultContentType: (event: H3Event, type?: string) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.defineEventHandler",
      "kind": "function",
      "line": 69,
      "name": "defineEventHandler",
      "signature": "defineEventHandler: {
  <Request extends EventHandlerRequest = EventHandlerRequest, Response = any>(
    handler:
      | EventHandler<Request, Response>
      | EventHandlerObject<Request, Response>,
  ): EventHandler<Request, Response>;
  <Request = EventHandlerRequest, Response = any>(
    handler: EventHandler<
      Request extends EventHandlerRequest ? Request : EventHandlerRequest,
      Request extends EventHandlerRequest ? Response : Request
    >,
  ): EventHandler<
    Request extends EventHandlerRequest ? Request : EventHandlerRequest,
    Request extends EventHandlerRequest ? Response : Request
  >;
};",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.defineLazyEventHandler",
      "kind": "function",
      "line": 85,
      "name": "defineLazyEventHandler",
      "signature": "defineLazyEventHandler: <T extends LazyEventHandler>(
  factory: T,
) => Awaited<ReturnType<T>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.defineNodeListener",
      "kind": "function",
      "line": 11,
      "name": "defineNodeListener",
      "signature": "defineNodeListener: (handler: NodeListener) => NodeListener;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.defineNodeMiddleware",
      "kind": "function",
      "line": 12,
      "name": "defineNodeMiddleware",
      "signature": "defineNodeMiddleware: (middleware: NodeMiddleware) => NodeMiddleware;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.defineRequestMiddleware",
      "kind": "function",
      "line": 72,
      "name": "defineRequestMiddleware",
      "signature": "defineRequestMiddleware: <
  Request extends EventHandlerRequest = EventHandlerRequest,
>(
  fn: _RequestMiddleware<Request>,
) => _RequestMiddleware<Request>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.defineResponseMiddleware",
      "kind": "function",
      "line": 73,
      "name": "defineResponseMiddleware",
      "signature": "defineResponseMiddleware: <
  Request extends EventHandlerRequest = EventHandlerRequest,
>(
  fn: _ResponseMiddleware<Request>,
) => _ResponseMiddleware<Request>;",
    },
    {
      "docs": [
        "/**
 * Remove a cookie by name.
 * @param event {H3Event} H3 event or res passed by h3 handler
 * @param name Name of the cookie to delete
 * @param serializeOptions {CookieSerializeOptions} Cookie options
 * \`\`\`ts
 * deleteCookie(res, 'SessionId')
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.deleteCookie",
      "kind": "function",
      "line": 518,
      "name": "deleteCookie",
      "signature": "deleteCookie: (
  event: H3Event,
  name: string,
  serializeOptions?: CookieSerializeOptions,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.dynamicEventHandler",
      "kind": "function",
      "line": 84,
      "name": "dynamicEventHandler",
      "signature": "dynamicEventHandler: (initial?: EventHandler) => DynamicEventHandler;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.fetchWithEvent",
      "kind": "function",
      "line": 565,
      "name": "fetchWithEvent",
      "signature": "fetchWithEvent: <
  T = unknown,
  _R = any,
  F extends (req: RequestInfo | URL, opts?: any) => any = (
    input: URL | RequestInfo,
    init?: RequestInit,
  ) => Promise<Response>,
>(
  event: H3Event,
  req: RequestInfo | URL,
  init?: RequestInit & { context?: H3EventContext },
  options?: { fetch: F },
) => unknown extends T ? ReturnType<F> : T;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.fromNodeMiddleware",
      "kind": "function",
      "line": 13,
      "name": "fromNodeMiddleware",
      "signature": "fromNodeMiddleware: (
  handler: NodeListener | NodeMiddleware,
) => EventHandler;",
    },
    {
      "docs": [
        "/** @experimental */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.fromPlainHandler",
      "kind": "function",
      "line": 674,
      "name": "fromPlainHandler",
      "signature": "fromPlainHandler: (
  handler: PlainHandler,
) => EventHandler<EventHandlerRequest, Promise<unknown>>;",
    },
    {
      "docs": [
        "/** @experimental */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.fromWebHandler",
      "kind": "function",
      "line": 654,
      "name": "fromWebHandler",
      "signature": "fromWebHandler: (
  handler: WebHandler,
) => EventHandler<EventHandlerRequest, Promise<Response>>;",
    },
    {
      "docs": [
        "/**
 * Get a cookie value by name.
 * @param event {H3Event} H3 event or req passed by h3 handler
 * @param name Name of the cookie to get
 * @returns {*} Value of the cookie (String or undefined)
 * \`\`\`ts
 * const authorization = getCookie(request, 'Authorization')
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getCookie",
      "kind": "function",
      "line": 497,
      "name": "getCookie",
      "signature": "getCookie: (event: H3Event, name: string) => string | undefined;",
    },
    {
      "docs": [
        "/**
 * @deprecated Directly use \`event.method\` instead.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getMethod",
      "kind": "function",
      "line": 445,
      "name": "getMethod",
      "signature": "getMethod: (event: H3Event, defaultMethod?: HTTPMethod) => HTTPMethod;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getProxyRequestHeaders",
      "kind": "function",
      "line": 564,
      "name": "getProxyRequestHeaders",
      "signature": "getProxyRequestHeaders: (event: H3Event) => any;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getQuery",
      "kind": "function",
      "line": 431,
      "name": "getQuery",
      "signature": "getQuery: <
  T,
  Event extends H3Event<EventHandlerRequest> = H3Event<EventHandlerRequest>,
  _T = Exclude<InferEventInput<"query", Event, T>, undefined>,
>(
  event: Event,
) => _T;",
    },
    {
      "docs": [
        "/** @experimental Behavior of this utility might change in the future versions */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestFingerprint",
      "kind": "function",
      "line": 545,
      "name": "getRequestFingerprint",
      "signature": "getRequestFingerprint: (
  event: H3Event,
  opts?: RequestFingerprintOptions,
) => Promise<string | null>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestHeader",
      "kind": "function",
      "line": 450,
      "name": "getRequestHeader",
      "signature": "getRequestHeader: (
  event: H3Event,
  name: HTTPHeaderName,
) => RequestHeaders[string];",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestHeaders",
      "kind": "function",
      "line": 448,
      "name": "getRequestHeaders",
      "signature": "getRequestHeaders: (event: H3Event) => RequestHeaders;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestHost",
      "kind": "function",
      "line": 452,
      "name": "getRequestHost",
      "signature": "getRequestHost: (
  event: H3Event,
  opts?: { xForwardedHost?: boolean },
) => string;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestIP",
      "kind": "function",
      "line": 465,
      "name": "getRequestIP",
      "signature": "getRequestIP: (
  event: H3Event,
  opts?: { xForwardedFor?: boolean },
) => string | undefined;",
    },
    {
      "docs": [
        "/** @deprecated Use \`event.path\` instead */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestPath",
      "kind": "function",
      "line": 459,
      "name": "getRequestPath",
      "signature": "getRequestPath: (event: H3Event) => string;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestProtocol",
      "kind": "function",
      "line": 455,
      "name": "getRequestProtocol",
      "signature": "getRequestProtocol: (
  event: H3Event,
  opts?: { xForwardedProto?: boolean },
) => "https" | "http";",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestURL",
      "kind": "function",
      "line": 460,
      "name": "getRequestURL",
      "signature": "getRequestURL: (
  event: H3Event,
  opts?: { xForwardedHost?: boolean; xForwardedProto?: boolean },
) => URL;",
    },
    {
      "docs": [
        "/**
 * Captures a stream from a request.
 * @param event The H3Event object containing the request information.
 * @returns Undefined if the request can't transport a payload, otherwise a ReadableStream of the request body.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRequestWebStream",
      "kind": "function",
      "line": 397,
      "name": "getRequestWebStream",
      "signature": "getRequestWebStream: (event: H3Event) => undefined | ReadableStream;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getResponseHeader",
      "kind": "function",
      "line": 586,
      "name": "getResponseHeader",
      "signature": "getResponseHeader: (
  event: H3Event,
  name: HTTPHeaderName,
) => ReturnType<H3Event["node"]["res"]["getHeader"]>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getResponseHeaders",
      "kind": "function",
      "line": 585,
      "name": "getResponseHeaders",
      "signature": "getResponseHeaders: (
  event: H3Event,
) => ReturnType<H3Event["node"]["res"]["getHeaders"]>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getResponseStatus",
      "kind": "function",
      "line": 581,
      "name": "getResponseStatus",
      "signature": "getResponseStatus: (event: H3Event) => number;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getResponseStatusText",
      "kind": "function",
      "line": 582,
      "name": "getResponseStatusText",
      "signature": "getResponseStatusText: (event: H3Event) => string;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRouterParam",
      "kind": "function",
      "line": 439,
      "name": "getRouterParam",
      "signature": "getRouterParam: (
  event: H3Event,
  name: string,
  opts?: { decode?: boolean },
) => string | undefined;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getRouterParams",
      "kind": "function",
      "line": 433,
      "name": "getRouterParams",
      "signature": "getRouterParams: (
  event: H3Event,
  opts?: { decode?: boolean },
) => NonNullable<H3Event["context"]["params"]>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getSession",
      "kind": "function",
      "line": 139,
      "name": "getSession",
      "signature": "getSession: <T extends SessionDataT = SessionDataT>(
  event: H3Event,
  config: SessionConfig,
) => Promise<Session<T>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getValidatedQuery",
      "kind": "function",
      "line": 432,
      "name": "getValidatedQuery",
      "signature": "getValidatedQuery: <
  T,
  Event extends H3Event<EventHandlerRequest> = H3Event<EventHandlerRequest>,
  _T = InferEventInput<"query", Event, T>,
>(
  event: Event,
  validate: ValidateFunction<_T>,
) => Promise<_T>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.getValidatedRouterParams",
      "kind": "function",
      "line": 436,
      "name": "getValidatedRouterParams",
      "signature": "getValidatedRouterParams: <
  T,
  Event extends H3Event<EventHandlerRequest> = H3Event<EventHandlerRequest>,
  _T = InferEventInput<"routerParams", Event, T>,
>(
  event: Event,
  validate: ValidateFunction<_T>,
  opts?: { decode?: boolean },
) => Promise<_T>;",
    },
    {
      "docs": [
        "/**
 * Check request caching headers (\`If-Modified-Since\`) and add caching headers (Last-Modified, Cache-Control)
 * Note: \`public\` cache control will be added by default
 * @returns \`true\` when cache headers are matching. When \`true\` is returned, no reponse should be sent anymore
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.handleCacheHeaders",
      "kind": "function",
      "line": 410,
      "name": "handleCacheHeaders",
      "signature": "handleCacheHeaders: (event: H3Event, opts: CacheConditions) => boolean;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.handleCors",
      "kind": "function",
      "line": 429,
      "name": "handleCors",
      "signature": "handleCors: (event: H3Event, options: H3CorsOptions) => boolean;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isCorsOriginAllowed",
      "kind": "function",
      "line": 475,
      "name": "isCorsOriginAllowed",
      "signature": "isCorsOriginAllowed: (
  origin: ReturnType<typeof getRequestHeaders>["origin"],
  options: H3CorsOptions,
) => boolean;",
    },
    {
      "docs": [
        "/**
 * Checks if the given input is an instance of H3Error.
 *
 * @param input {*} - The input to check.
 * @return {boolean} - Returns true if the input is an instance of H3Error, false otherwise.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isError",
      "kind": "function",
      "line": 258,
      "name": "isError",
      "signature": "isError: <DataT = unknown>(input: any) => input is H3Error<DataT>;",
    },
    {
      "docs": [
        "/**
 * Checks if the input is an H3Event object.
 * @param input - The input to check.
 * @returns True if the input is an H3Event object, false otherwise.
 * @see H3Event
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isEvent",
      "kind": "function",
      "line": 59,
      "name": "isEvent",
      "signature": "isEvent: (input: any) => input is H3Event<EventHandlerRequest>;",
    },
    {
      "docs": [
        "/**
 * Checks if any kind of input is an event handler.
 * @param input The input to check.
 * @returns True if the input is an event handler, false otherwise.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isEventHandler",
      "kind": "function",
      "line": 79,
      "name": "isEventHandler",
      "signature": "isEventHandler: (
  input: any,
) => input is EventHandler<EventHandlerRequest, any>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isMethod",
      "kind": "function",
      "line": 446,
      "name": "isMethod",
      "signature": "isMethod: (
  event: H3Event,
  expected: HTTPMethod | HTTPMethod[],
  allowHead?: boolean,
) => boolean;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isPreflightRequest",
      "kind": "function",
      "line": 474,
      "name": "isPreflightRequest",
      "signature": "isPreflightRequest: (event: H3Event) => boolean;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isStream",
      "kind": "function",
      "line": 602,
      "name": "isStream",
      "signature": "isStream: (data: any) => data is any;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.isWebResponse",
      "kind": "function",
      "line": 603,
      "name": "isWebResponse",
      "signature": "isWebResponse: (data: any) => data is Response;",
    },
    {
      "docs": [
        "/**
 * Parse the request to get HTTP Cookie header string and returning an object of all cookie name-value pairs.
 * @param event {H3Event} H3 event or req passed by h3 handler
 * @returns Object of cookie name-value pairs
 * \`\`\`ts
 * const cookies = parseCookies(event)
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.parseCookies",
      "kind": "function",
      "line": 487,
      "name": "parseCookies",
      "signature": "parseCookies: (event: H3Event) => Record<string, string>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.promisifyNodeListener",
      "kind": "function",
      "line": 15,
      "name": "promisifyNodeListener",
      "signature": "promisifyNodeListener: (
  handler: NodeListener | NodeMiddleware,
) => NodePromisifiedHandler;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.proxyRequest",
      "kind": "function",
      "line": 562,
      "name": "proxyRequest",
      "signature": "proxyRequest: (
  event: H3Event,
  target: string,
  opts?: ProxyOptions,
) => Promise<any>;",
    },
    {
      "docs": [
        "/**
 * Reads request body and tries to safely parse using [destr](https://github.com/unjs/destr).
 * @param event H3 event passed by h3 handler
 * @param encoding The character encoding to use, defaults to 'utf-8'.
 *
 * @return {*} The \`Object\`, \`Array\`, \`String\`, \`Number\`, \`Boolean\`, or \`null\` value corresponding to the request JSON body
 *
 * \`\`\`ts
 * const body = await readBody(event)
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.readBody",
      "kind": "function",
      "line": 333,
      "name": "readBody",
      "signature": "readBody: <
  T,
  Event extends H3Event<EventHandlerRequest> = H3Event<EventHandlerRequest>,
  _T = InferEventInput<"body", Event, T>,
>(
  event: Event,
  options?: { strict?: boolean },
) => Promise<_T>;",
    },
    {
      "docs": [
        "/**
 * Constructs a FormData object from an event, after converting it to a a web request.
 * @param event The H3Event object to read the form data from.
 *
 * \`\`\`ts
 * const eventHandler = event => {
 *   const formData = await readFormData(event)
 *   const email = formData.get("email")
 *   const password = formData.get("password")
 *  }
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.readFormData",
      "kind": "function",
      "line": 391,
      "name": "readFormData",
      "signature": "readFormData: (event: H3Event) => Promise<FormData>;",
    },
    {
      "docs": [
        "/**
 * Tries to read and parse the body of a an H3Event as multipart form.
 * @param event The H3Event object to read multipart form from.
 *
 * @return The parsed form data. If no form could be detected because the content type is not multipart/form-data or no boundary could be found.
 *
 * \`\`\`ts
 * const formData = await readMultipartFormData(event)
 * // The result could look like:
 * // [
 * //   {
 * //     "data": "other",
 * //     "name": "baz",
 * //   },
 * //   {
 * //     "data": "something",
 * //     "name": "some-other-data",
 * //   },
 * // ]
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.readMultipartFormData",
      "kind": "function",
      "line": 378,
      "name": "readMultipartFormData",
      "signature": "readMultipartFormData: (
  event: H3Event,
) => Promise<MultiPartData[] | undefined>;",
    },
    {
      "docs": [
        "/**
 * Reads body of the request and returns encoded raw string (default), or \`Buffer\` if encoding is falsy.
 * @param event {H3Event} H3 event or req passed by h3 handler
 * @param encoding {Encoding} encoding="utf-8" - The character encoding to use.
 *
 * @return {String|Buffer} Encoded raw string or raw Buffer of the body
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.readRawBody",
      "kind": "function",
      "line": 321,
      "name": "readRawBody",
      "signature": "readRawBody: <E extends Encoding = "utf8">(
  event: H3Event,
  encoding?: E,
) => E extends false
  ? Promise<Buffer | undefined>
  : Promise<string | undefined>;",
    },
    {
      "docs": [
        "/**
 * Tries to read the request body via \`readBody\`, then uses the provided validation function and either throws a validation error or returns the result.
 * @param event The H3Event passed by the handler.
 * @param validate The function to use for body validation. It will be called passing the read request body. If the result is not false, the parsed body will be returned.
 * @throws If the validation function returns \`false\` or throws, a validation error will be thrown.
 * @return {*} The \`Object\`, \`Array\`, \`String\`, \`Number\`, \`Boolean\`, or \`null\` value corresponding to the request JSON body.
 * @see {readBody}
 *
 * \`\`\`ts
 * // With a custom validation function
 * const body = await readValidatedBody(event, (body) => {
 *   return typeof body === "object" && body !== null
 * })
 *
 * // With a zod schema
 * import { z } from 'zod'
 * const objectSchema = z.object()
 * const body = await readValidatedBody(event, objectSchema.safeParse)
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.readValidatedBody",
      "kind": "function",
      "line": 356,
      "name": "readValidatedBody",
      "signature": "readValidatedBody: <
  T,
  Event extends H3Event<EventHandlerRequest> = H3Event<EventHandlerRequest>,
  _T = InferEventInput<"body", Event, T>,
>(
  event: Event,
  validate: ValidateFunction<_T>,
) => Promise<_T>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.removeResponseHeader",
      "kind": "function",
      "line": 601,
      "name": "removeResponseHeader",
      "signature": "removeResponseHeader: (event: H3Event, name: HTTPHeaderName) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sanitizeStatusCode",
      "kind": "function",
      "line": 609,
      "name": "sanitizeStatusCode",
      "signature": "sanitizeStatusCode: (
  statusCode?: string | number,
  defaultStatusCode?: number,
) => number;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sanitizeStatusMessage",
      "kind": "function",
      "line": 608,
      "name": "sanitizeStatusMessage",
      "signature": "sanitizeStatusMessage: (statusMessage?: string) => string;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sealSession",
      "kind": "function",
      "line": 142,
      "name": "sealSession",
      "signature": "sealSession: <T extends SessionDataT = SessionDataT>(
  event: H3Event,
  config: SessionConfig,
) => Promise<string>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.send",
      "kind": "function",
      "line": 571,
      "name": "send",
      "signature": "send: (event: H3Event, data?: any, type?: string) => Promise<void>;",
    },
    {
      "docs": [
        "/**
 * Receives an error and returns the corresponding response.
 * H3 internally uses this function to handle unhandled errors.
 * Note that calling this function will close the connection and no other data will be sent to the client afterwards.
 *
 * @param event {H3Event} - H3 event or req passed by h3 handler.
 * @param error {Error | H3Error} - The raised error.
 * @param debug {boolean} - Whether the application is in debug mode.
 * In the debug mode, the stack trace of errors will be returned in the response.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sendError",
      "kind": "function",
      "line": 251,
      "name": "sendError",
      "signature": "sendError: (
  event: H3Event,
  error: Error | H3Error,
  debug?: boolean,
) => void;",
    },
    {
      "docs": [
        "/**
 * Respond with an empty payload.<br>
 * Note that calling this function will close the connection and no other data can be sent to the client afterwards.
 *
 * @param event H3 event
 * @param code status code to be send. By default, it is \`204 No Content\`.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sendNoContent",
      "kind": "function",
      "line": 579,
      "name": "sendNoContent",
      "signature": "sendNoContent: (event: H3Event, code?: number) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sendProxy",
      "kind": "function",
      "line": 563,
      "name": "sendProxy",
      "signature": "sendProxy: (
  event: H3Event,
  target: string,
  opts?: ProxyOptions,
) => Promise<any>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sendRedirect",
      "kind": "function",
      "line": 584,
      "name": "sendRedirect",
      "signature": "sendRedirect: (
  event: H3Event,
  location: string,
  code?: number,
) => Promise<void>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sendStream",
      "kind": "function",
      "line": 604,
      "name": "sendStream",
      "signature": "sendStream: (
  event: H3Event,
  stream: Readable | ReadableStream,
) => Promise<void>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.sendWebResponse",
      "kind": "function",
      "line": 606,
      "name": "sendWebResponse",
      "signature": "sendWebResponse: (
  event: H3Event,
  response: Response,
) => void | Promise<void>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.serveStatic",
      "kind": "function",
      "line": 647,
      "name": "serveStatic",
      "signature": "serveStatic: (
  event: H3Event,
  options: ServeStaticOptions,
) => Promise<void | false>;",
    },
    {
      "docs": [
        "/**
 * Set a cookie value by name.
 * @param event {H3Event} H3 event or res passed by h3 handler
 * @param name Name of the cookie to set
 * @param value Value of the cookie to set
 * @param serializeOptions {CookieSerializeOptions} Options for serializing the cookie
 * \`\`\`ts
 * setCookie(res, 'Authorization', '1234567')
 * \`\`\`
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.setCookie",
      "kind": "function",
      "line": 508,
      "name": "setCookie",
      "signature": "setCookie: (
  event: H3Event,
  name: string,
  value: string,
  serializeOptions?: CookieSerializeOptions,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.setResponseHeader",
      "kind": "function",
      "line": 589,
      "name": "setResponseHeader",
      "signature": "setResponseHeader: (
  event: H3Event,
  name: HTTPHeaderName,
  value: Parameters<OutgoingMessage["setHeader"]>[1],
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.setResponseHeaders",
      "kind": "function",
      "line": 587,
      "name": "setResponseHeaders",
      "signature": "setResponseHeaders: (
  event: H3Event,
  headers: Partial<
    Record<HTTPHeaderName, Parameters<OutgoingMessage["setHeader"]>[1]>
  >,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.setResponseStatus",
      "kind": "function",
      "line": 580,
      "name": "setResponseStatus",
      "signature": "setResponseStatus: (event: H3Event, code?: number, text?: string) => void;",
    },
    {
      "docs": [
        "/**
 * Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas
 * that are within a single set-cookie field-value, such as in the Expires portion.
 * This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2
 * Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128
 * Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25
 * Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation
 * @source https://github.com/nfriedly/set-cookie-parser/blob/3eab8b7d5d12c8ed87832532861c1a35520cf5b3/lib/set-cookie.js#L144
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.splitCookiesString",
      "kind": "function",
      "line": 528,
      "name": "splitCookiesString",
      "signature": "splitCookiesString: (cookiesString: string | string[]) => string[];",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.toEventHandler",
      "kind": "function",
      "line": 80,
      "name": "toEventHandler",
      "signature": "toEventHandler: (input: any, _?: any, _route?: string) => EventHandler;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.toNodeListener",
      "kind": "function",
      "line": 14,
      "name": "toNodeListener",
      "signature": "toNodeListener: (app: App) => NodeListener;",
    },
    {
      "docs": [
        "/** @experimental */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.toPlainHandler",
      "kind": "function",
      "line": 672,
      "name": "toPlainHandler",
      "signature": "toPlainHandler: (app: App) => PlainHandler;",
    },
    {
      "docs": [
        "/** @experimental */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.toWebHandler",
      "kind": "function",
      "line": 652,
      "name": "toWebHandler",
      "signature": "toWebHandler: (app: App) => WebHandler;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.toWebRequest",
      "kind": "function",
      "line": 464,
      "name": "toWebRequest",
      "signature": "toWebRequest: (event: H3Event) => Request;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.unsealSession",
      "kind": "function",
      "line": 143,
      "name": "unsealSession",
      "signature": "unsealSession: (
  _event: H3Event,
  config: SessionConfig,
  sealed: string,
) => Promise<Partial<Session<SessionDataT>>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.updateSession",
      "kind": "function",
      "line": 141,
      "name": "updateSession",
      "signature": "updateSession: <T extends SessionDataT = SessionDataT>(
  event: H3Event,
  config: SessionConfig,
  update?: SessionUpdate<T>,
) => Promise<Session<T>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.use",
      "kind": "function",
      "line": 297,
      "name": "use",
      "signature": "use: (
  app: App,
  arg1: string | EventHandler | InputLayer | InputLayer[],
  arg2?: Partial<InputLayer> | EventHandler | EventHandler[],
  arg3?: Partial<InputLayer>,
) => App;",
    },
    {
      "docs": [
        "/**
 * Prefixes and executes a handler with a base path.
 * @param base The base path to prefix. When set to an empty string, the handler will be run as is.
 * @param handler The event handler to use with the adapted path.
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "function.useBase",
      "kind": "function",
      "line": 305,
      "name": "useBase",
      "signature": "useBase: (base: string, handler: EventHandler) => EventHandler;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.useSession",
      "kind": "function",
      "line": 133,
      "name": "useSession",
      "signature": "useSession: <T extends SessionDataT = SessionDataT>(
  event: H3Event,
  config: SessionConfig,
) => Promise<{
  readonly id: string | undefined;
  readonly data: T;
  update: (update: SessionUpdate<T>) => Promise<any>;
  clear: () => Promise<any>;
}>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "function.writeEarlyHints",
      "kind": "function",
      "line": 605,
      "name": "writeEarlyHints",
      "signature": "writeEarlyHints: (
  event: H3Event,
  hints: string | string[] | Record<string, string | string[]>,
  cb?: () => void,
) => void;",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.App",
      "indexSignatures": [],
      "kind": "interface",
      "line": 290,
      "methods": [],
      "name": "App",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.App.property.handler",
          "kind": "interface-property",
          "line": 292,
          "name": "handler",
          "signature": "handler: EventHandler;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.App.property.options",
          "kind": "interface-property",
          "line": 293,
          "name": "options",
          "signature": "options: AppOptions;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.App.property.stack",
          "kind": "interface-property",
          "line": 291,
          "name": "stack",
          "signature": "stack: Stack;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.App.property.use",
          "kind": "interface-property",
          "line": 294,
          "name": "use",
          "signature": "use: AppUse;",
        },
      ],
      "setAccessors": [],
      "signature": "interface App {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.AppOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 279,
      "methods": [],
      "name": "AppOptions",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppOptions.property.debug",
          "kind": "interface-property",
          "line": 280,
          "name": "debug",
          "signature": "debug?: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppOptions.property.onAfterResponse",
          "kind": "interface-property",
          "line": 286,
          "name": "onAfterResponse",
          "signature": "onAfterResponse?: (
  event: H3Event,
  response?: {
    body?: unknown;
  },
) => void | Promise<void>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppOptions.property.onBeforeResponse",
          "kind": "interface-property",
          "line": 283,
          "name": "onBeforeResponse",
          "signature": "onBeforeResponse?: (
  event: H3Event,
  response: {
    body?: unknown;
  },
) => void | Promise<void>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppOptions.property.onError",
          "kind": "interface-property",
          "line": 281,
          "name": "onError",
          "signature": "onError?: (error: H3Error, event: H3Event) => any;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppOptions.property.onRequest",
          "kind": "interface-property",
          "line": 282,
          "name": "onRequest",
          "signature": "onRequest?: (event: H3Event) => void | Promise<void>;",
        },
      ],
      "setAccessors": [],
      "signature": "interface AppOptions {}",
    },
    {
      "callSignatures": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppUse.call-signature",
          "kind": "interface-call-signature",
          "line": 275,
          "name": "call-signature",
          "signature": "(
  route: string | string[],
  handler: EventHandler | EventHandler[],
  options?: Partial<InputLayer>,
): App;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppUse.call-signature.1",
          "kind": "interface-call-signature",
          "line": 276,
          "name": "call-signature",
          "signature": "(handler: EventHandler | EventHandler[], options?: Partial<InputLayer>): App;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.AppUse.call-signature.2",
          "kind": "interface-call-signature",
          "line": 277,
          "name": "call-signature",
          "signature": "(options: InputLayer): App;",
        },
      ],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.AppUse",
      "indexSignatures": [],
      "kind": "interface",
      "line": 274,
      "methods": [],
      "name": "AppUse",
      "properties": [],
      "setAccessors": [],
      "signature": "interface AppUse {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.CacheConditions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 399,
      "methods": [],
      "name": "CacheConditions",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.CacheConditions.property.cacheControls",
          "kind": "interface-property",
          "line": 403,
          "name": "cacheControls",
          "signature": "cacheControls?: string[];",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.CacheConditions.property.etag",
          "kind": "interface-property",
          "line": 402,
          "name": "etag",
          "signature": "etag?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.CacheConditions.property.maxAge",
          "kind": "interface-property",
          "line": 401,
          "name": "maxAge",
          "signature": "maxAge?: number;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.CacheConditions.property.modifiedTime",
          "kind": "interface-property",
          "line": 400,
          "name": "modifiedTime",
          "signature": "modifiedTime?: string | Date;",
        },
      ],
      "setAccessors": [],
      "signature": "interface CacheConditions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.CreateRouterOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 158,
      "methods": [],
      "name": "CreateRouterOptions",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.CreateRouterOptions.property.preemptive",
          "kind": "interface-property",
          "line": 161,
          "name": "preemptive",
          "signature": "preemptive?: boolean;",
        },
        {
          "docs": [
            "/** @deprecated Please use \`preemptive\` instead. **/",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.CreateRouterOptions.property.preemtive",
          "kind": "interface-property",
          "line": 160,
          "name": "preemtive",
          "signature": "preemtive?: boolean;",
        },
      ],
      "setAccessors": [],
      "signature": "interface CreateRouterOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.DynamicEventHandler",
      "indexSignatures": [],
      "kind": "interface",
      "line": 81,
      "methods": [],
      "name": "DynamicEventHandler",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.DynamicEventHandler.property.set",
          "kind": "interface-property",
          "line": 82,
          "name": "set",
          "signature": "set: (handler: EventHandler) => void;",
        },
      ],
      "setAccessors": [],
      "signature": "interface DynamicEventHandler extends EventHandler {}",
    },
    {
      "callSignatures": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.EventHandler.call-signature",
          "kind": "interface-call-signature",
          "line": 190,
          "name": "call-signature",
          "signature": "(event: H3Event<Request>): Response;",
        },
      ],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.EventHandler",
      "indexSignatures": [],
      "kind": "interface",
      "line": 188,
      "methods": [],
      "name": "EventHandler",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.EventHandler.property.__is_handler__",
          "kind": "interface-property",
          "line": 189,
          "name": "__is_handler__",
          "signature": "__is_handler__?: true;",
        },
      ],
      "setAccessors": [],
      "signature": "interface EventHandler<
  Request extends EventHandlerRequest = EventHandlerRequest,
  Response extends EventHandlerResponse = EventHandlerResponse,
> {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.EventHandlerRequest",
      "indexSignatures": [],
      "kind": "interface",
      "line": 182,
      "methods": [],
      "name": "EventHandlerRequest",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.EventHandlerRequest.property.body",
          "kind": "interface-property",
          "line": 183,
          "name": "body",
          "signature": "body?: any;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.EventHandlerRequest.property.query",
          "kind": "interface-property",
          "line": 184,
          "name": "query",
          "signature": "query?: QueryObject;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.EventHandlerRequest.property.routerParams",
          "kind": "interface-property",
          "line": 185,
          "name": "routerParams",
          "signature": "routerParams?: Record<string, string>;",
        },
      ],
      "setAccessors": [],
      "signature": "interface EventHandlerRequest {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.H3CorsOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 417,
      "methods": [],
      "name": "H3CorsOptions",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3CorsOptions.property.allowHeaders",
          "kind": "interface-property",
          "line": 420,
          "name": "allowHeaders",
          "signature": "allowHeaders?: "*" | string[];",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3CorsOptions.property.credentials",
          "kind": "interface-property",
          "line": 422,
          "name": "credentials",
          "signature": "credentials?: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3CorsOptions.property.exposeHeaders",
          "kind": "interface-property",
          "line": 421,
          "name": "exposeHeaders",
          "signature": "exposeHeaders?: "*" | string[];",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3CorsOptions.property.maxAge",
          "kind": "interface-property",
          "line": 423,
          "name": "maxAge",
          "signature": "maxAge?: string | false;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3CorsOptions.property.methods",
          "kind": "interface-property",
          "line": 419,
          "name": "methods",
          "signature": "methods?: "*" | HTTPMethod[];",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3CorsOptions.property.origin",
          "kind": "interface-property",
          "line": 418,
          "name": "origin",
          "signature": "origin?: "*" | "null" | (string | RegExp)[] | ((origin: string) => boolean);",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3CorsOptions.property.preflight",
          "kind": "interface-property",
          "line": 424,
          "name": "preflight",
          "signature": "preflight?: {
  statusCode?: number;
};",
        },
      ],
      "setAccessors": [],
      "signature": "interface H3CorsOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.H3EventContext",
      "indexSignatures": [],
      "kind": "interface",
      "line": 170,
      "methods": [],
      "name": "H3EventContext",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3EventContext.property.clientAddress",
          "kind": "interface-property",
          "line": 179,
          "name": "clientAddress",
          "signature": "clientAddress?: string;",
        },
        {
          "docs": [
            "/**
     * Matched router Node
     *
     * @experimental The object structure may change in non-major version.
     */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3EventContext.property.matchedRoute",
          "kind": "interface-property",
          "line": 177,
          "name": "matchedRoute",
          "signature": "matchedRoute?: RouteNode;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3EventContext.property.params",
          "kind": "interface-property",
          "line": 171,
          "name": "params",
          "signature": "params?: Record<string, string>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.H3EventContext.property.sessions",
          "kind": "interface-property",
          "line": 178,
          "name": "sessions",
          "signature": "sessions?: Record<string, Session>;",
        },
      ],
      "setAccessors": [],
      "signature": "interface H3EventContext extends Record<string, any> {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.InputLayer",
      "indexSignatures": [],
      "kind": "interface",
      "line": 266,
      "methods": [],
      "name": "InputLayer",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.InputLayer.property.handler",
          "kind": "interface-property",
          "line": 269,
          "name": "handler",
          "signature": "handler: EventHandler;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.InputLayer.property.lazy",
          "kind": "interface-property",
          "line": 270,
          "name": "lazy",
          "signature": "lazy?: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.InputLayer.property.match",
          "kind": "interface-property",
          "line": 268,
          "name": "match",
          "signature": "match?: Matcher;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.InputLayer.property.route",
          "kind": "interface-property",
          "line": 267,
          "name": "route",
          "signature": "route?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface InputLayer {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.Layer",
      "indexSignatures": [],
      "kind": "interface",
      "line": 260,
      "methods": [],
      "name": "Layer",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Layer.property.handler",
          "kind": "interface-property",
          "line": 263,
          "name": "handler",
          "signature": "handler: EventHandler;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Layer.property.match",
          "kind": "interface-property",
          "line": 262,
          "name": "match",
          "signature": "match?: Matcher;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Layer.property.route",
          "kind": "interface-property",
          "line": 261,
          "name": "route",
          "signature": "route: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Layer {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.MultiPartData",
      "indexSignatures": [],
      "kind": "interface",
      "line": 307,
      "methods": [],
      "name": "MultiPartData",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.MultiPartData.property.data",
          "kind": "interface-property",
          "line": 308,
          "name": "data",
          "signature": "data: Buffer;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.MultiPartData.property.filename",
          "kind": "interface-property",
          "line": 310,
          "name": "filename",
          "signature": "filename?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.MultiPartData.property.name",
          "kind": "interface-property",
          "line": 309,
          "name": "name",
          "signature": "name?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.MultiPartData.property.type",
          "kind": "interface-property",
          "line": 311,
          "name": "type",
          "signature": "type?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface MultiPartData {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.NodeEventContext",
      "indexSignatures": [],
      "kind": "interface",
      "line": 18,
      "methods": [],
      "name": "NodeEventContext",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.NodeEventContext.property.req",
          "kind": "interface-property",
          "line": 19,
          "name": "req",
          "signature": "req: IncomingMessage & {
  originalUrl?: string;
};",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.NodeEventContext.property.res",
          "kind": "interface-property",
          "line": 22,
          "name": "res",
          "signature": "res: ServerResponse;",
        },
      ],
      "setAccessors": [],
      "signature": "interface NodeEventContext {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.PlainRequest",
      "indexSignatures": [],
      "kind": "interface",
      "line": 656,
      "methods": [],
      "name": "PlainRequest",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainRequest.property._eventOverrides",
          "kind": "interface-property",
          "line": 657,
          "name": "_eventOverrides",
          "signature": "_eventOverrides?: Partial<H3Event>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainRequest.property.body",
          "kind": "interface-property",
          "line": 662,
          "name": "body",
          "signature": "body?: null | BodyInit;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainRequest.property.context",
          "kind": "interface-property",
          "line": 658,
          "name": "context",
          "signature": "context?: Record<string, unknown>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainRequest.property.headers",
          "kind": "interface-property",
          "line": 661,
          "name": "headers",
          "signature": "headers: HeadersInit;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainRequest.property.method",
          "kind": "interface-property",
          "line": 659,
          "name": "method",
          "signature": "method: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainRequest.property.path",
          "kind": "interface-property",
          "line": 660,
          "name": "path",
          "signature": "path: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface PlainRequest {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.PlainResponse",
      "indexSignatures": [],
      "kind": "interface",
      "line": 664,
      "methods": [],
      "name": "PlainResponse",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainResponse.property.body",
          "kind": "interface-property",
          "line": 668,
          "name": "body",
          "signature": "body?: unknown;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainResponse.property.headers",
          "kind": "interface-property",
          "line": 667,
          "name": "headers",
          "signature": "headers: [string, string][];",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainResponse.property.status",
          "kind": "interface-property",
          "line": 665,
          "name": "status",
          "signature": "status: number;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.PlainResponse.property.statusText",
          "kind": "interface-property",
          "line": 666,
          "name": "statusText",
          "signature": "statusText: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface PlainResponse {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.ProxyOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 548,
      "methods": [],
      "name": "ProxyOptions",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.cookieDomainRewrite",
          "kind": "interface-property",
          "line": 558,
          "name": "cookieDomainRewrite",
          "signature": "cookieDomainRewrite?: string | Record<string, string>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.cookiePathRewrite",
          "kind": "interface-property",
          "line": 559,
          "name": "cookiePathRewrite",
          "signature": "cookiePathRewrite?: string | Record<string, string>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.fetch",
          "kind": "interface-property",
          "line": 555,
          "name": "fetch",
          "signature": "fetch?: typeof fetch;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.fetchOptions",
          "kind": "interface-property",
          "line": 550,
          "name": "fetchOptions",
          "signature": "fetchOptions?: RequestInit & {
  duplex?: Duplex;
} & {
  ignoreResponseError?: boolean;
};",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.headers",
          "kind": "interface-property",
          "line": 549,
          "name": "headers",
          "signature": "headers?: RequestHeaders | HeadersInit;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.onResponse",
          "kind": "interface-property",
          "line": 560,
          "name": "onResponse",
          "signature": "onResponse?: (event: H3Event, response: Response) => void;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.sendStream",
          "kind": "interface-property",
          "line": 556,
          "name": "sendStream",
          "signature": "sendStream?: boolean;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ProxyOptions.property.streamRequest",
          "kind": "interface-property",
          "line": 557,
          "name": "streamRequest",
          "signature": "streamRequest?: boolean;",
        },
      ],
      "setAccessors": [],
      "signature": "interface ProxyOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.RequestFingerprintOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 530,
      "methods": [],
      "name": "RequestFingerprintOptions",
      "properties": [
        {
          "docs": [
            "/** @default SHA-1 */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RequestFingerprintOptions.property.hash",
          "kind": "interface-property",
          "line": 532,
          "name": "hash",
          "signature": "hash?: false | "SHA-1";",
        },
        {
          "docs": [
            "/** @default \`true\` */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RequestFingerprintOptions.property.ip",
          "kind": "interface-property",
          "line": 534,
          "name": "ip",
          "signature": "ip?: boolean;",
        },
        {
          "docs": [
            "/** @default \`false\` */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RequestFingerprintOptions.property.method",
          "kind": "interface-property",
          "line": 538,
          "name": "method",
          "signature": "method?: boolean;",
        },
        {
          "docs": [
            "/** @default \`false\` */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RequestFingerprintOptions.property.path",
          "kind": "interface-property",
          "line": 540,
          "name": "path",
          "signature": "path?: boolean;",
        },
        {
          "docs": [
            "/** @default \`false\` */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RequestFingerprintOptions.property.userAgent",
          "kind": "interface-property",
          "line": 542,
          "name": "userAgent",
          "signature": "userAgent?: boolean;",
        },
        {
          "docs": [
            "/** @default \`false\` */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RequestFingerprintOptions.property.xForwardedFor",
          "kind": "interface-property",
          "line": 536,
          "name": "xForwardedFor",
          "signature": "xForwardedFor?: boolean;",
        },
      ],
      "setAccessors": [],
      "signature": "interface RequestFingerprintOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.RouteNode",
      "indexSignatures": [],
      "kind": "interface",
      "line": 154,
      "methods": [],
      "name": "RouteNode",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RouteNode.property.handlers",
          "kind": "interface-property",
          "line": 155,
          "name": "handlers",
          "signature": "handlers: Partial<Record<RouterMethod | "all", EventHandler>>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.RouteNode.property.path",
          "kind": "interface-property",
          "line": 156,
          "name": "path",
          "signature": "path: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface RouteNode {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.Router",
      "indexSignatures": [],
      "kind": "interface",
      "line": 149,
      "methods": [],
      "name": "Router",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Router.property.add",
          "kind": "interface-property",
          "line": 150,
          "name": "add",
          "signature": "add: RouterUse;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Router.property.handler",
          "kind": "interface-property",
          "line": 152,
          "name": "handler",
          "signature": "handler: EventHandler;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Router.property.use",
          "kind": "interface-property",
          "line": 151,
          "name": "use",
          "signature": "use: RouterUse;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Router extends AddRouteShortcuts {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.ServeStaticOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 619,
      "methods": [],
      "name": "ServeStaticOptions",
      "properties": [
        {
          "docs": [
            "/**
     * Map of supported encodings (compressions) and their file extensions.
     *
     * Each extension will be appended to the asset path to find the compressed version of the asset.
     *
     * @example { gzip: ".gz", br: ".br" }
     */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ServeStaticOptions.property.encodings",
          "kind": "interface-property",
          "line": 635,
          "name": "encodings",
          "signature": "encodings?: Record<string, string>;",
        },
        {
          "docs": [
            "/**
     * When set to true, the function will not throw 404 error when the asset meta is not found or meta validation failed
     */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ServeStaticOptions.property.fallthrough",
          "kind": "interface-property",
          "line": 645,
          "name": "fallthrough",
          "signature": "fallthrough?: boolean;",
        },
        {
          "docs": [
            "/**
     * This function should resolve asset content
     */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ServeStaticOptions.property.getContents",
          "kind": "interface-property",
          "line": 627,
          "name": "getContents",
          "signature": "getContents: (id: string) => unknown | Promise<unknown>;",
        },
        {
          "docs": [
            "/**
     * This function should resolve asset meta
     */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ServeStaticOptions.property.getMeta",
          "kind": "interface-property",
          "line": 623,
          "name": "getMeta",
          "signature": "getMeta: (
  id: string,
) => StaticAssetMeta | undefined | Promise<StaticAssetMeta | undefined>;",
        },
        {
          "docs": [
            "/**
     * Default index file to serve when the path is a directory
     *
     * @default ["/index.html"]
     */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.ServeStaticOptions.property.indexNames",
          "kind": "interface-property",
          "line": 641,
          "name": "indexNames",
          "signature": "indexNames?: string[];",
        },
      ],
      "setAccessors": [],
      "signature": "interface ServeStaticOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.Session",
      "indexSignatures": [],
      "kind": "interface",
      "line": 111,
      "methods": [],
      "name": "Session",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Session.property.[getSessionPromise]",
          "kind": "interface-property",
          "line": 115,
          "name": "[getSessionPromise]",
          "signature": "[getSessionPromise]?: Promise<Session<T>>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Session.property.createdAt",
          "kind": "interface-property",
          "line": 113,
          "name": "createdAt",
          "signature": "createdAt: number;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Session.property.data",
          "kind": "interface-property",
          "line": 114,
          "name": "data",
          "signature": "data: SessionData<T>;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.Session.property.id",
          "kind": "interface-property",
          "line": 112,
          "name": "id",
          "signature": "id: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Session<T extends SessionDataT = SessionDataT> {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.SessionConfig",
      "indexSignatures": [],
      "kind": "interface",
      "line": 117,
      "methods": [],
      "name": "SessionConfig",
      "properties": [
        {
          "docs": [
            "/** Default is secure, httpOnly, / */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.cookie",
          "kind": "interface-property",
          "line": 125,
          "name": "cookie",
          "signature": "cookie?: false | CookieSerializeOptions;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.crypto",
          "kind": "interface-property",
          "line": 129,
          "name": "crypto",
          "signature": "crypto?: Crypto;",
        },
        {
          "docs": [
            "/** Default is Crypto.randomUUID */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.generateId",
          "kind": "interface-property",
          "line": 131,
          "name": "generateId",
          "signature": "generateId?: () => string;",
        },
        {
          "docs": [
            "/** Session expiration time in seconds */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.maxAge",
          "kind": "interface-property",
          "line": 121,
          "name": "maxAge",
          "signature": "maxAge?: number;",
        },
        {
          "docs": [
            "/** default is h3 */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.name",
          "kind": "interface-property",
          "line": 123,
          "name": "name",
          "signature": "name?: string;",
        },
        {
          "docs": [
            "/** Private key used to encrypt session tokens */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.password",
          "kind": "interface-property",
          "line": 119,
          "name": "password",
          "signature": "password: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.seal",
          "kind": "interface-property",
          "line": 128,
          "name": "seal",
          "signature": "seal?: SealOptions;",
        },
        {
          "docs": [
            "/** Default is x-h3-session / x-{name}-session */",
          ],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.SessionConfig.property.sessionHeader",
          "kind": "interface-property",
          "line": 127,
          "name": "sessionHeader",
          "signature": "sessionHeader?: false | string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface SessionConfig {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.StaticAssetMeta",
      "indexSignatures": [],
      "kind": "interface",
      "line": 611,
      "methods": [],
      "name": "StaticAssetMeta",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.StaticAssetMeta.property.encoding",
          "kind": "interface-property",
          "line": 617,
          "name": "encoding",
          "signature": "encoding?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.StaticAssetMeta.property.etag",
          "kind": "interface-property",
          "line": 613,
          "name": "etag",
          "signature": "etag?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.StaticAssetMeta.property.mtime",
          "kind": "interface-property",
          "line": 614,
          "name": "mtime",
          "signature": "mtime?: number | string | Date;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.StaticAssetMeta.property.path",
          "kind": "interface-property",
          "line": 615,
          "name": "path",
          "signature": "path?: string;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.StaticAssetMeta.property.size",
          "kind": "interface-property",
          "line": 616,
          "name": "size",
          "signature": "size?: number;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.StaticAssetMeta.property.type",
          "kind": "interface-property",
          "line": 612,
          "name": "type",
          "signature": "type?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface StaticAssetMeta {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "getAccessors": [],
      "id": "interface.WebEventContext",
      "indexSignatures": [],
      "kind": "interface",
      "line": 24,
      "methods": [],
      "name": "WebEventContext",
      "properties": [
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.WebEventContext.property.request",
          "kind": "interface-property",
          "line": 25,
          "name": "request",
          "signature": "request?: Request;",
        },
        {
          "docs": [],
          "file": "/h3/dist/index.d.ts",
          "id": "interface.WebEventContext.property.url",
          "kind": "interface-property",
          "line": 26,
          "name": "url",
          "signature": "url?: URL;",
        },
      ],
      "setAccessors": [],
      "signature": "interface WebEventContext {}",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type._RequestMiddleware",
      "kind": "type",
      "line": 192,
      "name": "_RequestMiddleware",
      "signature": "type _RequestMiddleware<
  Request extends EventHandlerRequest = EventHandlerRequest,
> = (event: H3Event<Request>) => void | Promise<void>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type._ResponseMiddleware",
      "kind": "type",
      "line": 193,
      "name": "_ResponseMiddleware",
      "signature": "type _ResponseMiddleware<
  Request extends EventHandlerRequest = EventHandlerRequest,
  Response extends EventHandlerResponse = EventHandlerResponse,
> = (
  event: H3Event<Request>,
  response: {
    body?: Awaited<Response>;
  },
) => void | Promise<void>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.AddRouteShortcuts",
      "kind": "type",
      "line": 148,
      "name": "AddRouteShortcuts",
      "signature": "type AddRouteShortcuts = Record<RouterMethod, RouterUse>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.Duplex",
      "kind": "type",
      "line": 547,
      "name": "Duplex",
      "signature": "type Duplex = "half" | "full";",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.Encoding",
      "kind": "type",
      "line": 169,
      "name": "Encoding",
      "signature": "type Encoding =
  | false
  | "ascii"
  | "utf8"
  | "utf-8"
  | "utf16le"
  | "ucs2"
  | "ucs-2"
  | "base64"
  | "latin1"
  | "binary"
  | "hex";",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.EventHandlerObject",
      "kind": "type",
      "line": 196,
      "name": "EventHandlerObject",
      "signature": "type EventHandlerObject<
  Request extends EventHandlerRequest = EventHandlerRequest,
  Response extends EventHandlerResponse = EventHandlerResponse,
> = {
  onRequest?: _RequestMiddleware<Request> | _RequestMiddleware<Request>[];
  onBeforeResponse?:
    | _ResponseMiddleware<Request, Response>
    | _ResponseMiddleware<Request, Response>[];
  handler: EventHandler<Request, Response>;
};",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.EventHandlerResponse",
      "kind": "type",
      "line": 181,
      "name": "EventHandlerResponse",
      "signature": "type EventHandlerResponse<T = any> = T | Promise<T>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.HTTPHeaderName",
      "kind": "type",
      "line": 204,
      "name": "HTTPHeaderName",
      "signature": "type HTTPHeaderName =
  | _HTTPHeaderName
  | Lowercase<_HTTPHeaderName>
  | (string & {});",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.HTTPMethod",
      "kind": "type",
      "line": 168,
      "name": "HTTPMethod",
      "signature": "type HTTPMethod =
  | "GET"
  | "HEAD"
  | "PATCH"
  | "POST"
  | "PUT"
  | "DELETE"
  | "CONNECT"
  | "OPTIONS"
  | "TRACE";",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.InferEventInput",
      "kind": "type",
      "line": 187,
      "name": "InferEventInput",
      "signature": "type InferEventInput<
  Key extends keyof EventHandlerRequest,
  Event extends H3Event,
  T,
> = void extends T ? (Event extends H3Event<infer E> ? E[Key] : never) : T;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.InputStack",
      "kind": "type",
      "line": 272,
      "name": "InputStack",
      "signature": "type InputStack = InputLayer[];",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.LazyEventHandler",
      "kind": "type",
      "line": 201,
      "name": "LazyEventHandler",
      "signature": "type LazyEventHandler = () => EventHandler | Promise<EventHandler>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.Matcher",
      "kind": "type",
      "line": 273,
      "name": "Matcher",
      "signature": "type Matcher = (url: string, event?: H3Event) => boolean;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.NodeListener",
      "kind": "type",
      "line": 8,
      "name": "NodeListener",
      "signature": "type NodeListener = (req: IncomingMessage, res: ServerResponse) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.NodeMiddleware",
      "kind": "type",
      "line": 10,
      "name": "NodeMiddleware",
      "signature": "type NodeMiddleware = (
  req: IncomingMessage,
  res: ServerResponse,
  next: (err?: Error) => any,
) => any;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.NodePromisifiedHandler",
      "kind": "type",
      "line": 9,
      "name": "NodePromisifiedHandler",
      "signature": "type NodePromisifiedHandler = (
  req: IncomingMessage,
  res: ServerResponse,
) => Promise<any>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.PlainHandler",
      "kind": "type",
      "line": 670,
      "name": "PlainHandler",
      "signature": "type PlainHandler = (request: PlainRequest) => Promise<PlainResponse>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.RequestHeaders",
      "kind": "type",
      "line": 202,
      "name": "RequestHeaders",
      "signature": "type RequestHeaders = Partial<Record<HTTPHeaderName, string | undefined>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.RouterMethod",
      "kind": "type",
      "line": 146,
      "name": "RouterMethod",
      "signature": "type RouterMethod = Lowercase<HTTPMethod>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.RouterUse",
      "kind": "type",
      "line": 147,
      "name": "RouterUse",
      "signature": "type RouterUse = (
  path: string,
  handler: EventHandler,
  method?: RouterMethod | RouterMethod[],
) => Router;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.SessionData",
      "kind": "type",
      "line": 109,
      "name": "SessionData",
      "signature": "type SessionData<T extends SessionDataT = SessionDataT> = T;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.Stack",
      "kind": "type",
      "line": 265,
      "name": "Stack",
      "signature": "type Stack = Layer[];",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.ValidateFunction",
      "kind": "type",
      "line": 166,
      "name": "ValidateFunction",
      "signature": "type ValidateFunction<T> = (
  data: unknown,
) => ValidateResult<T> | Promise<ValidateResult<T>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "type.ValidateResult",
      "kind": "type",
      "line": 165,
      "name": "ValidateResult",
      "signature": "type ValidateResult<T> = T | true | false | void;",
    },
    {
      "docs": [
        "/** @experimental */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "type.WebHandler",
      "kind": "type",
      "line": 650,
      "name": "WebHandler",
      "signature": "type WebHandler = (
  request: Request,
  context?: Record<string, unknown>,
) => Promise<Response>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.appendHeader",
      "kind": "variable",
      "line": 594,
      "name": "appendHeader",
      "signature": "const appendHeader: (
  event: H3Event<EventHandlerRequest>,
  name: HTTPHeaderName,
  value: string,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.appendHeaders",
      "kind": "variable",
      "line": 592,
      "name": "appendHeaders",
      "signature": "const appendHeaders: (
  event: H3Event<EventHandlerRequest>,
  headers: Record<string, string>,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.eventHandler",
      "kind": "variable",
      "line": 71,
      "name": "eventHandler",
      "signature": "const eventHandler: {
  <Request extends EventHandlerRequest = EventHandlerRequest, Response = any>(
    handler:
      | EventHandler<Request, Response>
      | EventHandlerObject<Request, Response>,
  ): EventHandler<Request, Response>;
  <Request = EventHandlerRequest, Response = any>(
    handler: EventHandler<
      Request extends EventHandlerRequest ? Request : EventHandlerRequest,
      Request extends EventHandlerRequest ? Response : Request
    >,
  ): EventHandler<
    Request extends EventHandlerRequest ? Request : EventHandlerRequest,
    Request extends EventHandlerRequest ? Response : Request
  >;
};",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.getHeader",
      "kind": "variable",
      "line": 451,
      "name": "getHeader",
      "signature": "const getHeader: (
  event: H3Event<EventHandlerRequest>,
  name: HTTPHeaderName,
) => string;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.getHeaders",
      "kind": "variable",
      "line": 449,
      "name": "getHeaders",
      "signature": "const getHeaders: (
  event: H3Event<EventHandlerRequest>,
) => Partial<Record<HTTPHeaderName, string>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.getSessionPromise",
      "kind": "variable",
      "line": 110,
      "name": "getSessionPromise",
      "signature": "const getSessionPromise: Symbol;",
    },
    {
      "docs": [
        "/**
 * @deprecated Please use native web Headers
 * https://developer.mozilla.org/en-US/docs/Web/API/Headers
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.H3Headers",
      "kind": "variable",
      "line": 92,
      "name": "H3Headers",
      "signature": "const H3Headers: {
  new (init?: HeadersInit | undefined): Headers;
  prototype: Headers;
};",
    },
    {
      "docs": [
        "/**
 * @deprecated Please use native web Response
 * https://developer.mozilla.org/en-US/docs/Web/API/Response
 */",
      ],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.H3Response",
      "kind": "variable",
      "line": 100,
      "name": "H3Response",
      "signature": "const H3Response: {
  new (
    body?: BodyInit | null | undefined,
    init?: ResponseInit | undefined,
  ): Response;
  prototype: Response;
  error(): Response;
  json(data: any, init?: ResponseInit | undefined): Response;
  redirect(url: string | URL, status?: number | undefined): Response;
};",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.lazyEventHandler",
      "kind": "variable",
      "line": 86,
      "name": "lazyEventHandler",
      "signature": "const lazyEventHandler: <T extends LazyEventHandler>(
  factory: T,
) => Awaited<ReturnType<T>>;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.MIMES",
      "kind": "variable",
      "line": 412,
      "name": "MIMES",
      "signature": "const MIMES: { html: string; json: string };",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.setHeader",
      "kind": "variable",
      "line": 590,
      "name": "setHeader",
      "signature": "const setHeader: (
  event: H3Event<EventHandlerRequest>,
  name: HTTPHeaderName,
  value: unknown,
) => void;",
    },
    {
      "docs": [],
      "file": "/h3/dist/index.d.ts",
      "id": "variable.setHeaders",
      "kind": "variable",
      "line": 588,
      "name": "setHeaders",
      "signature": "const setHeaders: (
  event: H3Event<EventHandlerRequest>,
  headers: Partial<Record<HTTPHeaderName, unknown>>,
) => void;",
    },
  ],
  "name": "h3",
  "overview": undefined,
  "packages": Any<Array>,
  "subpath": ".",
  "types": "./dist/index.d.ts",
  "version": "1.10.1",
}
`;
