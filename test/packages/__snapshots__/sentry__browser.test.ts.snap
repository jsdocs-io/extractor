// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`@sentry/browser@7.100.1 1`] = `
{
  "analyzedAt": Any<String>,
  "analyzedIn": Any<Number>,
  "declarations": [
    {
      "constructors": [
        {
          "docs": [
            "/**
     * Creates a new Browser SDK instance.
     *
     * @param options Configuration options for this SDK.
     */",
          ],
          "file": "/@sentry/browser/types/client.d.ts",
          "id": "class.BrowserClient.constructor",
          "kind": "class-constructor",
          "line": 27,
          "name": "constructor",
          "signature": "constructor(
  options: ClientOptions<BrowserTransportOptions> &
    BrowserClientReplayOptions &
    BrowserClientProfilingOptions,
);",
        },
      ],
      "docs": [
        "/**
 * The Sentry Browser SDK Client.
 *
 * @see BrowserOptions for documentation on configuration options.
 * @see SentryClient for usage documentation.
 */",
      ],
      "file": "/@sentry/browser/types/client.d.ts",
      "id": "class.BrowserClient",
      "kind": "class",
      "line": 21,
      "methods": [
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/browser/types/client.d.ts",
          "id": "class.BrowserClient.method._prepareEvent",
          "kind": "class-method",
          "line": 43,
          "name": "_prepareEvent",
          "signature": "protected _prepareEvent: (
  event: Event,
  hint: EventHint,
  scope?: Scope,
) => PromiseLike<Event | null>;",
        },
        {
          "docs": [
            "/**
     * Sends user feedback to Sentry.
     */",
          ],
          "file": "/@sentry/browser/types/client.d.ts",
          "id": "class.BrowserClient.method.captureUserFeedback",
          "kind": "class-method",
          "line": 39,
          "name": "captureUserFeedback",
          "signature": "captureUserFeedback: (feedback: UserFeedback) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/browser/types/client.d.ts",
          "id": "class.BrowserClient.method.eventFromException",
          "kind": "class-method",
          "line": 31,
          "name": "eventFromException",
          "signature": "eventFromException: (
  exception: unknown,
  hint?: EventHint,
) => PromiseLike<Event>;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/browser/types/client.d.ts",
          "id": "class.BrowserClient.method.eventFromMessage",
          "kind": "class-method",
          "line": 35,
          "name": "eventFromMessage",
          "signature": "eventFromMessage: (
  message: ParameterizedString,
  level?: Severity | SeverityLevel,
  hint?: EventHint,
) => PromiseLike<Event>;",
        },
      ],
      "name": "BrowserClient",
      "properties": [],
      "signature": "class BrowserClient extends BaseClient<BrowserClientOptions> {}",
    },
    {
      "constructors": [
        {
          "docs": [],
          "file": "/@sentry-internal/tracing/types/browser/browsertracing.d.ts",
          "id": "class.BrowserTracing.constructor",
          "kind": "class-constructor",
          "line": 124,
          "name": "constructor",
          "signature": "constructor(_options?: Partial<BrowserTracingOptions>);",
        },
      ],
      "docs": [
        "/**
 * The Browser Tracing integration automatically instruments browser pageload/navigation
 * actions as transactions, and captures requests, metrics and errors as spans.
 *
 * The integration can be configured with a variety of options, and can be extended to use
 * any routing library. This integration uses {@see IdleTransaction} to create transactions.
 *
 * @deprecated Use \`browserTracingIntegration()\` instead.
 */",
      ],
      "file": "/@sentry-internal/tracing/types/browser/browsertracing.d.ts",
      "id": "class.BrowserTracing",
      "kind": "class",
      "line": 112,
      "methods": [
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/browsertracing.d.ts",
          "id": "class.BrowserTracing.method.setupOnce",
          "kind": "class-method",
          "line": 128,
          "name": "setupOnce",
          "signature": "setupOnce: (
  _: (callback: EventProcessor) => void,
  getCurrentHub: () => Hub,
) => void;",
        },
      ],
      "name": "BrowserTracing",
      "properties": [
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/browsertracing.d.ts",
          "id": "class.BrowserTracing.property.name",
          "kind": "class-property",
          "line": 118,
          "name": "name",
          "signature": "name: string;",
        },
        {
          "docs": [
            "/** Browser Tracing integration options */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/browsertracing.d.ts",
          "id": "class.BrowserTracing.property.options",
          "kind": "class-property",
          "line": 114,
          "name": "options",
          "signature": "options: BrowserTracingOptions;",
        },
      ],
      "signature": "class BrowserTracing implements Integration {}",
    },
    {
      "constructors": [
        {
          "docs": [],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.constructor",
          "kind": "class-constructor",
          "line": 45,
          "name": "constructor",
          "signature": "constructor({
  id,
  showBranding,
  autoInject,
  showEmail,
  showName,
  useSentryUser,
  isEmailRequired,
  isNameRequired,
  themeDark,
  themeLight,
  colorScheme,
  buttonLabel,
  cancelButtonLabel,
  submitButtonLabel,
  formTitle,
  emailPlaceholder,
  emailLabel,
  messagePlaceholder,
  messageLabel,
  namePlaceholder,
  nameLabel,
  successMessageText,
  onFormClose,
  onFormOpen,
  onSubmitError,
  onSubmitSuccess,
}?: OptionalFeedbackConfiguration);",
        },
      ],
      "docs": [
        "/**
 * Feedback integration. When added as an integration to the SDK, it will
 * inject a button in the bottom-right corner of the window that opens a
 * feedback modal when clicked.
 *
 * @deprecated Use \`feedbackIntegration()\` instead.
 */",
      ],
      "file": "/@sentry-internal/feedback/types/integration.d.ts",
      "id": "class.Feedback",
      "kind": "class",
      "line": 12,
      "methods": [
        {
          "docs": [
            "/**
     * Clean-up the widget if it already exists in the DOM. This shouldn't happen
     * in prod, but can happen in development with hot module reloading.
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method._cleanupWidgetIfExists",
          "kind": "class-method",
          "line": 90,
          "name": "_cleanupWidgetIfExists",
          "signature": "protected _cleanupWidgetIfExists: () => void;",
        },
        {
          "docs": [
            "/**
     * Creates a new widget, after ensuring shadow DOM exists
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method._createWidget",
          "kind": "class-method",
          "line": 94,
          "name": "_createWidget",
          "signature": "protected _createWidget: (
  options: FeedbackInternalOptions & { shouldCreateActor?: boolean },
) => FeedbackWidget | null;",
        },
        {
          "docs": [
            "/**
     * Ensures that shadow DOM exists and is added to the DOM
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method._ensureShadowHost",
          "kind": "class-method",
          "line": 100,
          "name": "_ensureShadowHost",
          "signature": "protected _ensureShadowHost: <T>(
  options: FeedbackInternalOptions,
  cb: (createShadowHostResult: ReturnType<typeof createShadowHost>) => T,
) => T | null;",
        },
        {
          "docs": [
            "/**
     * Initializes values of protected properties
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method._initialize",
          "kind": "class-method",
          "line": 85,
          "name": "_initialize",
          "signature": "protected _initialize: () => void;",
        },
        {
          "docs": [
            "/**
     * Adds click listener to attached element to open a feedback dialog
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.attachTo",
          "kind": "class-method",
          "line": 63,
          "name": "attachTo",
          "signature": "attachTo: (
  el: Element | string,
  optionOverrides?: OptionalFeedbackConfiguration,
) => FeedbackWidget | null;",
        },
        {
          "docs": [
            "/**
     * Closes the dialog for the default widget, if it exists
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.closeDialog",
          "kind": "class-method",
          "line": 59,
          "name": "closeDialog",
          "signature": "closeDialog: () => void;",
        },
        {
          "docs": [
            "/**
     * Creates a new widget. Accepts partial options to override any options passed to constructor.
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.createWidget",
          "kind": "class-method",
          "line": 67,
          "name": "createWidget",
          "signature": "createWidget: (
  optionOverrides?: OptionalFeedbackConfiguration & {
    shouldCreateActor?: boolean;
  },
) => FeedbackWidget | null;",
        },
        {
          "docs": [
            "/**
     * Returns the default (first-created) widget
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.getWidget",
          "kind": "class-method",
          "line": 77,
          "name": "getWidget",
          "signature": "getWidget: () => FeedbackWidget | null;",
        },
        {
          "docs": [
            "/**
     * Allows user to open the dialog box. Creates a new widget if
     * \`autoInject\` was false, otherwise re-uses the default widget that was
     * created during initialization of the integration.
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.openDialog",
          "kind": "class-method",
          "line": 55,
          "name": "openDialog",
          "signature": "openDialog: () => void;",
        },
        {
          "docs": [
            "/**
     * Removes the Feedback integration (including host, shadow DOM, and all widgets)
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.remove",
          "kind": "class-method",
          "line": 81,
          "name": "remove",
          "signature": "remove: () => void;",
        },
        {
          "docs": [
            "/**
     * Removes a single widget
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.removeWidget",
          "kind": "class-method",
          "line": 73,
          "name": "removeWidget",
          "signature": "removeWidget: (widget: FeedbackWidget | null | undefined) => boolean;",
        },
        {
          "docs": [
            "/**
     * Setup and initialize feedback container
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.method.setupOnce",
          "kind": "class-method",
          "line": 49,
          "name": "setupOnce",
          "signature": "setupOnce: () => void;",
        },
      ],
      "name": "Feedback",
      "properties": [
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.property.id",
          "kind": "class-property",
          "line": 16,
          "name": "id",
          "signature": "static id: string;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.property.name",
          "kind": "class-property",
          "line": 20,
          "name": "name",
          "signature": "name: string;",
        },
        {
          "docs": [
            "/**
     * Feedback configuration options
     */",
          ],
          "file": "/@sentry-internal/feedback/types/integration.d.ts",
          "id": "class.Feedback.property.options",
          "kind": "class-property",
          "line": 24,
          "name": "options",
          "signature": "options: FeedbackInternalOptions;",
        },
      ],
      "signature": "class Feedback implements Integration {}",
    },
    {
      "constructors": [
        {
          "docs": [
            "/**
     * Creates a new instance of the hub, will push one {@link Layer} into the
     * internal stack on creation.
     *
     * @param client bound to the hub.
     * @param scope bound to the hub.
     * @param version number, higher number means higher priority.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.constructor",
          "kind": "class-constructor",
          "line": 75,
          "name": "constructor",
          "signature": "constructor(
  client?: Client<ClientOptions<BaseTransportOptions>>,
  scope?: Scope,
  isolationScope?: Scope,
  _version?: number,
);",
        },
      ],
      "docs": [
        "/**
 * @inheritDoc
 */",
      ],
      "file": "/@sentry/core/types/hub.d.ts",
      "id": "class.Hub",
      "kind": "class",
      "line": 60,
      "methods": [
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`Sentry.addBreadcrumb()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.addBreadcrumb",
          "kind": "class-method",
          "line": 165,
          "name": "addBreadcrumb",
          "signature": "addBreadcrumb: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void;",
        },
        {
          "docs": [
            "/**
     * This binds the given client to the current scope.
     * @param client An SDK client (client) instance.
     *
     * @deprecated Use \`initAndBind()\` directly, or \`setCurrentClient()\` and/or \`client.init()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.bindClient",
          "kind": "class-method",
          "line": 91,
          "name": "bindClient",
          "signature": "bindClient: (client?: Client) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`Sentry.captureEvent()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.captureEvent",
          "kind": "class-method",
          "line": 153,
          "name": "captureEvent",
          "signature": "captureEvent: (event: Event, hint?: EventHint) => string;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`Sentry.captureException()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.captureException",
          "kind": "class-method",
          "line": 141,
          "name": "captureException",
          "signature": "captureException: (exception: unknown, hint?: EventHint) => string;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use  \`Sentry.captureMessage()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.captureMessage",
          "kind": "class-method",
          "line": 147,
          "name": "captureMessage",
          "signature": "captureMessage: (
  message: string,
  level?: Severity | SeverityLevel,
  hint?: EventHint,
) => string;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use top level \`captureSession\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.captureSession",
          "kind": "class-method",
          "line": 247,
          "name": "captureSession",
          "signature": "captureSession: (endSession?: boolean) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`getScope()\` directly.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.configureScope",
          "kind": "class-method",
          "line": 205,
          "name": "configureScope",
          "signature": "configureScope: (callback: (scope: Scope) => void) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use top level \`endSession\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.endSession",
          "kind": "class-method",
          "line": 252,
          "name": "endSession",
          "signature": "endSession: () => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`Sentry.getClient()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.getClient",
          "kind": "class-method",
          "line": 115,
          "name": "getClient",
          "signature": "getClient: <C extends Client<ClientOptions<BaseTransportOptions>>>() =>
  | C
  | undefined;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`Sentry.getClient().getIntegrationByName()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.getIntegration",
          "kind": "class-method",
          "line": 214,
          "name": "getIntegration",
          "signature": "getIntegration: <T extends Integration>(
  integration: IntegrationClass<T>,
) => T | null;",
        },
        {
          "docs": [
            "/**
     * @deprecated Use \`Sentry.getIsolationScope()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.getIsolationScope",
          "kind": "class-method",
          "line": 125,
          "name": "getIsolationScope",
          "signature": "getIsolationScope: () => Scope;",
        },
        {
          "docs": [
            "/**
     * Returns the scope of the top stack.
     *
     * @deprecated Use \`Sentry.getCurrentScope()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.getScope",
          "kind": "class-method",
          "line": 121,
          "name": "getScope",
          "signature": "getScope: () => Scope;",
        },
        {
          "docs": [
            "/**
     * Returns the scope stack for domains or the process.
     * @deprecated This will be removed in v8.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.getStack",
          "kind": "class-method",
          "line": 130,
          "name": "getStack",
          "signature": "getStack: () => Layer[];",
        },
        {
          "docs": [
            "/**
     * Returns the topmost scope layer in the order domain > local > process.
     * @deprecated This will be removed in v8.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.getStackTop",
          "kind": "class-method",
          "line": 135,
          "name": "getStackTop",
          "signature": "getStackTop: () => Layer;",
        },
        {
          "docs": [
            "/**
     * Checks if this hub's version is older than the given version.
     *
     * @param version A version number to compare to.
     * @return True if the given version is newer; otherwise false.
     *
     * @deprecated This will be removed in v8.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.isOlderThan",
          "kind": "class-method",
          "line": 84,
          "name": "isOlderThan",
          "signature": "isOlderThan: (version: number) => boolean;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated This will be removed in v8.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.lastEventId",
          "kind": "class-method",
          "line": 159,
          "name": "lastEventId",
          "signature": "lastEventId: () => string | undefined;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`withScope\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.popScope",
          "kind": "class-method",
          "line": 103,
          "name": "popScope",
          "signature": "popScope: () => boolean;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`withScope\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.pushScope",
          "kind": "class-method",
          "line": 97,
          "name": "pushScope",
          "signature": "pushScope: () => Scope;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.run",
          "kind": "class-method",
          "line": 209,
          "name": "run",
          "signature": "run: (callback: (hub: Hub) => void) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`Sentry.setContext()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.setContext",
          "kind": "class-method",
          "line": 197,
          "name": "setContext",
          "signature": "setContext: (name: string, context: { [key: string]: any }) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`Sentry.setExtra()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.setExtra",
          "kind": "class-method",
          "line": 192,
          "name": "setExtra",
          "signature": "setExtra: (key: string, extra: Extra) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`Sentry.setExtras()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.setExtras",
          "kind": "class-method",
          "line": 182,
          "name": "setExtras",
          "signature": "setExtras: (extras: Extras) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`Sentry.setTag()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.setTag",
          "kind": "class-method",
          "line": 187,
          "name": "setTag",
          "signature": "setTag: (key: string, value: Primitive) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`Sentry.setTags()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.setTags",
          "kind": "class-method",
          "line": 175,
          "name": "setTags",
          "signature": "setTags: (tags: { [key: string]: Primitive }) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`Sentry.setUser()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.setUser",
          "kind": "class-method",
          "line": 170,
          "name": "setUser",
          "signature": "setUser: (user: User | null) => void;",
        },
        {
          "docs": [
            "/**
     * Returns if default PII should be sent to Sentry and propagated in ourgoing requests
     * when Tracing is used.
     *
     * @deprecated Use top-level \`getClient().getOptions().sendDefaultPii\` instead. This function
     * only unnecessarily increased API surface but only wrapped accessing the option.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.shouldSendDefaultPii",
          "kind": "class-method",
          "line": 265,
          "name": "shouldSendDefaultPii",
          "signature": "shouldSendDefaultPii: () => boolean;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use top level \`startSession\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.startSession",
          "kind": "class-method",
          "line": 257,
          "name": "startSession",
          "signature": "startSession: (context?: SessionContext) => Session;",
        },
        {
          "docs": [
            "/**
     * Starts a new \`Transaction\` and returns it. This is the entry point to manual tracing instrumentation.
     *
     * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a
     * new child span within the transaction or any span, call the respective \`.startChild()\` method.
     *
     * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.
     *
     * The transaction must be finished with a call to its \`.end()\` method, at which point the transaction with all its
     * finished child spans will be sent to Sentry.
     *
     * @param context Properties of the new \`Transaction\`.
     * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent
     * default values). See {@link Options.tracesSampler}.
     *
     * @returns The transaction which was just started
     *
     * @deprecated Use \`startSpan()\`, \`startSpanManual()\` or \`startInactiveSpan()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.startTransaction",
          "kind": "class-method",
          "line": 234,
          "name": "startTransaction",
          "signature": "startTransaction: (
  context: TransactionContext,
  customSamplingContext?: CustomSamplingContext,
) => Transaction;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`spanToTraceHeader()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.traceHeaders",
          "kind": "class-method",
          "line": 239,
          "name": "traceHeaders",
          "signature": "traceHeaders: () => { [key: string]: string };",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     *
     * @deprecated Use \`Sentry.withScope()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/hub.d.ts",
          "id": "class.Hub.method.withScope",
          "kind": "class-method",
          "line": 109,
          "name": "withScope",
          "signature": "withScope: <T>(callback: (scope: Scope) => T) => T;",
        },
      ],
      "name": "Hub",
      "properties": [],
      "signature": "class Hub implements HubInterface {}",
    },
    {
      "constructors": [
        {
          "docs": [],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.constructor",
          "kind": "class-constructor",
          "line": 30,
          "name": "constructor",
          "signature": "constructor({
  flushMinDelay,
  flushMaxDelay,
  minReplayDuration,
  maxReplayDuration,
  stickySession,
  useCompression,
  workerUrl,
  _experiments,
  sessionSampleRate,
  errorSampleRate,
  maskAllText,
  maskAllInputs,
  blockAllMedia,
  mutationBreadcrumbLimit,
  mutationLimit,
  slowClickTimeout,
  slowClickIgnoreSelectors,
  networkDetailAllowUrls,
  networkDetailDenyUrls,
  networkCaptureBodies,
  networkRequestHeaders,
  networkResponseHeaders,
  mask,
  maskAttributes,
  unmask,
  block,
  unblock,
  ignore,
  maskFn,
  beforeAddRecordingEvent,
  beforeErrorSampling,
  blockClass,
  blockSelector,
  maskInputOptions,
  maskTextClass,
  maskTextSelector,
  ignoreClass,
}?: ReplayConfiguration);",
        },
      ],
      "docs": [
        "/**
 * The main replay integration class, to be passed to \`init({  integrations: [] })\`.
 * @deprecated Use \`replayIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/replay/types/integration.d.ts",
      "id": "class.Replay",
      "kind": "class",
      "line": 8,
      "methods": [
        {
          "docs": [
            "/**
     * Initializes replay.
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.method._initialize",
          "kind": "class-method",
          "line": 72,
          "name": "_initialize",
          "signature": "protected _initialize: () => void;",
        },
        {
          "docs": [
            "/**
     * If not in "session" recording mode, flush event buffer which will create a new replay.
     * Unless \`continueRecording\` is false, the replay will continue to record and
     * behave as a "session"-based replay.
     *
     * Otherwise, queue up a flush.
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.method.flush",
          "kind": "class-method",
          "line": 64,
          "name": "flush",
          "signature": "flush: (options?: SendBufferedReplayOptions) => Promise<void>;",
        },
        {
          "docs": [
            "/**
     * Get the current session ID.
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.method.getReplayId",
          "kind": "class-method",
          "line": 68,
          "name": "getReplayId",
          "signature": "getReplayId: () => string | undefined;",
        },
        {
          "docs": [
            "/**
     * Setup and initialize replay container
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.method.setupOnce",
          "kind": "class-method",
          "line": 38,
          "name": "setupOnce",
          "signature": "setupOnce: () => void;",
        },
        {
          "docs": [
            "/**
     * Start a replay regardless of sampling rate. Calling this will always
     * create a new session. Will throw an error if replay is already in progress.
     *
     * Creates or loads a session, attaches listeners to varying events (DOM,
     * PerformanceObserver, Recording, Sentry SDK, etc)
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.method.start",
          "kind": "class-method",
          "line": 46,
          "name": "start",
          "signature": "start: () => void;",
        },
        {
          "docs": [
            "/**
     * Start replay buffering. Buffers until \`flush()\` is called or, if
     * \`replaysOnErrorSampleRate\` > 0, until an error occurs.
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.method.startBuffering",
          "kind": "class-method",
          "line": 51,
          "name": "startBuffering",
          "signature": "startBuffering: () => void;",
        },
        {
          "docs": [
            "/**
     * Currently, this needs to be manually called (e.g. for tests). Sentry SDK
     * does not support a teardown
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.method.stop",
          "kind": "class-method",
          "line": 56,
          "name": "stop",
          "signature": "stop: () => Promise<void>;",
        },
      ],
      "name": "Replay",
      "properties": [
        {
          "docs": [
            "/** If replay has already been initialized */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.property._isInitialized",
          "kind": "class-property",
          "line": 32,
          "name": "_isInitialized",
          "signature": "_isInitialized: boolean;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.property.id",
          "kind": "class-property",
          "line": 12,
          "name": "id",
          "signature": "static id: string;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/replay/types/integration.d.ts",
          "id": "class.Replay.property.name",
          "kind": "class-property",
          "line": 16,
          "name": "name",
          "signature": "name: string;",
        },
      ],
      "signature": "class Replay implements Integration {}",
    },
    {
      "constructors": [
        {
          "docs": [],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.constructor",
          "kind": "class-constructor",
          "line": 52,
          "name": "constructor",
          "signature": "constructor();",
        },
      ],
      "docs": [
        "/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */",
      ],
      "file": "/@sentry/core/types/scope.d.ts",
      "id": "class.Scope",
      "kind": "class",
      "line": 6,
      "methods": [
        {
          "docs": [
            "/**
     * This will be called on every set call.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method._notifyScopeListeners",
          "kind": "class-method",
          "line": 240,
          "name": "_notifyScopeListeners",
          "signature": "protected _notifyScopeListeners: () => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.addAttachment",
          "kind": "class-method",
          "line": 177,
          "name": "addAttachment",
          "signature": "addAttachment: (attachment: Attachment) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.addBreadcrumb",
          "kind": "class-method",
          "line": 165,
          "name": "addBreadcrumb",
          "signature": "addBreadcrumb: (breadcrumb: Breadcrumb, maxBreadcrumbs?: number) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.addEventProcessor",
          "kind": "class-method",
          "line": 78,
          "name": "addEventProcessor",
          "signature": "addEventProcessor: (callback: EventProcessor) => this;",
        },
        {
          "docs": [
            "/**
     * Add internal on change listener. Used for sub SDKs that need to store the scope.
     * @hidden
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.addScopeListener",
          "kind": "class-method",
          "line": 74,
          "name": "addScopeListener",
          "signature": "addScopeListener: (callback: (scope: Scope) => void) => void;",
        },
        {
          "docs": [
            "/**
     * Applies data from the scope to the event and runs all event processors on it.
     *
     * @param event Event
     * @param hint Object containing additional information about the original exception, for use by the event processors.
     * @hidden
     * @deprecated Use \`applyScopeDataToEvent()\` directly
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.applyToEvent",
          "kind": "class-method",
          "line": 197,
          "name": "applyToEvent",
          "signature": "applyToEvent: (
  event: Event,
  hint?: EventHint,
  additionalEventProcessors?: EventProcessor[],
) => PromiseLike<Event | null>;",
        },
        {
          "docs": [
            "/**
     * Captures a manually created event for this scope and sends it to Sentry.
     *
     * @param exception The event to capture.
     * @param hint Optional additional data to attach to the Sentry event.
     * @returns the id of the captured event.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.captureEvent",
          "kind": "class-method",
          "line": 236,
          "name": "captureEvent",
          "signature": "captureEvent: (event: Event, hint?: EventHint) => string;",
        },
        {
          "docs": [
            "/**
     * Capture an exception for this scope.
     *
     * @param exception The exception to capture.
     * @param hint Optinal additional data to attach to the Sentry event.
     * @returns the id of the captured Sentry event.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.captureException",
          "kind": "class-method",
          "line": 219,
          "name": "captureException",
          "signature": "captureException: (exception: unknown, hint?: EventHint) => string;",
        },
        {
          "docs": [
            "/**
     * Capture a message for this scope.
     *
     * @param message The message to capture.
     * @param level An optional severity level to report the message with.
     * @param hint Optional additional data to attach to the Sentry event.
     * @returns the id of the captured message.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.captureMessage",
          "kind": "class-method",
          "line": 228,
          "name": "captureMessage",
          "signature": "captureMessage: (
  message: string,
  level?: SeverityLevel,
  hint?: EventHint,
) => string;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.clear",
          "kind": "class-method",
          "line": 161,
          "name": "clear",
          "signature": "clear: () => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.clearAttachments",
          "kind": "class-method",
          "line": 186,
          "name": "clearAttachments",
          "signature": "clearAttachments: () => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.clearBreadcrumbs",
          "kind": "class-method",
          "line": 173,
          "name": "clearBreadcrumbs",
          "signature": "clearBreadcrumbs: () => this;",
        },
        {
          "docs": [
            "/**
     * Clone this scope instance.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.clone",
          "kind": "class-method",
          "line": 61,
          "name": "clone",
          "signature": "clone: () => Scope;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     * @deprecated Use \`getScopeData()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getAttachments",
          "kind": "class-method",
          "line": 182,
          "name": "getAttachments",
          "signature": "getAttachments: () => Attachment[];",
        },
        {
          "docs": [
            "/**
     * Get the client assigned to this scope.
     *
     * It is generally recommended to use the global function \`Sentry.getClient()\` instead, unless you know what you are doing.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getClient",
          "kind": "class-method",
          "line": 69,
          "name": "getClient",
          "signature": "getClient: () => Client | undefined;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getLastBreadcrumb",
          "kind": "class-method",
          "line": 169,
          "name": "getLastBreadcrumb",
          "signature": "getLastBreadcrumb: () => Breadcrumb | undefined;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getPropagationContext",
          "kind": "class-method",
          "line": 211,
          "name": "getPropagationContext",
          "signature": "getPropagationContext: () => PropagationContext;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getRequestSession",
          "kind": "class-method",
          "line": 90,
          "name": "getRequestSession",
          "signature": "getRequestSession: () => RequestSession | undefined;",
        },
        {
          "docs": [
            "/** @inheritDoc */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getScopeData",
          "kind": "class-method",
          "line": 188,
          "name": "getScopeData",
          "signature": "getScopeData: () => ScopeData;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getSession",
          "kind": "class-method",
          "line": 153,
          "name": "getSession",
          "signature": "getSession: () => Session | undefined;",
        },
        {
          "docs": [
            "/**
     * Returns the \`Span\` if there is one.
     * @deprecated Use \`getActiveSpan()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getSpan",
          "kind": "class-method",
          "line": 140,
          "name": "getSpan",
          "signature": "getSpan: () => Span | undefined;",
        },
        {
          "docs": [
            "/**
     * Returns the \`Transaction\` attached to the scope (if there is one).
     * @deprecated You should not rely on the transaction, but just use \`startSpan()\` APIs instead.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getTransaction",
          "kind": "class-method",
          "line": 145,
          "name": "getTransaction",
          "signature": "getTransaction: () => Transaction | undefined;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.getUser",
          "kind": "class-method",
          "line": 86,
          "name": "getUser",
          "signature": "getUser: () => User | undefined;",
        },
        {
          "docs": [
            "/** Update the client on the scope. */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setClient",
          "kind": "class-method",
          "line": 63,
          "name": "setClient",
          "signature": "setClient: (client: Client | undefined) => void;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setContext",
          "kind": "class-method",
          "line": 129,
          "name": "setContext",
          "signature": "setContext: (key: string, context: Context | null) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setExtra",
          "kind": "class-method",
          "line": 112,
          "name": "setExtra",
          "signature": "setExtra: (key: string, extra: Extra) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setExtras",
          "kind": "class-method",
          "line": 108,
          "name": "setExtras",
          "signature": "setExtras: (extras: Extras) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setFingerprint",
          "kind": "class-method",
          "line": 116,
          "name": "setFingerprint",
          "signature": "setFingerprint: (fingerprint: string[]) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setLevel",
          "kind": "class-method",
          "line": 120,
          "name": "setLevel",
          "signature": "setLevel: (level: Severity | SeverityLevel) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setPropagationContext",
          "kind": "class-method",
          "line": 207,
          "name": "setPropagationContext",
          "signature": "setPropagationContext: (context: PropagationContext) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setRequestSession",
          "kind": "class-method",
          "line": 94,
          "name": "setRequestSession",
          "signature": "setRequestSession: (requestSession?: RequestSession) => this;",
        },
        {
          "docs": [
            "/**
     * Add data which will be accessible during event processing but won't get sent to Sentry
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setSDKProcessingMetadata",
          "kind": "class-method",
          "line": 201,
          "name": "setSDKProcessingMetadata",
          "signature": "setSDKProcessingMetadata: (newData: { [key: string]: unknown }) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setSession",
          "kind": "class-method",
          "line": 149,
          "name": "setSession",
          "signature": "setSession: (session?: Session) => this;",
        },
        {
          "docs": [
            "/**
     * Sets the Span on the scope.
     * @param span Span
     * @deprecated Instead of setting a span on a scope, use \`startSpan()\`/\`startSpanManual()\` instead.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setSpan",
          "kind": "class-method",
          "line": 135,
          "name": "setSpan",
          "signature": "setSpan: (span?: Span) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setTag",
          "kind": "class-method",
          "line": 104,
          "name": "setTag",
          "signature": "setTag: (key: string, value: Primitive) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setTags",
          "kind": "class-method",
          "line": 98,
          "name": "setTags",
          "signature": "setTags: (tags: { [key: string]: Primitive }) => this;",
        },
        {
          "docs": [
            "/**
     * Sets the transaction name on the scope for future events.
     * @deprecated Use extra or tags instead.
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setTransactionName",
          "kind": "class-method",
          "line": 125,
          "name": "setTransactionName",
          "signature": "setTransactionName: (name?: string) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.setUser",
          "kind": "class-method",
          "line": 82,
          "name": "setUser",
          "signature": "setUser: (user: User | null) => this;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.method.update",
          "kind": "class-method",
          "line": 157,
          "name": "update",
          "signature": "update: (captureContext?: CaptureContext) => this;",
        },
      ],
      "name": "Scope",
      "properties": [
        {
          "docs": [
            "/** Attachments */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._attachments",
          "kind": "class-property",
          "line": 26,
          "name": "_attachments",
          "signature": "protected _attachments: Attachment[];",
        },
        {
          "docs": [
            "/** Array of breadcrumbs. */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._breadcrumbs",
          "kind": "class-property",
          "line": 14,
          "name": "_breadcrumbs",
          "signature": "protected _breadcrumbs: Breadcrumb[];",
        },
        {
          "docs": [
            "/** The client on this scope */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._client",
          "kind": "class-property",
          "line": 51,
          "name": "_client",
          "signature": "protected _client?: Client<ClientOptions<BaseTransportOptions>>;",
        },
        {
          "docs": [
            "/** Contexts */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._contexts",
          "kind": "class-property",
          "line": 24,
          "name": "_contexts",
          "signature": "protected _contexts: Contexts;",
        },
        {
          "docs": [
            "/** Callback list that will be called after {@link applyToEvent}. */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._eventProcessors",
          "kind": "class-property",
          "line": 12,
          "name": "_eventProcessors",
          "signature": "protected _eventProcessors: EventProcessor[];",
        },
        {
          "docs": [
            "/** Extra */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._extra",
          "kind": "class-property",
          "line": 22,
          "name": "_extra",
          "signature": "protected _extra: Extras;",
        },
        {
          "docs": [
            "/** Fingerprint */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._fingerprint",
          "kind": "class-property",
          "line": 37,
          "name": "_fingerprint",
          "signature": "protected _fingerprint?: string[];",
        },
        {
          "docs": [
            "/** Severity */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._level",
          "kind": "class-property",
          "line": 39,
          "name": "_level",
          "signature": "protected _level?: Severity | SeverityLevel;",
        },
        {
          "docs": [
            "/** Flag if notifying is happening. */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._notifyingListeners",
          "kind": "class-property",
          "line": 8,
          "name": "_notifyingListeners",
          "signature": "protected _notifyingListeners: boolean;",
        },
        {
          "docs": [
            "/** Propagation Context for distributed tracing */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._propagationContext",
          "kind": "class-property",
          "line": 28,
          "name": "_propagationContext",
          "signature": "protected _propagationContext: PropagationContext;",
        },
        {
          "docs": [
            "/** Request Mode Session Status */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._requestSession",
          "kind": "class-property",
          "line": 49,
          "name": "_requestSession",
          "signature": "protected _requestSession?: RequestSession;",
        },
        {
          "docs": [
            "/** Callback for client to receive scope changes. */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._scopeListeners",
          "kind": "class-property",
          "line": 10,
          "name": "_scopeListeners",
          "signature": "protected _scopeListeners: ((scope: Scope) => void)[];",
        },
        {
          "docs": [
            "/**
     * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
     * sent to Sentry
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._sdkProcessingMetadata",
          "kind": "class-property",
          "line": 33,
          "name": "_sdkProcessingMetadata",
          "signature": "protected _sdkProcessingMetadata: { [key: string]: unknown };",
        },
        {
          "docs": [
            "/** Session */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._session",
          "kind": "class-property",
          "line": 47,
          "name": "_session",
          "signature": "protected _session?: Session;",
        },
        {
          "docs": [
            "/** Span */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._span",
          "kind": "class-property",
          "line": 45,
          "name": "_span",
          "signature": "protected _span?: Span;",
        },
        {
          "docs": [
            "/** Tags */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._tags",
          "kind": "class-property",
          "line": 18,
          "name": "_tags",
          "signature": "protected _tags: { [key: string]: Primitive };",
        },
        {
          "docs": [
            "/**
     * Transaction Name
     */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._transactionName",
          "kind": "class-property",
          "line": 43,
          "name": "_transactionName",
          "signature": "protected _transactionName?: string;",
        },
        {
          "docs": [
            "/** User */",
          ],
          "file": "/@sentry/core/types/scope.d.ts",
          "id": "class.Scope.property._user",
          "kind": "class-property",
          "line": 16,
          "name": "_user",
          "signature": "protected _user: User;",
        },
      ],
      "signature": "class Scope implements ScopeInterface {}",
    },
    {
      "docs": [
        "/**
 * @deprecated Please use a \`SeverityLevel\` string instead of the \`Severity\` enum. Acceptable values are 'fatal',
 * 'error', 'warning', 'log', 'info', and 'debug'.
 */",
      ],
      "file": "/@sentry/types/types/severity.d.ts",
      "id": "enum.Severity",
      "kind": "enum",
      "line": 5,
      "members": [
        {
          "docs": [
            "/** JSDoc */",
          ],
          "file": "/@sentry/types/types/severity.d.ts",
          "id": "enum.Severity.member.Fatal",
          "kind": "enum-member",
          "line": 7,
          "name": "Fatal",
          "signature": "Fatal = "fatal"",
        },
        {
          "docs": [
            "/** JSDoc */",
          ],
          "file": "/@sentry/types/types/severity.d.ts",
          "id": "enum.Severity.member.Error",
          "kind": "enum-member",
          "line": 9,
          "name": "Error",
          "signature": "Error = "error"",
        },
        {
          "docs": [
            "/** JSDoc */",
          ],
          "file": "/@sentry/types/types/severity.d.ts",
          "id": "enum.Severity.member.Warning",
          "kind": "enum-member",
          "line": 11,
          "name": "Warning",
          "signature": "Warning = "warning"",
        },
        {
          "docs": [
            "/** JSDoc */",
          ],
          "file": "/@sentry/types/types/severity.d.ts",
          "id": "enum.Severity.member.Log",
          "kind": "enum-member",
          "line": 13,
          "name": "Log",
          "signature": "Log = "log"",
        },
        {
          "docs": [
            "/** JSDoc */",
          ],
          "file": "/@sentry/types/types/severity.d.ts",
          "id": "enum.Severity.member.Info",
          "kind": "enum-member",
          "line": 15,
          "name": "Info",
          "signature": "Info = "info"",
        },
        {
          "docs": [
            "/** JSDoc */",
          ],
          "file": "/@sentry/types/types/severity.d.ts",
          "id": "enum.Severity.member.Debug",
          "kind": "enum-member",
          "line": 17,
          "name": "Debug",
          "signature": "Debug = "debug"",
        },
      ],
      "name": "Severity",
      "signature": "enum Severity {}",
    },
    {
      "docs": [
        "/**
 * Records a new breadcrumb which will be attached to future events.
 *
 * Breadcrumbs will be added to subsequent events to provide more context on
 * user's actions prior to an error or crash.
 *
 * @param breadcrumb The breadcrumb to record.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.addBreadcrumb",
      "kind": "function",
      "line": 44,
      "name": "addBreadcrumb",
      "signature": "addBreadcrumb: (
  breadcrumb: Breadcrumb,
  hint?: BreadcrumbHint,
) => ReturnType<Hub["addBreadcrumb"]>;",
    },
    {
      "docs": [
        "/**
 * Add an event processor to the current client.
 * This event processor will run for all events processed by this client.
 */",
      ],
      "file": "/@sentry/core/types/baseclient.d.ts",
      "id": "function.addEventProcessor",
      "kind": "function",
      "line": 288,
      "name": "addEventProcessor",
      "signature": "addEventProcessor: (callback: EventProcessor) => void;",
    },
    {
      "docs": [
        "/**
 * Add a EventProcessor to be kept globally.
 * @deprecated Use \`addEventProcessor\` instead. Global event processors will be removed in v8.
 */",
      ],
      "file": "/@sentry/core/types/eventProcessors.d.ts",
      "id": "function.addGlobalEventProcessor",
      "kind": "function",
      "line": 11,
      "name": "addGlobalEventProcessor",
      "signature": "addGlobalEventProcessor: (callback: EventProcessor) => void;",
    },
    {
      "docs": [
        "/** Add an integration to the current hub's client. */",
      ],
      "file": "/@sentry/core/types/integration.d.ts",
      "id": "function.addIntegration",
      "kind": "function",
      "line": 28,
      "name": "addIntegration",
      "signature": "addIntegration: (integration: Integration) => void;",
    },
    {
      "docs": [
        "/**
 * Adds tracing extensions to the global hub.
 */",
      ],
      "file": "/@sentry/core/types/tracing/hubextensions.d.ts",
      "id": "function.addTracingExtensions",
      "kind": "function",
      "line": 11,
      "name": "addTracingExtensions",
      "signature": "addTracingExtensions: () => void;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/integrations/breadcrumbs.d.ts",
      "id": "function.breadcrumbsIntegration",
      "kind": "function",
      "line": 13,
      "name": "breadcrumbsIntegration",
      "signature": "breadcrumbsIntegration: (
  options?: Partial<BreadcrumbsOptions> | undefined,
) => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/integrations/trycatch.d.ts",
      "id": "function.browserApiErrorsIntegration",
      "kind": "function",
      "line": 9,
      "name": "browserApiErrorsIntegration",
      "signature": "browserApiErrorsIntegration: (
  options?: Partial<TryCatchOptions> | undefined,
) => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/profiling/integration.d.ts",
      "id": "function.browserProfilingIntegration",
      "kind": "function",
      "line": 2,
      "name": "browserProfilingIntegration",
      "signature": "browserProfilingIntegration: () => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [
        "/**
 * The Browser Tracing integration automatically instruments browser pageload/navigation
 * actions as transactions, and captures requests, metrics and errors as spans.
 *
 * The integration can be configured with a variety of options, and can be extended to use
 * any routing library. This integration uses {@see IdleTransaction} to create transactions.
 *
 * We explicitly export the proper type here, as this has to be extended in some cases.
 */",
      ],
      "file": "/@sentry-internal/tracing/types/browser/browserTracingIntegration.d.ts",
      "id": "function.browserTracingIntegration",
      "kind": "function",
      "line": 98,
      "name": "browserTracingIntegration",
      "signature": "browserTracingIntegration: (_options?: Partial<BrowserTracingOptions>) => {
  name: string;
  setupOnce: () => void;
  afterAllSetup(
    client: Client<
      import("@sentry/types").ClientOptions<
        import("@sentry/types").BaseTransportOptions
      >
    >,
  ): void;
  options: {
    idleTimeout: number;
    finalTimeout: number;
    heartbeatInterval: number;
    instrumentPageLoad: boolean;
    instrumentNavigation: boolean;
    markBackgroundSpan: boolean;
    enableLongTask: boolean;
    _metricOptions?: Partial<{ _reportAllChanges: boolean }> | undefined;
    _experiments: Partial<{ enableInteractions: boolean }>;
    beforeStartSpan?: (options: StartSpanOptions) => StartSpanOptions;
    tracingOrigins: (string | RegExp)[];
    tracePropagationTargets: (string | RegExp)[];
    traceFetch: boolean;
    traceXHR: boolean;
    enableHTTPTimings: boolean;
    shouldCreateSpanForRequest?: (this: void, url: string) => boolean;
  };
};",
    },
    {
      "docs": [
        "/**
 * Captures a manually created event and sends it to Sentry.
 *
 * @param exception The event to send to Sentry.
 * @param hint Optional additional data to attach to the Sentry event.
 * @returns the id of the captured event.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.captureEvent",
      "kind": "function",
      "line": 28,
      "name": "captureEvent",
      "signature": "captureEvent: (event: Event, hint?: EventHint) => string;",
    },
    {
      "docs": [
        "/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception The exception to capture.
 * @param hint Optional additional data to attach to the Sentry event.
 * @returns the id of the captured Sentry event.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.captureException",
      "kind": "function",
      "line": 12,
      "name": "captureException",
      "signature": "captureException: (
  exception: any,
  hint?: ExclusiveEventHintOrCaptureContext,
) => string;",
    },
    {
      "docs": [
        "/**
 * Captures a message event and sends it to Sentry.
 *
 * @param exception The exception to capture.
 * @param captureContext Define the level of the message or pass in additional data to attach to the message.
 * @returns the id of the captured message.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.captureMessage",
      "kind": "function",
      "line": 20,
      "name": "captureMessage",
      "signature": "captureMessage: (
  message: string,
  captureContext?: CaptureContext | Severity | SeverityLevel,
) => string;",
    },
    {
      "docs": [
        "/**
 * Captures user feedback and sends it to Sentry.
 */",
      ],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "function.captureUserFeedback",
      "kind": "function",
      "line": 112,
      "name": "captureUserFeedback",
      "signature": "captureUserFeedback: (feedback: UserFeedback) => void;",
    },
    {
      "docs": [
        "/**
 * Call \`close()\` on the current client, if there is one. See {@link Client.close}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this
 * parameter will cause the client to wait until all events are sent before disabling itself.
 * @returns A promise which resolves to \`true\` if the queue successfully drains before the timeout, or \`false\` if it
 * doesn't (or if there's no client defined).
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.close",
      "kind": "function",
      "line": 181,
      "name": "close",
      "signature": "close: (timeout?: number) => Promise<boolean>;",
    },
    {
      "docs": [
        "/**
 * Callback to set context information onto the scope.
 * @param callback Callback function that receives Scope.
 *
 * @deprecated Use getCurrentScope() directly.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.configureScope",
      "kind": "function",
      "line": 35,
      "name": "configureScope",
      "signature": "configureScope: (
  callback: (scope: Scope) => void,
) => ReturnType<Hub["configureScope"]>;",
    },
    {
      "docs": [
        "/**
 * Creates an instance of a Sentry \`Transport\`
 *
 * @param options
 * @param makeRequest
 */",
      ],
      "file": "/@sentry/core/types/transports/base.d.ts",
      "id": "function.createTransport",
      "kind": "function",
      "line": 10,
      "name": "createTransport",
      "signature": "createTransport: (
  options: InternalBaseTransportOptions,
  makeRequest: TransportRequestExecutor,
  buffer?: PromiseBuffer<void | TransportMakeRequestResponse>,
) => Transport;",
    },
    {
      "docs": [
        "/**
 * Creates an envelope from a user feedback.
 */",
      ],
      "file": "/@sentry/browser/types/userfeedback.d.ts",
      "id": "function.createUserFeedbackEnvelope",
      "kind": "function",
      "line": 5,
      "name": "createUserFeedbackEnvelope",
      "signature": "createUserFeedbackEnvelope: (
  feedback: UserFeedback,
  {
    metadata,
    tunnel,
    dsn,
  }: {
    metadata: SdkMetadata | undefined;
    tunnel: string | undefined;
    dsn: DsnComponents | undefined;
  },
) => EventEnvelope;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/integrations/dedupe.d.ts",
      "id": "function.dedupeIntegration",
      "kind": "function",
      "line": 2,
      "name": "dedupeIntegration",
      "signature": "dedupeIntegration: () => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [
        "/**
 * Creates an {@link Event} from all inputs to \`captureException\` and non-primitive inputs to \`captureMessage\`.
 * @hidden
 */",
      ],
      "file": "/@sentry/browser/types/eventbuilder.d.ts",
      "id": "function.eventFromException",
      "kind": "function",
      "line": 23,
      "name": "eventFromException",
      "signature": "eventFromException: (
  stackParser: StackParser,
  exception: unknown,
  hint?: EventHint,
  attachStacktrace?: boolean,
) => PromiseLike<Event>;",
    },
    {
      "docs": [
        "/**
 * Builds and Event from a Message
 * @hidden
 */",
      ],
      "file": "/@sentry/browser/types/eventbuilder.d.ts",
      "id": "function.eventFromMessage",
      "kind": "function",
      "line": 28,
      "name": "eventFromMessage",
      "signature": "eventFromMessage: (
  stackParser: StackParser,
  message: ParameterizedString,
  level?: Severity | SeverityLevel,
  hint?: EventHint,
  attachStacktrace?: boolean,
) => PromiseLike<Event>;",
    },
    {
      "docs": [
        "/**
 * This function creates an exception from a JavaScript Error
 */",
      ],
      "file": "/@sentry/browser/types/eventbuilder.d.ts",
      "id": "function.exceptionFromError",
      "kind": "function",
      "line": 5,
      "name": "exceptionFromError",
      "signature": "exceptionFromError: (stackParser: StackParser, ex: Error) => Exception;",
    },
    {
      "docs": [],
      "file": "/@sentry-internal/feedback/types/integration.d.ts",
      "id": "function.feedbackIntegration",
      "kind": "function",
      "line": 4,
      "name": "feedbackIntegration",
      "signature": "feedbackIntegration: (options?: OptionalFeedbackConfiguration) => Feedback;",
    },
    {
      "docs": [
        "/**
 * Call \`flush()\` on the current client, if there is one. See {@link Client.flush}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause
 * the client to wait until all events are sent before resolving the promise.
 * @returns A promise which resolves to \`true\` if the queue successfully drains before the timeout, or \`false\` if it
 * doesn't (or if there's no client defined).
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.flush",
      "kind": "function",
      "line": 172,
      "name": "flush",
      "signature": "flush: (timeout?: number) => Promise<boolean>;",
    },
    {
      "docs": [
        "/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */",
      ],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "function.forceLoad",
      "kind": "function",
      "line": 91,
      "name": "forceLoad",
      "signature": "forceLoad: () => void;",
    },
    {
      "docs": [
        "/**
 * Patch toString calls to return proper name for wrapped functions.
 *
 * \`\`\`js
 * Sentry.init({
 *   integrations: [
 *     functionToStringIntegration(),
 *   ],
 * });
 * \`\`\`
 */",
      ],
      "file": "/@sentry/core/types/integrations/functiontostring.d.ts",
      "id": "function.functionToStringIntegration",
      "kind": "function",
      "line": 13,
      "name": "functionToStringIntegration",
      "signature": "functionToStringIntegration: () => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [
        "/**
 * Returns the currently active span.
 */",
      ],
      "file": "/@sentry/core/types/tracing/trace.d.ts",
      "id": "function.getActiveSpan",
      "kind": "function",
      "line": 60,
      "name": "getActiveSpan",
      "signature": "getActiveSpan: () => Span | undefined;",
    },
    {
      "docs": [
        "/**
 * Grabs active transaction off scope.
 *
 * @deprecated You should not rely on the transaction, but just use \`startSpan()\` APIs instead.
 */",
      ],
      "file": "/@sentry/core/types/tracing/utils.d.ts",
      "id": "function.getActiveTransaction",
      "kind": "function",
      "line": 9,
      "name": "getActiveTransaction",
      "signature": "getActiveTransaction: <T extends Transaction>(
  maybeHub?: Hub,
) => T | undefined;",
    },
    {
      "docs": [
        "/**
 * Get the currently active client.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.getClient",
      "kind": "function",
      "line": 192,
      "name": "getClient",
      "signature": "getClient: <C extends Client<ClientOptions<BaseTransportOptions>>>() =>
  | C
  | undefined;",
    },
    {
      "docs": [
        "/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 *
 * @deprecated Use the respective replacement method directly instead.
 */",
      ],
      "file": "/@sentry/core/types/hub.d.ts",
      "id": "function.getCurrentHub",
      "kind": "function",
      "line": 300,
      "name": "getCurrentHub",
      "signature": "getCurrentHub: () => Hub;",
    },
    {
      "docs": [
        "/**
 * Get the currently active scope.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.getCurrentScope",
      "kind": "function",
      "line": 200,
      "name": "getCurrentScope",
      "signature": "getCurrentScope: () => Scope;",
    },
    {
      "docs": [
        "/** Get the default integrations for the browser SDK. */",
      ],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "function.getDefaultIntegrations",
      "kind": "function",
      "line": 8,
      "name": "getDefaultIntegrations",
      "signature": "getDefaultIntegrations: (_options: Options) => Integration[];",
    },
    {
      "docs": [
        "/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */",
      ],
      "file": "/@sentry/core/types/hub.d.ts",
      "id": "function.getHubFromCarrier",
      "kind": "function",
      "line": 333,
      "name": "getHubFromCarrier",
      "signature": "getHubFromCarrier: (carrier: Carrier) => Hub;",
    },
    {
      "docs": [
        "/**
 * Converts a HTTP status code into a {@link SpanStatusType}.
 *
 * @param httpStatus The HTTP response status code.
 * @returns The span status or unknown_error.
 */",
      ],
      "file": "/@sentry/core/types/tracing/spanstatus.d.ts",
      "id": "function.getSpanStatusFromHttpCode",
      "kind": "function",
      "line": 83,
      "name": "getSpanStatusFromHttpCode",
      "signature": "getSpanStatusFromHttpCode: (httpStatus: number) => SpanStatusType;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/integrations/globalhandlers.d.ts",
      "id": "function.globalHandlersIntegration",
      "kind": "function",
      "line": 4,
      "name": "globalHandlersIntegration",
      "signature": "globalHandlersIntegration: (
  options?: Partial<GlobalHandlersIntegrations> | undefined,
) => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/integrations/httpcontext.d.ts",
      "id": "function.httpContextIntegration",
      "kind": "function",
      "line": 2,
      "name": "httpContextIntegration",
      "signature": "httpContextIntegration: () => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [],
      "file": "/@sentry/core/types/integrations/inboundfilters.d.ts",
      "id": "function.inboundFiltersIntegration",
      "kind": "function",
      "line": 12,
      "name": "inboundFiltersIntegration",
      "signature": "inboundFiltersIntegration: (
  options?: Partial<InboundFiltersOptions> | undefined,
) => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [
        "/**
 * The Sentry Browser SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible when
 * loading the web page. To set context information or send manual events, use
 * the provided methods.
 *
 * @example
 *
 * \`\`\`
 *
 * import { init } from '@sentry/browser';
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 * \`\`\`
 *
 * @example
 * \`\`\`
 *
 * import { configureScope } from '@sentry/browser';
 * configureScope((scope: Scope) => {
 *   scope.setExtra({ battery: 0.7 });
 *   scope.setTag({ user_mode: 'admin' });
 *   scope.setUser({ id: '4711' });
 * });
 * \`\`\`
 *
 * @example
 * \`\`\`
 *
 * import { addBreadcrumb } from '@sentry/browser';
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 * \`\`\`
 *
 * @example
 *
 * \`\`\`
 *
 * import * as Sentry from '@sentry/browser';
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 * \`\`\`
 *
 * @see {@link BrowserOptions} for documentation on configuration options.
 */",
      ],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "function.init",
      "kind": "function",
      "line": 66,
      "name": "init",
      "signature": "init: (options?: BrowserOptions) => void;",
    },
    {
      "docs": [
        "/** Registers span creators for xhr and fetch requests  */",
      ],
      "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
      "id": "function.instrumentOutgoingRequests",
      "kind": "function",
      "line": 49,
      "name": "instrumentOutgoingRequests",
      "signature": "instrumentOutgoingRequests: (
  _options?: Partial<RequestInstrumentationOptions>,
) => void;",
    },
    {
      "docs": [
        "/**
 * Returns true if Sentry has been properly initialized.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.isInitialized",
      "kind": "function",
      "line": 196,
      "name": "isInitialized",
      "signature": "isInitialized: () => boolean;",
    },
    {
      "docs": [
        "/**
 * This is the getter for lastEventId.
 *
 * @returns The last event id of a captured event.
 * @deprecated This function will be removed in the next major version of the Sentry SDK.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.lastEventId",
      "kind": "function",
      "line": 188,
      "name": "lastEventId",
      "signature": "lastEventId: () => string | undefined;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/integrations/linkederrors.d.ts",
      "id": "function.linkedErrorsIntegration",
      "kind": "function",
      "line": 6,
      "name": "linkedErrorsIntegration",
      "signature": "linkedErrorsIntegration: (
  options?: LinkedErrorsOptions | undefined,
) => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [
        "/**
 * Creates a transport that uses IndexedDb to store events when offline.
 */",
      ],
      "file": "/@sentry/browser/types/transports/offline.d.ts",
      "id": "function.makeBrowserOfflineTransport",
      "kind": "function",
      "line": 36,
      "name": "makeBrowserOfflineTransport",
      "signature": "makeBrowserOfflineTransport: <T extends InternalBaseTransportOptions>(
  createTransport: (options: T) => Transport,
) => (options: T & BrowserOfflineTransportOptions) => Transport;",
    },
    {
      "docs": [
        "/**
 * Creates a Transport that uses the Fetch API to send events to Sentry.
 */",
      ],
      "file": "/@sentry/browser/types/transports/fetch.d.ts",
      "id": "function.makeFetchTransport",
      "kind": "function",
      "line": 7,
      "name": "makeFetchTransport",
      "signature": "makeFetchTransport: (
  options: BrowserTransportOptions,
  nativeFetch?: FetchImpl,
) => Transport;",
    },
    {
      "docs": [
        "/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 *
 * @deprecated Use \`setCurrentClient()\` instead.
 */",
      ],
      "file": "/@sentry/core/types/hub.d.ts",
      "id": "function.makeMain",
      "kind": "function",
      "line": 290,
      "name": "makeMain",
      "signature": "makeMain: (hub: Hub) => Hub;",
    },
    {
      "docs": [
        "/**
 * Creates a transport that can send events to different DSNs depending on the envelope contents.
 */",
      ],
      "file": "/@sentry/core/types/transports/multiplexed.d.ts",
      "id": "function.makeMultiplexedTransport",
      "kind": "function",
      "line": 28,
      "name": "makeMultiplexedTransport",
      "signature": "makeMultiplexedTransport: <TO extends BaseTransportOptions>(
  createTransport: (options: TO) => Transport,
  matcher: Matcher,
) => (options: TO) => Transport;",
    },
    {
      "docs": [
        "/**
 * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.
 */",
      ],
      "file": "/@sentry/browser/types/transports/xhr.d.ts",
      "id": "function.makeXHRTransport",
      "kind": "function",
      "line": 6,
      "name": "makeXHRTransport",
      "signature": "makeXHRTransport: (options: BrowserTransportOptions) => Transport;",
    },
    {
      "docs": [],
      "file": "/@sentry/core/types/integrations/metadata.d.ts",
      "id": "function.moduleMetadataIntegration",
      "kind": "function",
      "line": 2,
      "name": "moduleMetadataIntegration",
      "signature": "moduleMetadataIntegration: () => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [
        "/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */",
      ],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "function.onLoad",
      "kind": "function",
      "line": 96,
      "name": "onLoad",
      "signature": "onLoad: (callback: () => void) => void;",
    },
    {
      "docs": [
        "/**
 * Safety wrapper for startTransaction for the unlikely case that transaction starts before tracing is imported -
 * if that happens we want to avoid throwing an error from profiling code.
 * see https://github.com/getsentry/sentry-javascript/issues/4731.
 *
 * @experimental
 */",
      ],
      "file": "/@sentry/browser/types/profiling/hubextensions.d.ts",
      "id": "function.onProfilingStartRouteTransaction",
      "kind": "function",
      "line": 9,
      "name": "onProfilingStartRouteTransaction",
      "signature": "onProfilingStartRouteTransaction: (
  transaction: Transaction | undefined,
) => Transaction | undefined;",
    },
    {
      "docs": [
        "/**
 * Tagged template function which returns paramaterized representation of the message
 * For example: parameterize\`This is a log statement with \${x} and \${y} params\`, would return:
 * "__sentry_template_string__": 'This is a log statement with %s and %s params',
 * "__sentry_template_values__": ['first', 'second']
 * @param strings An array of string values splitted between expressions
 * @param values Expressions extracted from template string
 * @returns String with template information in __sentry_template_string__ and __sentry_template_values__ properties
 */",
      ],
      "file": "/@sentry/core/types/utils/parameterize.d.ts",
      "id": "function.parameterize",
      "kind": "function",
      "line": 11,
      "name": "parameterize",
      "signature": "parameterize: (
  strings: TemplateStringsArray,
  ...values: string[]
) => ParameterizedString;",
    },
    {
      "docs": [
        "/**
 * Add this in addition to \`replayIntegration()\` to enable canvas recording.
 */",
      ],
      "file": "/@sentry-internal/replay-canvas/types/canvas.d.ts",
      "id": "function.replayCanvasIntegration",
      "kind": "function",
      "line": 30,
      "name": "replayCanvasIntegration",
      "signature": "replayCanvasIntegration: (
  options?: Partial<ReplayCanvasOptions> | undefined,
) => import("@sentry/types").IntegrationFnResult;",
    },
    {
      "docs": [],
      "file": "/@sentry/replay/types/integration.d.ts",
      "id": "function.replayIntegration",
      "kind": "function",
      "line": 3,
      "name": "replayIntegration",
      "signature": "replayIntegration: (options?: ReplayConfiguration) => Replay;",
    },
    {
      "docs": [
        "/**
 * Public API to send a Feedback item to Sentry
 */",
      ],
      "file": "/@sentry-internal/feedback/types/sendFeedback.d.ts",
      "id": "function.sendFeedback",
      "kind": "function",
      "line": 13,
      "name": "sendFeedback",
      "signature": "sendFeedback: (
  { name, email, message, source, url }: SendFeedbackParams,
  options?: SendFeedbackOptions,
) => ReturnType<typeof sendFeedbackRequest>;",
    },
    {
      "docs": [
        "/**
 * Sets context data with the given name.
 * @param name of the context
 * @param context Any kind of data. This data will be normalized.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.setContext",
      "kind": "function",
      "line": 50,
      "name": "setContext",
      "signature": "setContext: (
  name: string,
  context: { [key: string]: any },
) => ReturnType<Hub["setContext"]>;",
    },
    {
      "docs": [
        "/**
 * Make the given client the current client.
 */",
      ],
      "file": "/@sentry/core/types/sdk.d.ts",
      "id": "function.setCurrentClient",
      "kind": "function",
      "line": 15,
      "name": "setCurrentClient",
      "signature": "setCurrentClient: (client: Client) => void;",
    },
    {
      "docs": [
        "/**
 * Set key:value that will be sent as extra data with the event.
 * @param key String of extra
 * @param extra Any kind of data. This data will be normalized.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.setExtra",
      "kind": "function",
      "line": 63,
      "name": "setExtra",
      "signature": "setExtra: (key: string, extra: Extra) => ReturnType<Hub["setExtra"]>;",
    },
    {
      "docs": [
        "/**
 * Set an object that will be merged sent as extra data with the event.
 * @param extras Extras object to merge into current context.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.setExtras",
      "kind": "function",
      "line": 57,
      "name": "setExtras",
      "signature": "setExtras: (extras: Extras) => ReturnType<Hub["setExtras"]>;",
    },
    {
      "docs": [
        "/**
 * Sets the Http status attributes on the current span based on the http code.
 * Additionally, the span's status is updated, depending on the http code.
 */",
      ],
      "file": "/@sentry/core/types/tracing/spanstatus.d.ts",
      "id": "function.setHttpStatus",
      "kind": "function",
      "line": 98,
      "name": "setHttpStatus",
      "signature": "setHttpStatus: (span: Span, httpStatus: number) => void;",
    },
    {
      "docs": [
        "/**
 * Adds a measurement to the current active transaction.
 */",
      ],
      "file": "/@sentry/core/types/tracing/measurement.d.ts",
      "id": "function.setMeasurement",
      "kind": "function",
      "line": 5,
      "name": "setMeasurement",
      "signature": "setMeasurement: (
  name: string,
  value: number,
  unit: MeasurementUnit,
) => void;",
    },
    {
      "docs": [
        "/**
 * Set key:value that will be sent as tags data with the event.
 *
 * Can also be used to unset a tag, by passing \`undefined\`.
 *
 * @param key String key of tag
 * @param value Value of tag
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.setTag",
      "kind": "function",
      "line": 79,
      "name": "setTag",
      "signature": "setTag: (key: string, value: Primitive) => ReturnType<Hub["setTag"]>;",
    },
    {
      "docs": [
        "/**
 * Set an object that will be merged sent as tags data with the event.
 * @param tags Tags context object to merge into current context.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.setTags",
      "kind": "function",
      "line": 68,
      "name": "setTags",
      "signature": "setTags: (tags: { [key: string]: Primitive }) => ReturnType<Hub["setTags"]>;",
    },
    {
      "docs": [
        "/**
 * Updates user context information for future events.
 *
 * @param user User context object to be set in the current context. Pass \`null\` to unset the user.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.setUser",
      "kind": "function",
      "line": 85,
      "name": "setUser",
      "signature": "setUser: (user: User | null) => ReturnType<Hub["setUser"]>;",
    },
    {
      "docs": [
        "/**
 * Manually start a navigation span.
 * This will only do something if the BrowserTracing integration has been setup.
 */",
      ],
      "file": "/@sentry-internal/tracing/types/browser/browserTracingIntegration.d.ts",
      "id": "function.startBrowserTracingNavigationSpan",
      "kind": "function",
      "line": 137,
      "name": "startBrowserTracingNavigationSpan",
      "signature": "startBrowserTracingNavigationSpan: (
  client: Client,
  spanOptions: StartSpanOptions,
) => void;",
    },
    {
      "docs": [
        "/**
 * Manually start a page load span.
 * This will only do something if the BrowserTracing integration has been setup.
 */",
      ],
      "file": "/@sentry-internal/tracing/types/browser/browserTracingIntegration.d.ts",
      "id": "function.startBrowserTracingPageLoadSpan",
      "kind": "function",
      "line": 132,
      "name": "startBrowserTracingPageLoadSpan",
      "signature": "startBrowserTracingPageLoadSpan: (
  client: Client,
  spanOptions: StartSpanOptions,
) => void;",
    },
    {
      "docs": [
        "/**
 * Creates a span. This span is not set as active, so will not get automatic instrumentation spans
 * as children or be able to be accessed via \`Sentry.getSpan()\`.
 *
 * If you want to create a span that is set as active, use {@link startSpan}.
 *
 * Note that if you have not enabled tracing extensions via \`addTracingExtensions\`
 * or you didn't set \`tracesSampleRate\` or \`tracesSampler\`, this function will not generate spans
 * and the \`span\` returned from the callback will be undefined.
 */",
      ],
      "file": "/@sentry/core/types/tracing/trace.d.ts",
      "id": "function.startInactiveSpan",
      "kind": "function",
      "line": 56,
      "name": "startInactiveSpan",
      "signature": "startInactiveSpan: (context: StartSpanOptions) => Span | undefined;",
    },
    {
      "docs": [
        "/**
 * Wraps a function with a transaction/span and finishes the span after the function is done.
 * The created span is the active span and will be used as parent by other spans created inside the function
 * and can be accessed via \`Sentry.getSpan()\`, as long as the function is executed while the scope is active.
 *
 * If you want to create a span that is not set as active, use {@link startInactiveSpan}.
 *
 * Note that if you have not enabled tracing extensions via \`addTracingExtensions\`
 * or you didn't set \`tracesSampleRate\`, this function will not generate spans
 * and the \`span\` returned from the callback will be undefined.
 */",
      ],
      "file": "/@sentry/core/types/tracing/trace.d.ts",
      "id": "function.startSpan",
      "kind": "function",
      "line": 29,
      "name": "startSpan",
      "signature": "startSpan: <T>(
  context: StartSpanOptions,
  callback: (span: Span | undefined) => T,
) => T;",
    },
    {
      "docs": [
        "/**
 * Similar to \`Sentry.startSpan\`. Wraps a function with a transaction/span, but does not finish the span
 * after the function is done automatically. You'll have to call \`span.end()\` manually.
 *
 * The created span is the active span and will be used as parent by other spans created inside the function
 * and can be accessed via \`Sentry.getActiveSpan()\`, as long as the function is executed while the scope is active.
 *
 * Note that if you have not enabled tracing extensions via \`addTracingExtensions\`
 * or you didn't set \`tracesSampleRate\`, this function will not generate spans
 * and the \`span\` returned from the callback will be undefined.
 */",
      ],
      "file": "/@sentry/core/types/tracing/trace.d.ts",
      "id": "function.startSpanManual",
      "kind": "function",
      "line": 45,
      "name": "startSpanManual",
      "signature": "startSpanManual: <T>(
  context: StartSpanOptions,
  callback: (span: Span | undefined, finish: () => void) => T,
) => T;",
    },
    {
      "docs": [
        "/**
 * Starts a new \`Transaction\` and returns it. This is the entry point to manual tracing instrumentation.
 *
 * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a
 * new child span within the transaction or any span, call the respective \`.startChild()\` method.
 *
 * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.
 *
 * The transaction must be finished with a call to its \`.end()\` method, at which point the transaction with all its
 * finished child spans will be sent to Sentry.
 *
 * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call
 * \`startTransaction\` directly on the hub.
 *
 * @param context Properties of the new \`Transaction\`.
 * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent
 * default values). See {@link Options.tracesSampler}.
 *
 * @returns The transaction which was just started
 *
 * @deprecated Use \`startSpan()\`, \`startSpanManual()\` or \`startInactiveSpan()\` instead.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.startTransaction",
      "kind": "function",
      "line": 147,
      "name": "startTransaction",
      "signature": "startTransaction: (
  context: TransactionContext,
  customSamplingContext?: CustomSamplingContext,
) => ReturnType<Hub["startTransaction"]>;",
    },
    {
      "docs": [
        "/**
 * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no
 * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the
 * case, for example, in the browser).
 *
 * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.
 *
 * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in "normal"
 * applications directly because it comes with pitfalls. Use at your own risk!
 *
 * @param callback The callback in which the passed isolation scope is active. (Note: In environments without async
 * context strategy, the currently active isolation scope may change within execution of the callback.)
 * @returns The same value that \`callback\` returns.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.withIsolationScope",
      "kind": "function",
      "line": 116,
      "name": "withIsolationScope",
      "signature": "withIsolationScope: <T>(callback: (isolationScope: Scope) => T) => T;",
    },
    {
      "docs": [
        "/**
 * Creates a new scope with and executes the given operation within.
 * The scope is automatically removed once the operation
 * finishes or throws.
 *
 * This is essentially a convenience function for:
 *
 *     pushScope();
 *     callback();
 *     popScope();
 */",
        "/**
 * Set the given scope as the active scope in the callback.
 */",
      ],
      "file": "/@sentry/core/types/exports.d.ts",
      "id": "function.withScope",
      "kind": "function",
      "line": 97,
      "name": "withScope",
      "signature": "withScope: {
  <T>(callback: (scope: Scope) => T): T;
  <T>(scope: ScopeInterface, callback: (scope: Scope) => T): T;
};",
    },
    {
      "docs": [
        "/**
 * Wrap code within a try/catch block so the SDK is able to capture errors.
 *
 * @deprecated This function will be removed in v8.
 * It is not part of Sentry's official API and it's easily replaceable by using a try/catch block
 * and calling Sentry.captureException.
 *
 * @param fn A function to wrap.
 *
 * @returns The result of wrapped function call.
 */",
      ],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "function.wrap",
      "kind": "function",
      "line": 108,
      "name": "wrap",
      "signature": "wrap: (fn: (...args: any) => any) => any;",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/breadcrumb.d.ts",
      "getAccessors": [],
      "id": "interface.Breadcrumb",
      "indexSignatures": [],
      "kind": "interface",
      "line": 3,
      "methods": [],
      "name": "Breadcrumb",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.Breadcrumb.property.category",
          "kind": "interface-property",
          "line": 7,
          "name": "category",
          "signature": "category?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.Breadcrumb.property.data",
          "kind": "interface-property",
          "line": 9,
          "name": "data",
          "signature": "data?: {
  [key: string]: any;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.Breadcrumb.property.event_id",
          "kind": "interface-property",
          "line": 6,
          "name": "event_id",
          "signature": "event_id?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.Breadcrumb.property.level",
          "kind": "interface-property",
          "line": 5,
          "name": "level",
          "signature": "level?: Severity | SeverityLevel;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.Breadcrumb.property.message",
          "kind": "interface-property",
          "line": 8,
          "name": "message",
          "signature": "message?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.Breadcrumb.property.timestamp",
          "kind": "interface-property",
          "line": 12,
          "name": "timestamp",
          "signature": "timestamp?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.Breadcrumb.property.type",
          "kind": "interface-property",
          "line": 4,
          "name": "type",
          "signature": "type?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Breadcrumb {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/breadcrumb.d.ts",
      "getAccessors": [],
      "id": "interface.BreadcrumbHint",
      "indexSignatures": [
        {
          "docs": [],
          "file": "/@sentry/types/types/breadcrumb.d.ts",
          "id": "interface.BreadcrumbHint.index-signature",
          "kind": "interface-index-signature",
          "line": 16,
          "name": "index-signature",
          "signature": "[key: string]: any;",
        },
      ],
      "kind": "interface",
      "line": 15,
      "methods": [],
      "name": "BreadcrumbHint",
      "properties": [],
      "setAccessors": [],
      "signature": "interface BreadcrumbHint {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/event.d.ts",
      "getAccessors": [],
      "id": "interface.Event",
      "indexSignatures": [],
      "kind": "interface",
      "line": 19,
      "methods": [],
      "name": "Event",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.breadcrumbs",
          "kind": "interface-property",
          "line": 45,
          "name": "breadcrumbs",
          "signature": "breadcrumbs?: Breadcrumb[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.contexts",
          "kind": "interface-property",
          "line": 46,
          "name": "contexts",
          "signature": "contexts?: Contexts;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.debug_meta",
          "kind": "interface-property",
          "line": 55,
          "name": "debug_meta",
          "signature": "debug_meta?: DebugMeta;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.dist",
          "kind": "interface-property",
          "line": 33,
          "name": "dist",
          "signature": "dist?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.environment",
          "kind": "interface-property",
          "line": 34,
          "name": "environment",
          "signature": "environment?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.event_id",
          "kind": "interface-property",
          "line": 20,
          "name": "event_id",
          "signature": "event_id?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.exception",
          "kind": "interface-property",
          "line": 42,
          "name": "exception",
          "signature": "exception?: {
  values?: Exception[];
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.extra",
          "kind": "interface-property",
          "line": 50,
          "name": "extra",
          "signature": "extra?: Extras;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.fingerprint",
          "kind": "interface-property",
          "line": 41,
          "name": "fingerprint",
          "signature": "fingerprint?: string[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.level",
          "kind": "interface-property",
          "line": 28,
          "name": "level",
          "signature": "level?: Severity | SeverityLevel;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.logentry",
          "kind": "interface-property",
          "line": 22,
          "name": "logentry",
          "signature": "logentry?: {
  message?: string;
  params?: string[];
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.logger",
          "kind": "interface-property",
          "line": 30,
          "name": "logger",
          "signature": "logger?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.measurements",
          "kind": "interface-property",
          "line": 54,
          "name": "measurements",
          "signature": "measurements?: Measurements;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.message",
          "kind": "interface-property",
          "line": 21,
          "name": "message",
          "signature": "message?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.modules",
          "kind": "interface-property",
          "line": 38,
          "name": "modules",
          "signature": "modules?: {
  [key: string]: string;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.platform",
          "kind": "interface-property",
          "line": 29,
          "name": "platform",
          "signature": "platform?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.release",
          "kind": "interface-property",
          "line": 32,
          "name": "release",
          "signature": "release?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.request",
          "kind": "interface-property",
          "line": 36,
          "name": "request",
          "signature": "request?: Request;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.sdk",
          "kind": "interface-property",
          "line": 35,
          "name": "sdk",
          "signature": "sdk?: SdkInfo;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.sdkProcessingMetadata",
          "kind": "interface-property",
          "line": 56,
          "name": "sdkProcessingMetadata",
          "signature": "sdkProcessingMetadata?: {
  [key: string]: any;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.server_name",
          "kind": "interface-property",
          "line": 31,
          "name": "server_name",
          "signature": "server_name?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.spans",
          "kind": "interface-property",
          "line": 53,
          "name": "spans",
          "signature": "spans?: Span[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.start_timestamp",
          "kind": "interface-property",
          "line": 27,
          "name": "start_timestamp",
          "signature": "start_timestamp?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.tags",
          "kind": "interface-property",
          "line": 47,
          "name": "tags",
          "signature": "tags?: {
  [key: string]: Primitive;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.threads",
          "kind": "interface-property",
          "line": 62,
          "name": "threads",
          "signature": "threads?: {
  values: Thread[];
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.timestamp",
          "kind": "interface-property",
          "line": 26,
          "name": "timestamp",
          "signature": "timestamp?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.transaction",
          "kind": "interface-property",
          "line": 37,
          "name": "transaction",
          "signature": "transaction?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.transaction_info",
          "kind": "interface-property",
          "line": 59,
          "name": "transaction_info",
          "signature": "transaction_info?: {
  source: TransactionSource;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.type",
          "kind": "interface-property",
          "line": 52,
          "name": "type",
          "signature": "type?: EventType;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.Event.property.user",
          "kind": "interface-property",
          "line": 51,
          "name": "user",
          "signature": "user?: User;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Event {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/event.d.ts",
      "getAccessors": [],
      "id": "interface.EventHint",
      "indexSignatures": [],
      "kind": "interface",
      "line": 79,
      "methods": [],
      "name": "EventHint",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.attachments",
          "kind": "interface-property",
          "line": 85,
          "name": "attachments",
          "signature": "attachments?: Attachment[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.captureContext",
          "kind": "interface-property",
          "line": 81,
          "name": "captureContext",
          "signature": "captureContext?: CaptureContext;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.data",
          "kind": "interface-property",
          "line": 86,
          "name": "data",
          "signature": "data?: any;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.event_id",
          "kind": "interface-property",
          "line": 80,
          "name": "event_id",
          "signature": "event_id?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.integrations",
          "kind": "interface-property",
          "line": 87,
          "name": "integrations",
          "signature": "integrations?: string[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.mechanism",
          "kind": "interface-property",
          "line": 82,
          "name": "mechanism",
          "signature": "mechanism?: Partial<Mechanism>;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.originalException",
          "kind": "interface-property",
          "line": 84,
          "name": "originalException",
          "signature": "originalException?: unknown;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/event.d.ts",
          "id": "interface.EventHint.property.syntheticException",
          "kind": "interface-property",
          "line": 83,
          "name": "syntheticException",
          "signature": "syntheticException?: Error | null;",
        },
      ],
      "setAccessors": [],
      "signature": "interface EventHint {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/exception.d.ts",
      "getAccessors": [],
      "id": "interface.Exception",
      "indexSignatures": [],
      "kind": "interface",
      "line": 4,
      "methods": [],
      "name": "Exception",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/exception.d.ts",
          "id": "interface.Exception.property.mechanism",
          "kind": "interface-property",
          "line": 7,
          "name": "mechanism",
          "signature": "mechanism?: Mechanism;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/exception.d.ts",
          "id": "interface.Exception.property.module",
          "kind": "interface-property",
          "line": 8,
          "name": "module",
          "signature": "module?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/exception.d.ts",
          "id": "interface.Exception.property.stacktrace",
          "kind": "interface-property",
          "line": 10,
          "name": "stacktrace",
          "signature": "stacktrace?: Stacktrace;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/exception.d.ts",
          "id": "interface.Exception.property.thread_id",
          "kind": "interface-property",
          "line": 9,
          "name": "thread_id",
          "signature": "thread_id?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/exception.d.ts",
          "id": "interface.Exception.property.type",
          "kind": "interface-property",
          "line": 5,
          "name": "type",
          "signature": "type?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/exception.d.ts",
          "id": "interface.Exception.property.value",
          "kind": "interface-property",
          "line": 6,
          "name": "value",
          "signature": "value?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Exception {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@sentry/replay/types/types/replayFrame.d.ts",
      "getAccessors": [],
      "id": "interface.ReplayBreadcrumbFrameEvent",
      "indexSignatures": [],
      "kind": "interface",
      "line": 157,
      "methods": [],
      "name": "ReplayBreadcrumbFrameEvent",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/replay/types/types/replayFrame.d.ts",
          "id": "interface.ReplayBreadcrumbFrameEvent.property.data",
          "kind": "interface-property",
          "line": 158,
          "name": "data",
          "signature": "data: {
  tag: "breadcrumb";
  payload: ReplayBreadcrumbFrame;
  /**
   * This will indicate to backend to additionally log as a metric
   */
  metric?: boolean;
};",
        },
      ],
      "setAccessors": [],
      "signature": "interface ReplayBreadcrumbFrameEvent extends RecordingCustomEvent {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@sentry/replay/types/types/replayFrame.d.ts",
      "getAccessors": [],
      "id": "interface.ReplayOptionFrameEvent",
      "indexSignatures": [],
      "kind": "interface",
      "line": 173,
      "methods": [],
      "name": "ReplayOptionFrameEvent",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/replay/types/types/replayFrame.d.ts",
          "id": "interface.ReplayOptionFrameEvent.property.data",
          "kind": "interface-property",
          "line": 174,
          "name": "data",
          "signature": "data: {
  tag: "options";
  payload: ReplayOptionFrame;
};",
        },
      ],
      "setAccessors": [],
      "signature": "interface ReplayOptionFrameEvent extends RecordingCustomEvent {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@sentry/replay/types/types/replayFrame.d.ts",
      "getAccessors": [],
      "id": "interface.ReplaySpanFrameEvent",
      "indexSignatures": [],
      "kind": "interface",
      "line": 167,
      "methods": [],
      "name": "ReplaySpanFrameEvent",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/replay/types/types/replayFrame.d.ts",
          "id": "interface.ReplaySpanFrameEvent.property.data",
          "kind": "interface-property",
          "line": 168,
          "name": "data",
          "signature": "data: {
  tag: "performanceSpan";
  payload: ReplaySpanFrame;
};",
        },
      ],
      "setAccessors": [],
      "signature": "interface ReplaySpanFrameEvent extends RecordingCustomEvent {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/**
 * All properties the report dialog supports
 *
 * @deprecated This type will be removed in the next major version of the Sentry SDK. \`showReportDialog\` will still be around, however the \`eventId\` option will now be required.
 */",
      ],
      "file": "/@sentry/browser/types/helpers.d.ts",
      "getAccessors": [],
      "id": "interface.ReportDialogOptions",
      "indexSignatures": [
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.index-signature",
          "kind": "interface-index-signature",
          "line": 30,
          "name": "index-signature",
          "signature": "[key: string]: any;",
        },
      ],
      "kind": "interface",
      "line": 29,
      "methods": [
        {
          "docs": [
            "/** Callback after reportDialog closed */",
          ],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.method.onClose",
          "kind": "interface-method",
          "line": 52,
          "name": "onClose",
          "signature": "onClose: (this: void) => void;",
        },
        {
          "docs": [
            "/** Callback after reportDialog showed up */",
          ],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.method.onLoad",
          "kind": "interface-method",
          "line": 50,
          "name": "onLoad",
          "signature": "onLoad: (this: void) => void;",
        },
      ],
      "name": "ReportDialogOptions",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.dsn",
          "kind": "interface-property",
          "line": 32,
          "name": "dsn",
          "signature": "dsn?: DsnLike;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.errorFormEntry",
          "kind": "interface-property",
          "line": 47,
          "name": "errorFormEntry",
          "signature": "errorFormEntry?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.errorGeneric",
          "kind": "interface-property",
          "line": 46,
          "name": "errorGeneric",
          "signature": "errorGeneric?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.eventId",
          "kind": "interface-property",
          "line": 31,
          "name": "eventId",
          "signature": "eventId?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.labelClose",
          "kind": "interface-property",
          "line": 44,
          "name": "labelClose",
          "signature": "labelClose?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.labelComments",
          "kind": "interface-property",
          "line": 43,
          "name": "labelComments",
          "signature": "labelComments?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.labelEmail",
          "kind": "interface-property",
          "line": 42,
          "name": "labelEmail",
          "signature": "labelEmail?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.labelName",
          "kind": "interface-property",
          "line": 41,
          "name": "labelName",
          "signature": "labelName?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.labelSubmit",
          "kind": "interface-property",
          "line": 45,
          "name": "labelSubmit",
          "signature": "labelSubmit?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.lang",
          "kind": "interface-property",
          "line": 37,
          "name": "lang",
          "signature": "lang?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.subtitle",
          "kind": "interface-property",
          "line": 39,
          "name": "subtitle",
          "signature": "subtitle?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.subtitle2",
          "kind": "interface-property",
          "line": 40,
          "name": "subtitle2",
          "signature": "subtitle2?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.successMessage",
          "kind": "interface-property",
          "line": 48,
          "name": "successMessage",
          "signature": "successMessage?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.title",
          "kind": "interface-property",
          "line": 38,
          "name": "title",
          "signature": "title?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/browser/types/helpers.d.ts",
          "id": "interface.ReportDialogOptions.property.user",
          "kind": "interface-property",
          "line": 33,
          "name": "user",
          "signature": "user?: {
  email?: string;
  name?: string;
};",
        },
      ],
      "setAccessors": [],
      "signature": "interface ReportDialogOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** Request data included in an event as sent to Sentry */",
      ],
      "file": "/@sentry/types/types/request.d.ts",
      "getAccessors": [],
      "id": "interface.Request",
      "indexSignatures": [],
      "kind": "interface",
      "line": 2,
      "methods": [],
      "name": "Request",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/request.d.ts",
          "id": "interface.Request.property.cookies",
          "kind": "interface-property",
          "line": 7,
          "name": "cookies",
          "signature": "cookies?: {
  [key: string]: string;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/request.d.ts",
          "id": "interface.Request.property.data",
          "kind": "interface-property",
          "line": 5,
          "name": "data",
          "signature": "data?: any;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/request.d.ts",
          "id": "interface.Request.property.env",
          "kind": "interface-property",
          "line": 10,
          "name": "env",
          "signature": "env?: {
  [key: string]: string;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/request.d.ts",
          "id": "interface.Request.property.headers",
          "kind": "interface-property",
          "line": 13,
          "name": "headers",
          "signature": "headers?: {
  [key: string]: string;
};",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/request.d.ts",
          "id": "interface.Request.property.method",
          "kind": "interface-property",
          "line": 4,
          "name": "method",
          "signature": "method?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/request.d.ts",
          "id": "interface.Request.property.query_string",
          "kind": "interface-property",
          "line": 6,
          "name": "query_string",
          "signature": "query_string?: QueryParams;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/request.d.ts",
          "id": "interface.Request.property.url",
          "kind": "interface-property",
          "line": 3,
          "name": "url",
          "signature": "url?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Request {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** Options for Request Instrumentation */",
      ],
      "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
      "getAccessors": [],
      "id": "interface.RequestInstrumentationOptions",
      "indexSignatures": [],
      "kind": "interface",
      "line": 4,
      "methods": [
        {
          "docs": [
            "/**
     * This function will be called before creating a span for a request with the given url.
     * Return false if you don't want a span for the given url.
     *
     * Default: (url: string) => true
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
          "id": "interface.RequestInstrumentationOptions.method.shouldCreateSpanForRequest",
          "kind": "interface-method",
          "line": 45,
          "name": "shouldCreateSpanForRequest",
          "signature": "shouldCreateSpanForRequest: (this: void, url: string) => boolean;",
        },
      ],
      "name": "RequestInstrumentationOptions",
      "properties": [
        {
          "docs": [
            "/**
     * If true, Sentry will capture http timings and add them to the corresponding http spans.
     *
     * Default: true
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
          "id": "interface.RequestInstrumentationOptions.property.enableHTTPTimings",
          "kind": "interface-property",
          "line": 38,
          "name": "enableHTTPTimings",
          "signature": "enableHTTPTimings: boolean;",
        },
        {
          "docs": [
            "/**
     * Flag to disable patching all together for fetch requests.
     *
     * Default: true
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
          "id": "interface.RequestInstrumentationOptions.property.traceFetch",
          "kind": "interface-property",
          "line": 26,
          "name": "traceFetch",
          "signature": "traceFetch: boolean;",
        },
        {
          "docs": [
            "/**
     * List of strings and/or regexes used to determine which outgoing requests will have \`sentry-trace\` and \`baggage\`
     * headers attached.
     *
     * @deprecated Use the top-level \`tracePropagationTargets\` option in \`Sentry.init\` instead.
     * This option will be removed in v8.
     *
     * Default: ['localhost', /^\\//] @see {DEFAULT_TRACE_PROPAGATION_TARGETS}
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
          "id": "interface.RequestInstrumentationOptions.property.tracePropagationTargets",
          "kind": "interface-property",
          "line": 20,
          "name": "tracePropagationTargets",
          "signature": "tracePropagationTargets: Array<string | RegExp>;",
        },
        {
          "docs": [
            "/**
     * Flag to disable patching all together for xhr requests.
     *
     * Default: true
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
          "id": "interface.RequestInstrumentationOptions.property.traceXHR",
          "kind": "interface-property",
          "line": 32,
          "name": "traceXHR",
          "signature": "traceXHR: boolean;",
        },
        {
          "docs": [
            "/**
     * @deprecated Will be removed in v8.
     * Use \`shouldCreateSpanForRequest\` to control span creation and \`tracePropagationTargets\` to control
     * trace header attachment.
     */",
          ],
          "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
          "id": "interface.RequestInstrumentationOptions.property.tracingOrigins",
          "kind": "interface-property",
          "line": 10,
          "name": "tracingOrigins",
          "signature": "tracingOrigins: Array<string | RegExp>;",
        },
      ],
      "setAccessors": [],
      "signature": "interface RequestInstrumentationOptions {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@sentry/types/types/sdkinfo.d.ts",
      "getAccessors": [],
      "id": "interface.SdkInfo",
      "indexSignatures": [],
      "kind": "interface",
      "line": 2,
      "methods": [],
      "name": "SdkInfo",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/sdkinfo.d.ts",
          "id": "interface.SdkInfo.property.integrations",
          "kind": "interface-property",
          "line": 5,
          "name": "integrations",
          "signature": "integrations?: string[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/sdkinfo.d.ts",
          "id": "interface.SdkInfo.property.name",
          "kind": "interface-property",
          "line": 3,
          "name": "name",
          "signature": "name?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/sdkinfo.d.ts",
          "id": "interface.SdkInfo.property.packages",
          "kind": "interface-property",
          "line": 6,
          "name": "packages",
          "signature": "packages?: Package[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/sdkinfo.d.ts",
          "id": "interface.SdkInfo.property.version",
          "kind": "interface-property",
          "line": 4,
          "name": "version",
          "signature": "version?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface SdkInfo {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [],
      "file": "/@sentry/types/types/session.d.ts",
      "getAccessors": [],
      "id": "interface.Session",
      "indexSignatures": [],
      "kind": "interface",
      "line": 5,
      "methods": [
        {
          "docs": [
            "/**
     * Overrides default JSON serialization of the Session because
     * the Sentry servers expect a slightly different schema of a session
     * which is described in the interface @see SerializedSession in this file.
     *
     * @return a Sentry-backend conforming JSON object of the session
     */",
          ],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.method.toJSON",
          "kind": "interface-method",
          "line": 28,
          "name": "toJSON",
          "signature": "toJSON: () => SerializedSession;",
        },
      ],
      "name": "Session",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.abnormal_mechanism",
          "kind": "interface-property",
          "line": 20,
          "name": "abnormal_mechanism",
          "signature": "abnormal_mechanism?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.did",
          "kind": "interface-property",
          "line": 7,
          "name": "did",
          "signature": "did?: string | number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.duration",
          "kind": "interface-property",
          "line": 11,
          "name": "duration",
          "signature": "duration?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.environment",
          "kind": "interface-property",
          "line": 14,
          "name": "environment",
          "signature": "environment?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.errors",
          "kind": "interface-property",
          "line": 17,
          "name": "errors",
          "signature": "errors: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.ignoreDuration",
          "kind": "interface-property",
          "line": 19,
          "name": "ignoreDuration",
          "signature": "ignoreDuration: boolean;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.init",
          "kind": "interface-property",
          "line": 8,
          "name": "init",
          "signature": "init: boolean;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.ipAddress",
          "kind": "interface-property",
          "line": 16,
          "name": "ipAddress",
          "signature": "ipAddress?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.release",
          "kind": "interface-property",
          "line": 13,
          "name": "release",
          "signature": "release?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.sid",
          "kind": "interface-property",
          "line": 6,
          "name": "sid",
          "signature": "sid: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.started",
          "kind": "interface-property",
          "line": 10,
          "name": "started",
          "signature": "started: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.status",
          "kind": "interface-property",
          "line": 12,
          "name": "status",
          "signature": "status: SessionStatus;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.timestamp",
          "kind": "interface-property",
          "line": 9,
          "name": "timestamp",
          "signature": "timestamp: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.user",
          "kind": "interface-property",
          "line": 18,
          "name": "user",
          "signature": "user?: User | null;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/session.d.ts",
          "id": "interface.Session.property.userAgent",
          "kind": "interface-property",
          "line": 15,
          "name": "userAgent",
          "signature": "userAgent?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Session {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** Span holding trace_id, span_id */",
      ],
      "file": "/@sentry/types/types/span.d.ts",
      "getAccessors": [],
      "id": "interface.Span",
      "indexSignatures": [],
      "kind": "interface",
      "line": 142,
      "methods": [
        {
          "docs": [
            "/**
     * End the current span.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.end",
          "kind": "interface-method",
          "line": 246,
          "name": "end",
          "signature": "end: (endTimestamp?: SpanTimeInput) => void;",
        },
        {
          "docs": [
            "/**
     * Sets the finish timestamp on the current span.
     *
     * @param endTimestamp Takes an endTimestamp if the end should not be the time when you call this function.
     *
     * @deprecated Use \`.end()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.finish",
          "kind": "interface-method",
          "line": 242,
          "name": "finish",
          "signature": "finish: (endTimestamp?: number) => void;",
        },
        {
          "docs": [
            "/**
     * Convert the object to JSON for w. spans array info only.
     * @deprecated Use \`spanToTraceContext()\` util function instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.getTraceContext",
          "kind": "interface-method",
          "line": 328,
          "name": "getTraceContext",
          "signature": "getTraceContext: () => TraceContext;",
        },
        {
          "docs": [
            "/**
     * If this is span is actually recording data.
     * This will return false if tracing is disabled, this span was not sampled or if the span is already finished.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.isRecording",
          "kind": "interface-method",
          "line": 338,
          "name": "isRecording",
          "signature": "isRecording: () => boolean;",
        },
        {
          "docs": [
            "/**
     * Determines whether span was successful (HTTP200)
     *
     * @deprecated Use \`spanToJSON(span).status === 'ok'\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.isSuccess",
          "kind": "interface-method",
          "line": 308,
          "name": "isSuccess",
          "signature": "isSuccess: () => boolean;",
        },
        {
          "docs": [
            "/**
     * Set a single attribute on the span.
     * Set it to \`undefined\` to remove the attribute.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.setAttribute",
          "kind": "interface-method",
          "line": 268,
          "name": "setAttribute",
          "signature": "setAttribute: (key: string, value: SpanAttributeValue | undefined) => void;",
        },
        {
          "docs": [
            "/**
     * Set multiple attributes on the span.
     * Any attribute set to \`undefined\` will be removed.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.setAttributes",
          "kind": "interface-method",
          "line": 273,
          "name": "setAttributes",
          "signature": "setAttributes: (attributes: SpanAttributes) => void;",
        },
        {
          "docs": [
            "/**
     * Sets the data attribute on the current span
     * @param key Data key
     * @param value Data value
     * @deprecated Use \`setAttribute()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.setData",
          "kind": "interface-method",
          "line": 263,
          "name": "setData",
          "signature": "setData: (key: string, value: any) => this;",
        },
        {
          "docs": [
            "/**
     * Sets the status attribute on the current span based on the http code
     * @param httpStatus http code used to set the status
     * @deprecated Use top-level \`setHttpStatus()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.setHttpStatus",
          "kind": "interface-method",
          "line": 285,
          "name": "setHttpStatus",
          "signature": "setHttpStatus: (httpStatus: number) => this;",
        },
        {
          "docs": [
            "/**
     * Set the name of the span.
     *
     * @deprecated Use \`updateName()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.setName",
          "kind": "interface-method",
          "line": 291,
          "name": "setName",
          "signature": "setName: (name: string) => void;",
        },
        {
          "docs": [
            "/**
     * Sets the status attribute on the current span
     * See: {@sentry/tracing SpanStatus} for possible values
     * @param status http code used to set the status
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.setStatus",
          "kind": "interface-method",
          "line": 279,
          "name": "setStatus",
          "signature": "setStatus: (status: string) => this;",
        },
        {
          "docs": [
            "/**
     * Sets the tag attribute on the current span.
     *
     * Can also be used to unset a tag, by passing \`undefined\`.
     *
     * @param key Tag key
     * @param value Tag value
     * @deprecated Use \`setAttribute()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.setTag",
          "kind": "interface-method",
          "line": 256,
          "name": "setTag",
          "signature": "setTag: (key: string, value: Primitive) => this;",
        },
        {
          "docs": [
            "/**
     * Get context data for this span.
     * This includes the spanId & the traceId.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.spanContext",
          "kind": "interface-method",
          "line": 234,
          "name": "spanContext",
          "signature": "spanContext: () => SpanContextData;",
        },
        {
          "docs": [
            "/**
     * Creates a new \`Span\` while setting the current \`Span.id\` as \`parentSpanId\`.
     * Also the \`sampled\` decision will be inherited.
     *
     * @deprecated Use \`startSpan()\`, \`startSpanManual()\` or \`startInactiveSpan()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.startChild",
          "kind": "interface-method",
          "line": 302,
          "name": "startChild",
          "signature": "startChild: (
  spanContext?: Pick<
    SpanContext,
    Exclude<keyof SpanContext, "sampled" | "traceId" | "parentSpanId">
  >,
) => Span;",
        },
        {
          "docs": [
            "/**
     * Returns the current span properties as a \`SpanContext\`.
     * @deprecated Use \`toJSON()\` or access the fields directly instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.toContext",
          "kind": "interface-method",
          "line": 318,
          "name": "toContext",
          "signature": "toContext: () => SpanContext;",
        },
        {
          "docs": [
            "/**
     * Convert the object to JSON.
     * @deprecated Use \`spanToJSON(span)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.toJSON",
          "kind": "interface-method",
          "line": 333,
          "name": "toJSON",
          "signature": "toJSON: () => SpanJSON;",
        },
        {
          "docs": [
            "/**
     * Return a traceparent compatible header string.
     * @deprecated Use \`spanToTraceHeader()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.toTraceparent",
          "kind": "interface-method",
          "line": 313,
          "name": "toTraceparent",
          "signature": "toTraceparent: () => string;",
        },
        {
          "docs": [
            "/**
     * Update the name of the span.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.updateName",
          "kind": "interface-method",
          "line": 295,
          "name": "updateName",
          "signature": "updateName: (name: string) => this;",
        },
        {
          "docs": [
            "/**
     * Updates the current span with a new \`SpanContext\`.
     * @deprecated Update the fields directly instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.method.updateWithContext",
          "kind": "interface-method",
          "line": 323,
          "name": "updateWithContext",
          "signature": "updateWithContext: (spanContext: SpanContext) => this;",
        },
      ],
      "name": "Span",
      "properties": [
        {
          "docs": [
            "/**
     * Attributes for the span.
     * @deprecated Use \`getSpanAttributes(span)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.attributes",
          "kind": "interface-property",
          "line": 204,
          "name": "attributes",
          "signature": "attributes: SpanAttributes;",
        },
        {
          "docs": [
            "/**
     * Data for the span.
     * @deprecated Use \`getSpanAttributes(span)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.data",
          "kind": "interface-property",
          "line": 197,
          "name": "data",
          "signature": "data: {
  [key: string]: any;
};",
        },
        {
          "docs": [
            "/**
     * Timestamp in seconds (epoch time) indicating when the span ended.
     * @deprecated Use \`spanToJSON()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.endTimestamp",
          "kind": "interface-property",
          "line": 185,
          "name": "endTimestamp",
          "signature": "endTimestamp?: number;",
        },
        {
          "docs": [
            "/**
     * The instrumenter that created this span.
     *
     * @deprecated this field will be removed.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.instrumenter",
          "kind": "interface-property",
          "line": 215,
          "name": "instrumenter",
          "signature": "instrumenter: Instrumenter;",
        },
        {
          "docs": [
            "/**
     * Human-readable identifier for the span. Identical to span.description.
     * @deprecated Use \`spanToJSON(span).description\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.name",
          "kind": "interface-property",
          "line": 147,
          "name": "name",
          "signature": "name: string;",
        },
        {
          "docs": [
            "/**
     * Operation of the Span.
     *
     * @deprecated Use \`startSpan()\` functions to set, \`span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'op')
     * to update and \`spanToJSON().op\` to read the op instead
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.op",
          "kind": "interface-property",
          "line": 154,
          "name": "op",
          "signature": "op?: string;",
        },
        {
          "docs": [
            "/**
     * The origin of the span, giving context about what created the span.
     *
     * @deprecated Use \`startSpan\` function to set and \`spanToJSON(span).origin\` to read the origin instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.origin",
          "kind": "interface-property",
          "line": 229,
          "name": "origin",
          "signature": "origin?: SpanOrigin;",
        },
        {
          "docs": [
            "/**
     * Parent Span ID
     *
     * @deprecated Use \`spanToJSON(span).parent_span_id\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.parentSpanId",
          "kind": "interface-property",
          "line": 165,
          "name": "parentSpanId",
          "signature": "parentSpanId?: string;",
        },
        {
          "docs": [
            "/**
     * Was this span chosen to be sent as part of the sample?
     * @deprecated Use \`isRecording()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.sampled",
          "kind": "interface-property",
          "line": 175,
          "name": "sampled",
          "signature": "sampled?: boolean;",
        },
        {
          "docs": [
            "/**
     * The ID of the span.
     * @deprecated Use \`spanContext().spanId\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.spanId",
          "kind": "interface-property",
          "line": 159,
          "name": "spanId",
          "signature": "spanId: string;",
        },
        {
          "docs": [
            "/**
     * Timestamp in seconds (epoch time) indicating when the span started.
     * @deprecated Use \`spanToJSON()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.startTimestamp",
          "kind": "interface-property",
          "line": 180,
          "name": "startTimestamp",
          "signature": "startTimestamp: number;",
        },
        {
          "docs": [
            "/**
     * Completion status of the Span.
     *
     * See: {@sentry/tracing SpanStatus} for possible values
     *
     * @deprecated Use \`.setStatus\` to set or update and \`spanToJSON()\` to read the status.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.status",
          "kind": "interface-property",
          "line": 223,
          "name": "status",
          "signature": "status?: string;",
        },
        {
          "docs": [
            "/**
     * Tags for the span.
     * @deprecated Use \`getSpanAttributes(span)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.tags",
          "kind": "interface-property",
          "line": 190,
          "name": "tags",
          "signature": "tags: {
  [key: string]: Primitive;
};",
        },
        {
          "docs": [
            "/**
     * The ID of the trace.
     * @deprecated Use \`spanContext().traceId\` instead.
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.traceId",
          "kind": "interface-property",
          "line": 170,
          "name": "traceId",
          "signature": "traceId: string;",
        },
        {
          "docs": [
            "/**
     * The transaction containing this span
     * @deprecated Use top level \`Sentry.getRootSpan()\` instead
     */",
          ],
          "file": "/@sentry/types/types/span.d.ts",
          "id": "interface.Span.property.transaction",
          "kind": "interface-property",
          "line": 209,
          "name": "transaction",
          "signature": "transaction?: Transaction;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Span extends Omit<SpanContext, "op" | "status" | "origin"> {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/stackframe.d.ts",
      "getAccessors": [],
      "id": "interface.StackFrame",
      "indexSignatures": [],
      "kind": "interface",
      "line": 2,
      "methods": [],
      "name": "StackFrame",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.abs_path",
          "kind": "interface-property",
          "line": 9,
          "name": "abs_path",
          "signature": "abs_path?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.addr_mode",
          "kind": "interface-property",
          "line": 15,
          "name": "addr_mode",
          "signature": "addr_mode?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.colno",
          "kind": "interface-property",
          "line": 8,
          "name": "colno",
          "signature": "colno?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.context_line",
          "kind": "interface-property",
          "line": 10,
          "name": "context_line",
          "signature": "context_line?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.debug_id",
          "kind": "interface-property",
          "line": 19,
          "name": "debug_id",
          "signature": "debug_id?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.filename",
          "kind": "interface-property",
          "line": 3,
          "name": "filename",
          "signature": "filename?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.function",
          "kind": "interface-property",
          "line": 4,
          "name": "function",
          "signature": "function?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.in_app",
          "kind": "interface-property",
          "line": 13,
          "name": "in_app",
          "signature": "in_app?: boolean;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.instruction_addr",
          "kind": "interface-property",
          "line": 14,
          "name": "instruction_addr",
          "signature": "instruction_addr?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.lineno",
          "kind": "interface-property",
          "line": 7,
          "name": "lineno",
          "signature": "lineno?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.module",
          "kind": "interface-property",
          "line": 5,
          "name": "module",
          "signature": "module?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.module_metadata",
          "kind": "interface-property",
          "line": 20,
          "name": "module_metadata",
          "signature": "module_metadata?: any;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.platform",
          "kind": "interface-property",
          "line": 6,
          "name": "platform",
          "signature": "platform?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.post_context",
          "kind": "interface-property",
          "line": 12,
          "name": "post_context",
          "signature": "post_context?: string[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.pre_context",
          "kind": "interface-property",
          "line": 11,
          "name": "pre_context",
          "signature": "pre_context?: string[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stackframe.d.ts",
          "id": "interface.StackFrame.property.vars",
          "kind": "interface-property",
          "line": 16,
          "name": "vars",
          "signature": "vars?: {
  [key: string]: any;
};",
        },
      ],
      "setAccessors": [],
      "signature": "interface StackFrame {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/stacktrace.d.ts",
      "getAccessors": [],
      "id": "interface.Stacktrace",
      "indexSignatures": [],
      "kind": "interface",
      "line": 3,
      "methods": [],
      "name": "Stacktrace",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/stacktrace.d.ts",
          "id": "interface.Stacktrace.property.frames",
          "kind": "interface-property",
          "line": 4,
          "name": "frames",
          "signature": "frames?: StackFrame[];",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/stacktrace.d.ts",
          "id": "interface.Stacktrace.property.frames_omitted",
          "kind": "interface-property",
          "line": 5,
          "name": "frames_omitted",
          "signature": "frames_omitted?: [number, number];",
        },
      ],
      "setAccessors": [],
      "signature": "interface Stacktrace {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/** JSDoc */",
      ],
      "file": "/@sentry/types/types/thread.d.ts",
      "getAccessors": [],
      "id": "interface.Thread",
      "indexSignatures": [],
      "kind": "interface",
      "line": 3,
      "methods": [],
      "name": "Thread",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/thread.d.ts",
          "id": "interface.Thread.property.crashed",
          "kind": "interface-property",
          "line": 7,
          "name": "crashed",
          "signature": "crashed?: boolean;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/thread.d.ts",
          "id": "interface.Thread.property.current",
          "kind": "interface-property",
          "line": 8,
          "name": "current",
          "signature": "current?: boolean;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/thread.d.ts",
          "id": "interface.Thread.property.id",
          "kind": "interface-property",
          "line": 4,
          "name": "id",
          "signature": "id?: number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/thread.d.ts",
          "id": "interface.Thread.property.name",
          "kind": "interface-property",
          "line": 5,
          "name": "name",
          "signature": "name?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/thread.d.ts",
          "id": "interface.Thread.property.stacktrace",
          "kind": "interface-property",
          "line": 6,
          "name": "stacktrace",
          "signature": "stacktrace?: Stacktrace;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Thread {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/**
 * Transaction "Class", inherits Span only has \`setName\`
 */",
      ],
      "file": "/@sentry/types/types/transaction.d.ts",
      "getAccessors": [],
      "id": "interface.Transaction",
      "indexSignatures": [],
      "kind": "interface",
      "line": 40,
      "methods": [
        {
          "docs": [
            "/**
     * Return the current Dynamic Sampling Context of this transaction
     *
     * @deprecated Use top-level \`getDynamicSamplingContextFromSpan\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.method.getDynamicSamplingContext",
          "kind": "interface-method",
          "line": 136,
          "name": "getDynamicSamplingContext",
          "signature": "getDynamicSamplingContext: () => Partial<DynamicSamplingContext>;",
        },
        {
          "docs": [
            "/**
     * Set the context of a transaction event.
     * @deprecated Use either \`.setAttribute()\`, or set the context on the scope before creating the transaction.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.method.setContext",
          "kind": "interface-method",
          "line": 105,
          "name": "setContext",
          "signature": "setContext: (key: string, context: Context) => void;",
        },
        {
          "docs": [
            "/**
     * Set observed measurement for this transaction.
     *
     * @param name Name of the measurement
     * @param value Value of the measurement
     * @param unit Unit of the measurement. (Defaults to an empty string)
     *
     * @deprecated Use top-level \`setMeasurement()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.method.setMeasurement",
          "kind": "interface-method",
          "line": 115,
          "name": "setMeasurement",
          "signature": "setMeasurement: (name: string, value: number, unit: MeasurementUnit) => void;",
        },
        {
          "docs": [
            "/**
     * Set metadata for this transaction.
     * @deprecated Use attributes or store data on the scope instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.method.setMetadata",
          "kind": "interface-method",
          "line": 130,
          "name": "setMetadata",
          "signature": "setMetadata: (newMetadata: Partial<TransactionMetadata>) => void;",
        },
        {
          "docs": [
            "/**
     * Set the name of the transaction
     *
     * @deprecated Use \`.updateName()\` and \`.setAttribute()\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.method.setName",
          "kind": "interface-method",
          "line": 100,
          "name": "setName",
          "signature": "setName: (name: string, source?: TransactionMetadata["source"]) => void;",
        },
        {
          "docs": [
            "/**
     * Returns the current transaction properties as a \`TransactionContext\`.
     * @deprecated Use \`toJSON()\` or access the fields directly instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.method.toContext",
          "kind": "interface-method",
          "line": 120,
          "name": "toContext",
          "signature": "toContext: () => TransactionContext;",
        },
        {
          "docs": [
            "/**
     * Updates the current transaction with a new \`TransactionContext\`.
     * @deprecated Update the fields directly instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.method.updateWithContext",
          "kind": "interface-method",
          "line": 125,
          "name": "updateWithContext",
          "signature": "updateWithContext: (transactionContext: TransactionContext) => this;",
        },
      ],
      "name": "Transaction",
      "properties": [
        {
          "docs": [
            "/**
     * Attributes for the transaction.
     * @deprecated Use \`getSpanAttributes(transaction)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.attributes",
          "kind": "interface-property",
          "line": 83,
          "name": "attributes",
          "signature": "attributes: SpanAttributes;",
        },
        {
          "docs": [
            "/**
     * Data for the transaction.
     * @deprecated Use \`getSpanAttributes(transaction)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.data",
          "kind": "interface-property",
          "line": 76,
          "name": "data",
          "signature": "data: {
  [key: string]: any;
};",
        },
        {
          "docs": [
            "/**
     * The instrumenter that created this transaction.
     *
     * @deprecated This field will be removed in v8.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.instrumenter",
          "kind": "interface-property",
          "line": 94,
          "name": "instrumenter",
          "signature": "instrumenter: Instrumenter;",
        },
        {
          "docs": [
            "/**
     * Metadata about the transaction.
     * @deprecated Use attributes or store data on the scope instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.metadata",
          "kind": "interface-property",
          "line": 88,
          "name": "metadata",
          "signature": "metadata: TransactionMetadata;",
        },
        {
          "docs": [
            "/**
     * Human-readable identifier for the transaction.
     * @deprecated Use \`spanToJSON(span).description\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.name",
          "kind": "interface-property",
          "line": 45,
          "name": "name",
          "signature": "name: string;",
        },
        {
          "docs": [
            "/**
     * Was this transaction chosen to be sent as part of the sample?
     * @deprecated Use \`spanIsSampled(transaction)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.sampled",
          "kind": "interface-property",
          "line": 60,
          "name": "sampled",
          "signature": "sampled?: boolean;",
        },
        {
          "docs": [
            "/**
     * The ID of the transaction.
     * @deprecated Use \`spanContext().spanId\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.spanId",
          "kind": "interface-property",
          "line": 50,
          "name": "spanId",
          "signature": "spanId: string;",
        },
        {
          "docs": [
            "/**
     * @inheritDoc
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.startTimestamp",
          "kind": "interface-property",
          "line": 64,
          "name": "startTimestamp",
          "signature": "startTimestamp: number;",
        },
        {
          "docs": [
            "/**
     * Tags for the transaction.
     * @deprecated Use \`getSpanAttributes(transaction)\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.tags",
          "kind": "interface-property",
          "line": 69,
          "name": "tags",
          "signature": "tags: {
  [key: string]: Primitive;
};",
        },
        {
          "docs": [
            "/**
     * The ID of the trace.
     * @deprecated Use \`spanContext().traceId\` instead.
     */",
          ],
          "file": "/@sentry/types/types/transaction.d.ts",
          "id": "interface.Transaction.property.traceId",
          "kind": "interface-property",
          "line": 55,
          "name": "traceId",
          "signature": "traceId: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface Transaction
  extends TransactionContext,
    Omit<Span, "setName" | "name"> {}",
    },
    {
      "callSignatures": [],
      "constructSignatures": [],
      "docs": [
        "/**
 * An interface describing a user of an application or a handled request.
 */",
      ],
      "file": "/@sentry/types/types/user.d.ts",
      "getAccessors": [],
      "id": "interface.User",
      "indexSignatures": [
        {
          "docs": [],
          "file": "/@sentry/types/types/user.d.ts",
          "id": "interface.User.index-signature",
          "kind": "interface-index-signature",
          "line": 5,
          "name": "index-signature",
          "signature": "[key: string]: any;",
        },
      ],
      "kind": "interface",
      "line": 4,
      "methods": [],
      "name": "User",
      "properties": [
        {
          "docs": [],
          "file": "/@sentry/types/types/user.d.ts",
          "id": "interface.User.property.email",
          "kind": "interface-property",
          "line": 8,
          "name": "email",
          "signature": "email?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/user.d.ts",
          "id": "interface.User.property.id",
          "kind": "interface-property",
          "line": 6,
          "name": "id",
          "signature": "id?: string | number;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/user.d.ts",
          "id": "interface.User.property.ip_address",
          "kind": "interface-property",
          "line": 7,
          "name": "ip_address",
          "signature": "ip_address?: string;",
        },
        {
          "docs": [
            "/**
     * @deprecated Functonality for segment has been removed. Use a custom tag or context instead to capture this information.
     */",
          ],
          "file": "/@sentry/types/types/user.d.ts",
          "id": "interface.User.property.segment",
          "kind": "interface-property",
          "line": 13,
          "name": "segment",
          "signature": "segment?: string;",
        },
        {
          "docs": [],
          "file": "/@sentry/types/types/user.d.ts",
          "id": "interface.User.property.username",
          "kind": "interface-property",
          "line": 9,
          "name": "username",
          "signature": "username?: string;",
        },
      ],
      "setAccessors": [],
      "signature": "interface User {}",
    },
    {
      "docs": [
        "/**
 * Configuration options for the Sentry Browser SDK.
 * @see @sentry/types Options for more information.
 */",
      ],
      "file": "/@sentry/browser/types/client.d.ts",
      "id": "type.BrowserOptions",
      "kind": "type",
      "line": 9,
      "name": "BrowserOptions",
      "signature": "type BrowserOptions = Options<BrowserTransportOptions> &
  BrowserClientReplayOptions &
  BrowserClientProfilingOptions;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/profiling/integration.d.ts",
      "id": "type.BrowserProfilingIntegration",
      "kind": "type",
      "line": 16,
      "name": "BrowserProfilingIntegration",
      "signature": "type BrowserProfilingIntegration = typeof BrowserProfilingIntegration;",
    },
    {
      "docs": [],
      "file": "/@sentry/core/types/integrations/functiontostring.d.ts",
      "id": "type.FunctionToString",
      "kind": "type",
      "line": 22,
      "name": "FunctionToString",
      "signature": "type FunctionToString = typeof FunctionToString;",
    },
    {
      "docs": [],
      "file": "/@sentry/replay/types/types/replayFrame.d.ts",
      "id": "type.ReplayBreadcrumbFrame",
      "kind": "type",
      "line": 111,
      "name": "ReplayBreadcrumbFrame",
      "signature": "type ReplayBreadcrumbFrame =
  | ReplayConsoleFrame
  | ReplayClickFrame
  | ReplayInputFrame
  | ReplayKeyboardEventFrame
  | ReplayBlurFrame
  | ReplayFocusFrame
  | ReplaySlowClickFrame
  | ReplayMultiClickFrame
  | ReplayMutationFrame
  | ReplayFeedbackFrame
  | ReplayBaseBreadcrumbFrame;",
    },
    {
      "docs": [],
      "file": "/@sentry/replay/types/types/rrweb.d.ts",
      "id": "type.ReplayEventType",
      "kind": "type",
      "line": 10,
      "name": "ReplayEventType",
      "signature": "type ReplayEventType =
  | typeof ReplayEventTypeDomContentLoaded
  | typeof ReplayEventTypeLoad
  | typeof ReplayEventTypeFullSnapshot
  | typeof ReplayEventTypeIncrementalSnapshot
  | typeof ReplayEventTypeMeta
  | typeof ReplayEventTypeCustom
  | typeof ReplayEventTypePlugin;",
    },
    {
      "docs": [
        "/**
 * This is a partial copy of rrweb's eventWithTime type which only contains the properties
 * we specifcally need in the SDK.
 */",
      ],
      "file": "/@sentry/replay/types/types/rrweb.d.ts",
      "id": "type.ReplayEventWithTime",
      "kind": "type",
      "line": 15,
      "name": "ReplayEventWithTime",
      "signature": "type ReplayEventWithTime = {
  type: ReplayEventType;
  data: unknown;
  timestamp: number;
  delay?: number;
};",
    },
    {
      "docs": [],
      "file": "/@sentry/replay/types/types/replayFrame.d.ts",
      "id": "type.ReplayFrame",
      "kind": "type",
      "line": 148,
      "name": "ReplayFrame",
      "signature": "type ReplayFrame = ReplayBreadcrumbFrame | ReplaySpanFrame;",
    },
    {
      "docs": [],
      "file": "/@sentry/replay/types/types/replayFrame.d.ts",
      "id": "type.ReplayFrameEvent",
      "kind": "type",
      "line": 179,
      "name": "ReplayFrameEvent",
      "signature": "type ReplayFrameEvent =
  | ReplayBreadcrumbFrameEvent
  | ReplaySpanFrameEvent
  | ReplayOptionFrameEvent;",
    },
    {
      "docs": [],
      "file": "/@sentry/replay/types/types/replayFrame.d.ts",
      "id": "type.ReplaySpanFrame",
      "kind": "type",
      "line": 147,
      "name": "ReplaySpanFrame",
      "signature": "type ReplaySpanFrame =
  | ReplayBaseSpanFrame
  | ReplayHistoryFrame
  | ReplayRequestFrame
  | ReplayLargestContentfulPaintFrame
  | ReplayMemoryFrame
  | ReplayNavigationFrame
  | ReplayPaintFrame
  | ReplayResourceFrame;",
    },
    {
      "docs": [],
      "file": "/@sentry/types/types/severity.d.ts",
      "id": "type.SeverityLevel",
      "kind": "type",
      "line": 19,
      "name": "SeverityLevel",
      "signature": "type SeverityLevel = "fatal" | "error" | "warning" | "log" | "info" | "debug";",
    },
    {
      "docs": [],
      "file": "/@sentry/core/types/tracing/spanstatus.d.ts",
      "id": "type.SpanStatusType",
      "kind": "type",
      "line": 42,
      "name": "SpanStatusType",
      "signature": "type SpanStatusType =
  /** The operation completed successfully. */
  | "ok"
  /** Deadline expired before operation could complete. */
  | "deadline_exceeded"
  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */
  | "unauthenticated"
  /** 403 Forbidden */
  | "permission_denied"
  /** 404 Not Found. Some requested entity (file or directory) was not found. */
  | "not_found"
  /** 429 Too Many Requests */
  | "resource_exhausted"
  /** Client specified an invalid argument. 4xx. */
  | "invalid_argument"
  /** 501 Not Implemented */
  | "unimplemented"
  /** 503 Service Unavailable */
  | "unavailable"
  /** Other/generic 5xx. */
  | "internal_error"
  /** Unknown. Any non-standard HTTP status code. */
  | "unknown_error"
  /** The operation was cancelled (typically by the user). */
  | "cancelled"
  /** Already exists (409) */
  | "already_exists"
  /** Operation was rejected because the system is not in a state required for the operation's */
  | "failed_precondition"
  /** The operation was aborted, typically due to a concurrency issue. */
  | "aborted"
  /** Operation was attempted past the valid range. */
  | "out_of_range"
  /** Unrecoverable data loss or corruption */
  | "data_loss";",
    },
    {
      "docs": [
        "/**
 * Default Breadcrumbs instrumentations
 *
 * @deprecated Use \`breadcrumbsIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/browser/types/integrations/breadcrumbs.d.ts",
      "id": "variable.Breadcrumbs",
      "kind": "variable",
      "line": 19,
      "name": "Breadcrumbs",
      "signature": "const Breadcrumbs: IntegrationClass<
  Integration & { setup: (client: Client) => void }
> &
  (new (
    options?: Partial<{
      console: boolean;
      dom:
        | boolean
        | { serializeAttribute?: string | string[]; maxStringLength?: number };
      fetch: boolean;
      history: boolean;
      sentry: boolean;
      xhr: boolean;
    }>,
  ) => Integration);",
    },
    {
      "docs": [
        "/**
 * Browser profiling integration. Stores any event that has contexts["profile"]["profile_id"]
 * This exists because we do not want to await async profiler.stop calls as transaction.finish is called
 * in a synchronous context. Instead, we handle sending the profile async from the promise callback and
 * rely on being able to pull the event from the cache when we need to construct the envelope. This makes the
 * integration less reliable as we might be dropping profiles when the cache is full.
 *
 * @experimental
 * @deprecated Use \`browserProfilingIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/browser/types/profiling/integration.d.ts",
      "id": "variable.BrowserProfilingIntegration",
      "kind": "variable",
      "line": 13,
      "name": "BrowserProfilingIntegration",
      "signature": "const BrowserProfilingIntegration: IntegrationClass<
  Integration & { setup: (client: Client) => void }
>;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/stack-parsers.d.ts",
      "id": "variable.chromeStackLineParser",
      "kind": "variable",
      "line": 2,
      "name": "chromeStackLineParser",
      "signature": "const chromeStackLineParser: StackLineParser;",
    },
    {
      "docs": [],
      "file": "/@sentry/core/types/tracing/trace.d.ts",
      "id": "variable.continueTrace",
      "kind": "variable",
      "line": 96,
      "name": "continueTrace",
      "signature": "const continueTrace: ContinueTrace;",
    },
    {
      "docs": [
        "/**
 * Deduplication filter.
 * @deprecated Use \`dedupeIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/browser/types/integrations/dedupe.d.ts",
      "id": "variable.Dedupe",
      "kind": "variable",
      "line": 7,
      "name": "Dedupe",
      "signature": "const Dedupe: IntegrationClass<
  Integration & { processEvent: (event: Event) => Event }
>;",
    },
    {
      "docs": [
        "/** @deprecated Use \`getDefaultIntegrations(options)\` instead. */",
      ],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "variable.defaultIntegrations",
      "kind": "variable",
      "line": 6,
      "name": "defaultIntegrations",
      "signature": "const defaultIntegrations: IntegrationFnResult[];",
    },
    {
      "docs": [],
      "file": "/@sentry-internal/tracing/types/browser/request.d.ts",
      "id": "variable.defaultRequestInstrumentationOptions",
      "kind": "variable",
      "line": 47,
      "name": "defaultRequestInstrumentationOptions",
      "signature": "const defaultRequestInstrumentationOptions: RequestInstrumentationOptions;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/stack-parsers.d.ts",
      "id": "variable.defaultStackLineParsers",
      "kind": "variable",
      "line": 7,
      "name": "defaultStackLineParsers",
      "signature": "const defaultStackLineParsers: StackLineParser[];",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/stack-parsers.d.ts",
      "id": "variable.defaultStackParser",
      "kind": "variable",
      "line": 8,
      "name": "defaultStackParser",
      "signature": "const defaultStackParser: StackParser;",
    },
    {
      "docs": [
        "/**
 * The \`extractTraceparentData\` function and \`TRACEPARENT_REGEXP\` constant used
 * to be declared in this file. It was later moved into \`@sentry/utils\` as part of a
 * move to remove \`@sentry/tracing\` dependencies from \`@sentry/node\` (\`extractTraceparentData\`
 * is the only tracing function used by \`@sentry/node\`).
 *
 * These exports are kept here for backwards compatability's sake.
 *
 * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.
 *
 * @deprecated Import this function from \`@sentry/utils\` instead
 */",
      ],
      "file": "/@sentry/core/types/tracing/utils.d.ts",
      "id": "variable.extractTraceparentData",
      "kind": "variable",
      "line": 23,
      "name": "extractTraceparentData",
      "signature": "const extractTraceparentData: (traceparent?: string) => TraceparentData;",
    },
    {
      "docs": [
        "/**
 * Patch toString calls to return proper name for wrapped functions.
 *
 * @deprecated Use \`functionToStringIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/core/types/integrations/functiontostring.d.ts",
      "id": "variable.FunctionToString",
      "kind": "variable",
      "line": 19,
      "name": "FunctionToString",
      "signature": "const FunctionToString: IntegrationClass<
  Integration & { setupOnce: () => void }
>;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/stack-parsers.d.ts",
      "id": "variable.geckoStackLineParser",
      "kind": "variable",
      "line": 3,
      "name": "geckoStackLineParser",
      "signature": "const geckoStackLineParser: StackLineParser;",
    },
    {
      "docs": [
        "/**
 * Global handlers.
 * @deprecated Use \`globalHandlersIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/browser/types/integrations/globalhandlers.d.ts",
      "id": "variable.GlobalHandlers",
      "kind": "variable",
      "line": 9,
      "name": "GlobalHandlers",
      "signature": "const GlobalHandlers: IntegrationClass<
  Integration & { setup: (client: Client) => void }
> &
  (new (options?: Partial<GlobalHandlersIntegrations>) => Integration);",
    },
    {
      "docs": [
        "/**
 * HttpContext integration collects information about HTTP request headers.
 * @deprecated Use \`httpContextIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/browser/types/integrations/httpcontext.d.ts",
      "id": "variable.HttpContext",
      "kind": "variable",
      "line": 7,
      "name": "HttpContext",
      "signature": "const HttpContext: IntegrationClass<
  Integration & { preprocessEvent: (event: Event) => void }
>;",
    },
    {
      "docs": [
        "/**
 * Inbound filters configurable by the user.
 * @deprecated Use \`inboundFiltersIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/core/types/integrations/inboundfilters.d.ts",
      "id": "variable.InboundFilters",
      "kind": "variable",
      "line": 17,
      "name": "InboundFilters",
      "signature": "const InboundFilters: IntegrationClass<
  Integration & {
    preprocessEvent: (event: Event, hint: EventHint, client: Client) => void;
  }
> &
  (new (
    options?: Partial<{
      allowUrls: Array<string | RegExp>;
      denyUrls: Array<string | RegExp>;
      ignoreErrors: Array<string | RegExp>;
      ignoreTransactions: Array<string | RegExp>;
      ignoreInternal: boolean;
      disableErrorDefaults: boolean;
      disableTransactionDefaults: boolean;
    }>,
  ) => Integration);",
    },
    {
      "docs": [
        "/** @deprecated Import the integration function directly, e.g. \`inboundFiltersIntegration()\` instead of \`new Integrations.InboundFilter(). */",
      ],
      "file": "/@sentry/browser/types/index.d.ts",
      "id": "variable.Integrations",
      "kind": "variable",
      "line": 3,
      "name": "Integrations",
      "signature": "const Integrations: {
  GlobalHandlers: IntegrationClass<
    Integration & {
      setup: (
        client: import("@sentry/types").Client<
          import("@sentry/types").ClientOptions<
            import("@sentry/types").BaseTransportOptions
          >
        >,
      ) => void;
    }
  > &
    (new (
      options?:
        | Partial<{ onerror: boolean; onunhandledrejection: boolean }>
        | undefined,
    ) => import("@sentry/types").Integration);
  TryCatch: IntegrationClass<Integration> &
    (new (
      options?:
        | {
            setTimeout: boolean;
            setInterval: boolean;
            requestAnimationFrame: boolean;
            XMLHttpRequest: boolean;
            eventTarget: boolean | string[];
          }
        | undefined,
    ) => import("@sentry/types").Integration);
  Breadcrumbs: IntegrationClass<
    Integration & {
      setup: (
        client: import("@sentry/types").Client<
          import("@sentry/types").ClientOptions<
            import("@sentry/types").BaseTransportOptions
          >
        >,
      ) => void;
    }
  > &
    (new (
      options?:
        | Partial<{
            console: boolean;
            dom:
              | boolean
              | {
                  serializeAttribute?: string | string[] | undefined;
                  maxStringLength?: number | undefined;
                };
            fetch: boolean;
            history: boolean;
            sentry: boolean;
            xhr: boolean;
          }>
        | undefined,
    ) => import("@sentry/types").Integration);
  LinkedErrors: IntegrationClass<
    Integration & {
      preprocessEvent: (
        event: import("@sentry/types").Event,
        hint: import("@sentry/types").EventHint,
        client: import("@sentry/types").Client<
          import("@sentry/types").ClientOptions<
            import("@sentry/types").BaseTransportOptions
          >
        >,
      ) => void;
    }
  > &
    (new (
      options?:
        | { key?: string | undefined; limit?: number | undefined }
        | undefined,
    ) => import("@sentry/types").Integration);
  HttpContext: IntegrationClass<
    Integration & {
      preprocessEvent: (event: import("@sentry/types").Event) => void;
    }
  >;
  Dedupe: IntegrationClass<
    Integration & {
      processEvent: (
        event: import("@sentry/types").Event,
      ) => import("@sentry/types").Event;
    }
  >;
  FunctionToString: import("@sentry/types").IntegrationClass<
    import("@sentry/types").Integration & { setupOnce: () => void }
  >;
  InboundFilters: IntegrationClass<
    Integration & {
      preprocessEvent: (
        event: import("@sentry/types").Event,
        hint: import("@sentry/types").EventHint,
        client: import("@sentry/types").Client<
          import("@sentry/types").ClientOptions<
            import("@sentry/types").BaseTransportOptions
          >
        >,
      ) => void;
    }
  > &
    (new (
      options?:
        | Partial<{
            allowUrls: (string | RegExp)[];
            denyUrls: (string | RegExp)[];
            ignoreErrors: (string | RegExp)[];
            ignoreTransactions: (string | RegExp)[];
            ignoreInternal: boolean;
            disableErrorDefaults: boolean;
            disableTransactionDefaults: boolean;
          }>
        | undefined,
    ) => import("@sentry/types").Integration);
};",
    },
    {
      "docs": [
        "/**
 * Aggregrate linked errors in an event.
 * @deprecated Use \`linkedErrorsIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/browser/types/integrations/linkederrors.d.ts",
      "id": "variable.LinkedErrors",
      "kind": "variable",
      "line": 11,
      "name": "LinkedErrors",
      "signature": "const LinkedErrors: IntegrationClass<
  Integration & {
    preprocessEvent: (event: Event, hint: EventHint, client: Client) => void;
  }
> &
  (new (options?: { key?: string; limit?: number }) => Integration);",
    },
    {
      "docs": [],
      "file": "/@sentry/core/types/metrics/exports.d.ts",
      "id": "variable.metrics",
      "kind": "variable",
      "line": 31,
      "name": "metrics",
      "signature": "const metrics: {
  increment: typeof increment;
  distribution: typeof distribution;
  set: typeof set;
  gauge: typeof gauge;
  MetricsAggregator: IntegrationClass<
    Integration & {
      setup: (
        client: import("@sentry/types").Client<
          ClientOptions<import("@sentry/types").BaseTransportOptions>
        >,
      ) => void;
    }
  >;
  metricsAggregatorIntegration: () => import("@sentry/types").IntegrationFnResult;
};",
    },
    {
      "docs": [
        "/**
 * Adds module metadata to stack frames.
 *
 * Metadata can be injected by the Sentry bundler plugins using the \`_experiments.moduleMetadata\` config option.
 *
 * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events
 * under the \`module_metadata\` property. This can be used to help in tagging or routing of events from different teams
 * our sources
 *
 * @deprecated Use \`moduleMetadataIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/core/types/integrations/metadata.d.ts",
      "id": "variable.ModuleMetadata",
      "kind": "variable",
      "line": 14,
      "name": "ModuleMetadata",
      "signature": "const ModuleMetadata: IntegrationClass<
  Integration & {
    setup: (client: Client) => void;
    processEvent: (event: Event, hint: EventHint, client: Client) => Event;
  }
>;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/stack-parsers.d.ts",
      "id": "variable.opera10StackLineParser",
      "kind": "variable",
      "line": 5,
      "name": "opera10StackLineParser",
      "signature": "const opera10StackLineParser: StackLineParser;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/stack-parsers.d.ts",
      "id": "variable.opera11StackLineParser",
      "kind": "variable",
      "line": 6,
      "name": "opera11StackLineParser",
      "signature": "const opera11StackLineParser: StackLineParser;",
    },
    {
      "docs": [
        "/**
 * @deprecated Use \`replayCanvasIntegration()\` instead
 */",
      ],
      "file": "/@sentry-internal/replay-canvas/types/canvas.d.ts",
      "id": "variable.ReplayCanvas",
      "kind": "variable",
      "line": 34,
      "name": "ReplayCanvas",
      "signature": "const ReplayCanvas: IntegrationClass<
  Integration & { getOptions: () => ReplayCanvasIntegrationOptions }
>;",
    },
    {
      "docs": [],
      "file": "/@sentry/core/types/version.d.ts",
      "id": "variable.SDK_VERSION",
      "kind": "variable",
      "line": 1,
      "name": "SDK_VERSION",
      "signature": "const SDK_VERSION: string;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/sdk.d.ts",
      "id": "variable.showReportDialog",
      "kind": "variable",
      "line": 86,
      "name": "showReportDialog",
      "signature": "const showReportDialog: ShowReportDialogFunction;",
    },
    {
      "docs": [
        "/**
 * Converts a HTTP status code into a {@link SpanStatusType}.
 *
 * @deprecated Use {@link spanStatusFromHttpCode} instead.
 * This export will be removed in v8 as the signature contains a typo.
 *
 * @param httpStatus The HTTP response status code.
 * @returns The span status or unknown_error.
 */",
      ],
      "file": "/@sentry/core/types/tracing/spanstatus.d.ts",
      "id": "variable.spanStatusfromHttpCode",
      "kind": "variable",
      "line": 93,
      "name": "spanStatusfromHttpCode",
      "signature": "const spanStatusfromHttpCode: (httpStatus: number) => SpanStatusType;",
    },
    {
      "docs": [
        "/**
 * Wrap timer functions and event targets to catch errors and provide better meta data.
 * @deprecated Use \`browserApiErrorsIntegration()\` instead.
 */",
      ],
      "file": "/@sentry/browser/types/integrations/trycatch.d.ts",
      "id": "variable.TryCatch",
      "kind": "variable",
      "line": 14,
      "name": "TryCatch",
      "signature": "const TryCatch: IntegrationClass<Integration> &
  (new (options?: {
    setTimeout: boolean;
    setInterval: boolean;
    requestAnimationFrame: boolean;
    XMLHttpRequest: boolean;
    eventTarget: boolean | string[];
  }) => Integration);",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/helpers.d.ts",
      "id": "variable.WINDOW",
      "kind": "variable",
      "line": 3,
      "name": "WINDOW",
      "signature": "const WINDOW: InternalGlobal & Window;",
    },
    {
      "docs": [],
      "file": "/@sentry/browser/types/stack-parsers.d.ts",
      "id": "variable.winjsStackLineParser",
      "kind": "variable",
      "line": 4,
      "name": "winjsStackLineParser",
      "signature": "const winjsStackLineParser: StackLineParser;",
    },
  ],
  "name": "@sentry/browser",
  "overview": undefined,
  "packages": Any<Array>,
  "subpath": ".",
  "types": "types/index.d.ts",
  "version": "7.100.1",
}
`;
