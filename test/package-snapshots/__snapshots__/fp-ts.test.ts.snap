// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fp-ts > 2.9.3 1`] = `
{
  "declarations": {
    "classes": [],
    "enums": [],
    "functions": [],
    "interfaces": [],
    "namespaces": [
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alt.Alt",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alt.Alt.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(fa: HKT<F, A>, that: Lazy<HKT<F, A>>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/Alt.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L21",
                    },
                    "type": "<A>(fa: HKT<F, A>, that: Lazy<HKT<F, A>>) => HKT<F, A>",
                  },
                ],
              },
              "name": "Alt",
              "signature": "interface Alt<F> extends Functor<F> {}",
              "source": {
                "filename": "lib/Alt.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L20",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alt.Alt1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alt.Alt1.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(fa: Kind<F, A>, that: Lazy<Kind<F, A>>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/Alt.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L28",
                    },
                    "type": "<A>(fa: Kind<F, A>, that: Lazy<Kind<F, A>>) => Kind<F, A>",
                  },
                ],
              },
              "name": "Alt1",
              "signature": "interface Alt1<F extends URIS> extends Functor1<F> {}",
              "source": {
                "filename": "lib/Alt.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L27",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alt.Alt2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alt.Alt2.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <E, A>(
    fa: Kind2<F, E, A>,
    that: Lazy<Kind2<F, E, A>>
) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Alt.d.ts",
                      "line": 35,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L35",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L35",
                    },
                    "type": "<E, A>(fa: Kind2<F, E, A>, that: Lazy<Kind2<F, E, A>>) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "Alt2",
              "signature": "interface Alt2<F extends URIS2> extends Functor2<F> {}",
              "source": {
                "filename": "lib/Alt.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L34",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alt.Alt2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alt.Alt2C.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(
    fa: Kind2<F, E, A>,
    that: Lazy<Kind2<F, E, A>>
) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Alt.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L42",
                    },
                    "type": "<A>(fa: Kind2<F, E, A>, that: Lazy<Kind2<F, E, A>>) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "Alt2C",
              "signature": "interface Alt2C<F extends URIS2, E> extends Functor2C<F, E> {}",
              "source": {
                "filename": "lib/Alt.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L41",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alt.Alt3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alt.Alt3.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <R, E, A>(
    fa: Kind3<F, R, E, A>,
    that: Lazy<Kind3<F, R, E, A>>
) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Alt.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L49",
                    },
                    "type": "<R, E, A>(fa: Kind3<F, R, E, A>, that: Lazy<Kind3<F, R, E, A>>) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "Alt3",
              "signature": "interface Alt3<F extends URIS3> extends Functor3<F> {}",
              "source": {
                "filename": "lib/Alt.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L48",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "alt.Alt3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alt.Alt3C.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <R, A>(
    fa: Kind3<F, R, E, A>,
    that: Lazy<Kind3<F, R, E, A>>
) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Alt.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L56",
                    },
                    "type": "<R, A>(fa: Kind3<F, R, E, A>, that: Lazy<Kind3<F, R, E, A>>) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "Alt3C",
              "signature": "interface Alt3C<F extends URIS3, E> extends Functor3C<F, E> {}",
              "source": {
                "filename": "lib/Alt.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L55",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alt.Alt4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alt.Alt4.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <S, R, E, A>(
    fa: Kind4<F, S, R, E, A>,
    that: Lazy<Kind4<F, S, R, E, A>>
) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/Alt.d.ts",
                      "line": 63,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L63",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L63",
                    },
                    "type": "<S, R, E, A>(fa: Kind4<F, S, R, E, A>, that: Lazy<Kind4<F, S, R, E, A>>) => Kind4<F, S, R, E, A>",
                  },
                ],
              },
              "name": "Alt4",
              "signature": "interface Alt4<F extends URIS4> extends Functor4<F> {}",
              "source": {
                "filename": "lib/Alt.d.ts",
                "line": 62,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L62",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L62",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Alt\` type class identifies an associative operation on a type constructor.  It is similar to \`Semigroup\`, except
 * that it applies to types of kind \`* -> *\`, like \`Array\` or \`Option\`, rather than concrete types like \`string\` or
 * \`number\`.
 *
 * \`Alt\` instances are required to satisfy the following laws:
 *
 * 1. Associativity: \`A.alt(A.alt(fa, ga), ha) <-> A.alt(fa, A.alt(ga, ha))\`
 * 2. Distributivity: \`A.map(A.alt(fa, ga), ab) <-> A.alt(A.map(fa, ab), A.map(ga, ab))\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "alt",
        "kind": "namespace",
        "name": "alt",
        "signature": "module 'lib/Alt.d.ts' {}",
        "source": {
          "filename": "lib/Alt.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alternative.Alternative",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alternative.Alternative.zero",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "zero",
                    "signature": "readonly zero: <A>() => HKT<F, A>;",
                    "source": {
                      "filename": "lib/Alternative.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L25",
                    },
                    "type": "<A>() => HKT<F, A>",
                  },
                ],
              },
              "name": "Alternative",
              "signature": "interface Alternative<F> extends Applicative<F>, Alt<F> {}",
              "source": {
                "filename": "lib/Alternative.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L24",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alternative.Alternative1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alternative.Alternative1.zero",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "zero",
                    "signature": "readonly zero: <A>() => Kind<F, A>;",
                    "source": {
                      "filename": "lib/Alternative.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L32",
                    },
                    "type": "<A>() => Kind<F, A>",
                  },
                ],
              },
              "name": "Alternative1",
              "signature": "interface Alternative1<F extends URIS> extends Applicative1<F>, Alt1<F> {}",
              "source": {
                "filename": "lib/Alternative.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L31",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alternative.Alternative2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alternative.Alternative2.zero",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "zero",
                    "signature": "readonly zero: <E, A>() => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Alternative.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L39",
                    },
                    "type": "<E, A>() => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "Alternative2",
              "signature": "interface Alternative2<F extends URIS2> extends Applicative2<F>, Alt2<F> {}",
              "source": {
                "filename": "lib/Alternative.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alternative.Alternative2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alternative.Alternative2C.zero",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "zero",
                    "signature": "readonly zero: <A>() => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Alternative.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L46",
                    },
                    "type": "<A>() => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "Alternative2C",
              "signature": "interface Alternative2C<F extends URIS2, E>
    extends Applicative2C<F, E>,
        Alt2C<F, E> {}",
              "source": {
                "filename": "lib/Alternative.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L45",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "alternative.Alternative3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "alternative.Alternative3.zero",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "zero",
                    "signature": "readonly zero: <R, E, A>() => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Alternative.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L53",
                    },
                    "type": "<R, E, A>() => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "Alternative3",
              "signature": "interface Alternative3<F extends URIS3> extends Applicative3<F>, Alt3<F> {}",
              "source": {
                "filename": "lib/Alternative.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L52",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Alternative\` type class extends the \`Alt\` type class with a value that should be the left and right identity for \`alt\`.
 *
 * It is similar to \`Monoid\`, except that it applies to types of kind \`* -> *\`, like \`Array\` or \`Option\`, rather than
 * concrete types like \`string\` or \`number\`.
 *
 * \`Alternative\` instances should satisfy the following laws:
 *
 * 1. Left identity: \`A.alt(zero, fa) <-> fa\`
 * 2. Right identity: \`A.alt(fa, zero) <-> fa\`
 * 3. Annihilation: \`A.map(zero, f) <-> zero\`
 * 4. Distributivity: \`A.ap(A.alt(fab, gab), fa) <-> A.alt(A.ap(fab, fa), A.ap(gab, fa))\`
 * 5. Annihilation: \`A.ap(zero, fa) <-> zero\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "alternative",
        "kind": "namespace",
        "name": "alternative",
        "signature": "module 'lib/Alternative.d.ts' {}",
        "source": {
          "filename": "lib/Alternative.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Like \`Functor\`, \`Applicative\`s compose. If \`F\` and \`G\` have \`Applicative\` instances, then so does \`F<G<_>>\`
 *
 * @example
 * import { getApplicativeComposition } from 'fp-ts/Applicative'
 * import { option, Option, some } from 'fp-ts/Option'
 * import { task, Task } from 'fp-ts/Task'
 *
 * // an Applicative instance for Task<Option<A>>
 * const A = getApplicativeComposition(task, option)
 *
 * const x: Task<Option<number>> = task.of(some(1))
 * const y: Task<Option<number>> = task.of(some(2))
 *
 * const sum = (a: number) => (b: number): number => a + b
 *
 * A.ap(A.map(x, sum), y)()
 *   .then(result => assert.deepStrictEqual(result, some(3)))
 *
 * @since 2.0.0
 */",
              ],
              "id": "applicative.getApplicativeComposition",
              "kind": "function",
              "name": "getApplicativeComposition",
              "signature": "getApplicativeComposition: {
    <F extends URIS2, G extends URIS2, E>(
        F: Applicative2<F>,
        G: Applicative2C<G, E>
    ): ApplicativeComposition22C<F, G, E>;
    <F extends URIS2, G extends URIS2>(
        F: Applicative2<F>,
        G: Applicative2<G>
    ): ApplicativeComposition22<F, G>;
    <F extends URIS2, G extends URIS2, E>(
        F: Applicative2<F>,
        G: Applicative2C<G, E>
    ): ApplicativeComposition22C<F, G, E>;
    <F extends URIS2, G extends URIS>(
        F: Applicative2<F>,
        G: Applicative1<G>
    ): ApplicativeComposition21<F, G>;
    <F extends URIS, G extends URIS2>(
        F: Applicative1<F>,
        G: Applicative2<G>
    ): ApplicativeComposition12<F, G>;
    <F extends URIS, G extends URIS2, E>(
        F: Applicative1<F>,
        G: Applicative2C<G, E>
    ): ApplicativeComposition12C<F, G, E>;
    <F extends URIS, G extends URIS>(
        F: Applicative1<F>,
        G: Applicative1<G>
    ): ApplicativeComposition11<F, G>;
    <F, G extends URIS2>(
        F: Applicative<F>,
        G: Applicative2<G>
    ): ApplicativeCompositionHKT2<F, G>;
    <F, G extends URIS2, E>(
        F: Applicative<F>,
        G: Applicative2C<G, E>
    ): ApplicativeCompositionHKT2C<F, G, E>;
    <F, G extends URIS>(
        F: Applicative<F>,
        G: Applicative1<G>
    ): ApplicativeCompositionHKT1<F, G>;
    <F, G>(F: Applicative<F>, G: Applicative<G>): ApplicativeComposition<F, G>;
};",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L194",
              },
              "type": "{ <F extends URIS2, G extends URIS2, E>(F: Applicative2<F>, G: Applicative2C<G, E>): ApplicativeComposition22C<F, G, E>; <F extends URIS2, G extends URIS2>(F: Applicative2<F>, G: Applicative2<G>): ApplicativeComposition22<F, G>; <F extends URIS2, G extends URIS2, E>(F: Applicative2<F>, G: Applicative2C<G, E>): ApplicativeComposition22C<F, G, E>; <F extends URIS2, G extends URIS>(F: Applicative2<F>, G: Applicative1<G>): ApplicativeComposition21<F, G>; <F extends URIS, G extends URIS2>(F: Applicative1<F>, G: Applicative2<G>): ApplicativeComposition12<F, G>; <F extends URIS, G extends URIS2, E>(F: Applicative1<F>, G: Applicative2C<G, E>): ApplicativeComposition12C<F, G, E>; <F extends URIS, G extends URIS>(F: Applicative1<F>, G: Applicative1<G>): ApplicativeComposition11<F, G>; <F, G extends URIS2>(F: Applicative<F>, G: Applicative2<G>): ApplicativeCompositionHKT2<F, G>; <F, G extends URIS2, E>(F: Applicative<F>, G: Applicative2C<G, E>): ApplicativeCompositionHKT2C<F, G, E>; <F, G extends URIS>(F: Applicative<F>, G: Applicative1<G>): ApplicativeCompositionHKT1<F, G>; <F, G>(F: Applicative<F>, G: Applicative<G>): ApplicativeComposition<F, G>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "applicative.Applicative",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.Applicative.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L40",
                    },
                    "type": "<A>(a: A) => HKT<F, A>",
                  },
                ],
              },
              "name": "Applicative",
              "signature": "interface Applicative<F> extends Apply<F> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 39,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L39",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L39",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "applicative.Applicative1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.Applicative1.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L47",
                    },
                    "type": "<A>(a: A) => Kind<F, A>",
                  },
                ],
              },
              "name": "Applicative1",
              "signature": "interface Applicative1<F extends URIS> extends Apply1<F> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L46",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "applicative.Applicative2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.Applicative2.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <E, A>(a: A) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L54",
                    },
                    "type": "<E, A>(a: A) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "Applicative2",
              "signature": "interface Applicative2<F extends URIS2> extends Apply2<F> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L53",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "applicative.Applicative2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.Applicative2C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 61,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L61",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L61",
                    },
                    "type": "<A>(a: A) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "Applicative2C",
              "signature": "interface Applicative2C<F extends URIS2, E> extends Apply2C<F, E> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L60",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "applicative.Applicative3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.Applicative3.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <R, E, A>(a: A) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 68,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L68",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L68",
                    },
                    "type": "<R, E, A>(a: A) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "Applicative3",
              "signature": "interface Applicative3<F extends URIS3> extends Apply3<F> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 67,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L67",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L67",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "applicative.Applicative3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.Applicative3C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <R, A>(a: A) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 75,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L75",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L75",
                    },
                    "type": "<R, A>(a: A) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "Applicative3C",
              "signature": "interface Applicative3C<F extends URIS3, E> extends Apply3C<F, E> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 74,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L74",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L74",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "applicative.Applicative4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.Applicative4.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <S, R, E, A>(a: A) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L82",
                    },
                    "type": "<S, R, E, A>(a: A) => Kind4<F, S, R, E, A>",
                  },
                ],
              },
              "name": "Applicative4",
              "signature": "interface Applicative4<F extends URIS4> extends Apply4<F> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L81",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(
    fgab: HKT<F, HKT<G, (a: A) => B>>,
    fga: HKT<F, HKT<G, A>>
) => HKT<F, HKT<G, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 89,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L89",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L89",
                    },
                    "type": "<A, B>(fgab: HKT<F, HKT<G, (a: A) => B>>, fga: HKT<F, HKT<G, A>>) => HKT<F, HKT<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => HKT<F, HKT<G, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 88,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L88",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L88",
                    },
                    "type": "<A>(a: A) => HKT<F, HKT<G, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition",
              "signature": "interface ApplicativeComposition<F, G> extends FunctorComposition<F, G> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 87,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L87",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L87",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition11.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(
    fgab: Kind<F, Kind<G, (a: A) => B>>,
    fga: Kind<F, Kind<G, A>>
) => Kind<F, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 117,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L117",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L117",
                    },
                    "type": "<A, B>(fgab: Kind<F, Kind<G, (a: A) => B>>, fga: Kind<F, Kind<G, A>>) => Kind<F, Kind<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition11.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => Kind<F, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 116,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L116",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L116",
                    },
                    "type": "<A>(a: A) => Kind<F, Kind<G, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition11",
              "signature": "interface ApplicativeComposition11<F extends URIS, G extends URIS>
    extends FunctorComposition11<F, G> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L115",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition12",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition12.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <E, A, B>(
    fgab: Kind<F, Kind2<G, E, (a: A) => B>>,
    fga: Kind<F, Kind2<G, E, A>>
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 124,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L124",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L124",
                    },
                    "type": "<E, A, B>(fgab: Kind<F, Kind2<G, E, (a: A) => B>>, fga: Kind<F, Kind2<G, E, A>>) => Kind<F, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition12.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <E, A>(a: A) => Kind<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 123,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L123",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L123",
                    },
                    "type": "<E, A>(a: A) => Kind<F, Kind2<G, E, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition12",
              "signature": "interface ApplicativeComposition12<F extends URIS, G extends URIS2>
    extends FunctorComposition12<F, G> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 122,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L122",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L122",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition12C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition12C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(
    fgab: Kind<F, Kind2<G, E, (a: A) => B>>,
    fga: Kind<F, Kind2<G, E, A>>
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 134,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L134",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L134",
                    },
                    "type": "<A, B>(fgab: Kind<F, Kind2<G, E, (a: A) => B>>, fga: Kind<F, Kind2<G, E, A>>) => Kind<F, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition12C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => Kind<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 133,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L133",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L133",
                    },
                    "type": "<A>(a: A) => Kind<F, Kind2<G, E, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition12C",
              "signature": "interface ApplicativeComposition12C<F extends URIS, G extends URIS2, E>
    extends FunctorComposition12C<F, G, E> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L132",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition21",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition21.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <E, A, B>(
    fgab: Kind2<F, E, Kind<G, (a: A) => B>>,
    fga: Kind2<F, E, Kind<G, A>>
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 141,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L141",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L141",
                    },
                    "type": "<E, A, B>(fgab: Kind2<F, E, Kind<G, (a: A) => B>>, fga: Kind2<F, E, Kind<G, A>>) => Kind2<F, E, Kind<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition21.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <E, A>(a: A) => Kind2<F, E, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 140,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L140",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L140",
                    },
                    "type": "<E, A>(a: A) => Kind2<F, E, Kind<G, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition21",
              "signature": "interface ApplicativeComposition21<F extends URIS2, G extends URIS>
    extends FunctorComposition21<F, G> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 139,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L139",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L139",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition22",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition22.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <FE, GE, A, B>(
    fgab: Kind2<F, FE, Kind2<G, GE, (a: A) => B>>,
    fga: Kind2<F, FE, Kind2<G, GE, A>>
) => Kind2<F, FE, Kind2<G, GE, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 158,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L158",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L158",
                    },
                    "type": "<FE, GE, A, B>(fgab: Kind2<F, FE, Kind2<G, GE, (a: A) => B>>, fga: Kind2<F, FE, Kind2<G, GE, A>>) => Kind2<F, FE, Kind2<G, GE, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition22.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <FE, GE, A>(a: A) => Kind2<F, FE, Kind2<G, GE, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 157,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L157",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L157",
                    },
                    "type": "<FE, GE, A>(a: A) => Kind2<F, FE, Kind2<G, GE, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition22",
              "signature": "interface ApplicativeComposition22<F extends URIS2, G extends URIS2>
    extends FunctorComposition22<F, G> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 156,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L156",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L156",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition22C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition22C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <FE, A, B>(
    fgab: Kind2<F, FE, Kind2<G, E, (a: A) => B>>,
    fga: Kind2<F, FE, Kind2<G, E, A>>
) => Kind2<F, FE, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 168,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L168",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L168",
                    },
                    "type": "<FE, A, B>(fgab: Kind2<F, FE, Kind2<G, E, (a: A) => B>>, fga: Kind2<F, FE, Kind2<G, E, A>>) => Kind2<F, FE, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition22C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <FE, A>(a: A) => Kind2<F, FE, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 167,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L167",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L167",
                    },
                    "type": "<FE, A>(a: A) => Kind2<F, FE, Kind2<G, E, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition22C",
              "signature": "interface ApplicativeComposition22C<F extends URIS2, G extends URIS2, E>
    extends FunctorComposition22C<F, G, E> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 166,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L166",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L166",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeComposition2C1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition2C1.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(
    fgab: Kind2<F, E, Kind<G, (a: A) => B>>,
    fga: Kind2<F, E, Kind<G, A>>
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 151,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L151",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L151",
                    },
                    "type": "<A, B>(fgab: Kind2<F, E, Kind<G, (a: A) => B>>, fga: Kind2<F, E, Kind<G, A>>) => Kind2<F, E, Kind<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeComposition2C1.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => Kind2<F, E, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 150,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L150",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L150",
                    },
                    "type": "<A>(a: A) => Kind2<F, E, Kind<G, A>>",
                  },
                ],
              },
              "name": "ApplicativeComposition2C1",
              "signature": "interface ApplicativeComposition2C1<F extends URIS2, G extends URIS, E>
    extends FunctorComposition2C1<F, G, E> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 149,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L149",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L149",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeCompositionHKT1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeCompositionHKT1.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(
    fgab: HKT<F, Kind<G, (a: A) => B>>,
    fga: HKT<F, Kind<G, A>>
) => HKT<F, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 96,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L96",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L96",
                    },
                    "type": "<A, B>(fgab: HKT<F, Kind<G, (a: A) => B>>, fga: HKT<F, Kind<G, A>>) => HKT<F, Kind<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeCompositionHKT1.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => HKT<F, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 95,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L95",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L95",
                    },
                    "type": "<A>(a: A) => HKT<F, Kind<G, A>>",
                  },
                ],
              },
              "name": "ApplicativeCompositionHKT1",
              "signature": "interface ApplicativeCompositionHKT1<F, G extends URIS>
    extends FunctorCompositionHKT1<F, G> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 94,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L94",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L94",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeCompositionHKT2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeCompositionHKT2.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <E, A, B>(
    fgab: HKT<F, Kind2<G, E, (a: A) => B>>,
    fga: HKT<F, Kind2<G, E, A>>
) => HKT<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 103,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L103",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L103",
                    },
                    "type": "<E, A, B>(fgab: HKT<F, Kind2<G, E, (a: A) => B>>, fga: HKT<F, Kind2<G, E, A>>) => HKT<F, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeCompositionHKT2.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <E, A>(a: A) => HKT<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 102,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L102",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L102",
                    },
                    "type": "<E, A>(a: A) => HKT<F, Kind2<G, E, A>>",
                  },
                ],
              },
              "name": "ApplicativeCompositionHKT2",
              "signature": "interface ApplicativeCompositionHKT2<F, G extends URIS2>
    extends FunctorCompositionHKT2<F, G> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L101",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "applicative.ApplicativeCompositionHKT2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeCompositionHKT2C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(
    fgab: HKT<F, Kind2<G, E, (a: A) => B>>,
    fga: HKT<F, Kind2<G, E, A>>
) => HKT<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 110,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L110",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L110",
                    },
                    "type": "<A, B>(fgab: HKT<F, Kind2<G, E, (a: A) => B>>, fga: HKT<F, Kind2<G, E, A>>) => HKT<F, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "applicative.ApplicativeCompositionHKT2C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <A>(a: A) => HKT<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Applicative.d.ts",
                      "line": 109,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L109",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L109",
                    },
                    "type": "<A>(a: A) => HKT<F, Kind2<G, E, A>>",
                  },
                ],
              },
              "name": "ApplicativeCompositionHKT2C",
              "signature": "interface ApplicativeCompositionHKT2C<F, G extends URIS2, E>
    extends FunctorCompositionHKT2C<F, G, E> {}",
              "source": {
                "filename": "lib/Applicative.d.ts",
                "line": 108,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L108",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L108",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Applicative\` type class extends the \`Apply\` type class with a \`of\` function, which can be used to create values
 * of type \`f a\` from values of type \`a\`.
 *
 * Where \`Apply\` provides the ability to lift functions of two or more arguments to functions whose arguments are
 * wrapped using \`f\`, and \`Functor\` provides the ability to lift functions of one argument, \`pure\` can be seen as the
 * function which lifts functions of _zero_ arguments. That is, \`Applicative\` functors support a lifting operation for
 * any number of function arguments.
 *
 * Instances must satisfy the following laws in addition to the \`Apply\` laws:
 *
 * 1. Identity: \`A.ap(A.of(a => a), fa) <-> fa\`
 * 2. Homomorphism: \`A.ap(A.of(ab), A.of(a)) <-> A.of(ab(a))\`
 * 3. Interchange: \`A.ap(fab, A.of(a)) <-> A.ap(A.of(ab => ab(a)), fab)\`
 *
 * Note. \`Functor\`'s \`map\` can be derived: \`A.map(x, f) = A.ap(A.of(f), x)\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "applicative",
        "kind": "namespace",
        "name": "applicative",
        "signature": "module 'lib/Applicative.d.ts' {}",
        "source": {
          "filename": "lib/Applicative.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Like \`Apply.sequenceT\` but works with structs instead of tuples.
 *
 * @example
 * import { either, right, left } from 'fp-ts/Either'
 * import { sequenceS } from 'fp-ts/Apply'
 *
 * const ado = sequenceS(either)
 *
 * assert.deepStrictEqual(
 *   ado({
 *     a: right(1),
 *     b: right(true)
 *   }),
 *   right({ a: 1, b: true })
 * )
 * assert.deepStrictEqual(
 *   ado({
 *     a: right(1),
 *     b: left('error')
 *   }),
 *   left('error')
 * )
 *
 * @since 2.0.0
 */",
              ],
              "id": "apply.sequenceS",
              "kind": "function",
              "name": "sequenceS",
              "signature": "sequenceS: {
    <F extends URIS4>(F: Apply4<F>): <
        S,
        R,
        E,
        NER extends Record<string, Kind4<F, S, R, E, any>>
    >(
        r: EnforceNonEmptyRecord<NER> & Record<string, Kind4<F, S, R, E, any>>
    ) => Kind4<
        F,
        S,
        R,
        E,
        {
            [K in keyof NER]: [NER[K]] extends [Kind4<F, any, any, any, infer A>]
                ? A
                : never;
        }
    >;
    <F extends URIS3>(F: Apply3<F>): <
        R,
        E,
        NER extends Record<string, Kind3<F, R, E, any>>
    >(
        r: EnforceNonEmptyRecord<NER> & Record<string, Kind3<F, R, E, any>>
    ) => Kind3<
        F,
        R,
        E,
        {
            [K in keyof NER]: [NER[K]] extends [Kind3<F, any, any, infer A>]
                ? A
                : never;
        }
    >;
    <F extends URIS3, E>(F: Apply3C<F, E>): <
        R,
        NER extends Record<string, Kind3<F, R, E, any>>
    >(
        r: EnforceNonEmptyRecord<NER> & Record<string, Kind3<F, R, E, any>>
    ) => Kind3<
        F,
        R,
        E,
        {
            [K in keyof NER]: [NER[K]] extends [Kind3<F, any, any, infer A>]
                ? A
                : never;
        }
    >;
    <F extends URIS2>(F: Apply2<F>): <
        E,
        NER extends Record<string, Kind2<F, E, any>>
    >(
        r: EnforceNonEmptyRecord<NER> & Record<string, Kind2<F, E, any>>
    ) => Kind2<
        F,
        E,
        { [K in keyof NER]: [NER[K]] extends [Kind2<F, any, infer A>] ? A : never }
    >;
    <F extends URIS2, E>(F: Apply2C<F, E>): <
        NER extends Record<string, Kind2<F, E, any>>
    >(
        r: EnforceNonEmptyRecord<NER>
    ) => Kind2<
        F,
        E,
        { [K in keyof NER]: [NER[K]] extends [Kind2<F, any, infer A>] ? A : never }
    >;
    <F extends URIS>(F: Apply1<F>): <NER extends Record<string, Kind<F, any>>>(
        r: EnforceNonEmptyRecord<NER>
    ) => Kind<
        F,
        { [K in keyof NER]: [NER[K]] extends [Kind<F, infer A>] ? A : never }
    >;
    <F>(F: Apply<F>): <NER extends Record<string, HKT<F, any>>>(
        r: EnforceNonEmptyRecord<NER>
    ) => HKT<
        F,
        { [K in keyof NER]: [NER[K]] extends [HKT<F, infer A>] ? A : never }
    >;
};",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 223,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L223",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L223",
              },
              "type": "{ <F extends URIS4>(F: Apply4<F>): <S, R, E, NER extends Record<string, Kind4<F, S, R, E, any>>>(r: EnforceNonEmptyRecord<NER> & Record<string, Kind4<F, S, R, E, any>>) => Kind4<F, S, R, E, { [K in keyof NER]: [NER[K]] extends [Kind4<F, any, any, any, infer A>] ? A : never; }>; <F extends URIS3>(F: Apply3<F>): <R, E, NER extends Record<string, Kind3<F, R, E, any>>>(r: EnforceNonEmptyRecord<NER> & Record<string, Kind3<F, R, E, any>>) => Kind3<F, R, E, { [K in keyof NER]: [NER[K]] extends [Kind3<F, any, any, infer A>] ? A : never; }>; <F extends URIS3, E>(F: Apply3C<F, E>): <R, NER extends Record<string, Kind3<F, R, E, any>>>(r: EnforceNonEmptyRecord<NER> & Record<string, Kind3<F, R, E, any>>) => Kind3<F, R, E, { [K in keyof NER]: [NER[K]] extends [Kind3<F, any, any, infer A>] ? A : never; }>; <F extends URIS2>(F: Apply2<F>): <E, NER extends Record<string, Kind2<F, E, any>>>(r: EnforceNonEmptyRecord<NER> & Record<string, Kind2<F, E, any>>) => Kind2<F, E, { [K in keyof NER]: [NER[K]] extends [Kind2<F, any, infer A>] ? A : never; }>; <F extends URIS2, E>(F: Apply2C<F, E>): <NER extends Record<string, Kind2<F, E, any>>>(r: EnforceNonEmptyRecord<NER>) => Kind2<F, E, { [K in keyof NER]: [NER[K]] extends [Kind2<F, any, infer A>] ? A : never; }>; <F extends URIS>(F: Apply1<F>): <NER extends Record<string, Kind<F, any>>>(r: EnforceNonEmptyRecord<NER>) => Kind<F, { [K in keyof NER]: [NER[K]] extends [Kind<F, infer A>] ? A : never; }>; <F>(F: Apply<F>): <NER extends Record<string, HKT<F, any>>>(r: EnforceNonEmptyRecord<NER>) => HKT<F, { [K in keyof NER]: [NER[K]] extends [HKT<F, infer A>] ? A : never; }>; }",
            },
            {
              "docs": [
                "/**
 * Tuple sequencing, i.e., take a tuple of monadic actions and does them from left-to-right, returning the resulting tuple.
 *
 * @example
 * import { sequenceT } from 'fp-ts/Apply'
 * import { option, some, none } from 'fp-ts/Option'
 *
 * const sequenceTOption = sequenceT(option)
 * assert.deepStrictEqual(sequenceTOption(some(1)), some([1]))
 * assert.deepStrictEqual(sequenceTOption(some(1), some('2')), some([1, '2']))
 * assert.deepStrictEqual(sequenceTOption(some(1), some('2'), none), none)
 *
 * @since 2.0.0
 */",
              ],
              "id": "apply.sequenceT",
              "kind": "function",
              "name": "sequenceT",
              "signature": "sequenceT: {
    <F extends URIS4>(F: Apply4<F>): <S, R, E, T extends Kind4<F, S, R, E, any>[]>(
        ...t: T & { readonly 0: Kind4<F, S, R, E, any> }
    ) => Kind4<
        F,
        S,
        R,
        E,
        { [K in keyof T]: [T[K]] extends [Kind4<F, S, R, E, infer A>] ? A : never }
    >;
    <F extends URIS3>(F: Apply3<F>): <R, E, T extends Kind3<F, R, E, any>[]>(
        ...t: T & { readonly 0: Kind3<F, R, E, any> }
    ) => Kind3<
        F,
        R,
        E,
        { [K in keyof T]: [T[K]] extends [Kind3<F, R, E, infer A>] ? A : never }
    >;
    <F extends URIS3, E>(F: Apply3C<F, E>): <R, T extends Kind3<F, R, E, any>[]>(
        ...t: T & { readonly 0: Kind3<F, R, E, any> }
    ) => Kind3<
        F,
        R,
        E,
        { [K in keyof T]: [T[K]] extends [Kind3<F, R, E, infer A>] ? A : never }
    >;
    <F extends URIS2>(F: Apply2<F>): <E, T extends Kind2<F, E, any>[]>(
        ...t: T & { readonly 0: Kind2<F, E, any> }
    ) => Kind2<
        F,
        E,
        { [K in keyof T]: [T[K]] extends [Kind2<F, E, infer A>] ? A : never }
    >;
    <F extends URIS2, E>(F: Apply2C<F, E>): <T extends Kind2<F, E, any>[]>(
        ...t: T & { readonly 0: Kind2<F, E, any> }
    ) => Kind2<
        F,
        E,
        { [K in keyof T]: [T[K]] extends [Kind2<F, E, infer A>] ? A : never }
    >;
    <F extends URIS>(F: Apply1<F>): <T extends Kind<F, any>[]>(
        ...t: T & { readonly 0: Kind<F, any> }
    ) => Kind<F, { [K in keyof T]: [T[K]] extends [Kind<F, infer A>] ? A : never }>;
    <F>(F: Apply<F>): <T extends HKT<F, any>[]>(
        ...t: T & { readonly 0: HKT<F, any> }
    ) => HKT<F, { [K in keyof T]: [T[K]] extends [HKT<F, infer A>] ? A : never }>;
};",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 103,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L103",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L103",
              },
              "type": "{ <F extends URIS4>(F: Apply4<F>): <S, R, E, T extends Kind4<F, S, R, E, any>[]>(...t: T & { readonly 0: Kind4<F, S, R, E, any>; }) => Kind4<F, S, R, E, { [K in keyof T]: [T[K]] extends [Kind4<F, S, R, E, infer A>] ? A : never; }>; <F extends URIS3>(F: Apply3<F>): <R, E, T extends Kind3<F, R, E, any>[]>(...t: T & { readonly 0: Kind3<F, R, E, any>; }) => Kind3<F, R, E, { [K in keyof T]: [T[K]] extends [Kind3<F, R, E, infer A>] ? A : never; }>; <F extends URIS3, E>(F: Apply3C<F, E>): <R, T extends Kind3<F, R, E, any>[]>(...t: T & { readonly 0: Kind3<F, R, E, any>; }) => Kind3<F, R, E, { [K in keyof T]: [T[K]] extends [Kind3<F, R, E, infer A>] ? A : never; }>; <F extends URIS2>(F: Apply2<F>): <E, T extends Kind2<F, E, any>[]>(...t: T & { readonly 0: Kind2<F, E, any>; }) => Kind2<F, E, { [K in keyof T]: [T[K]] extends [Kind2<F, E, infer A>] ? A : never; }>; <F extends URIS2, E>(F: Apply2C<F, E>): <T extends Kind2<F, E, any>[]>(...t: T & { readonly 0: Kind2<F, E, any>; }) => Kind2<F, E, { [K in keyof T]: [T[K]] extends [Kind2<F, E, infer A>] ? A : never; }>; <F extends URIS>(F: Apply1<F>): <T extends Kind<F, any>[]>(...t: T & { readonly 0: Kind<F, any>; }) => Kind<F, { [K in keyof T]: [T[K]] extends [Kind<F, infer A>] ? A : never; }>; <F>(F: Apply<F>): <T extends HKT<F, any>[]>(...t: T & { readonly 0: HKT<F, any>; }) => HKT<F, { [K in keyof T]: [T[K]] extends [HKT<F, infer A>] ? A : never; }>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "apply.Apply",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "apply.Apply.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(fab: HKT<F, (a: A) => B>, fa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/Apply.d.ts",
                      "line": 45,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L45",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L45",
                    },
                    "type": "<A, B>(fab: HKT<F, (a: A) => B>, fa: HKT<F, A>) => HKT<F, B>",
                  },
                ],
              },
              "name": "Apply",
              "signature": "interface Apply<F> extends Functor<F> {}",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 44,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L44",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L44",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "apply.Apply1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "apply.Apply1.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(fab: Kind<F, (a: A) => B>, fa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/Apply.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L52",
                    },
                    "type": "<A, B>(fab: Kind<F, (a: A) => B>, fa: Kind<F, A>) => Kind<F, B>",
                  },
                ],
              },
              "name": "Apply1",
              "signature": "interface Apply1<F extends URIS> extends Functor1<F> {}",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L51",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "apply.Apply2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "apply.Apply2.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <E, A, B>(
    fab: Kind2<F, E, (a: A) => B>,
    fa: Kind2<F, E, A>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Apply.d.ts",
                      "line": 59,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L59",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L59",
                    },
                    "type": "<E, A, B>(fab: Kind2<F, E, (a: A) => B>, fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "Apply2",
              "signature": "interface Apply2<F extends URIS2> extends Functor2<F> {}",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 58,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L58",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L58",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "apply.Apply2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "apply.Apply2C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A, B>(
    fab: Kind2<F, E, (a: A) => B>,
    fa: Kind2<F, E, A>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Apply.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L66",
                    },
                    "type": "<A, B>(fab: Kind2<F, E, (a: A) => B>, fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "Apply2C",
              "signature": "interface Apply2C<F extends URIS2, E> extends Functor2C<F, E> {}",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 65,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L65",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L65",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "apply.Apply3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "apply.Apply3.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, E, A, B>(
    fab: Kind3<F, R, E, (a: A) => B>,
    fa: Kind3<F, R, E, A>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Apply.d.ts",
                      "line": 73,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L73",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L73",
                    },
                    "type": "<R, E, A, B>(fab: Kind3<F, R, E, (a: A) => B>, fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "Apply3",
              "signature": "interface Apply3<F extends URIS3> extends Functor3<F> {}",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 72,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L72",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L72",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "apply.Apply3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "apply.Apply3C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, A, B>(
    fab: Kind3<F, R, E, (a: A) => B>,
    fa: Kind3<F, R, E, A>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Apply.d.ts",
                      "line": 80,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L80",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L80",
                    },
                    "type": "<R, A, B>(fab: Kind3<F, R, E, (a: A) => B>, fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "Apply3C",
              "signature": "interface Apply3C<F extends URIS3, E> extends Functor3C<F, E> {}",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 79,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L79",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L79",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "apply.Apply4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "apply.Apply4.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, R, E, A, B>(
    fab: Kind4<F, S, R, E, (a: A) => B>,
    fa: Kind4<F, S, R, E, A>
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Apply.d.ts",
                      "line": 87,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L87",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L87",
                    },
                    "type": "<S, R, E, A, B>(fab: Kind4<F, S, R, E, (a: A) => B>, fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "Apply4",
              "signature": "interface Apply4<F extends URIS4> extends Functor4<F> {}",
              "source": {
                "filename": "lib/Apply.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L86",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Apply\` class provides the \`ap\` which is used to apply a function to an argument under a type constructor.
 *
 * \`Apply\` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor
 * \`f\`.
 *
 * Instances must satisfy the following law in addition to the \`Functor\` laws:
 *
 * 1. Associative composition: \`F.ap(F.ap(F.map(fbc, bc => ab => a => bc(ab(a))), fab), fa) <-> F.ap(fbc, F.ap(fab, fa))\`
 *
 * Formally, \`Apply\` represents a strong lax semi-monoidal endofunctor.
 *
 * @example
 * import * as O from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * const f = (a: string) => (b: number) => (c: boolean) => a + String(b) + (c ? 'true' : 'false')
 * const fa: O.Option<string> = O.some('s')
 * const fb: O.Option<number> = O.some(1)
 * const fc: O.Option<boolean> = O.some(true)
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     // lift a function
 *     O.some(f),
 *     // apply the first argument
 *     O.ap(fa),
 *     // apply the second argument
 *     O.ap(fb),
 *     // apply the third argument
 *     O.ap(fc)
 *   ),
 *   O.some('s1true')
 * )
 *
 * @since 2.0.0
 */",
        ],
        "id": "apply",
        "kind": "namespace",
        "name": "apply",
        "signature": "module 'lib/Apply.d.ts' {}",
        "source": {
          "filename": "lib/Apply.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "array.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <A>(that: Lazy<A[]>) => (fa: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1040,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1040",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1040",
              },
              "type": "<A>(that: Lazy<A[]>) => (fa: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "array.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <B>(that: Lazy<B[]>) => <A>(fa: A[]) => (B | A)[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1032,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1032",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1032",
              },
              "type": "<B>(that: Lazy<B[]>) => <A>(fa: A[]) => (B | A)[]",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "array.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(fa: A[]) => <B>(fab: ((a: A) => B)[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 926,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L926",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L926",
              },
              "type": "<A>(fa: A[]) => <B>(fab: ((a: A) => B)[]) => B[]",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(fb: B[]) => <A>(fa: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 935,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L935",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L935",
              },
              "type": "<B>(fb: B[]) => <A>(fa: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "array.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: B[]
) => (fa: A[]) => { [K in N | keyof A]: K extends keyof A ? A[K] : B }[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1303,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1303",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1303",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: B[]) => (fa: A[]) => { [K in N | keyof A]: K extends keyof A ? A[K] : B; }[]",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(fb: B[]) => <A>(fa: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 944,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L944",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L944",
              },
              "type": "<B>(fb: B[]) => <A>(fa: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "array.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => B[]
) => (fa: A[]) => { [K in N | keyof A]: K extends keyof A ? A[K] : B }[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1290,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1290",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1290",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => B[]) => (fa: A[]) => { [K in N | keyof A]: K extends keyof A ? A[K] : B; }[]",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "array.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(name: N) => <A>(fa: A[]) => { [K in N]: A }[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1278,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1278",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1278",
              },
              "type": "<N extends string>(name: N) => <A>(fa: A[]) => { [K in N]: A; }[]",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "array.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(f: (a: A) => B[]) => (ma: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 951,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L951",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L951",
              },
              "type": "<A, B>(f: (a: A) => B[]) => (ma: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(f: (a: A) => B[]) => (ma: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 965,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L965",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L965",
              },
              "type": "<A, B>(f: (a: A) => B[]) => (ma: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * @since 2.7.0
 */",
              ],
              "id": "array.chainWithIndex",
              "kind": "function",
              "name": "chainWithIndex",
              "signature": "chainWithIndex: <A, B>(f: (index: number, a: A) => B[]) => (ma: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 955,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L955",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L955",
              },
              "type": "<A, B>(f: (index: number, a: A) => B[]) => (ma: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * A useful recursion pattern for processing an array to produce a new array, often used for "chopping" up the input
 * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a
 * value and the rest of the array.
 *
 * @example
 * import { Eq, eqNumber } from 'fp-ts/Eq'
 * import { chop, spanLeft } from 'fp-ts/Array'
 *
 * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {
 *   return chop(as => {
 *     const { init, rest } = spanLeft((a: A) => S.equals(a, as[0]))(as)
 *     return [init, rest]
 *   })
 * }
 * assert.deepStrictEqual(group(eqNumber)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.chop",
              "kind": "function",
              "name": "chop",
              "signature": "chop: <A, B>(f: (as: NonEmptyArray<A>) => [B, A[]]) => (as: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 777,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L777",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L777",
              },
              "type": "<A, B>(f: (as: NonEmptyArray<A>) => [B, A[]]) => (as: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * Splits an array into length-\`n\` pieces. The last piece will be shorter if \`n\` does not evenly divide the length of
 * the array. Note that \`chunksOf(n)([])\` is \`[]\`, not \`[[]]\`. This is intentional, and is consistent with a recursive
 * definition of \`chunksOf\`; it satisfies the property that
 *
 * \`\`\`ts
 * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))
 * \`\`\`
 *
 * whenever \`n\` evenly divides the length of \`xs\`.
 *
 * @example
 * import { chunksOf } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.chunksOf",
              "kind": "function",
              "name": "chunksOf",
              "signature": "chunksOf: (n: number) => <A>(as: A[]) => A[][];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 807,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L807",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L807",
              },
              "type": "(n: number) => <A>(as: A[]) => A[][]",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "array.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <A>(fa: Option<A>[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 975,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L975",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L975",
              },
              "type": "<A>(fa: Option<A>[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Array comprehension
 *
 * \`\`\`
 * [ f(x, y, ...) | x ← xs, y ← ys, ..., g(x, y, ...) ]
 * \`\`\`
 *
 * @example
 * import { comprehension } from 'fp-ts/Array'
 * import { tuple } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(comprehension([[1, 2, 3], ['a', 'b']], tuple, (a, b) => (a + b.length) % 2 === 0), [
 *   [1, 'a'],
 *   [1, 'b'],
 *   [3, 'a'],
 *   [3, 'b']
 * ])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "array.comprehension",
              "kind": "function",
              "name": "comprehension",
              "signature": "comprehension: {
    <A, B, C, D, R>(
        input: [Array<A>, Array<B>, Array<C>, Array<D>],
        f: (a: A, b: B, c: C, d: D) => R,
        g?: (a: A, b: B, c: C, d: D) => boolean
    ): Array<R>;
    <A, B, C, R>(
        input: [A[], B[], C[]],
        f: (a: A, b: B, c: C) => R,
        g?: (a: A, b: B, c: C) => boolean
    ): R[];
    <A, R>(input: [A[]], f: (a: A) => R, g?: (a: A) => boolean): R[];
    <A, B, R>(
        input: [A[], B[]],
        f: (a: A, b: B) => R,
        g?: (a: A, b: B) => boolean
    ): R[];
    <A, R>(input: [A[]], f: (a: A) => boolean, g?: (a: A) => R): R[];
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 829,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L829",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L829",
              },
              "type": "{ <A, B, C, D, R>(input: [Array<A>, Array<B>, Array<C>, Array<D>], f: (a: A, b: B, c: C, d: D) => R, g?: (a: A, b: B, c: C, d: D) => boolean): Array<R>; <A, B, C, R>(input: [A[], B[], C[]], f: (a: A, b: B, c: C) => R, g?: (a: A, b: B, c: C) => boolean): R[]; <A, R>(input: [A[]], f: (a: A) => R, g?: (a: A) => boolean): R[]; <A, B, R>(input: [A[], B[]], f: (a: A, b: B) => R, g?: (a: A, b: B) => boolean): R[]; <A, R>(input: [A[]], f: (a: A) => boolean, g?: (a: A) => R): R[]; }",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.copy",
              "kind": "function",
              "name": "copy",
              "signature": "copy: <A>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 512,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L512",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L512",
              },
              "type": "<A>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Delete the element at the specified index, creating a new array, or returning \`None\` if the index is out of bounds
 *
 * @example
 * import { deleteAt } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))
 * assert.deepStrictEqual(deleteAt(1)([]), none)
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.deleteAt",
              "kind": "function",
              "name": "deleteAt",
              "signature": "deleteAt: (i: number) => <A>(as: A[]) => Option<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 550,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L550",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L550",
              },
              "type": "(i: number) => <A>(as: A[]) => Option<A[]>",
            },
            {
              "docs": [
                "/**
 * Creates an array of array values not included in the other given array using a \`Eq\` for equality
 * comparisons. The order and references of result values are determined by the first array.
 *
 * @example
 * import { difference } from 'fp-ts/Array'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2], difference(eqNumber)([2, 3])), [1])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.difference",
              "kind": "function",
              "name": "difference",
              "signature": "difference: <A>(E: Eq<A>) => {
    (xs: A[]): (ys: A[]) => A[];
    (xs: A[], ys: A[]): A[];
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 899,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L899",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L899",
              },
              "type": "<A>(E: Eq<A>) => { (xs: A[]): (ys: A[]) => A[]; (xs: A[], ys: A[]): A[]; }",
            },
            {
              "docs": [
                "/**
 * Drop a number of elements from the start of an array, creating a new array
 *
 * @example
 * import { dropLeft } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.dropLeft",
              "kind": "function",
              "name": "dropLeft",
              "signature": "dropLeft: (n: number) => <A>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 381,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L381",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L381",
              },
              "type": "(n: number) => <A>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new array
 *
 * @example
 * import { dropLeftWhile } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(dropLeftWhile((n: number) => n % 2 === 1)([1, 3, 2, 4, 5]), [2, 4, 5])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.dropLeftWhile",
              "kind": "function",
              "name": "dropLeftWhile",
              "signature": "dropLeftWhile: <A>(predicate: Predicate<A>) => (as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 405,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L405",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L405",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Drop a number of elements from the end of an array, creating a new array
 *
 * @example
 * import { dropRight } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(dropRight(2)([1, 2, 3, 4, 5]), [1, 2, 3])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.dropRight",
              "kind": "function",
              "name": "dropRight",
              "signature": "dropRight: (n: number) => <A>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 393,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L393",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L393",
              },
              "type": "(n: number) => <A>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <A>(wa: A[]) => A[][];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1065,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1065",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1065",
              },
              "type": "<A>(wa: A[]) => A[][]",
            },
            {
              "docs": [
                "/**
 * Test if a value is a member of an array. Takes a \`Eq<A>\` as a single
 * argument which returns the function to use to search for a value of type \`A\` in
 * an array of type \`Array<A>\`.
 *
 * @example
 * import { elem } from 'fp-ts/Array'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(2)), true)
 * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(0)), false)
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): (as: A[]) => boolean;
    (a: A, as: A[]): boolean;
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 709,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L709",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L709",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): (as: A[]) => boolean; (a: A, as: A[]): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "array.every",
              "kind": "function",
              "name": "every",
              "signature": "every: <A>(predicate: Predicate<A>) => (as: A[]) => boolean;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1266,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1266",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1266",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: A[]) => boolean",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "array.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <A, B>(f: (fa: A[]) => B) => (wa: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1058,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1058",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1058",
              },
              "type": "<A, B>(f: (fa: A[]) => B) => (wa: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "array.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <A, B>(f: (a: A) => Option<B>) => (fa: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 993,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L993",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L993",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (fa: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.filterMapWithIndex",
              "kind": "function",
              "name": "filterMapWithIndex",
              "signature": "filterMapWithIndex: <A, B>(
    f: (i: number, a: A) => Option<B>
) => (fa: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1045,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1045",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1045",
              },
              "type": "<A, B>(f: (i: number, a: A) => Option<B>) => (fa: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * Find the first element which satisfies a predicate (or a refinement) function
 *
 * @example
 * import { findFirst } from 'fp-ts/Array'
 * import { some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(findFirst((x: { a: number, b: number }) => x.a === 1)([{ a: 1, b: 1 }, { a: 1, b: 2 }]), some({ a: 1, b: 1 }))
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.findFirst",
              "kind": "function",
              "name": "findFirst",
              "signature": "findFirst: {
    <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => Option<B>;
    <A>(predicate: Predicate<A>): (as: A[]) => Option<A>;
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 431,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L431",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L431",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => Option<B>; <A>(predicate: Predicate<A>): (as: A[]) => Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Find the first element returned by an option based selector function
 *
 * @example
 * import { findFirstMap } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * interface Person {
 *   name: string
 *   age?: number
 * }
 *
 * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
 *
 * // returns the name of the first person that has an age
 * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.findFirstMap",
              "kind": "function",
              "name": "findFirstMap",
              "signature": "findFirstMap: <A, B>(f: (a: A) => Option<B>) => (as: A[]) => Option<B>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 453,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L453",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L453",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (as: A[]) => Option<B>",
            },
            {
              "docs": [
                "/**
 * Find the first index for which a predicate holds
 *
 * @example
 * import { findIndex } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))
 * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.findIndex",
              "kind": "function",
              "name": "findIndex",
              "signature": "findIndex: <A>(predicate: Predicate<A>) => (as: A[]) => Option<number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 418,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L418",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L418",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: A[]) => Option<number>",
            },
            {
              "docs": [
                "/**
 * Find the last element which satisfies a predicate function
 *
 * @example
 * import { findLast } from 'fp-ts/Array'
 * import { some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(findLast((x: { a: number, b: number }) => x.a === 1)([{ a: 1, b: 1 }, { a: 1, b: 2 }]), some({ a: 1, b: 2 }))
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.findLast",
              "kind": "function",
              "name": "findLast",
              "signature": "findLast: {
    <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => Option<B>;
    <A>(predicate: Predicate<A>): (as: A[]) => Option<A>;
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 466,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L466",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L466",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => Option<B>; <A>(predicate: Predicate<A>): (as: A[]) => Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Returns the index of the last element of the list which matches the predicate
 *
 * @example
 * import { findLastIndex } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * interface X {
 *   a: number
 *   b: number
 * }
 * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]
 * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 1)(xs), some(1))
 * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 4)(xs), none)
 *
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.findLastIndex",
              "kind": "function",
              "name": "findLastIndex",
              "signature": "findLastIndex: <A>(predicate: Predicate<A>) => (as: A[]) => Option<number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 507,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L507",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L507",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: A[]) => Option<number>",
            },
            {
              "docs": [
                "/**
 * Find the last element returned by an option based selector function
 *
 * @example
 * import { findLastMap } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * interface Person {
 *   name: string
 *   age?: number
 * }
 *
 * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
 *
 * // returns the name of the last person that has an age
 * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.findLastMap",
              "kind": "function",
              "name": "findLastMap",
              "signature": "findLastMap: <A, B>(f: (a: A) => Option<B>) => (as: A[]) => Option<B>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 488,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L488",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L488",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (as: A[]) => Option<B>",
            },
            {
              "docs": [
                "/**
 * Removes one level of nesting.
 *
 * Derivable from \`Monad\`.
 *
 * @example
 * import { flatten } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(flatten([[1], [2], [3]]), [1, 2, 3])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: A[][]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L132",
              },
              "type": "<A>(mma: A[][]) => A[]",
            },
            {
              "docs": [
                "/**
 * Break an array into its first element and remaining elements
 *
 * @example
 * import { foldLeft } from 'fp-ts/Array'
 *
 * const len: <A>(as: Array<A>) => number = foldLeft(() => 0, (_, tail) => 1 + len(tail))
 * assert.strictEqual(len([1, 2, 3]), 3)
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.foldLeft",
              "kind": "function",
              "name": "foldLeft",
              "signature": "foldLeft: <A, B>(
    onEmpty: Lazy<B>,
    onCons: (head: A, tail: A[]) => B
) => (as: A[]) => B;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 145,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L145",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L145",
              },
              "type": "<A, B>(onEmpty: Lazy<B>, onCons: (head: A, tail: A[]) => B) => (as: A[]) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "array.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: A[]) => M;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1070,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1070",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1070",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: A[]) => M",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.foldMapWithIndex",
              "kind": "function",
              "name": "foldMapWithIndex",
              "signature": "foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: number, a: A) => M) => (fa: A[]) => M;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1075,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1075",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1075",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (i: number, a: A) => M) => (fa: A[]) => M",
            },
            {
              "docs": [
                "/**
 * Break an array into its initial elements and the last element
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.foldRight",
              "kind": "function",
              "name": "foldRight",
              "signature": "foldRight: <A, B>(
    onEmpty: Lazy<B>,
    onCons: (init: A[], last: A) => B
) => (as: A[]) => B;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 152,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L152",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L152",
              },
              "type": "<A, B>(onEmpty: Lazy<B>, onCons: (init: A[], last: A) => B) => (as: A[]) => B",
            },
            {
              "docs": [
                "/**
 * Derives an \`Eq\` over the \`Array\` of a given element type from the \`Eq\` of that type. The derived \`Eq\` defines two
 * arrays as equal if all elements of both arrays are compared equal pairwise with the given \`E\`. In case of arrays of
 * different lengths, the result is non equality.
 *
 * @example
 * import { eqString } from 'fp-ts/Eq'
 * import { getEq } from 'fp-ts/Array'
 *
 * const E = getEq(eqString)
 * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)
 * assert.strictEqual(E.equals(['a'], []), false)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "array.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 62,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L62",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L62",
              },
              "type": "<A>(E: Eq<A>) => Eq<A[]>",
            },
            {
              "docs": [
                "/**
 * Returns a \`Monoid\` for \`Array<A>\`
 *
 * @example
 * import { getMonoid } from 'fp-ts/Array'
 *
 * const M = getMonoid<number>()
 * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "array.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <A = never>() => Monoid<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L45",
              },
              "type": "<A = never>() => Monoid<A[]>",
            },
            {
              "docs": [
                "/**
 * Derives an \`Ord\` over the \`Array\` of a given element type from the \`Ord\` of that type. The ordering between two such
 * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in
 * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have
 * the same length, the result is equality.
 *
 * @example
 * import { getOrd } from 'fp-ts/Array'
 * import { ordString } from 'fp-ts/Ord'
 *
 * const O = getOrd(ordString)
 * assert.strictEqual(O.compare(['b'], ['a']), 1)
 * assert.strictEqual(O.compare(['a'], ['a']), 0)
 * assert.strictEqual(O.compare(['a'], ['b']), -1)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "array.getOrd",
              "kind": "function",
              "name": "getOrd",
              "signature": "getOrd: <A>(O: Ord<A>) => Ord<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L81",
              },
              "type": "<A>(O: Ord<A>) => Ord<A[]>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "array.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L32",
              },
              "type": "<A>(S: Show<A>) => Show<A[]>",
            },
            {
              "docs": [
                "/**
 * Get the first element in an array, or \`None\` if the array is empty
 *
 * @example
 * import { head } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(head([1, 2, 3]), some(1))
 * assert.deepStrictEqual(head([]), none)
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.head",
              "kind": "function",
              "name": "head",
              "signature": "head: <A>(as: A[]) => Option<A>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 259,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L259",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L259",
              },
              "type": "<A>(as: A[]) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Get all but the last element of an array, creating a new array, or \`None\` if the array is empty
 *
 * @example
 * import { init } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))
 * assert.deepStrictEqual(init([]), none)
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.init",
              "kind": "function",
              "name": "init",
              "signature": "init: <A>(as: A[]) => Option<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 301,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L301",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L301",
              },
              "type": "<A>(as: A[]) => Option<A[]>",
            },
            {
              "docs": [
                "/**
 * Insert an element at the specified index, creating a new array, or returning \`None\` if the index is out of bounds
 *
 * @example
 * import { insertAt } from 'fp-ts/Array'
 * import { some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <A>(i: number, a: A) => (as: A[]) => Option<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 524,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L524",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L524",
              },
              "type": "<A>(i: number, a: A) => (as: A[]) => Option<A[]>",
            },
            {
              "docs": [
                "/**
 * Creates an array of unique values that are included in all given arrays using a \`Eq\` for equality
 * comparisons. The order and references of result values are determined by the first array.
 *
 * @example
 * import { intersection } from 'fp-ts/Array'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2], intersection(eqNumber)([2, 3])), [2])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.intersection",
              "kind": "function",
              "name": "intersection",
              "signature": "intersection: <A>(E: Eq<A>) => {
    (xs: A[]): (ys: A[]) => A[];
    (xs: A[], ys: A[]): A[];
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 879,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L879",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L879",
              },
              "type": "<A>(E: Eq<A>) => { (xs: A[]): (ys: A[]) => A[]; (xs: A[], ys: A[]): A[]; }",
            },
            {
              "docs": [
                "/**
 * Places an element in between members of an array
 *
 * @example
 * import { intersperse } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "array.intersperse",
              "kind": "function",
              "name": "intersperse",
              "signature": "intersperse: <A>(e: A) => (as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 681,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L681",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L681",
              },
              "type": "<A>(e: A) => (as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Test whether an array is empty
 *
 * @example
 * import { isEmpty } from 'fp-ts/Array'
 *
 * assert.strictEqual(isEmpty([]), true)
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.isEmpty",
              "kind": "function",
              "name": "isEmpty",
              "signature": "isEmpty: <A>(as: A[]) => boolean;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 187,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L187",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L187",
              },
              "type": "<A>(as: A[]) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether an array is non empty narrowing down the type to \`NonEmptyArray<A>\`
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "array.isNonEmpty",
              "kind": "function",
              "name": "isNonEmpty",
              "signature": "isNonEmpty: <A>(as: A[]) => as is NonEmptyArray<A>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L194",
              },
              "type": "<A>(as: A[]) => as is NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Test whether an array contains a particular index
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.isOutOfBound",
              "kind": "function",
              "name": "isOutOfBound",
              "signature": "isOutOfBound: <A>(i: number, as: A[]) => boolean;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 200,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L200",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L200",
              },
              "type": "<A>(i: number, as: A[]) => boolean",
            },
            {
              "docs": [
                "/**
 * Get the last element in an array, or \`None\` if the array is empty
 *
 * @example
 * import { last } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(last([1, 2, 3]), some(3))
 * assert.deepStrictEqual(last([]), none)
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.last",
              "kind": "function",
              "name": "last",
              "signature": "last: <A>(as: A[]) => Option<A>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 273,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L273",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L273",
              },
              "type": "<A>(as: A[]) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Extracts from an array of \`Either\` all the \`Left\` elements. All the \`Left\` elements are extracted in order
 *
 * @example
 * import { lefts } from 'fp-ts/Array'
 * import { left, right } from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.lefts",
              "kind": "function",
              "name": "lefts",
              "signature": "lefts: <E, A>(as: Either<E, A>[]) => E[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 603,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L603",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L603",
              },
              "type": "<E, A>(as: Either<E, A>[]) => E[]",
            },
            {
              "docs": [
                "/**
 * Return a list of length \`n\` with element \`i\` initialized with \`f(i)\`
 *
 * @example
 * import { makeBy } from 'fp-ts/Array'
 *
 * const double = (n: number): number => n * 2
 * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "array.makeBy",
              "kind": "function",
              "name": "makeBy",
              "signature": "makeBy: <A>(n: number, f: (i: number) => A) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 94,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L94",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L94",
              },
              "type": "<A>(n: number, f: (i: number) => A) => A[]",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "array.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 919,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L919",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L919",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * @category FunctorWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <A, B>(f: (i: number, a: A) => B) => (fa: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 970,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L970",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L970",
              },
              "type": "<A, B>(f: (i: number, a: A) => B) => (fa: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * Apply a function to the element at the specified index, creating a new array, or returning \`None\` if the index is out
 * of bounds
 *
 * @example
 * import { modifyAt } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * const double = (x: number): number => x * 2
 * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))
 * assert.deepStrictEqual(modifyAt(1, double)([]), none)
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <A>(i: number, f: (a: A) => A) => (as: A[]) => Option<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 565,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L565",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L565",
              },
              "type": "<A>(i: number, f: (a: A) => A) => (as: A[]) => Option<A[]>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "array.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (fa: A[]) => Separated<B[], C[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1016,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1016",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1016",
              },
              "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: A[]) => Separated<B[], C[]>",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.partitionMapWithIndex",
              "kind": "function",
              "name": "partitionMapWithIndex",
              "signature": "partitionMapWithIndex: <A, B, C>(
    f: (i: number, a: A) => Either<B, C>
) => (fa: A[]) => Separated<B[], C[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1023,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1023",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1023",
              },
              "type": "<A, B, C>(f: (i: number, a: A) => Either<B, C>) => (fa: A[]) => Separated<B[], C[]>",
            },
            {
              "docs": [
                "/**
 * Prepend an element to every member of an array
 *
 * @example
 * import { prependToAll } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(prependToAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "array.prependToAll",
              "kind": "function",
              "name": "prependToAll",
              "signature": "prependToAll: <A>(e: A) => (xs: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 669,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L669",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L669",
              },
              "type": "<A>(e: A) => (xs: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Create an array containing a range of integers, including both endpoints
 *
 * @example
 * import { range } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "array.range",
              "kind": "function",
              "name": "range",
              "signature": "range: (start: number, end: number) => Array<number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L106",
              },
              "type": "(start: number, end: number) => Array<number>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "array.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: A[]) => B;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1080,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1080",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1080",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: A[]) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "array.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: A[]) => B;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1090,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1090",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1090",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: A[]) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.reduceRightWithIndex",
              "kind": "function",
              "name": "reduceRightWithIndex",
              "signature": "reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: number, a: A, b: B) => B
) => (fa: A[]) => B;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1095,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1095",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1095",
              },
              "type": "<A, B>(b: B, f: (i: number, a: A, b: B) => B) => (fa: A[]) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.reduceWithIndex",
              "kind": "function",
              "name": "reduceWithIndex",
              "signature": "reduceWithIndex: <A, B>(b: B, f: (i: number, b: B, a: A) => B) => (fa: A[]) => B;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1085,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1085",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1085",
              },
              "type": "<A, B>(b: B, f: (i: number, b: B, a: A) => B) => (fa: A[]) => B",
            },
            {
              "docs": [
                "/**
 * Create an array containing a value repeated the specified number of times
 *
 * @example
 * import { replicate } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "array.replicate",
              "kind": "function",
              "name": "replicate",
              "signature": "replicate: <A>(n: number, a: A) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L118",
              },
              "type": "<A>(n: number, a: A) => A[]",
            },
            {
              "docs": [
                "/**
 * Reverse an array, creating a new array
 *
 * @example
 * import { reverse } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.reverse",
              "kind": "function",
              "name": "reverse",
              "signature": "reverse: <A>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 577,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L577",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L577",
              },
              "type": "<A>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Extracts from an array of \`Either\` all the \`Right\` elements. All the \`Right\` elements are extracted in order
 *
 * @example
 * import { rights } from 'fp-ts/Array'
 * import { right, left } from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.rights",
              "kind": "function",
              "name": "rights",
              "signature": "rights: <E, A>(as: Either<E, A>[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 590,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L590",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L590",
              },
              "type": "<E, A>(as: Either<E, A>[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Rotate an array to the right by \`n\` steps
 *
 * @example
 * import { rotate } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.rotate",
              "kind": "function",
              "name": "rotate",
              "signature": "rotate: (n: number) => <A>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 693,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L693",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L693",
              },
              "type": "(n: number) => <A>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Same as \`reduce\` but it carries over the intermediate steps
 *
 * @example
 * import { scanLeft } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.scanLeft",
              "kind": "function",
              "name": "scanLeft",
              "signature": "scanLeft: <A, B>(b: B, f: (b: B, a: A) => B) => (as: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 164,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L164",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L164",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (as: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * Fold an array from the right, keeping all intermediate results instead of only the final result
 *
 * @example
 * import { scanRight } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.scanRight",
              "kind": "function",
              "name": "scanRight",
              "signature": "scanRight: <A, B>(b: B, f: (a: A, b: B) => B) => (as: A[]) => B[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L176",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (as: A[]) => B[]",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "array.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <A, B>(fa: Either<A, B>[]) => Separated<A[], B[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 980,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L980",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L980",
              },
              "type": "<A, B>(fa: Either<A, B>[]) => Separated<A[], B[]>",
            },
            {
              "docs": [
                "/**
 * Append an element to the end of an array, creating a new non empty array
 *
 * @example
 * import { snoc } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(snoc([1, 2, 3], 4), [1, 2, 3, 4])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "array.snoc",
              "kind": "function",
              "name": "snoc",
              "signature": "snoc: <A>(init: A[], end: A) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 245,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L245",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L245",
              },
              "type": "<A>(init: A[], end: A) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "array.some",
              "kind": "function",
              "name": "some",
              "signature": "some: <A>(predicate: Predicate<A>) => (as: A[]) => boolean;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1270,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1270",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1270",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: A[]) => boolean",
            },
            {
              "docs": [
                "/**
 * Sort the elements of an array in increasing order, creating a new array
 *
 * @example
 * import { sort } from 'fp-ts/Array'
 * import { ordNumber } from 'fp-ts/Ord'
 *
 * assert.deepStrictEqual(sort(ordNumber)([3, 2, 1]), [1, 2, 3])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.sort",
              "kind": "function",
              "name": "sort",
              "signature": "sort: <B>(O: Ord<B>) => <A extends B>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 616,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L616",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L616",
              },
              "type": "<B>(O: Ord<B>) => <A extends B>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Sort the elements of an array in increasing order, where elements are compared using first \`ords[0]\`, then \`ords[1]\`,
 * etc...
 *
 * @example
 * import { sortBy } from 'fp-ts/Array'
 * import { ord, ordString, ordNumber } from 'fp-ts/Ord'
 *
 * interface Person {
 *   name: string
 *   age: number
 * }
 * const byName = ord.contramap(ordString, (p: Person) => p.name)
 * const byAge = ord.contramap(ordNumber, (p: Person) => p.age)
 *
 * const sortByNameByAge = sortBy([byName, byAge])
 *
 * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]
 * assert.deepStrictEqual(sortByNameByAge(persons), [
 *   { name: 'a', age: 1 },
 *   { name: 'b', age: 2 },
 *   { name: 'b', age: 3 },
 *   { name: 'c', age: 2 }
 * ])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.sortBy",
              "kind": "function",
              "name": "sortBy",
              "signature": "sortBy: <B>(ords: Ord<B>[]) => <A extends B>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 756,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L756",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L756",
              },
              "type": "<B>(ords: Ord<B>[]) => <A extends B>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Split an array into two parts:
 * 1. the longest initial subarray for which all elements satisfy the specified predicate
 * 2. the remaining elements
 *
 * @example
 * import { spanLeft } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(spanLeft((n: number) => n % 2 === 1)([1, 3, 2, 4, 5]), { init: [1, 3], rest: [2, 4, 5] })
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.spanLeft",
              "kind": "function",
              "name": "spanLeft",
              "signature": "spanLeft: {
    <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => {
        init: Array<B>;
        rest: Array<A>;
    };
    <A>(predicate: Predicate<A>): (as: A[]) => { init: A[]; rest: A[] };
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 354,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L354",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L354",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => {    init: Array<B>;    rest: Array<A>;}; <A>(predicate: Predicate<A>): (as: A[]) => { init: A[]; rest: A[]; }; }",
            },
            {
              "docs": [
                "/**
 * Splits an array into two pieces, the first piece has \`n\` elements.
 *
 * @example
 * import { splitAt } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.splitAt",
              "kind": "function",
              "name": "splitAt",
              "signature": "splitAt: (n: number) => <A>(as: A[]) => [A[], A[]];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 788,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L788",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L788",
              },
              "type": "(n: number) => <A>(as: A[]) => [A[], A[]]",
            },
            {
              "docs": [
                "/**
 * Get all but the first element of an array, creating a new array, or \`None\` if the array is empty
 *
 * @example
 * import { tail } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))
 * assert.deepStrictEqual(tail([]), none)
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "array.tail",
              "kind": "function",
              "name": "tail",
              "signature": "tail: <A>(as: A[]) => Option<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 287,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L287",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L287",
              },
              "type": "<A>(as: A[]) => Option<A[]>",
            },
            {
              "docs": [
                "/**
 * Keep only a number of elements from the start of an array, creating a new array.
 * \`n\` must be a natural number
 *
 * @example
 * import { takeLeft } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(takeLeft(2)([1, 2, 3]), [1, 2])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.takeLeft",
              "kind": "function",
              "name": "takeLeft",
              "signature": "takeLeft: (n: number) => <A>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 314,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L314",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L314",
              },
              "type": "(n: number) => <A>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new array
 *
 * @example
 * import { takeLeftWhile } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(takeLeftWhile((n: number) => n % 2 === 0)([2, 4, 3, 6]), [2, 4])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.takeLeftWhile",
              "kind": "function",
              "name": "takeLeftWhile",
              "signature": "takeLeftWhile: {
    <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => Array<B>;
    <A>(predicate: Predicate<A>): (as: A[]) => A[];
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 339,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L339",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L339",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: Array<A>) => Array<B>; <A>(predicate: Predicate<A>): (as: A[]) => A[]; }",
            },
            {
              "docs": [
                "/**
 * Keep only a number of elements from the end of an array, creating a new array.
 * \`n\` must be a natural number
 *
 * @example
 * import { takeRight } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.takeRight",
              "kind": "function",
              "name": "takeRight",
              "signature": "takeRight: (n: number) => <A>(as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 327,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L327",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L327",
              },
              "type": "(n: number) => <A>(as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * Creates an array of unique values, in order, from all given arrays using a \`Eq\` for equality comparisons
 *
 * @example
 * import { union } from 'fp-ts/Array'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2], union(eqNumber)([2, 3])), [1, 2, 3])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.union",
              "kind": "function",
              "name": "union",
              "signature": "union: <A>(E: Eq<A>) => { (xs: A[]): (ys: A[]) => A[]; (xs: A[], ys: A[]): A[] };",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 859,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L859",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L859",
              },
              "type": "<A>(E: Eq<A>) => { (xs: A[]): (ys: A[]) => A[]; (xs: A[], ys: A[]): A[]; }",
            },
            {
              "docs": [
                "/**
 * Remove duplicates from an array, keeping the first occurrence of an element.
 *
 * @example
 * import { uniq } from 'fp-ts/Array'
 * import { eqNumber } from 'fp-ts/Eq'
 *
 * assert.deepStrictEqual(uniq(eqNumber)([1, 2, 1]), [1, 2])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.uniq",
              "kind": "function",
              "name": "uniq",
              "signature": "uniq: <A>(E: Eq<A>) => (as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 727,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L727",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L727",
              },
              "type": "<A>(E: Eq<A>) => (as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * @category unsafe
 * @since 2.0.0
 */",
              ],
              "id": "array.unsafeDeleteAt",
              "kind": "function",
              "name": "unsafeDeleteAt",
              "signature": "unsafeDeleteAt: <A>(i: number, as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1256,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1256",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1256",
              },
              "type": "<A>(i: number, as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * @category unsafe
 * @since 2.0.0
 */",
              ],
              "id": "array.unsafeInsertAt",
              "kind": "function",
              "name": "unsafeInsertAt",
              "signature": "unsafeInsertAt: <A>(i: number, a: A, as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1246,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1246",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1246",
              },
              "type": "<A>(i: number, a: A, as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * @category unsafe
 * @since 2.0.0
 */",
              ],
              "id": "array.unsafeUpdateAt",
              "kind": "function",
              "name": "unsafeUpdateAt",
              "signature": "unsafeUpdateAt: <A>(i: number, a: A, as: A[]) => A[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1251,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1251",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1251",
              },
              "type": "<A>(i: number, a: A, as: A[]) => A[]",
            },
            {
              "docs": [
                "/**
 * The function is reverse of \`zip\`. Takes an array of pairs and return two corresponding arrays
 *
 * @example
 * import { unzip } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.unzip",
              "kind": "function",
              "name": "unzip",
              "signature": "unzip: <A, B>(as: [A, B][]) => [A[], B[]];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 657,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L657",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L657",
              },
              "type": "<A, B>(as: [A, B][]) => [A[], B[]]",
            },
            {
              "docs": [
                "/**
 * Change the element at the specified index, creating a new array, or returning \`None\` if the index is out of bounds
 *
 * @example
 * import { updateAt } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))
 * assert.deepStrictEqual(updateAt(1, 1)([]), none)
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <A>(i: number, a: A) => (as: A[]) => Option<A[]>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 537,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L537",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L537",
              },
              "type": "<A>(i: number, a: A) => (as: A[]) => Option<A[]>",
            },
            {
              "docs": [
                "/**
 * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one
 * input array is short, excess elements of the longer array are discarded.
 *
 * @example
 * import { zipWith } from 'fp-ts/Array'
 *
 * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.zipWith",
              "kind": "function",
              "name": "zipWith",
              "signature": "zipWith: <A, B, C>(fa: A[], fb: B[], f: (a: A, b: B) => C) => C[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 629,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L629",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L629",
              },
              "type": "<A, B, C>(fa: A[], fb: B[], f: (a: A, b: B) => C) => C[]",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "array.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1143,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1143",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1143",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1178",
              },
              "type": "Alt1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Alternative",
              "kind": "variable",
              "name": "Alternative",
              "signature": "const Alternative: Alternative1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1183,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1183",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1183",
              },
              "type": "Alternative1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1163,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1163",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1163",
              },
              "type": "Applicative1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "array.array",
              "kind": "variable",
              "name": "array",
              "signature": "const array: FunctorWithIndex1<'Array', number> &
    Monad1<'Array'> &
    Unfoldable1<'Array'> &
    Alternative1<'Array'> &
    Extend1<'Array'> &
    FilterableWithIndex1<'Array', number> &
    FoldableWithIndex1<'Array', number> &
    TraversableWithIndex1<'Array', number> &
    Witherable1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1233,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1233",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1233",
              },
              "type": "FunctorWithIndex1<"Array", number> & Monad1<"Array"> & Unfoldable1<"Array"> & Alternative1<"Array"> & Extend1<"Array"> & FilterableWithIndex1<"Array", number> & FoldableWithIndex1<"Array", number> & TraversableWithIndex1<"Array", number> & Witherable1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Compactable",
              "kind": "variable",
              "name": "Compactable",
              "signature": "const Compactable: Compactable1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1193,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1193",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1193",
              },
              "type": "Compactable1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Attaches an element to the front of an array, creating a new non empty array
 *
 * @example
 * import { cons } from 'fp-ts/Array'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2, 3], cons(0)), [0, 1, 2, 3])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "array.cons",
              "kind": "variable",
              "name": "cons",
              "signature": "const cons: {
    <A>(head: A): (tail: A[]) => NonEmptyArray<A>;
    <A>(head: A, tail: A[]): NonEmptyArray<A>;
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 230,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L230",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L230",
              },
              "type": "{ <A>(head: A): (tail: A[]) => NonEmptyArray<A>; <A>(head: A, tail: A[]): NonEmptyArray<A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "array.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: {}[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1274,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1274",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1274",
              },
              "type": "{}[]",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * An empty array
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: never[];",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1262",
              },
              "type": "never[]",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Extend",
              "kind": "variable",
              "name": "Extend",
              "signature": "const Extend: Extend1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1188,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1188",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1188",
              },
              "type": "Extend1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "array.filter",
              "kind": "variable",
              "name": "filter",
              "signature": "const filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (fa: A[]) => B[];
    <A>(predicate: Predicate<A>): (fa: A[]) => A[];
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 985,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L985",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L985",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: A[]) => B[]; <A>(predicate: Predicate<A>): (fa: A[]) => A[]; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Filterable",
              "kind": "variable",
              "name": "Filterable",
              "signature": "const Filterable: Filterable1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1198,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1198",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1198",
              },
              "type": "Filterable1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.FilterableWithIndex",
              "kind": "variable",
              "name": "FilterableWithIndex",
              "signature": "const FilterableWithIndex: FilterableWithIndex1<'Array', number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1203",
              },
              "type": "FilterableWithIndex1<"Array", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.filterWithIndex",
              "kind": "variable",
              "name": "filterWithIndex",
              "signature": "const filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (
        fa: A[]
    ) => B[];
    <A>(predicateWithIndex: PredicateWithIndex<number, A>): (fa: A[]) => A[];
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1050,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1050",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1050",
              },
              "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (fa: A[]) => B[]; <A>(predicateWithIndex: PredicateWithIndex<number, A>): (fa: A[]) => A[]; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1208,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1208",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1208",
              },
              "type": "Foldable1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.FoldableWithIndex",
              "kind": "variable",
              "name": "FoldableWithIndex",
              "signature": "const FoldableWithIndex: FoldableWithIndex1<'Array', number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1213,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1213",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1213",
              },
              "type": "FoldableWithIndex1<"Array", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1153",
              },
              "type": "Functor1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.FunctorWithIndex",
              "kind": "variable",
              "name": "FunctorWithIndex",
              "signature": "const FunctorWithIndex: FunctorWithIndex1<'Array', number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1158",
              },
              "type": "FunctorWithIndex1<"Array", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * This function provides a safe way to read a value at a particular index from an array
 *
 * @example
 * import { lookup } from 'fp-ts/Array'
 * import { some, none } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))
 * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)
 *
 * @since 2.0.0
 */",
              ],
              "id": "array.lookup",
              "kind": "variable",
              "name": "lookup",
              "signature": "const lookup: {
    (i: number): <A>(as: A[]) => Option<A>;
    <A>(i: number, as: A[]): Option<A>;
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 214,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L214",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L214",
              },
              "type": "{ (i: number): <A>(as: A[]) => Option<A>; <A>(i: number, as: A[]): Option<A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1168,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1168",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1168",
              },
              "type": "Monad1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "array.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 911,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L911",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L911",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "array.partition",
              "kind": "variable",
              "name": "partition",
              "signature": "const partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (fa: A[]) => Separated<A[], B[]>;
    <A>(predicate: Predicate<A>): (fa: A[]) => Separated<A[], A[]>;
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 998,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L998",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L998",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: A[]) => Separated<A[], B[]>; <A>(predicate: Predicate<A>): (fa: A[]) => Separated<A[], A[]>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "array.partitionWithIndex",
              "kind": "variable",
              "name": "partitionWithIndex",
              "signature": "const partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (
        fa: A[]
    ) => Separated<A[], B[]>;
    <A>(predicateWithIndex: PredicateWithIndex<number, A>): (
        fa: A[]
    ) => Separated<A[], A[]>;
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1006,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1006",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1006",
              },
              "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (fa: A[]) => Separated<A[], B[]>; <A>(predicateWithIndex: PredicateWithIndex<number, A>): (fa: A[]) => Separated<A[], A[]>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * **for optimized and stack safe version check the data types \`sequenceArray\` function**
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "array.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1107,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1107",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1107",
              },
              "type": "Sequence1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1218,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1218",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1218",
              },
              "type": "Traversable1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.TraversableWithIndex",
              "kind": "variable",
              "name": "TraversableWithIndex",
              "signature": "const TraversableWithIndex: TraversableWithIndex1<'Array', number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1223,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1223",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1223",
              },
              "type": "TraversableWithIndex1<"Array", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * **for optimized and stack safe version check the data types \`traverseArray\` function**
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "array.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1101",
              },
              "type": "PipeableTraverse1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * **for optimized and stack safe version check the data types \`traverseArrayWithIndex\` function**
 * @category TraversableWithIndex
 * @since 2.6.3
 */",
              ],
              "id": "array.traverseWithIndex",
              "kind": "variable",
              "name": "traverseWithIndex",
              "signature": "const traverseWithIndex: PipeableTraverseWithIndex1<'Array', number>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1113,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1113",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1113",
              },
              "type": "PipeableTraverseWithIndex1<"Array", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Unfoldable
 * @since 2.6.6
 */",
              ],
              "id": "array.unfold",
              "kind": "variable",
              "name": "unfold",
              "signature": "const unfold: <A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind<F, A>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1128",
              },
              "type": "<A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Unfoldable",
              "kind": "variable",
              "name": "Unfoldable",
              "signature": "const Unfoldable: Unfoldable1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1173,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1173",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1173",
              },
              "type": "Unfoldable1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "array.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1138,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1138",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1138",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "array.wilt",
              "kind": "variable",
              "name": "wilt",
              "signature": "const wilt: PipeableWilt1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1123",
              },
              "type": "PipeableWilt1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "array.wither",
              "kind": "variable",
              "name": "wither",
              "signature": "const wither: PipeableWither1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1118",
              },
              "type": "PipeableWither1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "array.Witherable",
              "kind": "variable",
              "name": "Witherable",
              "signature": "const Witherable: Witherable1<'Array'>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1228,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1228",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1228",
              },
              "type": "Witherable1<"Array">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Alternative
 * @since 2.7.0
 */",
              ],
              "id": "array.zero",
              "kind": "variable",
              "name": "zero",
              "signature": "const zero: <A>() => Kind<F, A>;",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 1133,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1133",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1133",
              },
              "type": "<A>() => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Takes two arrays and returns an array of corresponding pairs. If one input array is short, excess elements of the
 * longer array are discarded
 *
 * @example
 * import { zip } from 'fp-ts/Array'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2, 3], zip(['a', 'b', 'c', 'd'])), [[1, 'a'], [2, 'b'], [3, 'c']])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "array.zip",
              "kind": "variable",
              "name": "zip",
              "signature": "const zip: {
    <B>(bs: B[]): <A>(as: A[]) => [A, B][];
    <A, B>(as: A[], bs: B[]): [A, B][];
};",
              "source": {
                "filename": "lib/Array.d.ts",
                "line": 643,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L643",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L643",
              },
              "type": "{ <B>(bs: B[]): <A>(as: A[]) => [A, B][]; <A, B>(as: A[], bs: B[]): [A, B][]; }",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "array",
        "kind": "namespace",
        "name": "array",
        "signature": "module 'lib/Array.d.ts' {}",
        "source": {
          "filename": "lib/Array.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "bifunctor.Bifunctor",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, A, G, B>(
    fea: HKT2<F, E, A>,
    f: (e: E) => G,
    g: (a: A) => B
) => HKT2<F, G, B>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L11",
                    },
                    "type": "<E, A, G, B>(fea: HKT2<F, E, A>, f: (e: E) => G, g: (a: A) => B) => HKT2<F, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, A, G>(fea: HKT2<F, E, A>, f: (e: E) => G) => HKT2<F, G, A>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L12",
                    },
                    "type": "<E, A, G>(fea: HKT2<F, E, A>, f: (e: E) => G) => HKT2<F, G, A>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 10,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L10",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L10",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Bifunctor",
              "signature": "interface Bifunctor<F> {}",
              "source": {
                "filename": "lib/Bifunctor.d.ts",
                "line": 9,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L9",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L9",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "bifunctor.Bifunctor2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor2.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, A, G, B>(
    fea: Kind2<F, E, A>,
    f: (e: E) => G,
    g: (a: A) => B
) => Kind2<F, G, B>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L20",
                    },
                    "type": "<E, A, G, B>(fea: Kind2<F, E, A>, f: (e: E) => G, g: (a: A) => B) => Kind2<F, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor2.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, A, G>(
    fea: Kind2<F, E, A>,
    f: (e: E) => G
) => Kind2<F, G, A>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L21",
                    },
                    "type": "<E, A, G>(fea: Kind2<F, E, A>, f: (e: E) => G) => Kind2<F, G, A>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L19",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Bifunctor2",
              "signature": "interface Bifunctor2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Bifunctor.d.ts",
                "line": 18,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L18",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L18",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "bifunctor.Bifunctor2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor2C.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <A, G, B>(
    fea: Kind2<F, E, A>,
    f: (e: E) => G,
    g: (a: A) => B
) => Kind2<F, G, B>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L30",
                    },
                    "type": "<A, G, B>(fea: Kind2<F, E, A>, f: (e: E) => G, g: (a: A) => B) => Kind2<F, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor2C.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <A, M>(fea: Kind2<F, E, A>, f: (e: E) => M) => Kind2<F, M, A>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 31,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L31",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L31",
                    },
                    "type": "<A, M>(fea: Kind2<F, E, A>, f: (e: E) => M) => Kind2<F, M, A>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L28",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Bifunctor2C",
              "signature": "interface Bifunctor2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Bifunctor.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L27",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "bifunctor.Bifunctor3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor3.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <R, E, A, G, B>(
    fea: Kind3<F, R, E, A>,
    f: (e: E) => G,
    g: (a: A) => B
) => Kind3<F, R, G, B>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L39",
                    },
                    "type": "<R, E, A, G, B>(fea: Kind3<F, R, E, A>, f: (e: E) => G, g: (a: A) => B) => Kind3<F, R, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor3.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <R, E, A, G>(
    fea: Kind3<F, R, E, A>,
    f: (e: E) => G
) => Kind3<F, R, G, A>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L40",
                    },
                    "type": "<R, E, A, G>(fea: Kind3<F, R, E, A>, f: (e: E) => G) => Kind3<F, R, G, A>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 38,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L38",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L38",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Bifunctor3",
              "signature": "interface Bifunctor3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Bifunctor.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L37",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "bifunctor.Bifunctor3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor3C.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <R, A, G, B>(
    fea: Kind3<F, R, E, A>,
    f: (e: E) => G,
    g: (a: A) => B
) => Kind3<F, R, G, B>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L48",
                    },
                    "type": "<R, A, G, B>(fea: Kind3<F, R, E, A>, f: (e: E) => G, g: (a: A) => B) => Kind3<F, R, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor3C.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <R, A, G>(
    fea: Kind3<F, R, E, A>,
    f: (e: E) => G
) => Kind3<F, R, G, A>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L49",
                    },
                    "type": "<R, A, G>(fea: Kind3<F, R, E, A>, f: (e: E) => G) => Kind3<F, R, G, A>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor3C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L47",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Bifunctor3C",
              "signature": "interface Bifunctor3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Bifunctor.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L46",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "bifunctor.Bifunctor4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor4.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <S, R, E, A, G, B>(
    fea: Kind4<F, S, R, E, A>,
    f: (e: E) => G,
    g: (a: A) => B
) => Kind4<F, S, R, G, B>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L57",
                    },
                    "type": "<S, R, E, A, G, B>(fea: Kind4<F, S, R, E, A>, f: (e: E) => G, g: (a: A) => B) => Kind4<F, S, R, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor4.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <S, R, E, A, G>(
    fea: Kind4<F, S, R, E, A>,
    f: (e: E) => G
) => Kind4<F, S, R, G, A>;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 58,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L58",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L58",
                    },
                    "type": "<S, R, E, A, G>(fea: Kind4<F, S, R, E, A>, f: (e: E) => G) => Kind4<F, S, R, G, A>",
                  },
                  {
                    "docs": [],
                    "id": "bifunctor.Bifunctor4.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Bifunctor.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L56",
                    },
                    "type": "URIS4",
                  },
                ],
              },
              "name": "Bifunctor4",
              "signature": "interface Bifunctor4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Bifunctor.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L55",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "bifunctor",
        "kind": "namespace",
        "name": "bifunctor",
        "signature": "module 'lib/Bifunctor.d.ts' {}",
        "source": {
          "filename": "lib/Bifunctor.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Defines the fold over a boolean value.
 * Takes two thunks \`onTrue\`, \`onFalse\` and a \`boolean\` value.
 * If \`value\` is false, \`onFalse()\` is returned, otherwise \`onTrue()\`.
 *
 * @example
 * import { some, map } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 * import { fold } from 'fp-ts/boolean'
 *
 * assert.deepStrictEqual(
 *  pipe(
 *    some(true),
 *    map(fold(() => 'false', () => 'true'))
 *  ),
 *  some('true')
 * )
 *
 * @category destructors
 * @since 2.2.0
 */",
              ],
              "id": "boolean.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <A>(onFalse: Lazy<A>, onTrue: Lazy<A>) => (value: boolean) => A;",
              "source": {
                "filename": "lib/boolean.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/boolean.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/boolean.d.ts#L26",
              },
              "type": "<A>(onFalse: Lazy<A>, onTrue: Lazy<A>) => (value: boolean) => A",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.2.0
 */",
        ],
        "id": "boolean",
        "kind": "namespace",
        "name": "boolean",
        "signature": "module 'lib/boolean.d.ts' {}",
        "source": {
          "filename": "lib/boolean.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/boolean.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/boolean.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Every boolean algebras has a dual algebra, which involves reversing one/zero as well as join/meet.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "booleanAlgebra.getDualBooleanAlgebra",
              "kind": "function",
              "name": "getDualBooleanAlgebra",
              "signature": "getDualBooleanAlgebra: <A>(B: BooleanAlgebra<A>) => BooleanAlgebra<A>;",
              "source": {
                "filename": "lib/BooleanAlgebra.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BooleanAlgebra.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BooleanAlgebra.d.ts#L40",
              },
              "type": "<A>(B: BooleanAlgebra<A>) => BooleanAlgebra<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "booleanAlgebra.getFunctionBooleanAlgebra",
              "kind": "function",
              "name": "getFunctionBooleanAlgebra",
              "signature": "getFunctionBooleanAlgebra: <B>(
    B: BooleanAlgebra<B>
) => <A = never>() => BooleanAlgebra<(a: A) => B>;",
              "source": {
                "filename": "lib/BooleanAlgebra.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BooleanAlgebra.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BooleanAlgebra.d.ts#L33",
              },
              "type": "<B>(B: BooleanAlgebra<B>) => <A = never>() => BooleanAlgebra<(a: A) => B>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "booleanAlgebra.BooleanAlgebra",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "BooleanAlgebra",
              "signature": "interface BooleanAlgebra<A> extends HeytingAlgebra<A> {}",
              "source": {
                "filename": "lib/BooleanAlgebra.d.ts",
                "line": 18,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BooleanAlgebra.d.ts#L18",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BooleanAlgebra.d.ts#L18",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "booleanAlgebra.booleanAlgebraBoolean",
              "kind": "variable",
              "name": "booleanAlgebraBoolean",
              "signature": "const booleanAlgebraBoolean: BooleanAlgebra<boolean>;",
              "source": {
                "filename": "lib/BooleanAlgebra.d.ts",
                "line": 23,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BooleanAlgebra.d.ts#L23",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BooleanAlgebra.d.ts#L23",
              },
              "type": "BooleanAlgebra<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "booleanAlgebra.booleanAlgebraVoid",
              "kind": "variable",
              "name": "booleanAlgebraVoid",
              "signature": "const booleanAlgebraVoid: BooleanAlgebra<void>;",
              "source": {
                "filename": "lib/BooleanAlgebra.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BooleanAlgebra.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BooleanAlgebra.d.ts#L28",
              },
              "type": "BooleanAlgebra<void>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * Boolean algebras are Heyting algebras with the additional constraint that the law of the excluded middle is true
 * (equivalently, double-negation is true).
 *
 * Instances should satisfy the following laws in addition to the \`HeytingAlgebra\` laws:
 *
 * - Excluded middle: \`a ∨ ¬a <-> 1\`
 *
 * Boolean algebras generalize classical logic: one is equivalent to "true" and zero is equivalent to "false".
 *
 * @since 2.0.0
 */",
        ],
        "id": "booleanAlgebra",
        "kind": "namespace",
        "name": "booleanAlgebra",
        "signature": "module 'lib/BooleanAlgebra.d.ts' {}",
        "source": {
          "filename": "lib/BooleanAlgebra.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BooleanAlgebra.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BooleanAlgebra.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "bounded.Bounded",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "bounded.Bounded.bottom",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bottom",
                    "signature": "readonly bottom: A;",
                    "source": {
                      "filename": "lib/Bounded.d.ts",
                      "line": 17,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bounded.d.ts#L17",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bounded.d.ts#L17",
                    },
                    "type": "{}",
                  },
                  {
                    "docs": [],
                    "id": "bounded.Bounded.top",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "top",
                    "signature": "readonly top: A;",
                    "source": {
                      "filename": "lib/Bounded.d.ts",
                      "line": 16,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bounded.d.ts#L16",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bounded.d.ts#L16",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Bounded",
              "signature": "interface Bounded<A> extends Ord<A> {}",
              "source": {
                "filename": "lib/Bounded.d.ts",
                "line": 15,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bounded.d.ts#L15",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bounded.d.ts#L15",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "bounded.boundedNumber",
              "kind": "variable",
              "name": "boundedNumber",
              "signature": "const boundedNumber: Bounded<number>;",
              "source": {
                "filename": "lib/Bounded.d.ts",
                "line": 23,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bounded.d.ts#L23",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bounded.d.ts#L23",
              },
              "type": "Bounded<number>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * The \`Bounded\` type class represents totally ordered types that have an upper and lower boundary.
 *
 * Instances should satisfy the following law in addition to the \`Ord\` laws:
 *
 * - Bounded: \`bottom <= a <= top\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "bounded",
        "kind": "namespace",
        "name": "bounded",
        "signature": "module 'lib/Bounded.d.ts' {}",
        "source": {
          "filename": "lib/Bounded.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bounded.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bounded.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "boundedDistributiveLattice.getMinMaxBoundedDistributiveLattice",
              "kind": "function",
              "name": "getMinMaxBoundedDistributiveLattice",
              "signature": "getMinMaxBoundedDistributiveLattice: <A>(
    O: Ord<A>
) => (min: A, max: A) => BoundedDistributiveLattice<A>;",
              "source": {
                "filename": "lib/BoundedDistributiveLattice.d.ts",
                "line": 18,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedDistributiveLattice.d.ts#L18",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedDistributiveLattice.d.ts#L18",
              },
              "type": "<A>(O: Ord<A>) => (min: A, max: A) => BoundedDistributiveLattice<A>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "boundedDistributiveLattice.BoundedDistributiveLattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "BoundedDistributiveLattice",
              "signature": "interface BoundedDistributiveLattice<A>
    extends BoundedLattice<A>,
        DistributiveLattice<A> {}",
              "source": {
                "filename": "lib/BoundedDistributiveLattice.d.ts",
                "line": 13,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedDistributiveLattice.d.ts#L13",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedDistributiveLattice.d.ts#L13",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`BoundedDistributiveLattice\` is a lattice that is both bounded and distributive
 *
 * @since 2.0.0
 */",
        ],
        "id": "boundedDistributiveLattice",
        "kind": "namespace",
        "name": "boundedDistributiveLattice",
        "signature": "module 'lib/BoundedDistributiveLattice.d.ts' {}",
        "source": {
          "filename": "lib/BoundedDistributiveLattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedDistributiveLattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedDistributiveLattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "boundedJoinSemilattice.BoundedJoinSemilattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "boundedJoinSemilattice.BoundedJoinSemilattice.zero",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "zero",
                    "signature": "readonly zero: A;",
                    "source": {
                      "filename": "lib/BoundedJoinSemilattice.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedJoinSemilattice.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedJoinSemilattice.d.ts#L14",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "BoundedJoinSemilattice",
              "signature": "interface BoundedJoinSemilattice<A> extends JoinSemilattice<A> {}",
              "source": {
                "filename": "lib/BoundedJoinSemilattice.d.ts",
                "line": 13,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedJoinSemilattice.d.ts#L13",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedJoinSemilattice.d.ts#L13",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`BoundedJoinSemilattice\` must satisfy the following laws in addition to \`JoinSemilattice\` laws:
 *
 * - \`a ∨ 0 <-> a\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "boundedJoinSemilattice",
        "kind": "namespace",
        "name": "boundedJoinSemilattice",
        "signature": "module 'lib/BoundedJoinSemilattice.d.ts' {}",
        "source": {
          "filename": "lib/BoundedJoinSemilattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedJoinSemilattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedJoinSemilattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "boundedLattice.BoundedLattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "BoundedLattice",
              "signature": "interface BoundedLattice<A>
    extends BoundedJoinSemilattice<A>,
        BoundedMeetSemilattice<A> {}",
              "source": {
                "filename": "lib/BoundedLattice.d.ts",
                "line": 15,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedLattice.d.ts#L15",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedLattice.d.ts#L15",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`BoundedLattice\` must satisfy the following in addition to \`BoundedMeetSemilattice\` and \`BoundedJoinSemilattice\` laws:
 *
 * - Absorption law for meet: \`a ∧ (a ∨ b) <-> a\`
 * - Absorption law for join: \`a ∨ (a ∧ b) <-> a\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "boundedLattice",
        "kind": "namespace",
        "name": "boundedLattice",
        "signature": "module 'lib/BoundedLattice.d.ts' {}",
        "source": {
          "filename": "lib/BoundedLattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedLattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedLattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "boundedMeetSemilattice.BoundedMeetSemilattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "boundedMeetSemilattice.BoundedMeetSemilattice.one",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "one",
                    "signature": "readonly one: A;",
                    "source": {
                      "filename": "lib/BoundedMeetSemilattice.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedMeetSemilattice.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedMeetSemilattice.d.ts#L14",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "BoundedMeetSemilattice",
              "signature": "interface BoundedMeetSemilattice<A> extends MeetSemilattice<A> {}",
              "source": {
                "filename": "lib/BoundedMeetSemilattice.d.ts",
                "line": 13,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedMeetSemilattice.d.ts#L13",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedMeetSemilattice.d.ts#L13",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`BoundedMeetSemilattice\` must satisfy the following laws in addition to \`MeetSemilattice\` laws:
 *
 * - \`a ∧ 1 <-> a\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "boundedMeetSemilattice",
        "kind": "namespace",
        "name": "boundedMeetSemilattice",
        "signature": "module 'lib/BoundedMeetSemilattice.d.ts' {}",
        "source": {
          "filename": "lib/BoundedMeetSemilattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedMeetSemilattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedMeetSemilattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "category.Category",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "category.Category.id",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "id",
                    "signature": "readonly id: <A>() => HKT2<F, A, A>;",
                    "source": {
                      "filename": "lib/Category.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L11",
                    },
                    "type": "<A>() => HKT2<F, A, A>",
                  },
                ],
              },
              "name": "Category",
              "signature": "interface Category<F> extends Semigroupoid<F> {}",
              "source": {
                "filename": "lib/Category.d.ts",
                "line": 10,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L10",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L10",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "category.Category2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "category.Category2.id",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "id",
                    "signature": "readonly id: <A>() => Kind2<F, A, A>;",
                    "source": {
                      "filename": "lib/Category.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L18",
                    },
                    "type": "<A>() => Kind2<F, A, A>",
                  },
                ],
              },
              "name": "Category2",
              "signature": "interface Category2<F extends URIS2> extends Semigroupoid2<F> {}",
              "source": {
                "filename": "lib/Category.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "category.Category3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "category.Category3.id",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "id",
                    "signature": "readonly id: <R, A>() => Kind3<F, R, A, A>;",
                    "source": {
                      "filename": "lib/Category.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L25",
                    },
                    "type": "<R, A>() => Kind3<F, R, A, A>",
                  },
                ],
              },
              "name": "Category3",
              "signature": "interface Category3<F extends URIS3> extends Semigroupoid3<F> {}",
              "source": {
                "filename": "lib/Category.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L24",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "category.Category4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "category.Category4.id",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "id",
                    "signature": "readonly id: <S, R, A>() => Kind4<F, S, R, A, A>;",
                    "source": {
                      "filename": "lib/Category.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L32",
                    },
                    "type": "<S, R, A>() => Kind4<F, S, R, A, A>",
                  },
                ],
              },
              "name": "Category4",
              "signature": "interface Category4<F extends URIS4> extends Semigroupoid4<F> {}",
              "source": {
                "filename": "lib/Category.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L31",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "category",
        "kind": "namespace",
        "name": "category",
        "signature": "module 'lib/Category.d.ts' {}",
        "source": {
          "filename": "lib/Category.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chain.Chain",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chain.Chain.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(fa: HKT<F, A>, f: (a: A) => HKT<F, B>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/Chain.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L20",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, f: (a: A) => HKT<F, B>) => HKT<F, B>",
                  },
                ],
              },
              "name": "Chain",
              "signature": "interface Chain<F> extends Apply<F> {}",
              "source": {
                "filename": "lib/Chain.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L19",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chain.Chain1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chain.Chain1.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(fa: Kind<F, A>, f: (a: A) => Kind<F, B>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/Chain.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L27",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, f: (a: A) => Kind<F, B>) => Kind<F, B>",
                  },
                ],
              },
              "name": "Chain1",
              "signature": "interface Chain1<F extends URIS> extends Apply1<F> {}",
              "source": {
                "filename": "lib/Chain.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L26",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chain.Chain2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chain.Chain2.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <E, A, B>(
    fa: Kind2<F, E, A>,
    f: (a: A) => Kind2<F, E, B>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Chain.d.ts",
                      "line": 34,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L34",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L34",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, f: (a: A) => Kind2<F, E, B>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "Chain2",
              "signature": "interface Chain2<F extends URIS2> extends Apply2<F> {}",
              "source": {
                "filename": "lib/Chain.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L33",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chain.Chain2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chain.Chain2C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    fa: Kind2<F, E, A>,
    f: (a: A) => Kind2<F, E, B>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Chain.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L41",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, f: (a: A) => Kind2<F, E, B>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "Chain2C",
              "signature": "interface Chain2C<F extends URIS2, E> extends Apply2C<F, E> {}",
              "source": {
                "filename": "lib/Chain.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L40",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chain.Chain3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chain.Chain3.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Chain.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L48",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => Kind3<F, R, E, B>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "Chain3",
              "signature": "interface Chain3<F extends URIS3> extends Apply3<F> {}",
              "source": {
                "filename": "lib/Chain.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L47",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "chain.Chain3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chain.Chain3C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Chain.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L55",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => Kind3<F, R, E, B>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "Chain3C",
              "signature": "interface Chain3C<F extends URIS3, E> extends Apply3C<F, E> {}",
              "source": {
                "filename": "lib/Chain.d.ts",
                "line": 54,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L54",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L54",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chain.Chain4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chain.Chain4.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    f: (a: A) => Kind4<F, S, R, E, B>
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Chain.d.ts",
                      "line": 62,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L62",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L62",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, f: (a: A) => Kind4<F, S, R, E, B>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "Chain4",
              "signature": "interface Chain4<F extends URIS4> extends Apply4<F> {}",
              "source": {
                "filename": "lib/Chain.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L61",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Chain\` type class extends the \`Apply\` type class with a \`chain\` operation which composes computations in
 * sequence, using the return value of one computation to determine the next computation.
 *
 * Instances must satisfy the following law in addition to the \`Apply\` laws:
 *
 * 1. Associativity: \`F.chain(F.chain(fa, afb), bfc) <-> F.chain(fa, a => F.chain(afb(a), bfc))\`
 *
 * Note. \`Apply\`'s \`ap\` can be derived: \`(fab, fa) => F.chain(fab, f => F.map(fa, f))\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "chain",
        "kind": "namespace",
        "name": "chain",
        "signature": "module 'lib/Chain.d.ts' {}",
        "source": {
          "filename": "lib/Chain.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "chainRec.tailRec",
              "kind": "function",
              "name": "tailRec",
              "signature": "tailRec: <A, B>(a: A, f: (a: A) => Either<A, B>) => B;",
              "source": {
                "filename": "lib/ChainRec.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L45",
              },
              "type": "<A, B>(a: A, f: (a: A) => Either<A, B>) => B",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chainRec.ChainRec",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chainRec.ChainRec.chainRec",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainRec",
                    "signature": "readonly chainRec: <A, B>(a: A, f: (a: A) => HKT<F, Either<A, B>>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/ChainRec.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L12",
                    },
                    "type": "<A, B>(a: A, f: (a: A) => HKT<F, Either<A, B>>) => HKT<F, B>",
                  },
                ],
              },
              "name": "ChainRec",
              "signature": "interface ChainRec<F> extends Chain<F> {}",
              "source": {
                "filename": "lib/ChainRec.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L11",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chainRec.ChainRec1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chainRec.ChainRec1.chainRec",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainRec",
                    "signature": "readonly chainRec: <A, B>(
    a: A,
    f: (a: A) => Kind<F, Either<A, B>>
) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/ChainRec.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L19",
                    },
                    "type": "<A, B>(a: A, f: (a: A) => Kind<F, Either<A, B>>) => Kind<F, B>",
                  },
                ],
              },
              "name": "ChainRec1",
              "signature": "interface ChainRec1<F extends URIS> extends Chain1<F> {}",
              "source": {
                "filename": "lib/ChainRec.d.ts",
                "line": 18,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L18",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L18",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chainRec.ChainRec2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chainRec.ChainRec2.chainRec",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainRec",
                    "signature": "readonly chainRec: <E, A, B>(
    a: A,
    f: (a: A) => Kind2<F, E, Either<A, B>>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/ChainRec.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L26",
                    },
                    "type": "<E, A, B>(a: A, f: (a: A) => Kind2<F, E, Either<A, B>>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "ChainRec2",
              "signature": "interface ChainRec2<F extends URIS2> extends Chain2<F> {}",
              "source": {
                "filename": "lib/ChainRec.d.ts",
                "line": 25,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L25",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L25",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chainRec.ChainRec2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chainRec.ChainRec2C.chainRec",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainRec",
                    "signature": "readonly chainRec: <A, B>(
    a: A,
    f: (a: A) => Kind2<F, E, Either<A, B>>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/ChainRec.d.ts",
                      "line": 33,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L33",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L33",
                    },
                    "type": "<A, B>(a: A, f: (a: A) => Kind2<F, E, Either<A, B>>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "ChainRec2C",
              "signature": "interface ChainRec2C<F extends URIS2, E> extends Chain2C<F, E> {}",
              "source": {
                "filename": "lib/ChainRec.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L32",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "chainRec.ChainRec3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "chainRec.ChainRec3.chainRec",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainRec",
                    "signature": "readonly chainRec: <R, E, A, B>(
    a: A,
    f: (a: A) => Kind3<F, R, E, Either<A, B>>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/ChainRec.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L40",
                    },
                    "type": "<R, E, A, B>(a: A, f: (a: A) => Kind3<F, R, E, Either<A, B>>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "ChainRec3",
              "signature": "interface ChainRec3<F extends URIS3> extends Chain3<F> {}",
              "source": {
                "filename": "lib/ChainRec.d.ts",
                "line": 39,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L39",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L39",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "chainRec",
        "kind": "namespace",
        "name": "chainRec",
        "signature": "module 'lib/ChainRec.d.ts' {}",
        "source": {
          "filename": "lib/ChainRec.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Compose a value which eliminates a sum from two values, each eliminating
 * one side of the sum.
 *
 * This combinator is useful when assembling values from smaller components,
 * because it provides a way to support two different types of input.
 *
 * Specializing \`(|||)\` to function application would look like this:
 *
 * \`\`\`purescript
 * (|||) :: forall a b c d. (a -> c) -> (b -> c) -> Either a b -> c
 * \`\`\`
 *
 * We take two functions, \`f\` and \`g\`, which both return the same type \`c\` and we transform them into a
 * single function which takes an \`Either\` value with the parameter type of \`f\` on the left side and
 * the parameter type of \`g\` on the right side. The function then runs either \`f\` or \`g\`, depending on
 * whether the \`Either\` value is a \`Left\` or a \`Right\`.
 * This allows us to bundle two different computations which both have the same result type into one
 * function which will run the appropriate computation based on the parameter supplied in the \`Either\` value.
 *
 * @since 2.0.0
 */",
              ],
              "id": "choice.fanin",
              "kind": "function",
              "name": "fanin",
              "signature": "fanin: {
    <F extends URIS3>(F: Category3<F> & Choice3<F>): <R, A, B, C>(
        pac: Kind3<F, R, A, C>,
        pbc: Kind3<F, R, B, C>
    ) => Kind3<F, R, Either<A, B>, C>;
    <F extends URIS2>(F: Category2<F> & Choice2<F>): <A, B, C>(
        pac: Kind2<F, A, C>,
        pbc: Kind2<F, B, C>
    ) => Kind2<F, Either<A, B>, C>;
    <F>(F: Category<F> & Choice<F>): <A, B, C>(
        pac: HKT2<F, A, C>,
        pbc: HKT2<F, B, C>
    ) => HKT2<F, Either<A, B>, C>;
};",
              "source": {
                "filename": "lib/Choice.d.ts",
                "line": 114,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L114",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L114",
              },
              "type": "{ <F extends URIS3>(F: Category3<F> & Choice3<F>): <R, A, B, C>(pac: Kind3<F, R, A, C>, pbc: Kind3<F, R, B, C>) => Kind3<F, R, Either<A, B>, C>; <F extends URIS2>(F: Category2<F> & Choice2<F>): <A, B, C>(pac: Kind2<F, A, C>, pbc: Kind2<F, B, C>) => Kind2<F, Either<A, B>, C>; <F>(F: Category<F> & Choice<F>): <A, B, C>(pac: HKT2<F, A, C>, pbc: HKT2<F, B, C>) => HKT2<F, Either<A, B>, C>; }",
            },
            {
              "docs": [
                "/**
 * Compose a value acting on a sum from two values, each acting on one of
 * the components of the sum.
 *
 * Specializing \`(+++)\` to function application would look like this:
 *
 * \`\`\`purescript
 * (+++) :: forall a b c d. (a -> b) -> (c -> d) -> (Either a c) -> (Either b d)
 * \`\`\`
 *
 * We take two functions, \`f\` and \`g\`, and we transform them into a single function which
 * takes an \`Either\`and maps \`f\` over the left side and \`g\` over the right side.  Just like
 * \`bi-map\` would do for the \`bi-functor\` instance of \`Either\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "choice.splitChoice",
              "kind": "function",
              "name": "splitChoice",
              "signature": "splitChoice: {
    <F extends URIS3>(F: Category3<F> & Choice3<F>): <R, A, B, C, D>(
        pab: Kind3<F, R, A, B>,
        pcd: Kind3<F, R, C, D>
    ) => Kind3<F, R, Either<A, C>, Either<B, D>>;
    <F extends URIS2>(F: Category2<F> & Choice2<F>): <A, B, C, D>(
        pab: Kind2<F, A, B>,
        pcd: Kind2<F, C, D>
    ) => Kind2<F, Either<A, C>, Either<B, D>>;
    <F>(F: Category<F> & Choice<F>): <A, B, C, D>(
        pab: HKT2<F, A, B>,
        pcd: HKT2<F, C, D>
    ) => HKT2<F, Either<A, C>, Either<B, D>>;
};",
              "source": {
                "filename": "lib/Choice.d.ts",
                "line": 83,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L83",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L83",
              },
              "type": "{ <F extends URIS3>(F: Category3<F> & Choice3<F>): <R, A, B, C, D>(pab: Kind3<F, R, A, B>, pcd: Kind3<F, R, C, D>) => Kind3<F, R, Either<A, C>, Either<B, D>>; <F extends URIS2>(F: Category2<F> & Choice2<F>): <A, B, C, D>(pab: Kind2<F, A, B>, pcd: Kind2<F, C, D>) => Kind2<F, Either<A, C>, Either<B, D>>; <F>(F: Category<F> & Choice<F>): <A, B, C, D>(pab: HKT2<F, A, B>, pcd: HKT2<F, C, D>) => HKT2<F, Either<A, C>, Either<B, D>>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "choice.Choice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "choice.Choice.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <A, B, C>(
    pab: HKT2<F, A, B>
) => HKT2<F, Either<A, C>, Either<B, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L40",
                    },
                    "type": "<A, B, C>(pab: HKT2<F, A, B>) => HKT2<F, Either<A, C>, Either<B, C>>",
                  },
                  {
                    "docs": [],
                    "id": "choice.Choice.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: <A, B, C>(
    pbc: HKT2<F, B, C>
) => HKT2<F, Either<A, B>, Either<A, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L41",
                    },
                    "type": "<A, B, C>(pbc: HKT2<F, B, C>) => HKT2<F, Either<A, B>, Either<A, C>>",
                  },
                ],
              },
              "name": "Choice",
              "signature": "interface Choice<F> extends Profunctor<F> {}",
              "source": {
                "filename": "lib/Choice.d.ts",
                "line": 39,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L39",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L39",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "choice.Choice2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "choice.Choice2.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <A, B, C>(
    pab: Kind2<F, A, B>
) => Kind2<F, Either<A, C>, Either<B, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L48",
                    },
                    "type": "<A, B, C>(pab: Kind2<F, A, B>) => Kind2<F, Either<A, C>, Either<B, C>>",
                  },
                  {
                    "docs": [],
                    "id": "choice.Choice2.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: <A, B, C>(
    pbc: Kind2<F, B, C>
) => Kind2<F, Either<A, B>, Either<A, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L49",
                    },
                    "type": "<A, B, C>(pbc: Kind2<F, B, C>) => Kind2<F, Either<A, B>, Either<A, C>>",
                  },
                ],
              },
              "name": "Choice2",
              "signature": "interface Choice2<F extends URIS2> extends Profunctor2<F> {}",
              "source": {
                "filename": "lib/Choice.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L47",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "choice.Choice3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "choice.Choice3.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <R, A, B, C>(
    pab: Kind3<F, R, A, B>
) => Kind3<F, R, Either<A, C>, Either<B, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L56",
                    },
                    "type": "<R, A, B, C>(pab: Kind3<F, R, A, B>) => Kind3<F, R, Either<A, C>, Either<B, C>>",
                  },
                  {
                    "docs": [],
                    "id": "choice.Choice3.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: <R, A, B, C>(
    pbc: Kind3<F, R, B, C>
) => Kind3<F, R, Either<A, B>, Either<A, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L57",
                    },
                    "type": "<R, A, B, C>(pbc: Kind3<F, R, B, C>) => Kind3<F, R, Either<A, B>, Either<A, C>>",
                  },
                ],
              },
              "name": "Choice3",
              "signature": "interface Choice3<F extends URIS3> extends Profunctor3<F> {}",
              "source": {
                "filename": "lib/Choice.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L55",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "choice.Choice4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "choice.Choice4.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <S, R, A, B, C>(
    pab: Kind4<F, S, R, A, B>
) => Kind4<F, S, R, Either<A, C>, Either<B, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 64,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L64",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L64",
                    },
                    "type": "<S, R, A, B, C>(pab: Kind4<F, S, R, A, B>) => Kind4<F, S, R, Either<A, C>, Either<B, C>>",
                  },
                  {
                    "docs": [],
                    "id": "choice.Choice4.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: <S, R, A, B, C>(
    pbc: Kind4<F, S, R, B, C>
) => Kind4<F, S, R, Either<A, B>, Either<A, C>>;",
                    "source": {
                      "filename": "lib/Choice.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L65",
                    },
                    "type": "<S, R, A, B, C>(pbc: Kind4<F, S, R, B, C>) => Kind4<F, S, R, Either<A, B>, Either<A, C>>",
                  },
                ],
              },
              "name": "Choice4",
              "signature": "interface Choice4<F extends URIS4> extends Profunctor4<F> {}",
              "source": {
                "filename": "lib/Choice.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L63",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Choice\` class extends \`Profunctor\` with combinators for working with
 * sum types.
 *
 * \`left\` and \`right\` lift values in a \`Profunctor\` to act on the \`Left\` and
 * \`Right\` components of a sum, respectively.
 *
 * Looking at \`Choice\` through the intuition of inputs and outputs
 * yields the following type signature:
 *
 * \`\`\`purescript
 * left ::  forall input output a. p input output -> p (Either input a) (Either output a)
 * right :: forall input output a. p input output -> p (Either a input) (Either a output)
 * \`\`\`
 *
 * If we specialize the profunctor \`p\` to the \`function\` arrow, we get the following type
 * signatures:
 *
 * \`\`\`purescript
 * left ::  forall input output a. (input -> output) -> (Either input a) -> (Either output a)
 * right :: forall input output a. (input -> output) -> (Either a input) -> (Either a output)
 * \`\`\`
 *
 * When the \`profunctor\` is \`Function\` application, \`left\` allows you to map a function over the
 * left side of an \`Either\`, and \`right\` maps it over the right side (same as \`map\` would do).
 *
 * Adapted from https://github.com/purescript/purescript-profunctor/blob/master/src/Data/Profunctor/Choice.purs
 *
 * @since 2.0.0
 */",
        ],
        "id": "choice",
        "kind": "namespace",
        "name": "choice",
        "signature": "module 'lib/Choice.d.ts' {}",
        "source": {
          "filename": "lib/Choice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "comonad.Comonad",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "comonad.Comonad.extract",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extract",
                    "signature": "readonly extract: <A>(wa: HKT<W, A>) => A;",
                    "source": {
                      "filename": "lib/Comonad.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L11",
                    },
                    "type": "<A>(wa: HKT<W, A>) => A",
                  },
                ],
              },
              "name": "Comonad",
              "signature": "interface Comonad<W> extends Extend<W> {}",
              "source": {
                "filename": "lib/Comonad.d.ts",
                "line": 10,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L10",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L10",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "comonad.Comonad1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "comonad.Comonad1.extract",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extract",
                    "signature": "readonly extract: <A>(wa: Kind<W, A>) => A;",
                    "source": {
                      "filename": "lib/Comonad.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L18",
                    },
                    "type": "<A>(wa: Kind<W, A>) => A",
                  },
                ],
              },
              "name": "Comonad1",
              "signature": "interface Comonad1<W extends URIS> extends Extend1<W> {}",
              "source": {
                "filename": "lib/Comonad.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "comonad.Comonad2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "comonad.Comonad2.extract",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extract",
                    "signature": "readonly extract: <E, A>(wa: Kind2<W, E, A>) => A;",
                    "source": {
                      "filename": "lib/Comonad.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L25",
                    },
                    "type": "<E, A>(wa: Kind2<W, E, A>) => A",
                  },
                ],
              },
              "name": "Comonad2",
              "signature": "interface Comonad2<W extends URIS2> extends Extend2<W> {}",
              "source": {
                "filename": "lib/Comonad.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L24",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "comonad.Comonad2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "comonad.Comonad2C.extract",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extract",
                    "signature": "readonly extract: <A>(wa: Kind2<W, E, A>) => A;",
                    "source": {
                      "filename": "lib/Comonad.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L32",
                    },
                    "type": "<A>(wa: Kind2<W, E, A>) => A",
                  },
                ],
              },
              "name": "Comonad2C",
              "signature": "interface Comonad2C<W extends URIS2, E> extends Extend2C<W, E> {}",
              "source": {
                "filename": "lib/Comonad.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L31",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "comonad.Comonad3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "comonad.Comonad3.extract",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extract",
                    "signature": "readonly extract: <R, E, A>(wa: Kind3<W, R, E, A>) => A;",
                    "source": {
                      "filename": "lib/Comonad.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L39",
                    },
                    "type": "<R, E, A>(wa: Kind3<W, R, E, A>) => A",
                  },
                ],
              },
              "name": "Comonad3",
              "signature": "interface Comonad3<W extends URIS3> extends Extend3<W> {}",
              "source": {
                "filename": "lib/Comonad.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L38",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "comonad",
        "kind": "namespace",
        "name": "comonad",
        "signature": "module 'lib/Comonad.d.ts' {}",
        "source": {
          "filename": "lib/Comonad.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.getCompactableComposition",
              "kind": "function",
              "name": "getCompactableComposition",
              "signature": "getCompactableComposition: {
    <F extends URIS2, G extends URIS3, E>(
        F: Functor2<F>,
        G: Compactable3C<G, E> & Functor3C<G, E>
    ): CompactableComposition23C<F, G, E>;
    <F extends URIS2, G extends URIS2, E>(
        F: Functor2<F>,
        G: Compactable2C<G, E> & Functor2C<G, E>
    ): CompactableComposition22C<F, G, E>;
    <F extends URIS2, G extends URIS2>(
        F: Functor2<F>,
        G: Compactable2<G> & Functor2<G>
    ): CompactableComposition22<F, G>;
    <F extends URIS2, G extends URIS, E>(
        F: Functor2C<F, E>,
        G: Compactable1<G> & Functor1<G>
    ): CompactableComposition2C1<F, G, E>;
    <F extends URIS2, G extends URIS>(
        F: Functor2<F>,
        G: Compactable1<G> & Functor1<G>
    ): CompactableComposition21<F, G>;
    <F extends URIS, G extends URIS2, E>(
        F: Functor1<F>,
        G: Compactable2C<G, E> & Functor2C<G, E>
    ): CompactableComposition12<F, G>;
    <F extends URIS, G extends URIS2>(
        F: Functor1<F>,
        G: Compactable2<G> & Functor2<G>
    ): CompactableComposition12<F, G>;
    <F extends URIS, G extends URIS>(
        F: Functor1<F>,
        G: Compactable1<G> & Functor1<G>
    ): CompactableComposition11<F, G>;
    <F, G>(F: Functor<F>, G: Compactable<G> & Functor<G>): CompactableComposition<
        F,
        G
    >;
};",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 202,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L202",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L202",
              },
              "type": "{ <F extends URIS2, G extends URIS3, E>(F: Functor2<F>, G: Compactable3C<G, E> & Functor3C<G, E>): CompactableComposition23C<F, G, E>; <F extends URIS2, G extends URIS2, E>(F: Functor2<F>, G: Compactable2C<G, E> & Functor2C<G, E>): CompactableComposition22C<F, G, E>; <F extends URIS2, G extends URIS2>(F: Functor2<F>, G: Compactable2<G> & Functor2<G>): CompactableComposition22<F, G>; <F extends URIS2, G extends URIS, E>(F: Functor2C<F, E>, G: Compactable1<G> & Functor1<G>): CompactableComposition2C1<F, G, E>; <F extends URIS2, G extends URIS>(F: Functor2<F>, G: Compactable1<G> & Functor1<G>): CompactableComposition21<F, G>; <F extends URIS, G extends URIS2, E>(F: Functor1<F>, G: Compactable2C<G, E> & Functor2C<G, E>): CompactableComposition12<F, G>; <F extends URIS, G extends URIS2>(F: Functor1<F>, G: Compactable2<G> & Functor2<G>): CompactableComposition12<F, G>; <F extends URIS, G extends URIS>(F: Functor1<F>, G: Compactable1<G> & Functor1<G>): CompactableComposition11<F, G>; <F, G>(F: Functor<F>, G: Compactable<G> & Functor<G>): CompactableComposition<F, G>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "compactable.Compactable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [
                      "/**
   * Compacts a data structure unwrapping inner Option
   */",
                    ],
                    "id": "compactable.Compactable.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fa: HKT<F, Option<A>>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 50,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L50",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L50",
                    },
                    "type": "<A>(fa: HKT<F, Option<A>>) => HKT<F, A>",
                  },
                  {
                    "docs": [
                      "/**
   * Separates a data structure moving inner Left to the left side and inner Right to the right side of Separated
   */",
                    ],
                    "id": "compactable.Compactable.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fa: HKT<F, Either<A, B>>
) => Separated<HKT<F, A>, HKT<F, B>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L54",
                    },
                    "type": "<A, B>(fa: HKT<F, Either<A, B>>) => Separated<HKT<F, A>, HKT<F, B>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L46",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Compactable",
              "signature": "interface Compactable<F> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L45",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "compactable.Compactable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.Compactable1.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fa: Kind<F, Option<A>>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 62,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L62",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L62",
                    },
                    "type": "<A>(fa: Kind<F, Option<A>>) => Kind<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable1.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fa: Kind<F, Either<A, B>>
) => Separated<Kind<F, A>, Kind<F, B>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 63,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L63",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L63",
                    },
                    "type": "<A, B>(fa: Kind<F, Either<A, B>>) => Separated<Kind<F, A>, Kind<F, B>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable1.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 61,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L61",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L61",
                    },
                    "type": "URIS",
                  },
                ],
              },
              "name": "Compactable1",
              "signature": "interface Compactable1<F extends URIS> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L60",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "compactable.Compactable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.Compactable2.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <E, A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 71,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L71",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L71",
                    },
                    "type": "<E, A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable2.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <E, A, B>(
    fa: Kind2<F, E, Either<A, B>>
) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 72,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L72",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L72",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, Either<A, B>>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 70,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L70",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L70",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Compactable2",
              "signature": "interface Compactable2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 69,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L69",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L69",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "compactable.Compactable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.Compactable2C.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 81,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L81",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L81",
                    },
                    "type": "<A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable2C.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fa: Kind2<F, E, Either<A, B>>
) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L82",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, Either<A, B>>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 79,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L79",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L79",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Compactable2C",
              "signature": "interface Compactable2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 78,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L78",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L78",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "compactable.Compactable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.Compactable3.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <R, E, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 90,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L90",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L90",
                    },
                    "type": "<R, E, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable3.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <R, E, A, B>(
    fa: Kind3<F, R, E, Either<A, B>>
) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 91,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L91",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L91",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, Either<A, B>>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 89,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L89",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L89",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Compactable3",
              "signature": "interface Compactable3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L88",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L88",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "compactable.Compactable3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.Compactable3C.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <R, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 99,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L99",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L99",
                    },
                    "type": "<R, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable3C.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <R, A, B>(
    fa: Kind3<F, R, E, Either<A, B>>
) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L100",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, Either<A, B>>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable3C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 98,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L98",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L98",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Compactable3C",
              "signature": "interface Compactable3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 97,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L97",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L97",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "compactable.Compactable4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.Compactable4.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <S, R, E, A>(
    fa: Kind4<F, S, R, E, Option<A>>
) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 108,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L108",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L108",
                    },
                    "type": "<S, R, E, A>(fa: Kind4<F, S, R, E, Option<A>>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable4.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, Either<A, B>>
) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 109,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L109",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L109",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, Either<A, B>>) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Compactable4.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 107,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L107",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L107",
                    },
                    "type": "URIS4",
                  },
                ],
              },
              "name": "Compactable4",
              "signature": "interface Compactable4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L106",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fga: HKT<F, HKT<G, Option<A>>>) => HKT<F, HKT<G, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 117,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L117",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L117",
                    },
                    "type": "<A>(fga: HKT<F, HKT<G, Option<A>>>) => HKT<F, HKT<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fge: HKT<F, HKT<G, Either<A, B>>>
) => Separated<HKT<F, HKT<G, A>>, HKT<F, HKT<G, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 118,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L118",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L118",
                    },
                    "type": "<A, B>(fge: HKT<F, HKT<G, Either<A, B>>>) => Separated<HKT<F, HKT<G, A>>, HKT<F, HKT<G, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition",
              "signature": "interface CompactableComposition<F, G> extends FunctorComposition<F, G> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 116,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L116",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L116",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition11.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fga: Kind<F, Kind<G, Option<A>>>) => Kind<F, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 124,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L124",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L124",
                    },
                    "type": "<A>(fga: Kind<F, Kind<G, Option<A>>>) => Kind<F, Kind<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition11.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fge: Kind<F, Kind<G, Either<A, B>>>
) => Separated<Kind<F, Kind<G, A>>, Kind<F, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 125,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L125",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L125",
                    },
                    "type": "<A, B>(fge: Kind<F, Kind<G, Either<A, B>>>) => Separated<Kind<F, Kind<G, A>>, Kind<F, Kind<G, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition11",
              "signature": "interface CompactableComposition11<F extends URIS, G extends URIS>
    extends FunctorComposition11<F, G> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L123",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition12",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition12.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <E, A>(
    fga: Kind<F, Kind2<G, E, Option<A>>>
) => Kind<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 131,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L131",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L131",
                    },
                    "type": "<E, A>(fga: Kind<F, Kind2<G, E, Option<A>>>) => Kind<F, Kind2<G, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition12.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <E, A, B>(
    fge: Kind<F, Kind2<G, E, Either<A, B>>>
) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 132,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L132",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L132",
                    },
                    "type": "<E, A, B>(fge: Kind<F, Kind2<G, E, Either<A, B>>>) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition12",
              "signature": "interface CompactableComposition12<F extends URIS, G extends URIS2>
    extends FunctorComposition12<F, G> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 130,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L130",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L130",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition12C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition12C.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(
    fga: Kind<F, Kind2<G, E, Option<A>>>
) => Kind<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 140,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L140",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L140",
                    },
                    "type": "<A>(fga: Kind<F, Kind2<G, E, Option<A>>>) => Kind<F, Kind2<G, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition12C.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fge: Kind<F, Kind2<G, E, Either<A, B>>>
) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 141,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L141",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L141",
                    },
                    "type": "<A, B>(fge: Kind<F, Kind2<G, E, Either<A, B>>>) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition12C",
              "signature": "interface CompactableComposition12C<F extends URIS, G extends URIS2, E>
    extends FunctorComposition12C<F, G, E> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 139,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L139",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L139",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition21",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition21.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <FE, A>(
    fga: Kind2<F, FE, Kind<G, Option<A>>>
) => Kind2<F, FE, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 149,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L149",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L149",
                    },
                    "type": "<FE, A>(fga: Kind2<F, FE, Kind<G, Option<A>>>) => Kind2<F, FE, Kind<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition21.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <FE, A, B>(
    fge: Kind2<F, FE, Kind<G, Either<A, B>>>
) => Separated<Kind2<F, FE, Kind<G, A>>, Kind2<F, FE, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 150,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L150",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L150",
                    },
                    "type": "<FE, A, B>(fge: Kind2<F, FE, Kind<G, Either<A, B>>>) => Separated<Kind2<F, FE, Kind<G, A>>, Kind2<F, FE, Kind<G, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition21",
              "signature": "interface CompactableComposition21<F extends URIS2, G extends URIS>
    extends FunctorComposition21<F, G> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L148",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition22",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition22.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <FE, GE, A>(
    fga: Kind2<F, FE, Kind2<G, GE, Option<A>>>
) => Kind2<F, FE, Kind2<G, GE, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 167,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L167",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L167",
                    },
                    "type": "<FE, GE, A>(fga: Kind2<F, FE, Kind2<G, GE, Option<A>>>) => Kind2<F, FE, Kind2<G, GE, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition22.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <FE, GE, A, B>(
    fge: Kind2<F, FE, Kind2<G, GE, Either<A, B>>>
) => Separated<Kind2<F, FE, Kind2<G, GE, A>>, Kind2<F, FE, Kind2<G, GE, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 168,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L168",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L168",
                    },
                    "type": "<FE, GE, A, B>(fge: Kind2<F, FE, Kind2<G, GE, Either<A, B>>>) => Separated<Kind2<F, FE, Kind2<G, GE, A>>, Kind2<F, FE, Kind2<G, GE, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition22",
              "signature": "interface CompactableComposition22<F extends URIS2, G extends URIS2>
    extends FunctorComposition22<F, G> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 166,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L166",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L166",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition22C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition22C.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <FE, A>(
    fga: Kind2<F, FE, Kind2<G, E, Option<A>>>
) => Kind2<F, FE, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 176,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L176",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L176",
                    },
                    "type": "<FE, A>(fga: Kind2<F, FE, Kind2<G, E, Option<A>>>) => Kind2<F, FE, Kind2<G, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition22C.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <FE, A, B>(
    fge: Kind2<F, FE, Kind2<G, E, Either<A, B>>>
) => Separated<Kind2<F, FE, Kind2<G, E, A>>, Kind2<F, FE, Kind2<G, E, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 177,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L177",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L177",
                    },
                    "type": "<FE, A, B>(fge: Kind2<F, FE, Kind2<G, E, Either<A, B>>>) => Separated<Kind2<F, FE, Kind2<G, E, A>>, Kind2<F, FE, Kind2<G, E, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition22C",
              "signature": "interface CompactableComposition22C<F extends URIS2, G extends URIS2, E>
    extends FunctorComposition22C<F, G, E> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 175,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L175",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L175",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "compactable.CompactableComposition23",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition23.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <R, FE, GE, A>(
    fga: Kind2<F, FE, Kind3<G, R, GE, Option<A>>>
) => Kind2<F, FE, Kind3<G, R, GE, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 185,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L185",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L185",
                    },
                    "type": "<R, FE, GE, A>(fga: Kind2<F, FE, Kind3<G, R, GE, Option<A>>>) => Kind2<F, FE, Kind3<G, R, GE, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition23.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <R, FE, GE, A, B>(
    fge: Kind2<F, FE, Kind3<G, R, GE, Either<A, B>>>
) => Separated<
    Kind2<F, FE, Kind3<G, R, GE, A>>,
    Kind2<F, FE, Kind3<G, R, GE, B>>
>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 186,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L186",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L186",
                    },
                    "type": "<R, FE, GE, A, B>(fge: Kind2<F, FE, Kind3<G, R, GE, Either<A, B>>>) => Separated<Kind2<F, FE, Kind3<G, R, GE, A>>, Kind2<F, FE, Kind3<G, R, GE, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition23",
              "signature": "interface CompactableComposition23<F extends URIS2, G extends URIS3>
    extends FunctorComposition23<F, G> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 184,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L184",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L184",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "compactable.CompactableComposition23C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition23C.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <FE, R, A>(
    fga: Kind2<F, FE, Kind3<G, R, E, Option<A>>>
) => Kind2<F, FE, Kind3<G, R, E, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 194,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L194",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L194",
                    },
                    "type": "<FE, R, A>(fga: Kind2<F, FE, Kind3<G, R, E, Option<A>>>) => Kind2<F, FE, Kind3<G, R, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition23C.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <FE, R, A, B>(
    fge: Kind2<F, FE, Kind3<G, R, E, Either<A, B>>>
) => Separated<Kind2<F, FE, Kind3<G, R, E, A>>, Kind2<F, FE, Kind3<G, R, E, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 195,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L195",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L195",
                    },
                    "type": "<FE, R, A, B>(fge: Kind2<F, FE, Kind3<G, R, E, Either<A, B>>>) => Separated<Kind2<F, FE, Kind3<G, R, E, A>>, Kind2<F, FE, Kind3<G, R, E, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition23C",
              "signature": "interface CompactableComposition23C<F extends URIS2, G extends URIS3, E>
    extends FunctorComposition23C<F, G, E> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 193,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L193",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L193",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "compactable.CompactableComposition2C1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition2C1.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(
    fga: Kind2<F, E, Kind<G, Option<A>>>
) => Kind2<F, E, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 158,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L158",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L158",
                    },
                    "type": "<A>(fga: Kind2<F, E, Kind<G, Option<A>>>) => Kind2<F, E, Kind<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "compactable.CompactableComposition2C1.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fge: Kind2<F, E, Kind<G, Either<A, B>>>
) => Separated<Kind2<F, E, Kind<G, A>>, Kind2<F, E, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 159,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L159",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L159",
                    },
                    "type": "<A, B>(fge: Kind2<F, E, Kind<G, Either<A, B>>>) => Separated<Kind2<F, E, Kind<G, A>>, Kind2<F, E, Kind<G, B>>>",
                  },
                ],
              },
              "name": "CompactableComposition2C1",
              "signature": "interface CompactableComposition2C1<F extends URIS2, G extends URIS, E>
    extends FunctorComposition2C1<F, G, E> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L157",
              },
            },
            {
              "docs": [
                "/**
 * A \`Separated\` type which holds \`left\` and \`right\` parts.
 *
 * @since 2.0.0
 */",
              ],
              "id": "compactable.Separated",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "compactable.Separated.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: A;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 38,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L38",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L38",
                    },
                    "type": "{}",
                  },
                  {
                    "docs": [],
                    "id": "compactable.Separated.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: B;",
                    "source": {
                      "filename": "lib/Compactable.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L39",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Separated",
              "signature": "interface Separated<A, B> {}",
              "source": {
                "filename": "lib/Compactable.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L37",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * \`Compactable\` represents data structures which can be _compacted_/_filtered_. This is a generalization of
 * \`catOptions\` as a new function \`compact\`. \`compact\` has relations with \`Functor\`, \`Applicative\`,
 * \`Monad\`, \`Alternative\`, and \`Traversable\` in that we can use these classes to provide the ability to
 * operate on a data type by eliminating intermediate \`None\`s. This is useful for representing the filtering out of
 * values, or failure.
 *
 * Adapted from https://github.com/LiamGoodacre/purescript-filterable/blob/master/src/Data/Compactable.purs
 *
 * @since 2.0.0
 */",
        ],
        "id": "compactable",
        "kind": "namespace",
        "name": "compactable",
        "signature": "module 'lib/Compactable.d.ts' {}",
        "source": {
          "filename": "lib/Compactable.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "console.error",
              "kind": "function",
              "name": "error",
              "signature": "error: (s: unknown) => IO<void>;",
              "source": {
                "filename": "lib/Console.d.ts",
                "line": 16,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Console.d.ts#L16",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Console.d.ts#L16",
              },
              "type": "(s: unknown) => IO<void>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "console.info",
              "kind": "function",
              "name": "info",
              "signature": "info: (s: unknown) => IO<void>;",
              "source": {
                "filename": "lib/Console.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Console.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Console.d.ts#L20",
              },
              "type": "(s: unknown) => IO<void>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "console.log",
              "kind": "function",
              "name": "log",
              "signature": "log: (s: unknown) => IO<void>;",
              "source": {
                "filename": "lib/Console.d.ts",
                "line": 8,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Console.d.ts#L8",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Console.d.ts#L8",
              },
              "type": "(s: unknown) => IO<void>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "console.warn",
              "kind": "function",
              "name": "warn",
              "signature": "warn: (s: unknown) => IO<void>;",
              "source": {
                "filename": "lib/Console.d.ts",
                "line": 12,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Console.d.ts#L12",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Console.d.ts#L12",
              },
              "type": "(s: unknown) => IO<void>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "console",
        "kind": "namespace",
        "name": "console",
        "signature": "module 'lib/Console.d.ts' {}",
        "source": {
          "filename": "lib/Console.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Console.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Console.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.6.2
 */",
              ],
              "id": "const.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: Const<E, A>) => Const<G, B>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 116,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L116",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L116",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: Const<E, A>) => Const<G, B>",
            },
            {
              "docs": [
                "/**
 * @category Contravariant
 * @since 2.0.0
 */",
              ],
              "id": "const.contramap",
              "kind": "function",
              "name": "contramap",
              "signature": "contramap: <A, B>(f: (b: B) => A) => <E>(fa: Const<E, A>) => Const<E, B>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L101",
              },
              "type": "<A, B>(f: (b: B) => A) => <E>(fa: Const<E, A>) => Const<E, B>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "const.getApplicative",
              "kind": "function",
              "name": "getApplicative",
              "signature": "getApplicative: <E>(M: Monoid<E>) => Applicative2C<URI, E>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L96",
              },
              "type": "<E>(M: Monoid<E>) => Applicative2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "const.getApply",
              "kind": "function",
              "name": "getApply",
              "signature": "getApply: <E>(S: Semigroup<E>) => Apply2C<URI, E>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L91",
              },
              "type": "<E>(S: Semigroup<E>) => Apply2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getBooleanAlgebra",
              "kind": "function",
              "name": "getBooleanAlgebra",
              "signature": "getBooleanAlgebra: <E, A>(H: BooleanAlgebra<E>) => BooleanAlgebra<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L86",
              },
              "type": "<E, A>(H: BooleanAlgebra<E>) => BooleanAlgebra<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getBounded",
              "kind": "function",
              "name": "getBounded",
              "signature": "getBounded: <E, A>(B: Bounded<E>) => Bounded<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L56",
              },
              "type": "<E, A>(B: Bounded<E>) => Bounded<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "const.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <E, A>(E: Eq<E>) => Eq<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L46",
              },
              "type": "<E, A>(E: Eq<E>) => Eq<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getHeytingAlgebra",
              "kind": "function",
              "name": "getHeytingAlgebra",
              "signature": "getHeytingAlgebra: <E, A>(H: HeytingAlgebra<E>) => HeytingAlgebra<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L81",
              },
              "type": "<E, A>(H: HeytingAlgebra<E>) => HeytingAlgebra<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <E, A>(M: Monoid<E>) => Monoid<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L66",
              },
              "type": "<E, A>(M: Monoid<E>) => Monoid<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getOrd",
              "kind": "function",
              "name": "getOrd",
              "signature": "getOrd: <E, A>(O: Ord<E>) => Ord<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L51",
              },
              "type": "<E, A>(O: Ord<E>) => Ord<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getRing",
              "kind": "function",
              "name": "getRing",
              "signature": "getRing: <E, A>(S: Ring<E>) => Ring<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L76",
              },
              "type": "<E, A>(S: Ring<E>) => Ring<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <E, A>(S: Semigroup<E>) => Semigroup<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L61",
              },
              "type": "<E, A>(S: Semigroup<E>) => Semigroup<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "const.getSemiring",
              "kind": "function",
              "name": "getSemiring",
              "signature": "getSemiring: <E, A>(S: Semiring<E>) => Semiring<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 71,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L71",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L71",
              },
              "type": "<E, A>(S: Semiring<E>) => Semiring<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "const.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <E, A>(S: Show<E>) => Show<Const<E, A>>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L41",
              },
              "type": "<E, A>(S: Show<E>) => Show<Const<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "const.make",
              "kind": "function",
              "name": "make",
              "signature": "make: <E, A = never>(e: E) => Const<E, A>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L36",
              },
              "type": "<E, A = never>(e: E) => Const<E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "const.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: Const<E, A>) => Const<E, B>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 109,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L109",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L109",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: Const<E, A>) => Const<E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.6.2
 */",
              ],
              "id": "const.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: Const<E, A>) => Const<G, A>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L123",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: Const<E, A>) => Const<G, A>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "const.Const",
              "kind": "typeAlias",
              "name": "Const",
              "signature": "type Const<E, A> = E & {
    readonly _A: A;
};",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 29,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L29",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L29",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "const.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 133,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L133",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L133",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "const.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor2<'Const'>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L153",
              },
              "type": "Bifunctor2<"Const">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "const.const_",
              "kind": "variable",
              "name": "const_",
              "signature": "const const_: Functor2<'Const'> & Contravariant2<'Const'> & Bifunctor2<'Const'>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L158",
              },
              "type": "Functor2<"Const"> & Contravariant2<"Const"> & Bifunctor2<"Const">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "const.Contravariant",
              "kind": "variable",
              "name": "Contravariant",
              "signature": "const Contravariant: Contravariant2<'Const'>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L148",
              },
              "type": "Contravariant2<"Const">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "const.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Const'>;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 143,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L143",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L143",
              },
              "type": "Functor2<"Const">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "const.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Const.d.ts",
                "line": 128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L128",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * The \`Const\` type constructor, which wraps its first type argument and ignores its second.
 * That is, \`Const<E, A>\` is isomorphic to \`E\` for any \`A\`.
 *
 * \`Const\` has some useful instances. For example, the \`Applicative\` instance allows us to collect results using a \`Monoid\`
 * while ignoring return values.
 *
 * @since 2.0.0
 */",
        ],
        "id": "const",
        "kind": "namespace",
        "name": "const",
        "signature": "module 'lib/Const.d.ts' {}",
        "source": {
          "filename": "lib/Const.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "contravariant.Contravariant",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(fa: HKT<F, A>, f: (b: B) => A) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L11",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, f: (b: B) => A) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 10,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L10",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L10",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Contravariant",
              "signature": "interface Contravariant<F> {}",
              "source": {
                "filename": "lib/Contravariant.d.ts",
                "line": 9,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L9",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L9",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "contravariant.Contravariant1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant1.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(fa: Kind<F, A>, f: (b: B) => A) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L19",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, f: (b: B) => A) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant1.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L18",
                    },
                    "type": "URIS",
                  },
                ],
              },
              "name": "Contravariant1",
              "signature": "interface Contravariant1<F extends URIS> {}",
              "source": {
                "filename": "lib/Contravariant.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "contravariant.Contravariant2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant2.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <E, A, B>(
    fa: Kind2<F, E, A>,
    f: (b: B) => A
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L27",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, f: (b: B) => A) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L26",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Contravariant2",
              "signature": "interface Contravariant2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Contravariant.d.ts",
                "line": 25,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L25",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L25",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "contravariant.Contravariant2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant2C.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(fa: Kind2<F, E, A>, f: (b: B) => A) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 36,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L36",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L36",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, f: (b: B) => A) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 34,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L34",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L34",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Contravariant2C",
              "signature": "interface Contravariant2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Contravariant.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L33",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "contravariant.Contravariant3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant3.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (b: B) => A
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L44",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, f: (b: B) => A) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L43",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Contravariant3",
              "signature": "interface Contravariant3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Contravariant.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L42",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "contravariant.Contravariant3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant3C.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (b: B) => A
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L52",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, f: (b: B) => A) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant3C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 51,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L51",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L51",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Contravariant3C",
              "signature": "interface Contravariant3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Contravariant.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L50",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "contravariant.Contravariant4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant4.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    f: (b: B) => A
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 60,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L60",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L60",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, f: (b: B) => A) => Kind4<F, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "contravariant.Contravariant4.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Contravariant.d.ts",
                      "line": 59,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L59",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L59",
                    },
                    "type": "URIS4",
                  },
                ],
              },
              "name": "Contravariant4",
              "signature": "interface Contravariant4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Contravariant.d.ts",
                "line": 58,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L58",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L58",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "contravariant",
        "kind": "namespace",
        "name": "contravariant",
        "signature": "module 'lib/Contravariant.d.ts' {}",
        "source": {
          "filename": "lib/Contravariant.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * Returns the current \`Date\`
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "date.create",
              "kind": "variable",
              "name": "create",
              "signature": "const create: IO<Date>;",
              "source": {
                "filename": "lib/Date.d.ts",
                "line": 12,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Date.d.ts#L12",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Date.d.ts#L12",
              },
              "type": "IO<Date>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "date.eqDate",
              "kind": "variable",
              "name": "eqDate",
              "signature": "const eqDate: Eq<Date>;",
              "source": {
                "filename": "lib/Date.d.ts",
                "line": 23,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Date.d.ts#L23",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Date.d.ts#L23",
              },
              "type": "Eq<Date>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "date.eqMonth",
              "kind": "variable",
              "name": "eqMonth",
              "signature": "const eqMonth: Eq<Date>;",
              "source": {
                "filename": "lib/Date.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Date.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Date.d.ts#L28",
              },
              "type": "Eq<Date>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "date.eqYear",
              "kind": "variable",
              "name": "eqYear",
              "signature": "const eqYear: Eq<Date>;",
              "source": {
                "filename": "lib/Date.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Date.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Date.d.ts#L33",
              },
              "type": "Eq<Date>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Returns the number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC
 *
 * @since 2.0.0
 */",
              ],
              "id": "date.now",
              "kind": "variable",
              "name": "now",
              "signature": "const now: IO<number>;",
              "source": {
                "filename": "lib/Date.d.ts",
                "line": 18,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Date.d.ts#L18",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Date.d.ts#L18",
              },
              "type": "IO<number>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "date",
        "kind": "namespace",
        "name": "date",
        "signature": "module 'lib/Date.d.ts' {}",
        "source": {
          "filename": "lib/Date.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Date.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Date.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "distributiveLattice.getMinMaxDistributiveLattice",
              "kind": "function",
              "name": "getMinMaxDistributiveLattice",
              "signature": "getMinMaxDistributiveLattice: <A>(O: Ord<A>) => DistributiveLattice<A>;",
              "source": {
                "filename": "lib/DistributiveLattice.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/DistributiveLattice.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/DistributiveLattice.d.ts#L20",
              },
              "type": "<A>(O: Ord<A>) => DistributiveLattice<A>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "distributiveLattice.DistributiveLattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "DistributiveLattice",
              "signature": "interface DistributiveLattice<A> extends Lattice<A> {}",
              "source": {
                "filename": "lib/DistributiveLattice.d.ts",
                "line": 15,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/DistributiveLattice.d.ts#L15",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/DistributiveLattice.d.ts#L15",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`DistributiveLattice\` must satisfy the following laws in addition to \`Lattice\` laws:
 *
 * - Distributivity for meet: \`a ∨ (b ∧ c) <-> (a ∨ b) ∧ (a ∨ c)\`
 * - Distributivity for join: \`a ∧ (b ∨ c) <-> (a ∧ b) ∨ (a ∧ c)\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "distributiveLattice",
        "kind": "namespace",
        "name": "distributiveLattice",
        "signature": "module 'lib/DistributiveLattice.d.ts' {}",
        "source": {
          "filename": "lib/DistributiveLattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/DistributiveLattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/DistributiveLattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "either.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <E, A>(that: Lazy<Either<E, A>>) => (fa: Either<E, A>) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 522,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L522",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L522",
              },
              "type": "<E, A>(that: Lazy<Either<E, A>>) => (fa: Either<E, A>) => Either<E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "either.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <E2, B>(
    that: Lazy<Either<E2, B>>
) => <E1, A>(fa: Either<E1, A>) => Either<E2 | E1, B | A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 514,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L514",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L514",
              },
              "type": "<E2, B>(that: Lazy<Either<E2, B>>) => <E1, A>(fa: Either<E1, A>) => Either<E2 | E1, B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "either.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <E, A>(fa: Either<E, A>) => <B>(fab: Either<E, (a: A) => B>) => Either<E, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 426,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L426",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L426",
              },
              "type": "<E, A>(fa: Either<E, A>) => <B>(fab: Either<E, (a: A) => B>) => Either<E, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <E, B>(fb: Either<E, B>) => <A>(fa: Either<E, A>) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 435,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L435",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L435",
              },
              "type": "<E, B>(fb: Either<E, B>) => <A>(fa: Either<E, A>) => Either<E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "either.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, E, B>(
    name: Exclude<N, keyof A>,
    fb: Either<E, B>
) => (
    fa: Either<E, A>
) => Either<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 897,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L897",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L897",
              },
              "type": "<A, N extends string, E, B>(name: Exclude<N, keyof A>, fb: Either<E, B>) => (fa: Either<E, A>) => Either<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <E, B>(fb: Either<E, B>) => <A>(fa: Either<E, A>) => Either<E, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 444,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L444",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L444",
              },
              "type": "<E, B>(fb: Either<E, B>) => <A>(fa: Either<E, A>) => Either<E, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "either.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, D, B>(
    name: Exclude<N, keyof A>,
    fb: Either<D, B>
) => <E>(
    fa: Either<E, A>
) => Either<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 890,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L890",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L890",
              },
              "type": "<A, N extends string, D, B>(name: Exclude<N, keyof A>, fb: Either<D, B>) => <E>(fa: Either<E, A>) => Either<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "either.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <D, A>(
    fa: Either<D, A>
) => <E, B>(fab: Either<E, (a: A) => B>) => Either<D | E, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 419,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L419",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L419",
              },
              "type": "<D, A>(fa: Either<D, A>) => <E, B>(fab: Either<E, (a: A) => B>) => Either<D | E, B>",
            },
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "either.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: Either<E, A>) => Either<G, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 405,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L405",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L405",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: Either<E, A>) => Either<G, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "either.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, E, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => Either<E, B>
) => (
    fa: Either<E, A>
) => Either<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 876,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L876",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L876",
              },
              "type": "<N extends string, A, E, B>(name: Exclude<N, keyof A>, f: (a: A) => Either<E, B>) => (fa: Either<E, A>) => Either<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "either.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <E, A>(fa: Either<E, A>) => Either<E, { [K in N]: A }>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 865,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L865",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L865",
              },
              "type": "<N extends string>(name: N) => <E, A>(fa: Either<E, A>) => Either<E, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "either.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, D, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => Either<D, B>
) => <E>(
    fa: Either<E, A>
) => Either<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 869,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L869",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L869",
              },
              "type": "<N extends string, A, D, B>(name: Exclude<N, keyof A>, f: (a: A) => Either<D, B>) => <E>(fa: Either<E, A>) => Either<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "either.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <E, A, B>(
    f: (a: A) => Either<E, B>
) => (ma: Either<E, A>) => Either<E, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 472,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L472",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L472",
              },
              "type": "<E, A, B>(f: (a: A) => Either<E, B>) => (ma: Either<E, A>) => Either<E, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <E, A, B>(
    f: (a: A) => Either<E, B>
) => (ma: Either<E, A>) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 491,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L491",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L491",
              },
              "type": "<E, A, B>(f: (a: A) => Either<E, B>) => (ma: Either<E, A>) => Either<E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainFirst\`](#chainFirst)
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.8.0
 */",
              ],
              "id": "either.chainFirstW",
              "kind": "function",
              "name": "chainFirstW",
              "signature": "chainFirstW: <D, A, B>(
    f: (a: A) => Either<D, B>
) => <E>(ma: Either<E, A>) => Either<D | E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 481,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L481",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L481",
              },
              "type": "<D, A, B>(f: (a: A) => Either<D, B>) => <E>(ma: Either<E, A>) => Either<D | E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "either.chainNullableK",
              "kind": "function",
              "name": "chainNullableK",
              "signature": "chainNullableK: <E>(
    e: E
) => <A, B>(f: (a: A) => B) => (ma: Either<E, A>) => Either<E, NonNullable<B>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 318,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L318",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L318",
              },
              "type": "<E>(e: E) => <A, B>(f: (a: A) => B) => (ma: Either<E, A>) => Either<E, NonNullable<B>>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */",
              ],
              "id": "either.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <D, A, B>(
    f: (a: A) => Either<D, B>
) => <E>(ma: Either<E, A>) => Either<D | E, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 465,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L465",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L465",
              },
              "type": "<D, A, B>(f: (a: A) => Either<D, B>) => <E>(ma: Either<E, A>) => Either<D | E, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <E, A>(ma: Either<E, A>) => Either<E, Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 534,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L534",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L534",
              },
              "type": "<E, A>(ma: Either<E, A>) => Either<E, Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "either.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => <E>(a: A, ma: Either<E, A>) => boolean;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 842,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L842",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L842",
              },
              "type": "<A>(E: Eq<A>) => <E>(a: A, ma: Either<E, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * Returns \`false\` if \`Left\` or returns the result of the application of the given predicate to the \`Right\` value.
 *
 * @example
 * import { exists, left, right } from 'fp-ts/Either'
 *
 * const gt2 = exists((n: number) => n > 2)
 *
 * assert.strictEqual(gt2(left('a')), false)
 * assert.strictEqual(gt2(right(1)), false)
 * assert.strictEqual(gt2(right(3)), true)
 *
 * @since 2.0.0
 */",
              ],
              "id": "either.exists",
              "kind": "function",
              "name": "exists",
              "signature": "exists: <A>(predicate: Predicate<A>) => <E>(ma: Either<E, A>) => boolean;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 857,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L857",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L857",
              },
              "type": "<A>(predicate: Predicate<A>) => <E>(ma: Either<E, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "either.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <E, A, B>(
    f: (wa: Either<E, A>) => B
) => (wa: Either<E, A>) => Either<E, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 527,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L527",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L527",
              },
              "type": "<E, A, B>(f: (wa: Either<E, A>) => B) => (wa: Either<E, A>) => Either<E, B>",
            },
            {
              "docs": [
                "/**
 * The \`flatten\` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.
 *
 * Derivable from \`Monad\`.
 *
 * @example
 * import * as E from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))
 * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))
 * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <E, A>(mma: Either<E, Either<E, A>>) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 507,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L507",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L507",
              },
              "type": "<E, A>(mma: Either<E, Either<E, A>>) => Either<E, A>",
            },
            {
              "docs": [
                "/**
 * Takes two functions and an \`Either\` value, if the value is a \`Left\` the inner value is applied to the first function,
 * if the value is a \`Right\` the inner value is applied to the second function.
 *
 * @example
 * import { fold, left, right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 *
 * function onLeft(errors: Array<string>): string {
 *   return \`Errors: \${errors.join(', ')}\`
 * }
 *
 * function onRight(value: number): string {
 *   return \`Ok: \${value}\`
 * }
 *
 * assert.strictEqual(
 *   pipe(
 *     right(1),
 *     fold(onLeft, onRight)
 *   ),
 *   'Ok: 1'
 * )
 * assert.strictEqual(
 *   pipe(
 *     left(['error 1', 'error 2']),
 *     fold(onLeft, onRight)
 *   ),
 *   'Errors: error 1, error 2'
 * )
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "either.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <E, A, B>(
    onLeft: (e: E) => B,
    onRight: (a: A) => B
) => (ma: Either<E, A>) => B;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 273,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L273",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L273",
              },
              "type": "<E, A, B>(onLeft: (e: E) => B, onRight: (a: A) => B) => (ma: Either<E, A>) => B",
            },
            {
              "docs": [
                "/**
 * Map each element of the structure to a monoid, and combine the results.
 *
 * @example
 * import { pipe } from 'fp-ts/function';
 * import * as E from 'fp-ts/Either'
 * import { monoidString } from 'fp-ts/Monoid'
 *
 * const yell = (a: string) => \`\${a}!\`
 *
 * assert.deepStrictEqual(
 *   pipe(E.right('a'), E.foldMap(monoidString)(yell)),
 *   'a!',
 * )
 *
 * assert.deepStrictEqual(
 *   pipe(E.left('e'), E.foldMap(monoidString)(yell)),
 *   monoidString.empty,
 * )
 *
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "either.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: Either<E, A>) => M;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 582,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L582",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L582",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: Either<E, A>) => M",
            },
            {
              "docs": [
                "/**
 * Takes a default and a nullable value, if the value is not nully, turn it into a \`Right\`, if the value is nully use
 * the provided default as a \`Left\`.
 *
 * @example
 * import { fromNullable, left, right } from 'fp-ts/Either'
 *
 * const parse = fromNullable('nully')
 *
 * assert.deepStrictEqual(parse(1), right(1))
 * assert.deepStrictEqual(parse(null), left('nully'))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.fromNullable",
              "kind": "function",
              "name": "fromNullable",
              "signature": "fromNullable: <E>(e: E) => <A>(a: A) => Either<E, NonNullable<A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L100",
              },
              "type": "<E>(e: E) => <A>(a: A) => Either<E, NonNullable<A>>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "either.fromNullableK",
              "kind": "function",
              "name": "fromNullableK",
              "signature": "fromNullableK: <E>(
    e: E
) => <A extends readonly unknown[], B>(
    f: (...a: A) => B
) => (...a: A) => Either<E, NonNullable<B>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 311,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L311",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L311",
              },
              "type": "<E>(e: E) => <A extends readonly unknown[], B>(f: (...a: A) => B) => (...a: A) => Either<E, NonNullable<B>>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @example
 * import { fromOption, left, right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     some(1),
 *     fromOption(() => 'error')
 *   ),
 *   right(1)
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     none,
 *     fromOption(() => 'error')
 *   ),
 *   left('error')
 * )
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.fromOption",
              "kind": "function",
              "name": "fromOption",
              "signature": "fromOption: <E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L203",
              },
              "type": "<E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => Either<E, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.getAltValidation",
              "kind": "function",
              "name": "getAltValidation",
              "signature": "getAltValidation: <E>(SE: Semigroup<E>) => Alt2C<URI, E>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 746,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L746",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L746",
              },
              "type": "<E>(SE: Semigroup<E>) => Alt2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.getApplicativeValidation",
              "kind": "function",
              "name": "getApplicativeValidation",
              "signature": "getApplicativeValidation: <E>(SE: Semigroup<E>) => Applicative2C<URI, E>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 741,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L741",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L741",
              },
              "type": "<E>(SE: Semigroup<E>) => Applicative2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getApplyMonoid",
              "kind": "function",
              "name": "getApplyMonoid",
              "signature": "getApplyMonoid: <E, A>(M: Monoid<A>) => Monoid<Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 722,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L722",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L722",
              },
              "type": "<E, A>(M: Monoid<A>) => Monoid<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most \`Left\` value. If both operands are \`Right\`s then the inner values
 * are concatenated using the provided \`Semigroup\`
 *
 * @example
 * import { getApplySemigroup, left, right } from 'fp-ts/Either'
 * import { semigroupSum } from 'fp-ts/Semigroup'
 *
 * const S = getApplySemigroup<string, number>(semigroupSum)
 * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))
 * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))
 * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))
 * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getApplySemigroup",
              "kind": "function",
              "name": "getApplySemigroup",
              "signature": "getApplySemigroup: <E, A>(S: Semigroup<A>) => Semigroup<Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 717,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L717",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L717",
              },
              "type": "<E, A>(S: Semigroup<A>) => Semigroup<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <E, A>(EL: Eq<E>, EA: Eq<A>) => Eq<Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 681,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L681",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L681",
              },
              "type": "<E, A>(EL: Eq<E>, EA: Eq<A>) => Eq<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * Builds a \`Filterable\` instance for \`Either\` given \`Monoid\` for the left side
 *
 * @category instances
 * @since 3.0.0
 */",
              ],
              "id": "either.getFilterable",
              "kind": "function",
              "name": "getFilterable",
              "signature": "getFilterable: <E>(M: Monoid<E>) => Filterable2C<URI, E>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 729,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L729",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L729",
              },
              "type": "<E>(M: Monoid<E>) => Filterable2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * Returns the wrapped value if it's a \`Right\` or a default value if is a \`Left\`.
 *
 * @example
 * import { getOrElse, left, right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     right(1),
 *     getOrElse(() => 0)
 *   ),
 *   1
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     left('error'),
 *     getOrElse(() => 0)
 *   ),
 *   0
 * )
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "either.getOrElse",
              "kind": "function",
              "name": "getOrElse",
              "signature": "getOrElse: <E, A>(onLeft: (e: E) => A) => (ma: Either<E, A>) => A;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 306,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L306",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L306",
              },
              "type": "<E, A>(onLeft: (e: E) => A) => (ma: Either<E, A>) => A",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`getOrElse\`](#getOrElse).
 *
 * @category destructors
 * @since 2.6.0
 */",
              ],
              "id": "either.getOrElseW",
              "kind": "function",
              "name": "getOrElseW",
              "signature": "getOrElseW: <E, B>(onLeft: (e: E) => B) => <A>(ma: Either<E, A>) => B | A;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 280,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L280",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L280",
              },
              "type": "<E, B>(onLeft: (e: E) => B) => <A>(ma: Either<E, A>) => B | A",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most non-\`Left\` value. If both operands are \`Right\`s then the inner values are
 * concatenated using the provided \`Semigroup\`
 *
 * @example
 * import { getSemigroup, left, right } from 'fp-ts/Either'
 * import { semigroupSum } from 'fp-ts/Semigroup'
 *
 * const S = getSemigroup<string, number>(semigroupSum)
 * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))
 * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))
 * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))
 * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <E, A>(S: Semigroup<A>) => Semigroup<Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 699,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L699",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L699",
              },
              "type": "<E, A>(S: Semigroup<A>) => Semigroup<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <E, A>(SE: Show<E>, SA: Show<A>) => Show<Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 676,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L676",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L676",
              },
              "type": "<E, A>(SE: Show<E>, SA: Show<A>) => Show<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getValidation",
              "kind": "function",
              "name": "getValidation",
              "signature": "getValidation: <E>(
    SE: Semigroup<E>
) => Monad2C<URI, E> &
    Foldable2<URI> &
    Traversable2<URI> &
    Bifunctor2<URI> &
    Alt2C<URI, E> &
    Extend2<URI> &
    ChainRec2C<URI, E> &
    MonadThrow2C<URI, E>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 751,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L751",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L751",
              },
              "type": "<E>(SE: Semigroup<E>) => Monad2C<URI, E> & Foldable2<URI> & Traversable2<URI> & Bifunctor2<URI> & Alt2C<URI, E> & Extend2<URI> & ChainRec2C<URI, E> & MonadThrow2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getValidationMonoid",
              "kind": "function",
              "name": "getValidationMonoid",
              "signature": "getValidationMonoid: <E, A>(
    SE: Semigroup<E>,
    SA: Monoid<A>
) => Monoid<Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 820,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L820",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L820",
              },
              "type": "<E, A>(SE: Semigroup<E>, SA: Monoid<A>) => Monoid<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getValidationSemigroup",
              "kind": "function",
              "name": "getValidationSemigroup",
              "signature": "getValidationSemigroup: <E, A>(
    SE: Semigroup<E>,
    SA: Semigroup<A>
) => Semigroup<Either<E, A>>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 765,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L765",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L765",
              },
              "type": "<E, A>(SE: Semigroup<E>, SA: Semigroup<A>) => Semigroup<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * Builds \`Witherable\` instance for \`Either\` given \`Monoid\` for the left side
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.getWitherable",
              "kind": "function",
              "name": "getWitherable",
              "signature": "getWitherable: <E>(M: Monoid<E>) => Witherable2C<URI, E>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 736,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L736",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L736",
              },
              "type": "<E>(M: Monoid<E>) => Witherable2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the either is an instance of \`Left\`, \`false\` otherwise.
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "either.isLeft",
              "kind": "function",
              "name": "isLeft",
              "signature": "isLeft: <E, A>(ma: Either<E, A>) => ma is Left<E>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L61",
              },
              "type": "<E, A>(ma: Either<E, A>) => ma is Left<E>",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the either is an instance of \`Right\`, \`false\` otherwise.
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "either.isRight",
              "kind": "function",
              "name": "isRight",
              "signature": "isRight: <E, A>(ma: Either<E, A>) => ma is Right<A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 68,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L68",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L68",
              },
              "type": "<E, A>(ma: Either<E, A>) => ma is Right<A>",
            },
            {
              "docs": [
                "/**
 * Constructs a new \`Either\` holding a \`Left\` value. This usually represents a failure, due to the right-bias of this
 * structure.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <E = never, A = never>(e: E) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L76",
              },
              "type": "<E = never, A = never>(e: E) => Either<E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "either.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: Either<E, A>) => Either<E, B>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 398,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L398",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L398",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: Either<E, A>) => Either<E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "either.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: Either<E, A>) => Either<G, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 412,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L412",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L412",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: Either<E, A>) => Either<G, A>",
            },
            {
              "docs": [
                "/**
 * Useful for recovering from errors.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.orElse",
              "kind": "function",
              "name": "orElse",
              "signature": "orElse: <E, A, M>(
    onLeft: (e: E) => Either<M, A>
) => (ma: Either<E, A>) => Either<M, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 334,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L334",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L334",
              },
              "type": "<E, A, M>(onLeft: (e: E) => Either<M, A>) => (ma: Either<E, A>) => Either<M, A>",
            },
            {
              "docs": [
                "/**
 * Converts a JavaScript Object Notation (JSON) string into an object.
 *
 * @example
 * import { parseJSON, toError, right, left } from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(parseJSON('{"a":1}', toError), right({ a: 1 }))
 * assert.deepStrictEqual(parseJSON('{"a":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.parseJSON",
              "kind": "function",
              "name": "parseJSON",
              "signature": "parseJSON: <E>(s: string, onError: (reason: unknown) => E) => Either<E, Json>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 154,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L154",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L154",
              },
              "type": "<E>(s: string, onError: (reason: unknown) => E) => Either<E, Json>",
            },
            {
              "docs": [
                "/**
 * Left-associative fold of a structure.
 *
 * @example
 * import { pipe } from 'fp-ts/function'
 * import * as E from 'fp-ts/Either'
 *
 * const startWith = 'prefix'
 * const concat = (a: string, b: string) => \`\${a}:\${b}\`
 *
 * assert.deepStrictEqual(
 *   pipe(E.right('a'), E.reduce(startWith, concat)),
 *   'prefix:a',
 * )
 *
 * assert.deepStrictEqual(
 *   pipe(E.left('e'), E.reduce(startWith, concat)),
 *   'prefix',
 * )
 *
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "either.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: Either<E, A>) => B;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 558,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L558",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L558",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: Either<E, A>) => B",
            },
            {
              "docs": [
                "/**
 * Right-associative fold of a structure.
 *
 * @example
 * import { pipe } from 'fp-ts/function'
 * import * as E from 'fp-ts/Either'
 *
 * const startWith = 'postfix'
 * const concat = (a: string, b: string) => \`\${a}:\${b}\`
 *
 * assert.deepStrictEqual(
 *   pipe(E.right('a'), E.reduceRight(startWith, concat)),
 *   'a:postfix',
 * )
 *
 * assert.deepStrictEqual(
 *   pipe(E.left('e'), E.reduceRight(startWith, concat)),
 *   'postfix',
 * )
 *
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "either.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: Either<E, A>) => B;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 606,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L606",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L606",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: Either<E, A>) => B",
            },
            {
              "docs": [
                "/**
 * Constructs a new \`Either\` holding a \`Right\` value. This usually represents a successful value due to the right bias
 * of this structure.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <E = never, A = never>(a: A) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L84",
              },
              "type": "<E = never, A = never>(a: A) => Either<E, A>",
            },
            {
              "docs": [
                "/**
 * convert an array of either to an either of array
 * this function have the same behavior of \`A.sequence(E.either)\` but it's optimized and perform better
 *
 * @example
 *
 * import { sequenceArray, left, right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 * import * as A from 'fp-ts/Array'
 *
 * const arr = A.range(0, 10)
 * assert.deepStrictEqual(pipe(arr, A.map(right), sequenceArray), right(arr))
 * assert.deepStrictEqual(pipe(arr, A.map(right), A.cons(left('Error')), sequenceArray), left('Error'))
 *
 * @since 2.9.0
 */",
              ],
              "id": "either.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <E, A>(arr: readonly Either<E, A>[]) => Either<E, readonly A[]>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 967,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L967",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L967",
              },
              "type": "<E, A>(arr: readonly Either<E, A>[]) => Either<E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
 *
 * @example
 * import * as E from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{"a":1}'))
 * const circular: any = { ref: null }
 * circular.ref = circular
 * assert.deepStrictEqual(
 *   pipe(
 *     E.stringifyJSON(circular, E.toError),
 *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))
 *   ),
 *   E.left(true)
 * )
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.stringifyJSON",
              "kind": "function",
              "name": "stringifyJSON",
              "signature": "stringifyJSON: <E>(
    u: unknown,
    onError: (reason: unknown) => E
) => Either<E, string>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L176",
              },
              "type": "<E>(u: unknown, onError: (reason: unknown) => E) => Either<E, string>",
            },
            {
              "docs": [
                "/**
 * Returns a \`Right\` if is a \`Left\` (and vice versa).
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <E, A>(ma: Either<E, A>) => Either<A, E>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 327,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L327",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L327",
              },
              "type": "<E, A>(ma: Either<E, A>) => Either<A, E>",
            },
            {
              "docs": [
                "/**
 * Default value for the \`onError\` argument of \`tryCatch\`
 *
 * @since 2.0.0
 */",
              ],
              "id": "either.toError",
              "kind": "function",
              "name": "toError",
              "signature": "toError: (e: unknown) => Error;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 838,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L838",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L838",
              },
              "type": "(e: unknown) => Error",
            },
            {
              "docs": [
                "/**
 * map an array using provided function to Either then transform to Either of the array
 * this function have the same behavior of \`A.traverse(E.either)\` but it's optimized and perform better
 *
 * @example
 *
 *
 * import { traverseArray, left, right, fromPredicate } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 * import * as A from 'fp-ts/Array'
 *
 * const arr = A.range(0, 10)
 * assert.deepStrictEqual(
 *   pipe(
 *     arr,
 *     traverseArray((x) => right(x))
 *   ),
 *   right(arr)
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     arr,
 *     traverseArray(
 *       fromPredicate(
 *         (x) => x > 5,
 *         () => 'a'
 *       )
 *     )
 *   ),
 *   left('a')
 * )
 * @since 2.9.0
 */",
              ],
              "id": "either.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <E, A, B>(
    f: (a: A) => Either<E, B>
) => (arr: readonly A[]) => Either<E, readonly B[]>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 948,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L948",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L948",
              },
              "type": "<E, A, B>(f: (a: A) => Either<E, B>) => (arr: readonly A[]) => Either<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 *
 * @since 2.9.0
 */",
              ],
              "id": "either.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <E, A, B>(
    f: (index: number, a: A) => Either<E, B>
) => (arr: readonly A[]) => Either<E, readonly B[]>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 912,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L912",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L912",
              },
              "type": "<E, A, B>(f: (index: number, a: A) => Either<E, B>) => (arr: readonly A[]) => Either<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * Constructs a new \`Either\` from a function that might throw.
 *
 * @example
 * import { Either, left, right, tryCatch } from 'fp-ts/Either'
 *
 * const unsafeHead = <A>(as: Array<A>): A => {
 *   if (as.length > 0) {
 *     return as[0]
 *   } else {
 *     throw new Error('empty array')
 *   }
 * }
 *
 * const head = <A>(as: Array<A>): Either<Error, A> => {
 *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))
 * }
 *
 * assert.deepStrictEqual(head([]), left(new Error('empty array')))
 * assert.deepStrictEqual(head([1, 2, 3]), right(1))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.tryCatch",
              "kind": "function",
              "name": "tryCatch",
              "signature": "tryCatch: <E, A>(f: Lazy<A>, onError: (e: unknown) => E) => Either<E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 125,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L125",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L125",
              },
              "type": "<E, A>(f: Lazy<A>, onError: (e: unknown) => E) => Either<E, A>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.6.7
 */",
              ],
              "id": "either.JsonArray",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "JsonArray",
              "signature": "interface JsonArray extends ReadonlyArray<Json> {}",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 141,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L141",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L141",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.7
 */",
              ],
              "id": "either.JsonRecord",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [
                  {
                    "docs": [],
                    "id": "either.JsonRecord.0-index-signature",
                    "kind": "interfaceIndexSignature",
                    "name": "index signature",
                    "signature": "readonly [key: string]: Json;",
                    "source": {
                      "filename": "lib/Either.d.ts",
                      "line": 136,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L136",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L136",
                    },
                  },
                ],
                "methods": [],
                "properties": [],
              },
              "name": "JsonRecord",
              "signature": "interface JsonRecord {}",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 135,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L135",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L135",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "either.Left",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "either.Left.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: E;",
                    "source": {
                      "filename": "lib/Either.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L40",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Left",
              "signature": "interface Left<E> {}",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "either.Right",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "either.Right.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: A;",
                    "source": {
                      "filename": "lib/Either.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L48",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Right",
              "signature": "interface Right<A> {}",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L46",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "either.Either",
              "kind": "typeAlias",
              "name": "Either",
              "signature": "type Either<E, A> = Left<E> | Right<A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 54,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L54",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L54",
              },
            },
            {
              "docs": [
                "/**
 * Copied from https://github.com/Microsoft/TypeScript/issues/1897#issuecomment-338650717
 *
 * @since 2.6.7
 */",
              ],
              "id": "either.Json",
              "kind": "typeAlias",
              "name": "Json",
              "signature": "type Json = boolean | number | string | null | JsonArray | JsonRecord;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 131,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L131",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L131",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 666,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L666",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L666",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 800,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L800",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L800",
              },
              "type": "Alt2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 775,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L775",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L775",
              },
              "type": "Applicative2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 795,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L795",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L795",
              },
              "type": "Bifunctor2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.ChainRec",
              "kind": "variable",
              "name": "ChainRec",
              "signature": "const ChainRec: ChainRec2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 810,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L810",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L810",
              },
              "type": "ChainRec2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "either.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: Either<never, {}>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 861,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L861",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L861",
              },
              "type": "Either<never, {}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.either",
              "kind": "variable",
              "name": "either",
              "signature": "const either: Monad2<'Either'> &
    Foldable2<'Either'> &
    Traversable2<'Either'> &
    Bifunctor2<'Either'> &
    Alt2<'Either'> &
    Extend2<'Either'> &
    ChainRec2<'Either'> &
    MonadThrow2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 825,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L825",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L825",
              },
              "type": "Monad2<"Either"> & Foldable2<"Either"> & Traversable2<"Either"> & Bifunctor2<"Either"> & Alt2<"Either"> & Extend2<"Either"> & ChainRec2<"Either"> & MonadThrow2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Extend",
              "kind": "variable",
              "name": "Extend",
              "signature": "const Extend: Extend2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 805,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L805",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L805",
              },
              "type": "Extend2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @example
 * import { filterOrElse, left, right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     right(1),
 *     filterOrElse(
 *       (n) => n > 0,
 *       () => 'error'
 *     )
 *   ),
 *   right(1)
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     right(-1),
 *     filterOrElse(
 *       (n) => n > 0,
 *       () => 'error'
 *     )
 *   ),
 *   left('error')
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     left('a'),
 *     filterOrElse(
 *       (n) => n > 0,
 *       () => 'error'
 *     )
 *   ),
 *   left('a')
 * )
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "either.filterOrElse",
              "kind": "variable",
              "name": "filterOrElse",
              "signature": "const filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        ma: Either<E, A>
    ) => Either<E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        ma: Either<E, A>
    ) => Either<E, A>;
};",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 387,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L387",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L387",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (ma: Either<E, A>) => Either<E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (ma: Either<E, A>) => Either<E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`filterOrElse\`](#filterOrElse).
 *
 * @since 2.9.0
 */",
              ],
              "id": "either.filterOrElseW",
              "kind": "variable",
              "name": "filterOrElseW",
              "signature": "const filterOrElseW: {
    <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <E1>(
        ma: Either<E1, A>
    ) => Either<E2 | E1, B>;
    <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <E1>(
        ma: Either<E1, A>
    ) => Either<E2 | E1, A>;
};",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 340,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L340",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L340",
              },
              "type": "{ <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <E1>(ma: Either<E1, A>) => Either<E2 | E1, B>; <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <E1>(ma: Either<E1, A>) => Either<E2 | E1, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 785,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L785",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L785",
              },
              "type": "Foldable2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @example
 * import { fromPredicate, left, right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     1,
 *     fromPredicate(
 *       (n) => n > 0,
 *       () => 'error'
 *     )
 *   ),
 *   right(1)
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     -1,
 *     fromPredicate(
 *       (n) => n > 0,
 *       () => 'error'
 *     )
 *   ),
 *   left('error')
 * )
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "either.fromPredicate",
              "kind": "variable",
              "name": "fromPredicate",
              "signature": "const fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        a: A
    ) => Either<E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => Either<E, A>;
};",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 235,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L235",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L235",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (a: A) => Either<E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => Either<E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 770,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L770",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L770",
              },
              "type": "Functor2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 780,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L780",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L780",
              },
              "type": "Monad2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.MonadThrow",
              "kind": "variable",
              "name": "MonadThrow",
              "signature": "const MonadThrow: MonadThrow2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 815,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L815",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L815",
              },
              "type": "MonadThrow2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * Equivalent to [\`right\`](#right).
 *
 * @example
 * import * as E from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(E.of('a'), E.right('a'))
 *
 * @category Applicative
 * @since 2.7.0
 */",
              ],
              "id": "either.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <E, A>(a: A) => Kind2<F, E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 458,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L458",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L458",
              },
              "type": "<E, A>(a: A) => Kind2<F, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Evaluate each monadic action in the structure from left to right, and collect the results.
 *
 * @example
 * import { pipe } from 'fp-ts/function'
 * import * as E from 'fp-ts/Either'
 * import * as O from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(
 *   pipe(E.right(O.some('a')), E.sequence(O.option)),
 *   O.some(E.right('a')),
 *  )
 *
 * assert.deepStrictEqual(
 *   pipe(E.right(O.none), E.sequence(O.option)),
 *   O.none
 * )
 *
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "either.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 651,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L651",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L651",
              },
              "type": "Sequence2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadThrow
 * @since 2.6.3
 */",
              ],
              "id": "either.throwError",
              "kind": "variable",
              "name": "throwError",
              "signature": "const throwError: <E, A>(e: E) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 656,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L656",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L656",
              },
              "type": "<E, A>(e: E) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "either.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 790,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L790",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L790",
              },
              "type": "Traversable2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.
 *
 * @example
 * import { pipe } from 'fp-ts/function'
 * import * as A from 'fp-ts/Array'
 * import * as E from 'fp-ts/Either'
 * import * as O from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(
 *   pipe(E.right(['a']), E.traverse(O.option)(A.head)),
 *   O.some(E.right('a')),
 *  )
 *
 * assert.deepStrictEqual(
 *   pipe(E.right([]), E.traverse(O.option)(A.head)),
 *   O.none,
 * )
 *
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "either.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse2<'Either'>;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 629,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L629",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L629",
              },
              "type": "PipeableTraverse2<"Either">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "either.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Either.d.ts",
                "line": 661,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L661",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L661",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * \`\`\`ts
 * type Either<E, A> = Left<E> | Right<A>
 * \`\`\`
 *
 * Represents a value of one of two possible types (a disjoint union).
 *
 * An instance of \`Either\` is either an instance of \`Left\` or \`Right\`.
 *
 * A common use of \`Either\` is as an alternative to \`Option\` for dealing with possible missing values. In this usage,
 * \`None\` is replaced with a \`Left\` which can contain useful information. \`Right\` takes the place of \`Some\`. Convention
 * dictates that \`Left\` is used for failure and \`Right\` is used for success.
 *
 * @since 2.0.0
 */",
        ],
        "id": "either",
        "kind": "namespace",
        "name": "either",
        "signature": "module 'lib/Either.d.ts' {}",
        "source": {
          "filename": "lib/Either.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "eitherT.getEitherM",
              "kind": "function",
              "name": "getEitherM",
              "signature": "getEitherM: {
    <M extends URIS2>(M: Monad2<M>): EitherM2<M>;
    <M extends URIS>(M: Monad1<M>): EitherM1<M>;
    <M>(M: Monad<M>): EitherM<M>;
};",
              "source": {
                "filename": "lib/EitherT.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L88",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L88",
              },
              "type": "{ <M extends URIS2>(M: Monad2<M>): EitherM2<M>; <M extends URIS>(M: Monad1<M>): EitherM1<M>; <M>(M: Monad<M>): EitherM<M>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "eitherT.EitherM",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <E, A>(
    fa: EitherT<M, E, A>,
    that: Lazy<EitherT<M, E, A>>
) => EitherT<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L21",
                    },
                    "type": "<E, A>(fa: EitherT<M, E, A>, that: Lazy<EitherT<M, E, A>>) => EitherT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, A, N, B>(
    ma: EitherT<M, E, A>,
    f: (e: E) => N,
    g: (a: A) => B
) => EitherT<M, N, B>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L22",
                    },
                    "type": "<E, A, N, B>(ma: EitherT<M, E, A>, f: (e: E) => N, g: (a: A) => B) => EitherT<M, N, B>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <E, A, B>(
    ma: EitherT<M, E, A>,
    f: (a: A) => EitherT<M, E, B>
) => EitherT<M, E, B>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L20",
                    },
                    "type": "<E, A, B>(ma: EitherT<M, E, A>, f: (a: A) => EitherT<M, E, B>) => EitherT<M, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <E, A, R>(
    ma: EitherT<M, E, A>,
    onLeft: (e: E) => HKT<M, R>,
    onRight: (a: A) => HKT<M, R>
) => HKT<M, R>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 24,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L24",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L24",
                    },
                    "type": "<E, A, R>(ma: EitherT<M, E, A>, onLeft: (e: E) => HKT<M, R>, onRight: (a: A) => HKT<M, R>) => HKT<M, R>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.getOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getOrElse",
                    "signature": "readonly getOrElse: <E, A>(
    ma: EitherT<M, E, A>,
    onLeft: (e: E) => HKT<M, A>
) => HKT<M, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L25",
                    },
                    "type": "<E, A>(ma: EitherT<M, E, A>, onLeft: (e: E) => HKT<M, A>) => HKT<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <E, A>(e: E) => EitherT<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L30",
                    },
                    "type": "<E, A>(e: E) => EitherT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.leftM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "leftM",
                    "signature": "readonly leftM: <E, A>(me: HKT<M, E>) => EitherT<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 29,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L29",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L29",
                    },
                    "type": "<E, A>(me: HKT<M, E>) => EitherT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, A, N>(
    ma: EitherT<M, E, A>,
    f: (e: E) => N
) => EitherT<M, N, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 23,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L23",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L23",
                    },
                    "type": "<E, A, N>(ma: EitherT<M, E, A>, f: (e: E) => N) => EitherT<M, N, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.orElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "orElse",
                    "signature": "readonly orElse: <E, A, N>(
    ma: EitherT<M, E, A>,
    onLeft: (e: E) => EitherT<M, N, A>
) => EitherT<M, N, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L26",
                    },
                    "type": "<E, A, N>(ma: EitherT<M, E, A>, onLeft: (e: E) => EitherT<M, N, A>) => EitherT<M, N, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.rightM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "rightM",
                    "signature": "readonly rightM: <E, A>(ma: HKT<M, A>) => EitherT<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L28",
                    },
                    "type": "<E, A>(ma: HKT<M, A>) => EitherT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM.swap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "swap",
                    "signature": "readonly swap: <E, A>(ma: EitherT<M, E, A>) => EitherT<M, A, E>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L27",
                    },
                    "type": "<E, A>(ma: EitherT<M, E, A>) => EitherT<M, A, E>",
                  },
                ],
              },
              "name": "EitherM",
              "signature": "interface EitherM<M> extends ApplicativeCompositionHKT2<M, URI> {}",
              "source": {
                "filename": "lib/EitherT.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L19",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "eitherT.EitherM1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <E, A>(
    fa: EitherT1<M, E, A>,
    that: Lazy<EitherT1<M, E, A>>
) => EitherT1<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L42",
                    },
                    "type": "<E, A>(fa: Kind<M, E.Either<E, A>>, that: Lazy<Kind<M, E.Either<E, A>>>) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, A, N, B>(
    ma: EitherT1<M, E, A>,
    f: (e: E) => N,
    g: (a: A) => B
) => EitherT1<M, N, B>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L43",
                    },
                    "type": "<E, A, N, B>(ma: Kind<M, E.Either<E, A>>, f: (e: E) => N, g: (a: A) => B) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <E, A, B>(
    ma: EitherT1<M, E, A>,
    f: (a: A) => EitherT1<M, E, B>
) => EitherT1<M, E, B>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L41",
                    },
                    "type": "<E, A, B>(ma: Kind<M, E.Either<E, A>>, f: (a: A) => Kind<M, E.Either<E, A>>) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <E, A, R>(
    ma: EitherT1<M, E, A>,
    onLeft: (e: E) => Kind<M, R>,
    onRight: (a: A) => Kind<M, R>
) => Kind<M, R>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 45,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L45",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L45",
                    },
                    "type": "<E, A, R>(ma: Kind<M, E.Either<E, A>>, onLeft: (e: E) => Kind<M, R>, onRight: (a: A) => Kind<M, R>) => Kind<M, R>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.getOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getOrElse",
                    "signature": "readonly getOrElse: <E, A>(
    ma: EitherT1<M, E, A>,
    onLeft: (e: E) => Kind<M, A>
) => Kind<M, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 50,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L50",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L50",
                    },
                    "type": "<E, A>(ma: Kind<M, E.Either<E, A>>, onLeft: (e: E) => Kind<M, A>) => Kind<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <E, A>(e: E) => EitherT1<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L55",
                    },
                    "type": "<E, A>(e: E) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.leftM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "leftM",
                    "signature": "readonly leftM: <E, A>(me: Kind<M, E>) => EitherT1<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L54",
                    },
                    "type": "<E, A>(me: Kind<M, E>) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, A, N>(
    ma: EitherT1<M, E, A>,
    f: (e: E) => N
) => EitherT1<M, N, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L44",
                    },
                    "type": "<E, A, N>(ma: Kind<M, E.Either<E, A>>, f: (e: E) => N) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.orElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "orElse",
                    "signature": "readonly orElse: <E, A, N>(
    ma: EitherT1<M, E, A>,
    onLeft: (e: E) => EitherT1<M, N, A>
) => EitherT1<M, N, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 51,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L51",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L51",
                    },
                    "type": "<E, A, N>(ma: Kind<M, E.Either<E, A>>, onLeft: (e: E) => Kind<M, E.Either<E, A>>) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.rightM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "rightM",
                    "signature": "readonly rightM: <E, A>(ma: Kind<M, A>) => EitherT1<M, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L53",
                    },
                    "type": "<E, A>(ma: Kind<M, A>) => Kind<M, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM1.swap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "swap",
                    "signature": "readonly swap: <E, A>(ma: EitherT1<M, E, A>) => EitherT1<M, A, E>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L52",
                    },
                    "type": "<E, A>(ma: Kind<M, E.Either<E, A>>) => Kind<M, E.Either<E, A>>",
                  },
                ],
              },
              "name": "EitherM1",
              "signature": "interface EitherM1<M extends URIS> extends ApplicativeComposition12<M, URI> {}",
              "source": {
                "filename": "lib/EitherT.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L40",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "eitherT.EitherM2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <R, E, A>(
    fa: EitherT2<M, R, E, A>,
    that: Lazy<EitherT2<M, R, E, A>>
) => EitherT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 67,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L67",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L67",
                    },
                    "type": "<R, E, A>(fa: Kind2<M, R, E.Either<E, A>>, that: Lazy<Kind2<M, R, E.Either<E, A>>>) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <R, E, A, N, B>(
    ma: EitherT2<M, R, E, A>,
    f: (e: E) => N,
    g: (a: A) => B
) => EitherT2<M, R, N, B>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 68,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L68",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L68",
                    },
                    "type": "<R, E, A, N, B>(ma: Kind2<M, R, E.Either<E, A>>, f: (e: E) => N, g: (a: A) => B) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, E, A, B>(
    ma: EitherT2<M, R, E, A>,
    f: (a: A) => EitherT2<M, R, E, B>
) => EitherT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L66",
                    },
                    "type": "<R, E, A, B>(ma: Kind2<M, R, E.Either<E, A>>, f: (a: A) => Kind2<M, R, E.Either<E, A>>) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <R, E, A, B>(
    ma: EitherT2<M, R, E, A>,
    onLeft: (e: E) => Kind2<M, R, B>,
    onRight: (a: A) => Kind2<M, R, B>
) => Kind2<M, R, B>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 70,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L70",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L70",
                    },
                    "type": "<R, E, A, B>(ma: Kind2<M, R, E.Either<E, A>>, onLeft: (e: E) => Kind2<M, R, B>, onRight: (a: A) => Kind2<M, R, B>) => Kind2<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.getOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getOrElse",
                    "signature": "readonly getOrElse: <R, E, A>(
    ma: EitherT2<M, R, E, A>,
    onLeft: (e: E) => Kind2<M, R, A>
) => Kind2<M, R, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 75,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L75",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L75",
                    },
                    "type": "<R, E, A>(ma: Kind2<M, R, E.Either<E, A>>, onLeft: (e: E) => Kind2<M, R, A>) => Kind2<M, R, A>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <R, E, A>(e: E) => EitherT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 83,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L83",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L83",
                    },
                    "type": "<R, E, A>(e: E) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.leftM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "leftM",
                    "signature": "readonly leftM: <R, E, A>(me: Kind2<M, R, E>) => EitherT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L82",
                    },
                    "type": "<R, E, A>(me: Kind2<M, R, E>) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <R, E, A, N>(
    ma: EitherT2<M, R, E, A>,
    f: (e: E) => N
) => EitherT2<M, R, N, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 69,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L69",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L69",
                    },
                    "type": "<R, E, A, N>(ma: Kind2<M, R, E.Either<E, A>>, f: (e: E) => N) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.orElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "orElse",
                    "signature": "readonly orElse: <R, E, A, F>(
    ma: EitherT2<M, R, E, A>,
    onLeft: (e: E) => EitherT2<M, R, F, A>
) => EitherT2<M, R, F, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 76,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L76",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L76",
                    },
                    "type": "<R, E, A, F>(ma: Kind2<M, R, E.Either<E, A>>, onLeft: (e: E) => Kind2<M, R, E.Either<E, A>>) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.rightM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "rightM",
                    "signature": "readonly rightM: <R, E, A>(ma: Kind2<M, R, A>) => EitherT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 81,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L81",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L81",
                    },
                    "type": "<R, E, A>(ma: Kind2<M, R, A>) => Kind2<M, R, E.Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "eitherT.EitherM2.swap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "swap",
                    "signature": "readonly swap: <R, E, A>(ma: EitherT2<M, R, E, A>) => EitherT2<M, R, A, E>;",
                    "source": {
                      "filename": "lib/EitherT.d.ts",
                      "line": 80,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L80",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L80",
                    },
                    "type": "<R, E, A>(ma: Kind2<M, R, E.Either<E, A>>) => Kind2<M, R, E.Either<E, A>>",
                  },
                ],
              },
              "name": "EitherM2",
              "signature": "interface EitherM2<M extends URIS2> extends ApplicativeComposition22<M, URI> {}",
              "source": {
                "filename": "lib/EitherT.d.ts",
                "line": 65,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L65",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L65",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "eitherT.EitherT",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "EitherT",
              "signature": "interface EitherT<M, E, A> extends HKT<M, Either<E, A>> {}",
              "source": {
                "filename": "lib/EitherT.d.ts",
                "line": 15,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L15",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L15",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "eitherT.EitherT1",
              "kind": "typeAlias",
              "name": "EitherT1",
              "signature": "type EitherT1<M extends URIS, E, A> = Kind<M, Either<E, A>>;",
              "source": {
                "filename": "lib/EitherT.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L36",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "eitherT.EitherT2",
              "kind": "typeAlias",
              "name": "EitherT2",
              "signature": "type EitherT2<M extends URIS2, R, E, A> = Kind2<M, R, Either<E, A>>;",
              "source": {
                "filename": "lib/EitherT.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L61",
              },
            },
          ],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "eitherT",
        "kind": "namespace",
        "name": "eitherT",
        "signature": "module 'lib/EitherT.d.ts' {}",
        "source": {
          "filename": "lib/EitherT.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category Contravariant
 * @since 2.0.0
 */",
              ],
              "id": "eq.contramap",
              "kind": "function",
              "name": "contramap",
              "signature": "contramap: <A, B>(f: (b: B) => A) => (fa: Eq<A>) => Eq<B>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L31",
              },
              "type": "<A, B>(f: (b: B) => A) => (fa: Eq<A>) => Eq<B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "eq.fromEquals",
              "kind": "function",
              "name": "fromEquals",
              "signature": "fromEquals: <A>(equals: (x: A, y: A) => boolean) => Eq<A>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L26",
              },
              "type": "<A>(equals: (x: A, y: A) => boolean) => Eq<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.6.0
 */",
              ],
              "id": "eq.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <A>() => Monoid<Eq<A>>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 114,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L114",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L114",
              },
              "type": "<A>() => Monoid<Eq<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.getStructEq",
              "kind": "function",
              "name": "getStructEq",
              "signature": "getStructEq: <O extends Readonly<Record<string, any>>>(eqs: {
    [K in keyof O]: Eq<O[K]>;
}) => Eq<O>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 78,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L78",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L78",
              },
              "type": "<O extends Readonly<Record<string, any>>>(eqs: { [K in keyof O]: Eq<O[K]>; }) => Eq<O>",
            },
            {
              "docs": [
                "/**
 * Given a tuple of \`Eq\`s returns a \`Eq\` for the tuple
 *
 * @example
 * import { getTupleEq, eqString, eqNumber, eqBoolean } from 'fp-ts/Eq'
 *
 * const E = getTupleEq(eqString, eqNumber, eqBoolean)
 * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)
 * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)
 * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)
 * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.getTupleEq",
              "kind": "function",
              "name": "getTupleEq",
              "signature": "getTupleEq: <T extends readonly Eq<any>[]>(
    ...eqs: T
) => Eq<{ [K in keyof T]: T[K] extends Eq<infer A> ? A : never }>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 98,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L98",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L98",
              },
              "type": "<T extends readonly Eq<any>[]>(...eqs: T) => Eq<{ [K in keyof T]: T[K] extends Eq<infer A> ? A : never; }>",
            },
            {
              "docs": [
                "/**
 * Use \`eqStrict\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "eq.strictEqual",
              "kind": "function",
              "name": "strictEqual",
              "signature": "strictEqual: <A>(a: A, b: A) => boolean;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 58,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L58",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L58",
              },
              "type": "<A>(a: A, b: A) => boolean",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "eq.Eq",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "eq.Eq.equals",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "equals",
                    "signature": "readonly equals: (x: A, y: A) => boolean;",
                    "source": {
                      "filename": "lib/Eq.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L20",
                    },
                    "type": "(x: A, y: A) => boolean",
                  },
                ],
              },
              "name": "Eq",
              "signature": "interface Eq<A> {}",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L19",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L41",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "eq.Contravariant",
              "kind": "variable",
              "name": "Contravariant",
              "signature": "const Contravariant: Contravariant1<'Eq'>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 119,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L119",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L119",
              },
              "type": "Contravariant1<"Eq">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.eq",
              "kind": "variable",
              "name": "eq",
              "signature": "const eq: Contravariant1<'Eq'>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 124,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L124",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L124",
              },
              "type": "Contravariant1<"Eq">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.eqBoolean",
              "kind": "variable",
              "name": "eqBoolean",
              "signature": "const eqBoolean: Eq<boolean>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 73,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L73",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L73",
              },
              "type": "Eq<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.eqDate",
              "kind": "variable",
              "name": "eqDate",
              "signature": "const eqDate: Eq<Date>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 109,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L109",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L109",
              },
              "type": "Eq<Date>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.eqNumber",
              "kind": "variable",
              "name": "eqNumber",
              "signature": "const eqNumber: Eq<number>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 68,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L68",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L68",
              },
              "type": "Eq<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "eq.eqStrict",
              "kind": "variable",
              "name": "eqStrict",
              "signature": "const eqStrict: Eq<unknown>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L51",
              },
              "type": "Eq<unknown>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.eqString",
              "kind": "variable",
              "name": "eqString",
              "signature": "const eqString: Eq<string>;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L63",
              },
              "type": "Eq<string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "eq.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Eq.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L36",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * The \`Eq\` type class represents types which support decidable equality.
 *
 * Instances must satisfy the following laws:
 *
 * 1. Reflexivity: \`E.equals(a, a) === true\`
 * 2. Symmetry: \`E.equals(a, b) === E.equals(b, a)\`
 * 3. Transitivity: if \`E.equals(a, b) === true\` and \`E.equals(b, c) === true\`, then \`E.equals(a, c) === true\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "eq",
        "kind": "namespace",
        "name": "eq",
        "signature": "module 'lib/Eq.d.ts' {}",
        "source": {
          "filename": "lib/Eq.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "extend.Extend",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "extend.Extend.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <A, B>(wa: HKT<W, A>, f: (wa: HKT<W, A>) => B) => HKT<W, B>;",
                    "source": {
                      "filename": "lib/Extend.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L11",
                    },
                    "type": "<A, B>(wa: HKT<W, A>, f: (wa: HKT<W, A>) => B) => HKT<W, B>",
                  },
                ],
              },
              "name": "Extend",
              "signature": "interface Extend<W> extends Functor<W> {}",
              "source": {
                "filename": "lib/Extend.d.ts",
                "line": 10,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L10",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L10",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "extend.Extend1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "extend.Extend1.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <A, B>(wa: Kind<W, A>, f: (wa: Kind<W, A>) => B) => Kind<W, B>;",
                    "source": {
                      "filename": "lib/Extend.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L18",
                    },
                    "type": "<A, B>(wa: Kind<W, A>, f: (wa: Kind<W, A>) => B) => Kind<W, B>",
                  },
                ],
              },
              "name": "Extend1",
              "signature": "interface Extend1<W extends URIS> extends Functor1<W> {}",
              "source": {
                "filename": "lib/Extend.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "extend.Extend2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "extend.Extend2.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <E, A, B>(
    wa: Kind2<W, E, A>,
    f: (wa: Kind2<W, E, A>) => B
) => Kind2<W, E, B>;",
                    "source": {
                      "filename": "lib/Extend.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L25",
                    },
                    "type": "<E, A, B>(wa: Kind2<W, E, A>, f: (wa: Kind2<W, E, A>) => B) => Kind2<W, E, B>",
                  },
                ],
              },
              "name": "Extend2",
              "signature": "interface Extend2<W extends URIS2> extends Functor2<W> {}",
              "source": {
                "filename": "lib/Extend.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L24",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "extend.Extend2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "extend.Extend2C.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <A, B>(
    wa: Kind2<W, E, A>,
    f: (wa: Kind2<W, E, A>) => B
) => Kind2<W, E, B>;",
                    "source": {
                      "filename": "lib/Extend.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L32",
                    },
                    "type": "<A, B>(wa: Kind2<W, E, A>, f: (wa: Kind2<W, E, A>) => B) => Kind2<W, E, B>",
                  },
                ],
              },
              "name": "Extend2C",
              "signature": "interface Extend2C<W extends URIS2, E> extends Functor2C<W, E> {}",
              "source": {
                "filename": "lib/Extend.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L31",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "extend.Extend3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "extend.Extend3.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <R, E, A, B>(
    wa: Kind3<W, R, E, A>,
    f: (wa: Kind3<W, R, E, A>) => B
) => Kind3<W, R, E, B>;",
                    "source": {
                      "filename": "lib/Extend.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L39",
                    },
                    "type": "<R, E, A, B>(wa: Kind3<W, R, E, A>, f: (wa: Kind3<W, R, E, A>) => B) => Kind3<W, R, E, B>",
                  },
                ],
              },
              "name": "Extend3",
              "signature": "interface Extend3<W extends URIS3> extends Functor3<W> {}",
              "source": {
                "filename": "lib/Extend.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "extend.Extend3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "extend.Extend3C.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <R, A, B>(
    wa: Kind3<W, R, E, A>,
    f: (wa: Kind3<W, R, E, A>) => B
) => Kind3<W, R, E, B>;",
                    "source": {
                      "filename": "lib/Extend.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L46",
                    },
                    "type": "<R, A, B>(wa: Kind3<W, R, E, A>, f: (wa: Kind3<W, R, E, A>) => B) => Kind3<W, R, E, B>",
                  },
                ],
              },
              "name": "Extend3C",
              "signature": "interface Extend3C<W extends URIS3, E> extends Functor3C<W, E> {}",
              "source": {
                "filename": "lib/Extend.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L45",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "extend.Extend4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "extend.Extend4.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <S, R, E, A, B>(
    wa: Kind4<W, S, R, E, A>,
    f: (wa: Kind4<W, S, R, E, A>) => B
) => Kind4<W, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Extend.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L53",
                    },
                    "type": "<S, R, E, A, B>(wa: Kind4<W, S, R, E, A>, f: (wa: Kind4<W, S, R, E, A>) => B) => Kind4<W, S, R, E, B>",
                  },
                ],
              },
              "name": "Extend4",
              "signature": "interface Extend4<W extends URIS4> extends Functor4<W> {}",
              "source": {
                "filename": "lib/Extend.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L52",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "extend",
        "kind": "namespace",
        "name": "extend",
        "signature": "module 'lib/Extend.d.ts' {}",
        "source": {
          "filename": "lib/Extend.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * The *greatest common divisor* of two values
 *
 * @since 2.0.0
 */",
              ],
              "id": "field.gcd",
              "kind": "function",
              "name": "gcd",
              "signature": "gcd: <A>(E: Eq<A>, field: Field<A>) => (x: A, y: A) => A;",
              "source": {
                "filename": "lib/Field.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L27",
              },
              "type": "<A>(E: Eq<A>, field: Field<A>) => (x: A, y: A) => A",
            },
            {
              "docs": [
                "/**
 * The *least common multiple* of two values
 *
 * @since 2.0.0
 */",
              ],
              "id": "field.lcm",
              "kind": "function",
              "name": "lcm",
              "signature": "lcm: <A>(E: Eq<A>, F: Field<A>) => (x: A, y: A) => A;",
              "source": {
                "filename": "lib/Field.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L33",
              },
              "type": "<A>(E: Eq<A>, F: Field<A>) => (x: A, y: A) => A",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "field.Field",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "field.Field.degree",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "degree",
                    "signature": "readonly degree: (a: A) => number;",
                    "source": {
                      "filename": "lib/Field.d.ts",
                      "line": 13,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L13",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L13",
                    },
                    "type": "(a: A) => number",
                  },
                  {
                    "docs": [],
                    "id": "field.Field.div",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "div",
                    "signature": "readonly div: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/Field.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L14",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                  {
                    "docs": [],
                    "id": "field.Field.mod",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mod",
                    "signature": "readonly mod: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/Field.d.ts",
                      "line": 15,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L15",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L15",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                ],
              },
              "name": "Field",
              "signature": "interface Field<A> extends Ring<A> {}",
              "source": {
                "filename": "lib/Field.d.ts",
                "line": 12,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L12",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L12",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "field.fieldNumber",
              "kind": "variable",
              "name": "fieldNumber",
              "signature": "const fieldNumber: Field<number>;",
              "source": {
                "filename": "lib/Field.d.ts",
                "line": 21,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L21",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L21",
              },
              "type": "Field<number>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * Adapted from https://github.com/purescript/purescript-prelude/blob/master/src/Data/Field.purs
 *
 * @since 2.0.0
 */",
        ],
        "id": "field",
        "kind": "namespace",
        "name": "field",
        "signature": "module 'lib/Field.d.ts' {}",
        "source": {
          "filename": "lib/Field.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.getFilterableComposition",
              "kind": "function",
              "name": "getFilterableComposition",
              "signature": "getFilterableComposition: {
    <F extends URIS2, G extends URIS3, E>(
        F: Functor2<F>,
        G: Filterable3C<G, E>
    ): FilterableComposition23C<F, G, E>;
    <F extends URIS2, G extends URIS2, E>(
        F: Functor2<F>,
        G: Filterable2C<G, E>
    ): FilterableComposition22C<F, G, E>;
    <F extends URIS2, G extends URIS2>(
        F: Functor2<F>,
        G: Filterable2<G>
    ): FilterableComposition22<F, G>;
    <F extends URIS2, G extends URIS, E>(
        F: Functor2C<F, E>,
        G: Filterable1<G>
    ): FilterableComposition2C1<F, G, E>;
    <F extends URIS2, G extends URIS>(
        F: Functor2<F>,
        G: Filterable1<G>
    ): FilterableComposition21<F, G>;
    <F extends URIS, G extends URIS2, E>(
        F: Functor1<F>,
        G: Filterable2C<G, E>
    ): FilterableComposition12C<F, G, E>;
    <F extends URIS, G extends URIS2>(
        F: Functor1<F>,
        G: Filterable2<G>
    ): FilterableComposition12<F, G>;
    <F extends URIS, G extends URIS>(
        F: Functor1<F>,
        G: Filterable1<G>
    ): FilterableComposition11<F, G>;
    <F, G>(F: Functor<F>, G: Filterable<G>): FilterableComposition<F, G>;
};",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 418,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L418",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L418",
              },
              "type": "{ <F extends URIS2, G extends URIS3, E>(F: Functor2<F>, G: Filterable3C<G, E>): FilterableComposition23C<F, G, E>; <F extends URIS2, G extends URIS2, E>(F: Functor2<F>, G: Filterable2C<G, E>): FilterableComposition22C<F, G, E>; <F extends URIS2, G extends URIS2>(F: Functor2<F>, G: Filterable2<G>): FilterableComposition22<F, G>; <F extends URIS2, G extends URIS, E>(F: Functor2C<F, E>, G: Filterable1<G>): FilterableComposition2C1<F, G, E>; <F extends URIS2, G extends URIS>(F: Functor2<F>, G: Filterable1<G>): FilterableComposition21<F, G>; <F extends URIS, G extends URIS2, E>(F: Functor1<F>, G: Filterable2C<G, E>): FilterableComposition12C<F, G, E>; <F extends URIS, G extends URIS2>(F: Functor1<F>, G: Filterable2<G>): FilterableComposition12<F, G>; <F extends URIS, G extends URIS>(F: Functor1<F>, G: Filterable1<G>): FilterableComposition11<F, G>; <F, G>(F: Functor<F>, G: Filterable<G>): FilterableComposition<F, G>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filter",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Filter.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(fa: HKT<F, A>, refinement: Refinement<A, B>): HKT<F, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L49",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filter.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: HKT<F, A>, predicate: Predicate<A>): HKT<F, A>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 50,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L50",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L50",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Filter",
              "signature": "interface Filter<F> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L48",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filter1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Filter1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(fa: Kind<F, A>, refinement: Refinement<A, B>): Kind<F, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 85,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L85",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L85",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filter1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind<F, A>, predicate: Predicate<A>): Kind<F, A>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 86,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L86",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L86",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Filter1",
              "signature": "interface Filter1<F extends URIS> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L84",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filter2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Filter2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A, B extends A>(fa: Kind2<F, E, A>, refinement: Refinement<A, B>): Kind2<
    F,
    E,
    B
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 109,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L109",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L109",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filter2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A>(fa: Kind2<F, E, A>, predicate: Predicate<A>): Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 110,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L110",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L110",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Filter2",
              "signature": "interface Filter2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 108,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L108",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L108",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filter2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Filter2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(fa: Kind2<F, E, A>, refinement: Refinement<A, B>): Kind2<
    F,
    E,
    B
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 136,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L136",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L136",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filter2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind2<F, E, A>, predicate: Predicate<A>): Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 137,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L137",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L137",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Filter2C",
              "signature": "interface Filter2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 135,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L135",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L135",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filter3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Filter3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A, B extends A>(
    fa: Kind3<F, R, E, A>,
    refinement: Refinement<A, B>
): Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 163,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L163",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L163",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filter3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A>(fa: Kind3<F, R, E, A>, predicate: Predicate<A>): Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 164,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L164",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L164",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Filter3",
              "signature": "interface Filter3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 162,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L162",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L162",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "filterable.Filter3C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Filter3C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A, B extends A>(fa: Kind3<F, R, E, A>, refinement: Refinement<A, B>): Kind3<
    F,
    R,
    E,
    B
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 193,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L193",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L193",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filter3C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A>(fa: Kind3<F, R, E, A>, predicate: Predicate<A>): Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 194,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L194",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L194",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Filter3C",
              "signature": "interface Filter3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 192,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L192",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L192",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filter4",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Filter4.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A, B extends A>(
    fa: Kind4<F, S, R, E, A>,
    refinement: Refinement<A, B>
): Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 223,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L223",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L223",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filter4.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A>(fa: Kind4<F, S, R, E, A>, predicate: Predicate<A>): Kind4<
    F,
    S,
    R,
    E,
    A
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 224,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L224",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L224",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Filter4",
              "signature": "interface Filter4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 222,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L222",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L222",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filterable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [
                      "/**
   * Filter a data structure based on a boolean predicate.
   */",
                    ],
                    "id": "filterable.Filterable.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: Filter<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 79,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L79",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L79",
                    },
                    "type": "Filter<F>",
                  },
                  {
                    "docs": [
                      "/**
   * Map over a data structure and filter based on an option predicate.
   */",
                    ],
                    "id": "filterable.Filterable.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(fa: HKT<F, A>, f: (a: A) => Option<B>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 75,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L75",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L75",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, f: (a: A) => Option<B>) => HKT<F, B>",
                  },
                  {
                    "docs": [
                      "/**
   * Partition a data structure based on a boolean predicate.
   */",
                    ],
                    "id": "filterable.Filterable.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: Partition<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 71,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L71",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L71",
                    },
                    "type": "Partition<F>",
                  },
                  {
                    "docs": [
                      "/**
   * Partition a data structure based on an either predicate.
   */",
                    ],
                    "id": "filterable.Filterable.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    fa: HKT<F, A>,
    f: (a: A) => Either<B, C>
) => Separated<HKT<F, B>, HKT<F, C>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 67,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L67",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L67",
                    },
                    "type": "<A, B, C>(fa: HKT<F, A>, f: (a: A) => Either<B, C>) => Separated<HKT<F, B>, HKT<F, C>>",
                  },
                ],
              },
              "name": "Filterable",
              "signature": "interface Filterable<F> extends Functor<F>, Compactable<F> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L63",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filterable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.Filterable1.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: Filter1<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 103,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L103",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L103",
                    },
                    "type": "Filter1<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable1.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(fa: Kind<F, A>, f: (a: A) => Option<B>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 102,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L102",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L102",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, f: (a: A) => Option<B>) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable1.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: Partition1<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 101,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L101",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L101",
                    },
                    "type": "Partition1<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable1.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    fa: Kind<F, A>,
    f: (a: A) => Either<B, C>
) => Separated<Kind<F, B>, Kind<F, C>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L100",
                    },
                    "type": "<A, B, C>(fa: Kind<F, A>, f: (a: A) => Either<B, C>) => Separated<Kind<F, B>, Kind<F, C>>",
                  },
                ],
              },
              "name": "Filterable1",
              "signature": "interface Filterable1<F extends URIS> extends Functor1<F>, Compactable1<F> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 99,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L99",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L99",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filterable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.Filterable2.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: Filter2<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 130,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L130",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L130",
                    },
                    "type": "Filter2<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable2.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <E, A, B>(
    fa: Kind2<F, E, A>,
    f: (a: A) => Option<B>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 129,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L129",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L129",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, f: (a: A) => Option<B>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable2.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: Partition2<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 128,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L128",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L128",
                    },
                    "type": "Partition2<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable2.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <E, A, B, C>(
    fa: Kind2<F, E, A>,
    f: (a: A) => Either<B, C>
) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 124,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L124",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L124",
                    },
                    "type": "<E, A, B, C>(fa: Kind2<F, E, A>, f: (a: A) => Either<B, C>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                ],
              },
              "name": "Filterable2",
              "signature": "interface Filterable2<F extends URIS2> extends Functor2<F>, Compactable2<F> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L123",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filterable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.Filterable2C.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: Filter2C<F, E>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 157,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L157",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L157",
                    },
                    "type": "Filter2C<F, E>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable2C.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    fa: Kind2<F, E, A>,
    f: (a: A) => Option<B>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 156,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L156",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L156",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, f: (a: A) => Option<B>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable2C.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: Partition2C<F, E>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 155,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L155",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L155",
                    },
                    "type": "Partition2C<F, E>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable2C.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    fa: Kind2<F, E, A>,
    f: (a: A) => Either<B, C>
) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 151,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L151",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L151",
                    },
                    "type": "<A, B, C>(fa: Kind2<F, E, A>, f: (a: A) => Either<B, C>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                ],
              },
              "name": "Filterable2C",
              "signature": "interface Filterable2C<F extends URIS2, E>
    extends Functor2C<F, E>,
        Compactable2C<F, E> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 150,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L150",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L150",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filterable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.Filterable3.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: Filter3<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 187,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L187",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L187",
                    },
                    "type": "Filter3<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable3.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => Option<B>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 186,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L186",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L186",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => Option<B>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable3.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: Partition3<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 185,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L185",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L185",
                    },
                    "type": "Partition3<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable3.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <R, E, A, B, C>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => Either<B, C>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 181,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L181",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L181",
                    },
                    "type": "<R, E, A, B, C>(fa: Kind3<F, R, E, A>, f: (a: A) => Either<B, C>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                ],
              },
              "name": "Filterable3",
              "signature": "interface Filterable3<F extends URIS3> extends Functor3<F>, Compactable3<F> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 180,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L180",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L180",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "filterable.Filterable3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.Filterable3C.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: Filter3C<F, E>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 217,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L217",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L217",
                    },
                    "type": "Filter3C<F, E>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable3C.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => Option<B>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 216,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L216",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L216",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => Option<B>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable3C.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: Partition3C<F, E>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 215,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L215",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L215",
                    },
                    "type": "Partition3C<F, E>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable3C.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <R, A, B, C>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => Either<B, C>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 211,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L211",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L211",
                    },
                    "type": "<R, A, B, C>(fa: Kind3<F, R, E, A>, f: (a: A) => Either<B, C>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                ],
              },
              "name": "Filterable3C",
              "signature": "interface Filterable3C<F extends URIS3, E>
    extends Functor3C<F, E>,
        Compactable3C<F, E> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 210,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L210",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L210",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Filterable4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.Filterable4.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: Filter4<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 247,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L247",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L247",
                    },
                    "type": "Filter4<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable4.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    f: (a: A) => Option<B>
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 246,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L246",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L246",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, f: (a: A) => Option<B>) => Kind4<F, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable4.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: Partition4<F>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 245,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L245",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L245",
                    },
                    "type": "Partition4<F>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.Filterable4.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <S, R, E, A, B, C>(
    fa: Kind4<F, S, R, E, A>,
    f: (a: A) => Either<B, C>
) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 241,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L241",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L241",
                    },
                    "type": "<S, R, E, A, B, C>(fa: Kind4<F, S, R, E, A>, f: (a: A) => Either<B, C>) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>",
                  },
                ],
              },
              "name": "Filterable4",
              "signature": "interface Filterable4<F extends URIS4> extends Functor4<F>, Compactable4<F> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 240,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L240",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L240",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <A>(
    fa: HKT<F, HKT<G, A>>,
    predicate: Predicate<A>
) => HKT<F, HKT<G, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 262,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L262",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L262",
                    },
                    "type": "<A>(fa: HKT<F, HKT<G, A>>, predicate: Predicate<A>) => HKT<F, HKT<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    fa: HKT<F, HKT<G, A>>,
    f: (a: A) => Option<B>
) => HKT<F, HKT<G, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 261,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L261",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L261",
                    },
                    "type": "<A, B>(fa: HKT<F, HKT<G, A>>, f: (a: A) => Option<B>) => HKT<F, HKT<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <A>(
    fa: HKT<F, HKT<G, A>>,
    predicate: Predicate<A>
) => Separated<HKT<F, HKT<G, A>>, HKT<F, HKT<G, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 257,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L257",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L257",
                    },
                    "type": "<A>(fa: HKT<F, HKT<G, A>>, predicate: Predicate<A>) => Separated<HKT<F, HKT<G, A>>, HKT<F, HKT<G, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    fa: HKT<F, HKT<G, A>>,
    f: (a: A) => Either<B, C>
) => Separated<HKT<F, HKT<G, B>>, HKT<F, HKT<G, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 253,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L253",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L253",
                    },
                    "type": "<A, B, C>(fa: HKT<F, HKT<G, A>>, f: (a: A) => Either<B, C>) => Separated<HKT<F, HKT<G, B>>, HKT<F, HKT<G, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition",
              "signature": "interface FilterableComposition<F, G>
    extends FunctorComposition<F, G>,
        CompactableComposition<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 252,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L252",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L252",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition11.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <A>(
    fa: Kind<F, Kind<G, A>>,
    predicate: Predicate<A>
) => Kind<F, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 279,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L279",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L279",
                    },
                    "type": "<A>(fa: Kind<F, Kind<G, A>>, predicate: Predicate<A>) => Kind<F, Kind<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition11.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    fa: Kind<F, Kind<G, A>>,
    f: (a: A) => Option<B>
) => Kind<F, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 278,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L278",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L278",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind<G, A>>, f: (a: A) => Option<B>) => Kind<F, Kind<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition11.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <A>(
    fa: Kind<F, Kind<G, A>>,
    predicate: Predicate<A>
) => Separated<Kind<F, Kind<G, A>>, Kind<F, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 274,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L274",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L274",
                    },
                    "type": "<A>(fa: Kind<F, Kind<G, A>>, predicate: Predicate<A>) => Separated<Kind<F, Kind<G, A>>, Kind<F, Kind<G, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition11.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    fa: Kind<F, Kind<G, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind<F, Kind<G, B>>, Kind<F, Kind<G, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 270,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L270",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L270",
                    },
                    "type": "<A, B, C>(fa: Kind<F, Kind<G, A>>, f: (a: A) => Either<B, C>) => Separated<Kind<F, Kind<G, B>>, Kind<F, Kind<G, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition11",
              "signature": "interface FilterableComposition11<F extends URIS, G extends URIS>
    extends FunctorComposition11<F, G>,
        CompactableComposition11<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 267,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L267",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L267",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition12",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <E, A>(
    fa: Kind<F, Kind2<G, E, A>>,
    predicate: Predicate<A>
) => Kind<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 296,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L296",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L296",
                    },
                    "type": "<E, A>(fa: Kind<F, Kind2<G, E, A>>, predicate: Predicate<A>) => Kind<F, Kind2<G, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <E, A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (a: A) => Option<B>
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 295,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L295",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L295",
                    },
                    "type": "<E, A, B>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => Option<B>) => Kind<F, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <E, A>(
    fa: Kind<F, Kind2<G, E, A>>,
    predicate: Predicate<A>
) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 291,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L291",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L291",
                    },
                    "type": "<E, A>(fa: Kind<F, Kind2<G, E, A>>, predicate: Predicate<A>) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <E, A, B, C>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind<F, Kind2<G, E, B>>, Kind<F, Kind2<G, E, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 287,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L287",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L287",
                    },
                    "type": "<E, A, B, C>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => Either<B, C>) => Separated<Kind<F, Kind2<G, E, B>>, Kind<F, Kind2<G, E, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition12",
              "signature": "interface FilterableComposition12<F extends URIS, G extends URIS2>
    extends FunctorComposition12<F, G>,
        CompactableComposition12<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 284,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L284",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L284",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition12C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12C.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <A>(
    fa: Kind<F, Kind2<G, E, A>>,
    predicate: Predicate<A>
) => Kind<F, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 313,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L313",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L313",
                    },
                    "type": "<A>(fa: Kind<F, Kind2<G, E, A>>, predicate: Predicate<A>) => Kind<F, Kind2<G, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12C.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (a: A) => Option<B>
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 312,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L312",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L312",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => Option<B>) => Kind<F, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12C.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <A>(
    fa: Kind<F, Kind2<G, E, A>>,
    predicate: Predicate<A>
) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 308,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L308",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L308",
                    },
                    "type": "<A>(fa: Kind<F, Kind2<G, E, A>>, predicate: Predicate<A>) => Separated<Kind<F, Kind2<G, E, A>>, Kind<F, Kind2<G, E, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition12C.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind<F, Kind2<G, E, B>>, Kind<F, Kind2<G, E, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 304,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L304",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L304",
                    },
                    "type": "<A, B, C>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => Either<B, C>) => Separated<Kind<F, Kind2<G, E, B>>, Kind<F, Kind2<G, E, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition12C",
              "signature": "interface FilterableComposition12C<F extends URIS, G extends URIS2, E>
    extends FunctorComposition12C<F, G, E>,
        CompactableComposition12C<F, G, E> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 301,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L301",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L301",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition21",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition21.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <E, A>(
    fa: Kind2<F, E, Kind<G, A>>,
    predicate: Predicate<A>
) => Kind2<F, E, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 330,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L330",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L330",
                    },
                    "type": "<E, A>(fa: Kind2<F, E, Kind<G, A>>, predicate: Predicate<A>) => Kind2<F, E, Kind<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition21.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <E, A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (a: A) => Option<B>
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 329,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L329",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L329",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => Option<B>) => Kind2<F, E, Kind<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition21.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <E, A>(
    fa: Kind2<F, E, Kind<G, A>>,
    predicate: Predicate<A>
) => Separated<Kind2<F, E, Kind<G, A>>, Kind2<F, E, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 325,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L325",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L325",
                    },
                    "type": "<E, A>(fa: Kind2<F, E, Kind<G, A>>, predicate: Predicate<A>) => Separated<Kind2<F, E, Kind<G, A>>, Kind2<F, E, Kind<G, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition21.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <E, A, B, C>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind2<F, E, Kind<G, B>>, Kind2<F, E, Kind<G, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 321,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L321",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L321",
                    },
                    "type": "<E, A, B, C>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => Either<B, C>) => Separated<Kind2<F, E, Kind<G, B>>, Kind2<F, E, Kind<G, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition21",
              "signature": "interface FilterableComposition21<F extends URIS2, G extends URIS>
    extends FunctorComposition21<F, G>,
        CompactableComposition21<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 318,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L318",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L318",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition22",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <FE, GE, A>(
    fa: Kind2<F, FE, Kind2<G, GE, A>>,
    predicate: Predicate<A>
) => Kind2<F, FE, Kind2<G, GE, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 367,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L367",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L367",
                    },
                    "type": "<FE, GE, A>(fa: Kind2<F, FE, Kind2<G, GE, A>>, predicate: Predicate<A>) => Kind2<F, FE, Kind2<G, GE, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <FE, GE, A, B>(
    fa: Kind2<F, FE, Kind2<G, GE, A>>,
    f: (a: A) => Option<B>
) => Kind2<F, FE, Kind2<G, GE, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 363,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L363",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L363",
                    },
                    "type": "<FE, GE, A, B>(fa: Kind2<F, FE, Kind2<G, GE, A>>, f: (a: A) => Option<B>) => Kind2<F, FE, Kind2<G, GE, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <FE, GE, A>(
    fa: Kind2<F, FE, Kind2<G, GE, A>>,
    predicate: Predicate<A>
) => Separated<Kind2<F, FE, Kind2<G, GE, A>>, Kind2<F, FE, Kind2<G, GE, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 359,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L359",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L359",
                    },
                    "type": "<FE, GE, A>(fa: Kind2<F, FE, Kind2<G, GE, A>>, predicate: Predicate<A>) => Separated<Kind2<F, FE, Kind2<G, GE, A>>, Kind2<F, FE, Kind2<G, GE, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <FE, GE, A, B, C>(
    fa: Kind2<F, FE, Kind2<G, GE, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind2<F, FE, Kind2<G, GE, B>>, Kind2<F, FE, Kind2<G, GE, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 355,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L355",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L355",
                    },
                    "type": "<FE, GE, A, B, C>(fa: Kind2<F, FE, Kind2<G, GE, A>>, f: (a: A) => Either<B, C>) => Separated<Kind2<F, FE, Kind2<G, GE, B>>, Kind2<F, FE, Kind2<G, GE, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition22",
              "signature": "interface FilterableComposition22<F extends URIS2, G extends URIS2>
    extends FunctorComposition22<F, G>,
        CompactableComposition22<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 352,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L352",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L352",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition22C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22C.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <FE, A>(
    fa: Kind2<F, FE, Kind2<G, E, A>>,
    predicate: Predicate<A>
) => Kind2<F, FE, Kind2<G, E, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 390,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L390",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L390",
                    },
                    "type": "<FE, A>(fa: Kind2<F, FE, Kind2<G, E, A>>, predicate: Predicate<A>) => Kind2<F, FE, Kind2<G, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22C.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <FE, A, B>(
    fa: Kind2<F, FE, Kind2<G, E, A>>,
    f: (a: A) => Option<B>
) => Kind2<F, FE, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 386,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L386",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L386",
                    },
                    "type": "<FE, A, B>(fa: Kind2<F, FE, Kind2<G, E, A>>, f: (a: A) => Option<B>) => Kind2<F, FE, Kind2<G, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22C.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <FE, A>(
    fa: Kind2<F, FE, Kind2<G, E, A>>,
    predicate: Predicate<A>
) => Separated<Kind2<F, FE, Kind2<G, E, A>>, Kind2<F, FE, Kind2<G, E, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 382,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L382",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L382",
                    },
                    "type": "<FE, A>(fa: Kind2<F, FE, Kind2<G, E, A>>, predicate: Predicate<A>) => Separated<Kind2<F, FE, Kind2<G, E, A>>, Kind2<F, FE, Kind2<G, E, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition22C.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <FE, A, B, C>(
    fa: Kind2<F, FE, Kind2<G, E, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind2<F, FE, Kind2<G, E, B>>, Kind2<F, FE, Kind2<G, E, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 378,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L378",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L378",
                    },
                    "type": "<FE, A, B, C>(fa: Kind2<F, FE, Kind2<G, E, A>>, f: (a: A) => Either<B, C>) => Separated<Kind2<F, FE, Kind2<G, E, B>>, Kind2<F, FE, Kind2<G, E, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition22C",
              "signature": "interface FilterableComposition22C<F extends URIS2, G extends URIS2, E>
    extends FunctorComposition22<F, G>,
        CompactableComposition22<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 375,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L375",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L375",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "filterable.FilterableComposition23C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition23C.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <R, FE, A>(
    fa: Kind2<F, FE, Kind3<G, R, E, A>>,
    predicate: Predicate<A>
) => Kind2<F, FE, Kind3<G, R, E, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 410,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L410",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L410",
                    },
                    "type": "<R, FE, A>(fa: Kind2<F, FE, Kind3<G, R, E, A>>, predicate: Predicate<A>) => Kind2<F, FE, Kind3<G, R, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition23C.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <R, FE, A, B>(
    fa: Kind2<F, FE, Kind3<G, R, E, A>>,
    f: (a: A) => Option<B>
) => Kind2<F, FE, Kind3<G, R, E, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 406,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L406",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L406",
                    },
                    "type": "<R, FE, A, B>(fa: Kind2<F, FE, Kind3<G, R, E, A>>, f: (a: A) => Option<B>) => Kind2<F, FE, Kind3<G, R, E, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition23C.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <R, FE, A>(
    fa: Kind2<F, FE, Kind3<G, R, E, A>>,
    predicate: Predicate<A>
) => Separated<Kind2<F, FE, Kind3<G, R, E, A>>, Kind2<F, FE, Kind3<G, R, E, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 402,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L402",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L402",
                    },
                    "type": "<R, FE, A>(fa: Kind2<F, FE, Kind3<G, R, E, A>>, predicate: Predicate<A>) => Separated<Kind2<F, FE, Kind3<G, R, E, A>>, Kind2<F, FE, Kind3<G, R, E, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition23C.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <R, FE, A, B, C>(
    fa: Kind2<F, FE, Kind3<G, R, E, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind2<F, FE, Kind3<G, R, E, B>>, Kind2<F, FE, Kind3<G, R, E, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 398,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L398",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L398",
                    },
                    "type": "<R, FE, A, B, C>(fa: Kind2<F, FE, Kind3<G, R, E, A>>, f: (a: A) => Either<B, C>) => Separated<Kind2<F, FE, Kind3<G, R, E, B>>, Kind2<F, FE, Kind3<G, R, E, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition23C",
              "signature": "interface FilterableComposition23C<F extends URIS2, G extends URIS3, E>
    extends FunctorComposition23<F, G>,
        CompactableComposition23<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 395,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L395",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L395",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.FilterableComposition2C1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition2C1.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: <A>(
    fa: Kind2<F, E, Kind<G, A>>,
    predicate: Predicate<A>
) => Kind2<F, E, Kind<G, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 347,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L347",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L347",
                    },
                    "type": "<A>(fa: Kind2<F, E, Kind<G, A>>, predicate: Predicate<A>) => Kind2<F, E, Kind<G, A>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition2C1.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (a: A) => Option<B>
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 346,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L346",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L346",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => Option<B>) => Kind2<F, E, Kind<G, B>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition2C1.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: <A>(
    fa: Kind2<F, E, Kind<G, A>>,
    predicate: Predicate<A>
) => Separated<Kind2<F, E, Kind<G, A>>, Kind2<F, E, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 342,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L342",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L342",
                    },
                    "type": "<A>(fa: Kind2<F, E, Kind<G, A>>, predicate: Predicate<A>) => Separated<Kind2<F, E, Kind<G, A>>, Kind2<F, E, Kind<G, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "filterable.FilterableComposition2C1.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (a: A) => Either<B, C>
) => Separated<Kind2<F, E, Kind<G, B>>, Kind2<F, E, Kind<G, C>>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 338,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L338",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L338",
                    },
                    "type": "<A, B, C>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => Either<B, C>) => Separated<Kind2<F, E, Kind<G, B>>, Kind2<F, E, Kind<G, C>>>",
                  },
                ],
              },
              "name": "FilterableComposition2C1",
              "signature": "interface FilterableComposition2C1<F extends URIS2, G extends URIS, E>
    extends FunctorComposition21<F, G>,
        CompactableComposition21<F, G> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 335,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L335",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L335",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Partition",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Partition.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(fa: HKT<F, A>, refinement: Refinement<A, B>): Separated<
    HKT<F, A>,
    HKT<F, B>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L56",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Partition.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: HKT<F, A>, predicate: Predicate<A>): Separated<HKT<F, A>, HKT<F, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L57",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Partition",
              "signature": "interface Partition<F> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L55",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Partition1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Partition1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(fa: Kind<F, A>, refinement: Refinement<A, B>): Separated<
    Kind<F, A>,
    Kind<F, B>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L92",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Partition1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind<F, A>, predicate: Predicate<A>): Separated<Kind<F, A>, Kind<F, A>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 93,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L93",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L93",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Partition1",
              "signature": "interface Partition1<F extends URIS> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L91",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Partition2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Partition2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A, B extends A>(fa: Kind2<F, E, A>, refinement: Refinement<A, B>): Separated<
    Kind2<F, E, A>,
    Kind2<F, E, B>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 116,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L116",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L116",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Partition2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A>(fa: Kind2<F, E, A>, predicate: Predicate<A>): Separated<
    Kind2<F, E, A>,
    Kind2<F, E, A>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 117,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L117",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L117",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Partition2",
              "signature": "interface Partition2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L115",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Partition2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Partition2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(fa: Kind2<F, E, A>, refinement: Refinement<A, B>): Separated<
    Kind2<F, E, A>,
    Kind2<F, E, B>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 143,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L143",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L143",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Partition2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind2<F, E, A>, predicate: Predicate<A>): Separated<
    Kind2<F, E, A>,
    Kind2<F, E, A>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 144,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L144",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L144",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Partition2C",
              "signature": "interface Partition2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 142,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L142",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L142",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Partition3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Partition3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A, B extends A>(
    fa: Kind3<F, R, E, A>,
    refinement: Refinement<A, B>
): Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 170,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L170",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L170",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Partition3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A>(fa: Kind3<F, R, E, A>, predicate: Predicate<A>): Separated<
    Kind3<F, R, E, A>,
    Kind3<F, R, E, A>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 174,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L174",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L174",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Partition3",
              "signature": "interface Partition3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 169,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L169",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L169",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "filterable.Partition3C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Partition3C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A, B extends A>(
    fa: Kind3<F, R, E, A>,
    refinement: Refinement<A, B>
): Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 200,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L200",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L200",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Partition3C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A>(fa: Kind3<F, R, E, A>, predicate: Predicate<A>): Separated<
    Kind3<F, R, E, A>,
    Kind3<F, R, E, A>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 204,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L204",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L204",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Partition3C",
              "signature": "interface Partition3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 199,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L199",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L199",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterable.Partition4",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterable.Partition4.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A, B extends A>(
    fa: Kind4<F, S, R, E, A>,
    refinement: Refinement<A, B>
): Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 230,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L230",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L230",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterable.Partition4.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A>(fa: Kind4<F, S, R, E, A>, predicate: Predicate<A>): Separated<
    Kind4<F, S, R, E, A>,
    Kind4<F, S, R, E, A>
>;",
                    "source": {
                      "filename": "lib/Filterable.d.ts",
                      "line": 234,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L234",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L234",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Partition4",
              "signature": "interface Partition4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Filterable.d.ts",
                "line": 229,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L229",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L229",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * \`Filterable\` represents data structures which can be _partitioned_/_filtered_.
 *
 * Adapted from https://github.com/LiamGoodacre/purescript-filterable/blob/master/src/Data/Filterable.purs
 *
 * @since 2.0.0
 */",
        ],
        "id": "filterable",
        "kind": "namespace",
        "name": "filterable",
        "signature": "module 'lib/Filterable.d.ts' {}",
        "source": {
          "filename": "lib/Filterable.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterableWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    fa: HKT<F, A>,
    f: (i: I, a: A) => Option<B>
) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 58,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L58",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L58",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, f: (i: I, a: A) => Option<B>) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: FilterWithIndex<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 59,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L59",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L59",
                    },
                    "type": "FilterWithIndex<F, I>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    fa: HKT<F, A>,
    f: (i: I, a: A) => Either<B, C>
) => Separated<HKT<F, B>, HKT<F, C>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L53",
                    },
                    "type": "<A, B, C>(fa: HKT<F, A>, f: (i: I, a: A) => Either<B, C>) => Separated<HKT<F, B>, HKT<F, C>>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: PartitionWithIndex<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L57",
                    },
                    "type": "PartitionWithIndex<F, I>",
                  },
                ],
              },
              "name": "FilterableWithIndex",
              "signature": "interface FilterableWithIndex<F, I> extends FunctorWithIndex<F, I>, Filterable<F> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L52",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterableWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex1.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    fa: Kind<F, A>,
    f: (i: I, a: A) => Option<B>
) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 85,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L85",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L85",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, f: (i: I, a: A) => Option<B>) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex1.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: FilterWithIndex1<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 86,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L86",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L86",
                    },
                    "type": "FilterWithIndex1<F, I>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex1.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    fa: Kind<F, A>,
    f: (i: I, a: A) => Either<B, C>
) => Separated<Kind<F, B>, Kind<F, C>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 80,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L80",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L80",
                    },
                    "type": "<A, B, C>(fa: Kind<F, A>, f: (i: I, a: A) => Either<B, C>) => Separated<Kind<F, B>, Kind<F, C>>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex1.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: PartitionWithIndex1<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 84,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L84",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L84",
                    },
                    "type": "PartitionWithIndex1<F, I>",
                  },
                ],
              },
              "name": "FilterableWithIndex1",
              "signature": "interface FilterableWithIndex1<F extends URIS, I>
    extends FunctorWithIndex1<F, I>,
        Filterable1<F> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 79,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L79",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L79",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterableWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <E, A, B>(
    fa: Kind2<F, E, A>,
    f: (i: I, a: A) => Option<B>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 115,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L115",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L115",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, f: (i: I, a: A) => Option<B>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: FilterWithIndex2<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 116,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L116",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L116",
                    },
                    "type": "FilterWithIndex2<F, I>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <E, A, B, C>(
    fa: Kind2<F, E, A>,
    f: (i: I, a: A) => Either<B, C>
) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 110,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L110",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L110",
                    },
                    "type": "<E, A, B, C>(fa: Kind2<F, E, A>, f: (i: I, a: A) => Either<B, C>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: PartitionWithIndex2<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 114,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L114",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L114",
                    },
                    "type": "PartitionWithIndex2<F, I>",
                  },
                ],
              },
              "name": "FilterableWithIndex2",
              "signature": "interface FilterableWithIndex2<F extends URIS2, I>
    extends FunctorWithIndex2<F, I>,
        Filterable2<F> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 109,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L109",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L109",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterableWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2C.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    fa: Kind2<F, E, A>,
    f: (i: I, a: A) => Option<B>
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 145,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L145",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L145",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, f: (i: I, a: A) => Option<B>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2C.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: FilterWithIndex2C<F, I, E>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 146,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L146",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L146",
                    },
                    "type": "FilterWithIndex2C<F, I, E>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2C.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    fa: Kind2<F, E, A>,
    f: (i: I, a: A) => Either<B, C>
) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 140,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L140",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L140",
                    },
                    "type": "<A, B, C>(fa: Kind2<F, E, A>, f: (i: I, a: A) => Either<B, C>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex2C.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: PartitionWithIndex2C<F, I, E>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 144,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L144",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L144",
                    },
                    "type": "PartitionWithIndex2C<F, I, E>",
                  },
                ],
              },
              "name": "FilterableWithIndex2C",
              "signature": "interface FilterableWithIndex2C<F extends URIS2, I, E>
    extends FunctorWithIndex2C<F, I, E>,
        Filterable2C<F, E> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 139,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L139",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L139",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterableWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (i: I, a: A) => Option<B>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 211,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L211",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L211",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => Option<B>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: FilterWithIndex3<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 212,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L212",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L212",
                    },
                    "type": "FilterWithIndex3<F, I>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <R, E, A, B, C>(
    fa: Kind3<F, R, E, A>,
    f: (i: I, a: A) => Either<B, C>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 206,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L206",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L206",
                    },
                    "type": "<R, E, A, B, C>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => Either<B, C>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: PartitionWithIndex3<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 210,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L210",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L210",
                    },
                    "type": "PartitionWithIndex3<F, I>",
                  },
                ],
              },
              "name": "FilterableWithIndex3",
              "signature": "interface FilterableWithIndex3<F extends URIS3, I>
    extends FunctorWithIndex3<F, I>,
        Filterable3<F> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 205,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L205",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L205",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "filterableWithIndex.FilterableWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3C.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (i: I, a: A) => Option<B>
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 172,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L172",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L172",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => Option<B>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3C.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: FilterWithIndex3C<F, I, E>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 173,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L173",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L173",
                    },
                    "type": "FilterWithIndex3C<F, I, E>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3C.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <R, A, B, C>(
    fa: Kind3<F, R, E, A>,
    f: (i: I, a: A) => Either<B, C>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 167,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L167",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L167",
                    },
                    "type": "<R, A, B, C>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => Either<B, C>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex3C.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: PartitionWithIndex3C<F, I, E>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 171,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L171",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L171",
                    },
                    "type": "PartitionWithIndex3C<F, I, E>",
                  },
                ],
              },
              "name": "FilterableWithIndex3C",
              "signature": "interface FilterableWithIndex3C<F extends URIS3, I, E>
    extends FunctorWithIndex3C<F, I, E>,
        Filterable3C<F, E> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 166,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L166",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L166",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterableWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex4.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    f: (i: I, a: A) => Option<B>
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 250,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L250",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L250",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, f: (i: I, a: A) => Option<B>) => Kind4<F, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex4.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: FilterWithIndex4<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 254,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L254",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L254",
                    },
                    "type": "FilterWithIndex4<F, I>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex4.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <S, R, E, A, B, C>(
    fa: Kind4<F, S, R, E, A>,
    f: (i: I, a: A) => Either<B, C>
) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 245,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L245",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L245",
                    },
                    "type": "<S, R, E, A, B, C>(fa: Kind4<F, S, R, E, A>, f: (i: I, a: A) => Either<B, C>) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterableWithIndex4.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: PartitionWithIndex4<F, I>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 249,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L249",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L249",
                    },
                    "type": "PartitionWithIndex4<F, I>",
                  },
                ],
              },
              "name": "FilterableWithIndex4",
              "signature": "interface FilterableWithIndex4<F extends URIS4, I>
    extends FunctorWithIndex4<F, I>,
        Filterable4<F> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 244,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L244",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L244",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(
    fa: HKT<F, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): HKT<F, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 38,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L38",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L38",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: HKT<F, A>, predicateWithIndex: PredicateWithIndex<I, A>): HKT<F, A>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L39",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FilterWithIndex",
              "signature": "interface FilterWithIndex<F, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L37",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(
    fa: Kind<F, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Kind<F, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L65",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind<F, A>, predicateWithIndex: PredicateWithIndex<I, A>): Kind<F, A>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L66",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FilterWithIndex1",
              "signature": "interface FilterWithIndex1<F extends URIS, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 64,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L64",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L64",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A, B extends A>(
    fa: Kind2<F, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L92",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A>(fa: Kind2<F, E, A>, predicateWithIndex: PredicateWithIndex<I, A>): Kind2<
    F,
    E,
    A
>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 93,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L93",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L93",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FilterWithIndex2",
              "signature": "interface FilterWithIndex2<F extends URIS2, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L91",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(
    fa: Kind2<F, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 122,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L122",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L122",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind2<F, E, A>, predicateWithIndex: PredicateWithIndex<I, A>): Kind2<
    F,
    E,
    A
>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 123,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L123",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L123",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FilterWithIndex2C",
              "signature": "interface FilterWithIndex2C<F extends URIS2, I, E> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 121,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L121",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L121",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A, B extends A>(
    fa: Kind3<F, R, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 152,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L152",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L152",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A>(
    fa: Kind3<F, R, E, A>,
    predicateWithIndex: PredicateWithIndex<I, A>
): Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 153,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L153",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L153",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FilterWithIndex3",
              "signature": "interface FilterWithIndex3<F extends URIS3, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 151,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L151",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L151",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "filterableWithIndex.FilterWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex3C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A, B extends A>(
    fa: Kind3<F, R, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 159,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L159",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L159",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex3C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A>(
    fa: Kind3<F, R, E, A>,
    predicateWithIndex: PredicateWithIndex<I, A>
): Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 160,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L160",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L160",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FilterWithIndex3C",
              "signature": "interface FilterWithIndex3C<F extends URIS3, I, E> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L158",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.FilterWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex4.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A, B extends A>(
    fa: Kind4<F, S, R, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 218,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L218",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L218",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.FilterWithIndex4.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A>(
    fa: Kind4<F, S, R, E, A>,
    predicateWithIndex: PredicateWithIndex<I, A>
): Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 225,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L225",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L225",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FilterWithIndex4",
              "signature": "interface FilterWithIndex4<F extends URIS4, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 217,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L217",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L217",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.PartitionWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(
    fa: HKT<F, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Separated<HKT<F, A>, HKT<F, B>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 45,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L45",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L45",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: HKT<F, A>, predicateWithIndex: PredicateWithIndex<I, A>): Separated<
    HKT<F, A>,
    HKT<F, A>
>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L46",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PartitionWithIndex",
              "signature": "interface PartitionWithIndex<F, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 44,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L44",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L44",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.PartitionWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(
    fa: Kind<F, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Separated<Kind<F, A>, Kind<F, B>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 72,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L72",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L72",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind<F, A>, predicateWithIndex: PredicateWithIndex<I, A>): Separated<
    Kind<F, A>,
    Kind<F, A>
>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 73,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L73",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L73",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PartitionWithIndex1",
              "signature": "interface PartitionWithIndex1<F extends URIS, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 71,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L71",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L71",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.PartitionWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A, B extends A>(
    fa: Kind2<F, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Separated<Kind2<F, E, A>, Kind2<F, E, B>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 99,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L99",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L99",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<E, A>(
    fa: Kind2<F, E, A>,
    predicateWithIndex: PredicateWithIndex<I, A>
): Separated<Kind2<F, E, A>, Kind2<F, E, A>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 103,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L103",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L103",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PartitionWithIndex2",
              "signature": "interface PartitionWithIndex2<F extends URIS2, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 98,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L98",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L98",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.PartitionWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A, B extends A>(
    fa: Kind2<F, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Separated<Kind2<F, E, A>, Kind2<F, E, B>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 129,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L129",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L129",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<A>(fa: Kind2<F, E, A>, predicateWithIndex: PredicateWithIndex<I, A>): Separated<
    Kind2<F, E, A>,
    Kind2<F, E, A>
>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 133,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L133",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L133",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PartitionWithIndex2C",
              "signature": "interface PartitionWithIndex2C<F extends URIS2, I, E> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L128",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.PartitionWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A, B extends A>(
    fa: Kind3<F, R, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 179,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L179",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L179",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, E, A>(
    fa: Kind3<F, R, E, A>,
    predicateWithIndex: PredicateWithIndex<I, A>
): Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 183,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L183",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L183",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PartitionWithIndex3",
              "signature": "interface PartitionWithIndex3<F extends URIS3, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L178",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "filterableWithIndex.PartitionWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex3C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A, B extends A>(
    fa: Kind3<F, R, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 192,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L192",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L192",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex3C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<R, A>(
    fa: Kind3<F, R, E, A>,
    predicateWithIndex: PredicateWithIndex<I, A>
): Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 196,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L196",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L196",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PartitionWithIndex3C",
              "signature": "interface PartitionWithIndex3C<F extends URIS3, I, E> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 191,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L191",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L191",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.PartitionWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex4.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A, B extends A>(
    fa: Kind4<F, S, R, E, A>,
    refinementWithIndex: RefinementWithIndex<I, A, B>
): Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 231,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L231",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L231",
                    },
                  },
                  {
                    "docs": [],
                    "id": "filterableWithIndex.PartitionWithIndex4.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<S, R, E, A>(
    fa: Kind4<F, S, R, E, A>,
    predicateWithIndex: PredicateWithIndex<I, A>
): Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, A>>;",
                    "source": {
                      "filename": "lib/FilterableWithIndex.d.ts",
                      "line": 235,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L235",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L235",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PartitionWithIndex4",
              "signature": "interface PartitionWithIndex4<F extends URIS4, I> {}",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 230,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L230",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L230",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.PredicateWithIndex",
              "kind": "typeAlias",
              "name": "PredicateWithIndex",
              "signature": "type PredicateWithIndex<I, A> = (i: I, a: A) => boolean;",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L33",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "filterableWithIndex.RefinementWithIndex",
              "kind": "typeAlias",
              "name": "RefinementWithIndex",
              "signature": "type RefinementWithIndex<I, A, B extends A> = (i: I, a: A) => a is B;",
              "source": {
                "filename": "lib/FilterableWithIndex.d.ts",
                "line": 29,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L29",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L29",
              },
            },
          ],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "filterableWithIndex",
        "kind": "namespace",
        "name": "filterableWithIndex",
        "signature": "module 'lib/FilterableWithIndex.d.ts' {}",
        "source": {
          "filename": "lib/FilterableWithIndex.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Use \`reduceM\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
                "/** @deprecated */",
              ],
              "id": "foldable.foldM",
              "kind": "function",
              "name": "foldM",
              "signature": "foldM: {
    <M extends URIS3, F extends URIS>(M: Monad3<M>, F: Foldable1<F>): <R, E, A, B>(
        fa: Kind<F, A>,
        b: B,
        f: (b: B, a: A) => Kind3<M, R, E, B>
    ) => Kind3<M, R, E, B>;
    <M extends URIS3, F extends URIS, E>(M: Monad3C<M, E>, F: Foldable1<F>): <
        R,
        A,
        B
    >(
        fa: Kind<F, A>,
        b: B,
        f: (b: B, a: A) => Kind3<M, R, E, B>
    ) => Kind3<M, R, E, B>;
    <M extends URIS2, F extends URIS>(M: Monad2<M>, F: Foldable1<F>): <E, A, B>(
        fa: Kind<F, A>,
        b: B,
        f: (b: B, a: A) => Kind2<M, E, B>
    ) => Kind2<M, E, B>;
    <M extends URIS2, F extends URIS, E>(M: Monad2C<M, E>, F: Foldable1<F>): <A, B>(
        fa: Kind<F, A>,
        b: B,
        f: (b: B, a: A) => Kind2<M, E, B>
    ) => Kind2<M, E, B>;
    <M extends URIS, F extends URIS>(M: Monad1<M>, F: Foldable1<F>): <A, B>(
        fa: Kind<F, A>,
        b: B,
        f: (b: B, a: A) => Kind<M, B>
    ) => Kind<M, B>;
    <M, F>(M: Monad<M>, F: Foldable<F>): <A, B>(
        fa: HKT<F, A>,
        b: B,
        f: (b: B, a: A) => HKT<M, B>
    ) => HKT<M, B>;
};",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L194",
              },
              "type": "{ <M extends URIS3, F extends URIS>(M: Monad3<M>, F: Foldable1<F>): <R, E, A, B>(fa: Kind<F, A>, b: B, f: (b: B, a: A) => Kind3<M, R, E, B>) => Kind3<M, R, E, B>; <M extends URIS3, F extends URIS, E>(M: Monad3C<M, E>, F: Foldable1<F>): <R, A, B>(fa: Kind<F, A>, b: B, f: (b: B, a: A) => Kind3<M, R, E, B>) => Kind3<M, R, E, B>; <M extends URIS2, F extends URIS>(M: Monad2<M>, F: Foldable1<F>): <E, A, B>(fa: Kind<F, A>, b: B, f: (b: B, a: A) => Kind2<M, E, B>) => Kind2<M, E, B>; <M extends URIS2, F extends URIS, E>(M: Monad2C<M, E>, F: Foldable1<F>): <A, B>(fa: Kind<F, A>, b: B, f: (b: B, a: A) => Kind2<M, E, B>) => Kind2<M, E, B>; <M extends URIS, F extends URIS>(M: Monad1<M>, F: Foldable1<F>): <A, B>(fa: Kind<F, A>, b: B, f: (b: B, a: A) => Kind<M, B>) => Kind<M, B>; <M, F>(M: Monad<M>, F: Foldable<F>): <A, B>(fa: HKT<F, A>, b: B, f: (b: B, a: A) => HKT<M, B>) => HKT<M, B>; }",
            },
            {
              "docs": [
                "/**
 * Returns the composition of two foldables
 *
 * @example
 * import { getFoldableComposition } from 'fp-ts/Foldable'
 * import { array } from 'fp-ts/Array'
 * import { option, some, none } from 'fp-ts/Option'
 * import { monoidString } from 'fp-ts/Monoid'
 *
 * const F = getFoldableComposition(array, option)
 * assert.strictEqual(F.reduce([some('a'), some('b'), some('c')], '', monoidString.concat), 'abc')
 * assert.strictEqual(F.reduce([some('a'), none, some('c')], '', monoidString.concat), 'ac')
 *
 * @since 2.0.0
 */",
              ],
              "id": "foldable.getFoldableComposition",
              "kind": "function",
              "name": "getFoldableComposition",
              "signature": "getFoldableComposition: {
    <F extends URIS2, G extends URIS2, E>(
        F: Foldable2<F>,
        G: Foldable2C<G, E>
    ): FoldableComposition22C<F, G, E>;
    <F extends URIS2, G extends URIS2>(
        F: Foldable2<F>,
        G: Foldable2<G>
    ): FoldableComposition22<F, G>;
    <F extends URIS2, G extends URIS, E>(
        F: Foldable2C<F, E>,
        G: Foldable1<G>
    ): FoldableComposition2C1<F, G, E>;
    <F extends URIS2, G extends URIS>(
        F: Foldable2<F>,
        G: Foldable1<G>
    ): FoldableComposition21<F, G>;
    <F extends URIS, G extends URIS2, E>(
        F: Foldable1<F>,
        G: Foldable2C<G, E>
    ): FoldableComposition12C<F, G, E>;
    <F extends URIS, G extends URIS2>(
        F: Foldable1<F>,
        G: Foldable2<G>
    ): FoldableComposition12<F, G>;
    <F extends URIS, G extends URIS>(
        F: Foldable1<F>,
        G: Foldable1<G>
    ): FoldableComposition11<F, G>;
    <F, G>(F: Foldable<F>, G: Foldable<G>): FoldableComposition<F, G>;
};",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 159,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L159",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L159",
              },
              "type": "{ <F extends URIS2, G extends URIS2, E>(F: Foldable2<F>, G: Foldable2C<G, E>): FoldableComposition22C<F, G, E>; <F extends URIS2, G extends URIS2>(F: Foldable2<F>, G: Foldable2<G>): FoldableComposition22<F, G>; <F extends URIS2, G extends URIS, E>(F: Foldable2C<F, E>, G: Foldable1<G>): FoldableComposition2C1<F, G, E>; <F extends URIS2, G extends URIS>(F: Foldable2<F>, G: Foldable1<G>): FoldableComposition21<F, G>; <F extends URIS, G extends URIS2, E>(F: Foldable1<F>, G: Foldable2C<G, E>): FoldableComposition12C<F, G, E>; <F extends URIS, G extends URIS2>(F: Foldable1<F>, G: Foldable2<G>): FoldableComposition12<F, G>; <F extends URIS, G extends URIS>(F: Foldable1<F>, G: Foldable1<G>): FoldableComposition11<F, G>; <F, G>(F: Foldable<F>, G: Foldable<G>): FoldableComposition<F, G>; }",
            },
            {
              "docs": [
                "/**
 * Fold a data structure, accumulating values in some \`Monoid\`, combining adjacent elements using the specified separator
 *
 * @example
 * import { intercalate } from 'fp-ts/Foldable'
 * import { monoidString } from 'fp-ts/Monoid'
 * import { make, tree } from 'fp-ts/Tree'
 *
 * const t = make('a', [make('b', []), make('c', []), make('d', [])])
 * assert.strictEqual(intercalate(monoidString, tree)('|', t), 'a|b|c|d')
 *
 * @since 2.0.0
 */",
              ],
              "id": "foldable.intercalate",
              "kind": "function",
              "name": "intercalate",
              "signature": "intercalate: {
    <M, F extends URIS3>(M: Monoid<M>, F: Foldable3<F>): <R, E>(
        sep: M,
        fm: Kind3<F, R, E, M>
    ) => M;
    <M, F extends URIS2>(M: Monoid<M>, F: Foldable2<F>): <E>(
        sep: M,
        fm: Kind2<F, E, M>
    ) => M;
    <M, F extends URIS2, E>(M: Monoid<M>, F: Foldable2C<F, E>): (
        sep: M,
        fm: Kind2<F, E, M>
    ) => M;
    <M, F extends URIS>(M: Monoid<M>, F: Foldable1<F>): (
        sep: M,
        fm: Kind<F, M>
    ) => M;
    <M, F>(M: Monoid<M>, F: Foldable<F>): (sep: M, fm: HKT<F, M>) => M;
};",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 276,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L276",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L276",
              },
              "type": "{ <M, F extends URIS3>(M: Monoid<M>, F: Foldable3<F>): <R, E>(sep: M, fm: Kind3<F, R, E, M>) => M; <M, F extends URIS2>(M: Monoid<M>, F: Foldable2<F>): <E>(sep: M, fm: Kind2<F, E, M>) => M; <M, F extends URIS2, E>(M: Monoid<M>, F: Foldable2C<F, E>): (sep: M, fm: Kind2<F, E, M>) => M; <M, F extends URIS>(M: Monoid<M>, F: Foldable1<F>): (sep: M, fm: Kind<F, M>) => M; <M, F>(M: Monoid<M>, F: Foldable<F>): (sep: M, fm: HKT<F, M>) => M; }",
            },
            {
              "docs": [
                "/**
 * Similar to 'reduce', but the result is encapsulated in a monad.
 *
 * Note: this function is not generally stack-safe, e.g., for monads which build up thunks a la \`IO\`.
 *
 * @example
 * import { reduceM } from 'fp-ts/Foldable'
 * import { Monad, some } from 'fp-ts/Option'
 * import { make, Foldable } from 'fp-ts/Tree'
 * import { pipe } from 'fp-ts/function'
 *
 * const t = make(1, [make(2, []), make(3, []), make(4, [])])
 * assert.deepStrictEqual(pipe(t, reduceM(Monad, Foldable)(0, (b, a) => (a > 2 ? some(b + a) : some(b)))), some(7))
 *
 * @since 2.8.0
 */",
              ],
              "id": "foldable.reduceM",
              "kind": "function",
              "name": "reduceM",
              "signature": "reduceM: {
    <M extends URIS3, F extends URIS>(M: Monad3<M>, F: Foldable1<F>): <B, A, R, E>(
        b: B,
        f: (b: B, a: A) => Kind3<M, R, E, B>
    ) => (fa: Kind<F, A>) => Kind3<M, R, E, B>;
    <M extends URIS3, F extends URIS, E>(M: Monad3C<M, E>, F: Foldable1<F>): <
        B,
        A,
        R
    >(
        b: B,
        f: (b: B, a: A) => Kind3<M, R, E, B>
    ) => (fa: Kind<F, A>) => Kind3<M, R, E, B>;
    <M extends URIS2, F extends URIS>(M: Monad2<M>, F: Foldable1<F>): <B, A, E>(
        b: B,
        f: (b: B, a: A) => Kind2<M, E, B>
    ) => (fa: Kind<F, A>) => Kind2<M, E, B>;
    <M extends URIS2, F extends URIS, E>(M: Monad2C<M, E>, F: Foldable1<F>): <B, A>(
        b: B,
        f: (b: B, a: A) => Kind2<M, E, B>
    ) => (fa: Kind<F, A>) => Kind2<M, E, B>;
    <M extends URIS, F extends URIS>(M: Monad1<M>, F: Foldable1<F>): <B, A>(
        b: B,
        f: (b: B, a: A) => Kind<M, B>
    ) => (fa: Kind<F, A>) => Kind<M, B>;
    <M, F>(M: Monad<M>, F: Foldable<F>): <B, A>(
        b: B,
        f: (b: B, a: A) => HKT<M, B>
    ) => (fa: HKT<F, A>) => HKT<M, B>;
};",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 239,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L239",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L239",
              },
              "type": "{ <M extends URIS3, F extends URIS>(M: Monad3<M>, F: Foldable1<F>): <B, A, R, E>(b: B, f: (b: B, a: A) => Kind3<M, R, E, B>) => (fa: Kind<F, A>) => Kind3<M, R, E, B>; <M extends URIS3, F extends URIS, E>(M: Monad3C<M, E>, F: Foldable1<F>): <B, A, R>(b: B, f: (b: B, a: A) => Kind3<M, R, E, B>) => (fa: Kind<F, A>) => Kind3<M, R, E, B>; <M extends URIS2, F extends URIS>(M: Monad2<M>, F: Foldable1<F>): <B, A, E>(b: B, f: (b: B, a: A) => Kind2<M, E, B>) => (fa: Kind<F, A>) => Kind2<M, E, B>; <M extends URIS2, F extends URIS, E>(M: Monad2C<M, E>, F: Foldable1<F>): <B, A>(b: B, f: (b: B, a: A) => Kind2<M, E, B>) => (fa: Kind<F, A>) => Kind2<M, E, B>; <M extends URIS, F extends URIS>(M: Monad1<M>, F: Foldable1<F>): <B, A>(b: B, f: (b: B, a: A) => Kind<M, B>) => (fa: Kind<F, A>) => Kind<M, B>; <M, F>(M: Monad<M>, F: Foldable<F>): <B, A>(b: B, f: (b: B, a: A) => HKT<M, B>) => (fa: HKT<F, A>) => HKT<M, B>; }",
            },
            {
              "docs": [
                "/**
 * Transforms a \`Foldable\` into a read-only array.
 *
 * @example
 * import { toArray } from 'fp-ts/Foldable'
 * import { tree, make } from 'fp-ts/Tree'
 *
 * const t = make(1, [make(2, []), make(3, []), make(4, [])])
 * assert.deepStrictEqual(toArray(tree)(t), [1, 2, 3, 4])
 *
 * @since 2.8.0
 */",
              ],
              "id": "foldable.toArray",
              "kind": "function",
              "name": "toArray",
              "signature": "toArray: {
    <F extends URIS4>(F: Foldable4<F>): <S, R, E, A>(
        fa: Kind4<F, S, R, E, A>
    ) => readonly A[];
    <F extends URIS3>(F: Foldable3<F>): <R, E, A>(
        fa: Kind3<F, R, E, A>
    ) => readonly A[];
    <F extends URIS3, E>(F: Foldable3C<F, E>): <R, A>(
        fa: Kind3<F, R, E, A>
    ) => readonly A[];
    <F extends URIS2>(F: Foldable2<F>): <E, A>(fa: Kind2<F, E, A>) => readonly A[];
    <F extends URIS2, E>(F: Foldable2C<F, E>): <A>(
        fa: Kind2<F, E, A>
    ) => readonly A[];
    <F extends URIS>(F: Foldable1<F>): <A>(fa: Kind<F, A>) => readonly A[];
    <F>(F: Foldable<F>): <A>(fa: HKT<F, A>) => readonly A[];
};",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 302,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L302",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L302",
              },
              "type": "{ <F extends URIS4>(F: Foldable4<F>): <S, R, E, A>(fa: Kind4<F, S, R, E, A>) => readonly A[]; <F extends URIS3>(F: Foldable3<F>): <R, E, A>(fa: Kind3<F, R, E, A>) => readonly A[]; <F extends URIS3, E>(F: Foldable3C<F, E>): <R, A>(fa: Kind3<F, R, E, A>) => readonly A[]; <F extends URIS2>(F: Foldable2<F>): <E, A>(fa: Kind2<F, E, A>) => readonly A[]; <F extends URIS2, E>(F: Foldable2C<F, E>): <A>(fa: Kind2<F, E, A>) => readonly A[]; <F extends URIS>(F: Foldable1<F>): <A>(fa: Kind<F, A>) => readonly A[]; <F>(F: Foldable<F>): <A>(fa: HKT<F, A>) => readonly A[]; }",
            },
            {
              "docs": [
                "/**
 * Traverse a data structure, performing some effects encoded by an \`Applicative\` functor at each value, ignoring the
 * final result.
 *
 * @example
 * import { array } from 'fp-ts/Array'
 * import { traverse_ } from 'fp-ts/Foldable'
 * import { io } from 'fp-ts/IO'
 *
 * let log = ''
 * const append = (s: string) => () => (log += s)
 * traverse_(io, array)(['a', 'b', 'c'], append)()
 * assert.strictEqual(log, 'abc')
 *
 * @since 2.0.0
 */",
              ],
              "id": "foldable.traverse_",
              "kind": "function",
              "name": "traverse_",
              "signature": "traverse_: {
    <M extends URIS3, F extends URIS>(M: Applicative3<M>, F: Foldable1<F>): <
        R,
        E,
        A,
        B
    >(
        fa: Kind<F, A>,
        f: (a: A) => Kind3<M, R, E, B>
    ) => Kind3<M, R, E, void>;
    <M extends URIS2, F extends URIS>(M: Applicative2<M>, F: Foldable1<F>): <
        E,
        A,
        B
    >(
        fa: Kind<F, A>,
        f: (a: A) => Kind2<M, E, B>
    ) => Kind2<M, E, void>;
    <M extends URIS2, F extends URIS, E>(M: Applicative2C<M, E>, F: Foldable1<F>): <
        A,
        B
    >(
        fa: Kind<F, A>,
        f: (a: A) => Kind2<M, E, B>
    ) => Kind2<M, E, void>;
    <M extends URIS, F extends URIS>(M: Applicative1<M>, F: Foldable1<F>): <A, B>(
        fa: Kind<F, A>,
        f: (a: A) => Kind<M, B>
    ) => Kind<M, void>;
    <M, F>(M: Applicative<M>, F: Foldable<F>): <A, B>(
        fa: HKT<F, A>,
        f: (a: A) => HKT<M, B>
    ) => HKT<M, void>;
};",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 329,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L329",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L329",
              },
              "type": "{ <M extends URIS3, F extends URIS>(M: Applicative3<M>, F: Foldable1<F>): <R, E, A, B>(fa: Kind<F, A>, f: (a: A) => Kind3<M, R, E, B>) => Kind3<M, R, E, void>; <M extends URIS2, F extends URIS>(M: Applicative2<M>, F: Foldable1<F>): <E, A, B>(fa: Kind<F, A>, f: (a: A) => Kind2<M, E, B>) => Kind2<M, E, void>; <M extends URIS2, F extends URIS, E>(M: Applicative2C<M, E>, F: Foldable1<F>): <A, B>(fa: Kind<F, A>, f: (a: A) => Kind2<M, E, B>) => Kind2<M, E, void>; <M extends URIS, F extends URIS>(M: Applicative1<M>, F: Foldable1<F>): <A, B>(fa: Kind<F, A>, f: (a: A) => Kind<M, B>) => Kind<M, void>; <M, F>(M: Applicative<M>, F: Foldable<F>): <A, B>(fa: HKT<F, A>, f: (a: A) => HKT<M, B>) => HKT<M, void>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldable.Foldable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.Foldable.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(M: Monoid<M>) => <A>(fa: HKT<F, A>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 15,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L15",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L15",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: HKT<F, A>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(fa: HKT<F, A>, b: B, f: (b: B, a: A) => B) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L14",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(fa: HKT<F, A>, b: B, f: (a: A, b: B) => B) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 16,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L16",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L16",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, b: B, f: (a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 13,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L13",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L13",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Foldable",
              "signature": "interface Foldable<F> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 12,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L12",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L12",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldable.Foldable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.Foldable1.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(M: Monoid<M>) => <A>(fa: Kind<F, A>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L25",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: Kind<F, A>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable1.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(fa: Kind<F, A>, b: B, f: (b: B, a: A) => B) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 24,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L24",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L24",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable1.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(fa: Kind<F, A>, b: B, f: (a: A, b: B) => B) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L26",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, b: B, f: (a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable1.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 23,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L23",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L23",
                    },
                    "type": "URIS",
                  },
                ],
              },
              "name": "Foldable1",
              "signature": "interface Foldable1<F extends URIS> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 22,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L22",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L22",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldable.Foldable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.Foldable2.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <E, A>(fa: Kind2<F, E, A>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 35,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L35",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L35",
                    },
                    "type": "<M>(M: Monoid<M>) => <E, A>(fa: Kind2<F, E, A>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable2.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <E, A, B>(fa: Kind2<F, E, A>, b: B, f: (b: B, a: A) => B) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 34,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L34",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L34",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable2.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <E, A, B>(
    fa: Kind2<F, E, A>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 36,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L36",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L36",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, b: B, f: (a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 33,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L33",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L33",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Foldable2",
              "signature": "interface Foldable2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L32",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldable.Foldable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.Foldable2C.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(fa: Kind2<F, E, A>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L46",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: Kind2<F, E, A>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable2C.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(fa: Kind2<F, E, A>, b: B, f: (b: B, a: A) => B) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 45,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L45",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L45",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable2C.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    fa: Kind2<F, E, A>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L47",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, b: B, f: (a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L43",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Foldable2C",
              "signature": "interface Foldable2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L42",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldable.Foldable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.Foldable3.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <R, E, A>(fa: Kind3<F, R, E, A>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L56",
                    },
                    "type": "<M>(M: Monoid<M>) => <R, E, A>(fa: Kind3<F, R, E, A>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable3.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L55",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable3.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L57",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L54",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Foldable3",
              "signature": "interface Foldable3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L53",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "foldable.Foldable3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.Foldable3C.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <R, A>(fa: Kind3<F, R, E, A>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 67,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L67",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L67",
                    },
                    "type": "<M>(M: Monoid<M>) => <R, A>(fa: Kind3<F, R, E, A>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable3C.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L66",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable3C.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 68,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L68",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L68",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable3C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 64,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L64",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L64",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Foldable3C",
              "signature": "interface Foldable3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L63",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldable.Foldable4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.Foldable4.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <S, R, E, A>(fa: Kind4<F, S, R, E, A>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L77",
                    },
                    "type": "<M>(M: Monoid<M>) => <S, R, E, A>(fa: Kind4<F, S, R, E, A>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable4.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 76,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L76",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L76",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable4.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 78,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L78",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L78",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, b: B, f: (a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.Foldable4.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 75,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L75",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L75",
                    },
                    "type": "URIS4",
                  },
                ],
              },
              "name": "Foldable4",
              "signature": "interface Foldable4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 74,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L74",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L74",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(fa: HKT<F, HKT<G, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 85,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L85",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L85",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: HKT<F, HKT<G, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(fga: HKT<F, HKT<G, A>>, b: B, f: (b: B, a: A) => B) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 84,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L84",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L84",
                    },
                    "type": "<A, B>(fga: HKT<F, HKT<G, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    fa: HKT<F, HKT<G, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 86,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L86",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L86",
                    },
                    "type": "<A, B>(fa: HKT<F, HKT<G, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition",
              "signature": "interface FoldableComposition<F, G> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 83,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L83",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L83",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition11.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(fa: Kind<F, Kind<G, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 93,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L93",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L93",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: Kind<F, Kind<G, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition11.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(
    fga: Kind<F, Kind<G, A>>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L92",
                    },
                    "type": "<A, B>(fga: Kind<F, Kind<G, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition11.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    fa: Kind<F, Kind<G, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 94,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L94",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L94",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind<G, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition11",
              "signature": "interface FoldableComposition11<F extends URIS, G extends URIS> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L91",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition12",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition12.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <E, A>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 101,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L101",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L101",
                    },
                    "type": "<M>(M: Monoid<M>) => <E, A>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition12.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <E, A, B>(
    fga: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L100",
                    },
                    "type": "<E, A, B>(fga: Kind<F, Kind2<G, E, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition12.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <E, A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 102,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L102",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L102",
                    },
                    "type": "<E, A, B>(fa: Kind<F, Kind2<G, E, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition12",
              "signature": "interface FoldableComposition12<F extends URIS, G extends URIS2> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 99,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L99",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L99",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition12C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition12C.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 109,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L109",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L109",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition12C.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(
    fga: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 108,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L108",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L108",
                    },
                    "type": "<A, B>(fga: Kind<F, Kind2<G, E, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition12C.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 110,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L110",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L110",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind2<G, E, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition12C",
              "signature": "interface FoldableComposition12C<F extends URIS, G extends URIS2, E> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 107,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L107",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L107",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition21",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition21.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <E, A>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 117,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L117",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L117",
                    },
                    "type": "<M>(M: Monoid<M>) => <E, A>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition21.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <E, A, B>(
    fga: Kind2<F, E, Kind<G, A>>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 116,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L116",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L116",
                    },
                    "type": "<E, A, B>(fga: Kind2<F, E, Kind<G, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition21.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <E, A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 118,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L118",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L118",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, Kind<G, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition21",
              "signature": "interface FoldableComposition21<F extends URIS2, G extends URIS> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L115",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition22",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition22.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <FE, GE, A>(fa: Kind2<F, FE, Kind2<G, GE, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 133,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L133",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L133",
                    },
                    "type": "<M>(M: Monoid<M>) => <FE, GE, A>(fa: Kind2<F, FE, Kind2<G, GE, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition22.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <FE, GE, A, B>(
    fga: Kind2<F, FE, Kind2<G, GE, A>>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 132,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L132",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L132",
                    },
                    "type": "<FE, GE, A, B>(fga: Kind2<F, FE, Kind2<G, GE, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition22.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <FE, GE, A, B>(
    fa: Kind2<F, FE, Kind2<G, GE, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 134,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L134",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L134",
                    },
                    "type": "<FE, GE, A, B>(fa: Kind2<F, FE, Kind2<G, GE, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition22",
              "signature": "interface FoldableComposition22<F extends URIS2, G extends URIS2> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 131,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L131",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L131",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition22C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition22C.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <FE, A>(fa: Kind2<F, FE, Kind2<G, E, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 141,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L141",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L141",
                    },
                    "type": "<M>(M: Monoid<M>) => <FE, A>(fa: Kind2<F, FE, Kind2<G, E, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition22C.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <FE, A, B>(
    fga: Kind2<F, FE, Kind2<G, E, A>>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 140,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L140",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L140",
                    },
                    "type": "<FE, A, B>(fga: Kind2<F, FE, Kind2<G, E, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition22C.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <FE, A, B>(
    fa: Kind2<F, FE, Kind2<G, E, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 142,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L142",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L142",
                    },
                    "type": "<FE, A, B>(fa: Kind2<F, FE, Kind2<G, E, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition22C",
              "signature": "interface FoldableComposition22C<F extends URIS2, G extends URIS2, E> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 139,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L139",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L139",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldable.FoldableComposition2C1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition2C1.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => M) => M;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 125,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L125",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L125",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition2C1.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(
    fga: Kind2<F, E, Kind<G, A>>,
    b: B,
    f: (b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 124,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L124",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L124",
                    },
                    "type": "<A, B>(fga: Kind2<F, E, Kind<G, A>>, b: B, f: (b: B, a: A) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldable.FoldableComposition2C1.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    b: B,
    f: (a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/Foldable.d.ts",
                      "line": 126,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L126",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L126",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, Kind<G, A>>, b: B, f: (a: A, b: B) => B) => B",
                  },
                ],
              },
              "name": "FoldableComposition2C1",
              "signature": "interface FoldableComposition2C1<F extends URIS2, G extends URIS, E> {}",
              "source": {
                "filename": "lib/Foldable.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L123",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "foldable",
        "kind": "namespace",
        "name": "foldable",
        "signature": "module 'lib/Foldable.d.ts' {}",
        "source": {
          "filename": "lib/Foldable.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.getFoldableWithIndexComposition",
              "kind": "function",
              "name": "getFoldableWithIndexComposition",
              "signature": "getFoldableWithIndexComposition: {
    <F extends URIS2, FI, G extends URIS2, GI, E>(
        F: FoldableWithIndex2<F, FI>,
        G: FoldableWithIndex2C<G, GI, E>
    ): FoldableWithIndexComposition22C<F, FI, G, GI, E>;
    <F extends URIS2, FI, G extends URIS2, GI>(
        F: FoldableWithIndex2<F, FI>,
        G: FoldableWithIndex2<G, GI>
    ): FoldableWithIndexComposition22<F, FI, G, GI>;
    <F extends URIS2, FI, G extends URIS, GI, E>(
        F: FoldableWithIndex2C<F, FI, E>,
        G: FoldableWithIndex1<G, GI>
    ): FoldableWithIndexComposition2C1<F, FI, G, GI, E>;
    <F extends URIS2, FI, G extends URIS, GI>(
        F: FoldableWithIndex2<F, FI>,
        G: FoldableWithIndex1<G, GI>
    ): FoldableWithIndexComposition21<F, FI, G, GI>;
    <F extends URIS, FI, G extends URIS2, GI>(
        F: FoldableWithIndex1<F, FI>,
        G: FoldableWithIndex2<G, GI>
    ): FoldableWithIndexComposition12<F, FI, G, GI>;
    <F extends URIS, FI, G extends URIS2, GI>(
        F: FoldableWithIndex1<F, FI>,
        G: FoldableWithIndex2<G, GI>
    ): FoldableWithIndexComposition12<F, FI, G, GI>;
    <F extends URIS, FI, G extends URIS, GI>(
        F: FoldableWithIndex1<F, FI>,
        G: FoldableWithIndex1<G, GI>
    ): FoldableWithIndexComposition11<F, FI, G, GI>;
    <F, FI, G, GI>(
        F: FoldableWithIndex<F, FI>,
        G: FoldableWithIndex<G, GI>
    ): FoldableWithIndexComposition<F, FI, G, GI>;
};",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 187,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L187",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L187",
              },
              "type": "{ <F extends URIS2, FI, G extends URIS2, GI, E>(F: FoldableWithIndex2<F, FI>, G: FoldableWithIndex2C<G, GI, E>): FoldableWithIndexComposition22C<F, FI, G, GI, E>; <F extends URIS2, FI, G extends URIS2, GI>(F: FoldableWithIndex2<F, FI>, G: FoldableWithIndex2<G, GI>): FoldableWithIndexComposition22<F, FI, G, GI>; <F extends URIS2, FI, G extends URIS, GI, E>(F: FoldableWithIndex2C<F, FI, E>, G: FoldableWithIndex1<G, GI>): FoldableWithIndexComposition2C1<F, FI, G, GI, E>; <F extends URIS2, FI, G extends URIS, GI>(F: FoldableWithIndex2<F, FI>, G: FoldableWithIndex1<G, GI>): FoldableWithIndexComposition21<F, FI, G, GI>; <F extends URIS, FI, G extends URIS2, GI>(F: FoldableWithIndex1<F, FI>, G: FoldableWithIndex2<G, GI>): FoldableWithIndexComposition12<F, FI, G, GI>; <F extends URIS, FI, G extends URIS2, GI>(F: FoldableWithIndex1<F, FI>, G: FoldableWithIndex2<G, GI>): FoldableWithIndexComposition12<F, FI, G, GI>; <F extends URIS, FI, G extends URIS, GI>(F: FoldableWithIndex1<F, FI>, G: FoldableWithIndex1<G, GI>): FoldableWithIndexComposition11<F, FI, G, GI>; <F, FI, G, GI>(F: FoldableWithIndex<F, FI>, G: FoldableWithIndex<G, GI>): FoldableWithIndexComposition<F, FI, G, GI>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(fa: HKT<F, A>, f: (i: I, a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 38,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L38",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L38",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: HKT<F, A>, f: (i: I, a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    fa: HKT<F, A>,
    b: B,
    f: (i: I, a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L39",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, b: B, f: (i: I, a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    fa: HKT<F, A>,
    b: B,
    f: (i: I, b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 37,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L37",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L37",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, b: B, f: (i: I, b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndex",
              "signature": "interface FoldableWithIndex<F, I> extends Foldable<F> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L36",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex1.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(fa: Kind<F, A>, f: (i: I, a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L47",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: Kind<F, A>, f: (i: I, a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex1.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    fa: Kind<F, A>,
    b: B,
    f: (i: I, a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L48",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, b: B, f: (i: I, a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex1.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    fa: Kind<F, A>,
    b: B,
    f: (i: I, b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L46",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, b: B, f: (i: I, b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndex1",
              "signature": "interface FoldableWithIndex1<F extends URIS, I> extends Foldable1<F> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L45",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex2.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <E, A>(fa: Kind2<F, E, A>, f: (i: I, a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L56",
                    },
                    "type": "<M>(M: Monoid<M>) => <E, A>(fa: Kind2<F, E, A>, f: (i: I, a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex2.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <E, A, B>(
    fa: Kind2<F, E, A>,
    b: B,
    f: (i: I, a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L57",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, b: B, f: (i: I, a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex2.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <E, A, B>(
    fa: Kind2<F, E, A>,
    b: B,
    f: (i: I, b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L55",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, b: B, f: (i: I, b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndex2",
              "signature": "interface FoldableWithIndex2<F extends URIS2, I> extends Foldable2<F> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 54,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L54",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L54",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex2C.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(fa: Kind2<F, E, A>, f: (i: I, a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L65",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fa: Kind2<F, E, A>, f: (i: I, a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex2C.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    fa: Kind2<F, E, A>,
    b: B,
    f: (i: I, a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L66",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, b: B, f: (i: I, a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex2C.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    fa: Kind2<F, E, A>,
    b: B,
    f: (i: I, b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 64,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L64",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L64",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, b: B, f: (i: I, b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndex2C",
              "signature": "interface FoldableWithIndex2C<F extends URIS2, I, E> extends Foldable2C<F, E> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L63",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex3.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <R, E, A>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 74,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L74",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L74",
                    },
                    "type": "<M>(M: Monoid<M>) => <R, E, A>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex3.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (i: I, a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 75,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L75",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L75",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (i: I, a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex3.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (i: I, b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 73,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L73",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L73",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (i: I, b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndex3",
              "signature": "interface FoldableWithIndex3<F extends URIS3, I> extends Foldable3<F> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 72,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L72",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L72",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex3C.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <R, A>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 83,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L83",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L83",
                    },
                    "type": "<M>(M: Monoid<M>) => <R, A>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex3C.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (i: I, a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 84,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L84",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L84",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (i: I, a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex3C.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    b: B,
    f: (i: I, b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L82",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, b: B, f: (i: I, b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndex3C",
              "signature": "interface FoldableWithIndex3C<F extends URIS3, I, E> extends Foldable3C<F, E> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L81",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex4.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <S, R, E, A>(fa: Kind4<F, S, R, E, A>, f: (i: I, a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L92",
                    },
                    "type": "<M>(M: Monoid<M>) => <S, R, E, A>(fa: Kind4<F, S, R, E, A>, f: (i: I, a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex4.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    b: B,
    f: (i: I, a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 93,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L93",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L93",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, b: B, f: (i: I, a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndex4.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    b: B,
    f: (i: I, b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 91,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L91",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L91",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, b: B, f: (i: I, b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndex4",
              "signature": "interface FoldableWithIndex4<F extends URIS4, I> extends Foldable4<F> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 90,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L90",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L90",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(fga: HKT<F, HKT<G, A>>, f: (i: [FI, GI], a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L100",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fga: HKT<F, HKT<G, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    fga: HKT<F, HKT<G, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 101,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L101",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L101",
                    },
                    "type": "<A, B>(fga: HKT<F, HKT<G, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    fga: HKT<F, HKT<G, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 99,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L99",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L99",
                    },
                    "type": "<A, B>(fga: HKT<F, HKT<G, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition",
              "signature": "interface FoldableWithIndexComposition<F, FI, G, GI>
    extends FoldableComposition<F, G> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 98,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L98",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L98",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition11.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(fga: Kind<F, Kind<G, A>>, f: (i: [FI, GI], a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 109,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L109",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L109",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fga: Kind<F, Kind<G, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition11.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    fga: Kind<F, Kind<G, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 110,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L110",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L110",
                    },
                    "type": "<A, B>(fga: Kind<F, Kind<G, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition11.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    fga: Kind<F, Kind<G, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 108,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L108",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L108",
                    },
                    "type": "<A, B>(fga: Kind<F, Kind<G, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition11",
              "signature": "interface FoldableWithIndexComposition11<F extends URIS, FI, G extends URIS, GI>
    extends FoldableComposition11<F, G> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L106",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition12",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition12.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <E, A>(fga: Kind<F, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 118,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L118",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L118",
                    },
                    "type": "<M>(M: Monoid<M>) => <E, A>(fga: Kind<F, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition12.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <E, A, B>(
    fga: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 119,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L119",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L119",
                    },
                    "type": "<E, A, B>(fga: Kind<F, Kind2<G, E, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition12.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <E, A, B>(
    fga: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 117,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L117",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L117",
                    },
                    "type": "<E, A, B>(fga: Kind<F, Kind2<G, E, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition12",
              "signature": "interface FoldableWithIndexComposition12<F extends URIS, FI, G extends URIS2, GI>
    extends FoldableComposition12<F, G> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L115",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition12C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition12C.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(fga: Kind<F, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 127,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L127",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L127",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fga: Kind<F, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition12C.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    fga: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 128,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L128",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L128",
                    },
                    "type": "<A, B>(fga: Kind<F, Kind2<G, E, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition12C.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    fga: Kind<F, Kind2<G, E, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 126,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L126",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L126",
                    },
                    "type": "<A, B>(fga: Kind<F, Kind2<G, E, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition12C",
              "signature": "interface FoldableWithIndexComposition12C<F extends URIS, FI, G extends URIS2, GI, E>
    extends FoldableComposition12C<F, G, E> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 124,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L124",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L124",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition21",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition21.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <FE, A>(fga: Kind2<F, FE, Kind<G, A>>, f: (i: [FI, GI], a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 136,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L136",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L136",
                    },
                    "type": "<M>(M: Monoid<M>) => <FE, A>(fga: Kind2<F, FE, Kind<G, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition21.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <FE, A, B>(
    fga: Kind2<F, FE, Kind<G, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 139,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L139",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L139",
                    },
                    "type": "<FE, A, B>(fga: Kind2<F, FE, Kind<G, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition21.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <FE, A, B>(
    fga: Kind2<F, FE, Kind<G, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 135,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L135",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L135",
                    },
                    "type": "<FE, A, B>(fga: Kind2<F, FE, Kind<G, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition21",
              "signature": "interface FoldableWithIndexComposition21<F extends URIS2, FI, G extends URIS, GI>
    extends FoldableComposition21<F, G> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 133,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L133",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L133",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition22",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition22.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <FE, GE, A>(
    fga: Kind2<F, FE, Kind2<G, GE, A>>,
    f: (i: [FI, GI], a: A) => M
) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 160,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L160",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L160",
                    },
                    "type": "<M>(M: Monoid<M>) => <FE, GE, A>(fga: Kind2<F, FE, Kind2<G, GE, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition22.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <FE, GE, A, B>(
    fga: Kind2<F, FE, Kind2<G, GE, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 163,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L163",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L163",
                    },
                    "type": "<FE, GE, A, B>(fga: Kind2<F, FE, Kind2<G, GE, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition22.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <FE, GE, A, B>(
    fga: Kind2<F, FE, Kind2<G, GE, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 155,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L155",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L155",
                    },
                    "type": "<FE, GE, A, B>(fga: Kind2<F, FE, Kind2<G, GE, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition22",
              "signature": "interface FoldableWithIndexComposition22<F extends URIS2, FI, G extends URIS2, GI>
    extends FoldableComposition22<F, G> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L153",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition22C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition22C.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <FE, A>(
    fga: Kind2<F, FE, Kind2<G, E, A>>,
    f: (i: [FI, GI], a: A) => M
) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 175,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L175",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L175",
                    },
                    "type": "<M>(M: Monoid<M>) => <FE, A>(fga: Kind2<F, FE, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition22C.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <FE, A, B>(
    fga: Kind2<F, FE, Kind2<G, E, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 178,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L178",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L178",
                    },
                    "type": "<FE, A, B>(fga: Kind2<F, FE, Kind2<G, E, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition22C.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <FE, A, B>(
    fga: Kind2<F, FE, Kind2<G, E, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 174,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L174",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L174",
                    },
                    "type": "<FE, A, B>(fga: Kind2<F, FE, Kind2<G, E, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition22C",
              "signature": "interface FoldableWithIndexComposition22C<
    F extends URIS2,
    FI,
    G extends URIS2,
    GI,
    E
> extends FoldableComposition22C<F, G, E> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 172,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L172",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L172",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "foldableWithIndex.FoldableWithIndexComposition2C1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition2C1.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(fga: Kind2<F, FE, Kind<G, A>>, f: (i: [FI, GI], a: A) => M) => M;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 147,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L147",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L147",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(fga: Kind2<F, FE, Kind<G, A>>, f: (i: [FI, GI], a: A) => M) => M",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition2C1.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    fga: Kind2<F, FE, Kind<G, A>>,
    b: B,
    f: (i: [FI, GI], a: A, b: B) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 148,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L148",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L148",
                    },
                    "type": "<A, B>(fga: Kind2<F, FE, Kind<G, A>>, b: B, f: (i: [FI, GI], a: A, b: B) => B) => B",
                  },
                  {
                    "docs": [],
                    "id": "foldableWithIndex.FoldableWithIndexComposition2C1.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    fga: Kind2<F, FE, Kind<G, A>>,
    b: B,
    f: (i: [FI, GI], b: B, a: A) => B
) => B;",
                    "source": {
                      "filename": "lib/FoldableWithIndex.d.ts",
                      "line": 146,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L146",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L146",
                    },
                    "type": "<A, B>(fga: Kind2<F, FE, Kind<G, A>>, b: B, f: (i: [FI, GI], b: B, a: A) => B) => B",
                  },
                ],
              },
              "name": "FoldableWithIndexComposition2C1",
              "signature": "interface FoldableWithIndexComposition2C1<
    F extends URIS2,
    FI,
    G extends URIS,
    GI,
    FE
> extends FoldableComposition2C1<F, G, FE> {}",
              "source": {
                "filename": "lib/FoldableWithIndex.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L144",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`Foldable\` with an additional index.
 * A \`FoldableWithIndex\` instance must be compatible with its \`Foldable\` instance
 *
 * \`\`\`ts
 * reduce(fa, b, f) = reduceWithIndex(fa, b, (_, b, a) => f(b, a))
 * foldMap(M)(fa, f) = foldMapWithIndex(M)(fa, (_, a) => f(a))
 * reduceRight(fa, b, f) = reduceRightWithIndex(fa, b, (_, a, b) => f(a, b))
 * \`\`\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "foldableWithIndex",
        "kind": "namespace",
        "name": "foldableWithIndex",
        "signature": "module 'lib/FoldableWithIndex.d.ts' {}",
        "source": {
          "filename": "lib/FoldableWithIndex.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.absurd",
              "kind": "function",
              "name": "absurd",
              "signature": "absurd: <A>(_: never) => A;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 186,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L186",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L186",
              },
              "type": "<A>(_: never) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.constant",
              "kind": "function",
              "name": "constant",
              "signature": "constant: <A>(a: A) => Lazy<A>;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L56",
              },
              "type": "<A>(a: A) => Lazy<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.decrement",
              "kind": "function",
              "name": "decrement",
              "signature": "decrement: (n: number) => number;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 182,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L182",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L182",
              },
              "type": "(n: number) => number",
            },
            {
              "docs": [
                "/**
 * Flips the order of the arguments of a function of two arguments.
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.flip",
              "kind": "function",
              "name": "flip",
              "signature": "flip: <A, B, C>(f: (a: A, b: B) => C) => (b: B, a: A) => C;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 92,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L92",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L92",
              },
              "type": "<A, B, C>(f: (a: A, b: B) => C) => (b: B, a: A) => C",
            },
            {
              "docs": [
                "/**
 * Performs left-to-right function composition. The first argument may have any arity, the remaining arguments must be unary.
 *
 * See also [\`pipe\`](#pipe).
 *
 * @example
 * import { flow } from 'fp-ts/function'
 *
 * const len = (s: string): number => s.length
 * const double = (n: number): number => n * 2
 *
 * const f = flow(len, double)
 *
 * assert.strictEqual(f('aaa'), 6)
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.flow",
              "kind": "function",
              "name": "flow",
              "signature": "flow: {
    <A extends readonly unknown[], B>(ab: (...a: A) => B): (...a: A) => B;
    <A extends readonly unknown[], B, C>(ab: (...a: A) => B, bc: (b: B) => C): (
        ...a: A
    ) => C;
    <A extends readonly unknown[], B, C, D>(
        ab: (...a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D
    ): (...a: A) => D;
    <A extends readonly unknown[], B, C, D, E>(
        ab: (...a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E
    ): (...a: A) => E;
    <A extends readonly unknown[], B, C, D, E, F>(
        ab: (...a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F
    ): (...a: A) => F;
    <A extends readonly unknown[], B, C, D, E, F, G>(
        ab: (...a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G
    ): (...a: A) => G;
    <A extends readonly unknown[], B, C, D, E, F, G, H>(
        ab: (...a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H
    ): (...a: A) => H;
    <A extends readonly unknown[], B, C, D, E, F, G, H, I>(
        ab: (...a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I
    ): (...a: A) => I;
    <A extends readonly unknown[], B, C, D, E, F, G, H, I, J>(
        ab: (...a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J
    ): (...a: A) => J;
};",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L110",
              },
              "type": "{ <A extends readonly unknown[], B>(ab: (...a: A) => B): (...a: A) => B; <A extends readonly unknown[], B, C>(ab: (...a: A) => B, bc: (b: B) => C): (...a: A) => C; <A extends readonly unknown[], B, C, D>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D): (...a: A) => D; <A extends readonly unknown[], B, C, D, E>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E): (...a: A) => E; <A extends readonly unknown[], B, C, D, E, F>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F): (...a: A) => F; <A extends readonly unknown[], B, C, D, E, F, G>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G): (...a: A) => G; <A extends readonly unknown[], B, C, D, E, F, G, H>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H): (...a: A) => H; <A extends readonly unknown[], B, C, D, E, F, G, H, I>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I): (...a: A) => I; <A extends readonly unknown[], B, C, D, E, F, G, H, I, J>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J): (...a: A) => J; }",
            },
            {
              "docs": [
                "/**
 * Type hole simulation
 *
 * @since 2.7.0
 */",
              ],
              "id": "function.hole",
              "kind": "function",
              "name": "hole",
              "signature": "hole: <T>() => T;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 460,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L460",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L460",
              },
              "type": "<T>() => T",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.identity",
              "kind": "function",
              "name": "identity",
              "signature": "identity: <A>(a: A) => A;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 44,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L44",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L44",
              },
              "type": "<A>(a: A) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.increment",
              "kind": "function",
              "name": "increment",
              "signature": "increment: (n: number) => number;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L178",
              },
              "type": "(n: number) => number",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.not",
              "kind": "function",
              "name": "not",
              "signature": "not: <A>(predicate: Predicate<A>) => Predicate<A>;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L52",
              },
              "type": "<A>(predicate: Predicate<A>) => Predicate<A>",
            },
            {
              "docs": [
                "/**
 * Pipes the value of an expression into a pipeline of functions.
 *
 * See also [\`flow\`](#flow).
 *
 * @example
 * import { pipe } from 'fp-ts/function'
 *
 * const len = (s: string): number => s.length
 * const double = (n: number): number => n * 2
 *
 * // without pipe
 * assert.strictEqual(double(len('aaa')), 6)
 *
 * // with pipe
 * assert.strictEqual(pipe('aaa', len, double), 6)
 *
 * @since 2.6.3
 */",
              ],
              "id": "function.pipe",
              "kind": "function",
              "name": "pipe",
              "signature": "pipe: {
    <A>(a: A): A;
    <A, B>(a: A, ab: (a: A) => B): B;
    <A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C;
    <A, B, C, D>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): D;
    <A, B, C, D, E>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E
    ): E;
    <A, B, C, D, E, F>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F
    ): F;
    <A, B, C, D, E, F, G>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G
    ): G;
    <A, B, C, D, E, F, G, H>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H
    ): H;
    <A, B, C, D, E, F, G, H, I>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I
    ): I;
    <A, B, C, D, E, F, G, H, I, J>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J
    ): J;
    <A, B, C, D, E, F, G, H, I, J, K>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K
    ): K;
    <A, B, C, D, E, F, G, H, I, J, K, L>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L
    ): L;
    <A, B, C, D, E, F, G, H, I, J, K, L, M>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M
    ): M;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N
    ): N;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O
    ): O;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P
    ): P;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q
    ): Q;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q,
        qr: (q: Q) => R
    ): R;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q,
        qr: (q: Q) => R,
        rs: (r: R) => S
    ): S;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q,
        qr: (q: Q) => R,
        rs: (r: R) => S,
        st: (s: S) => T
    ): T;
};",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 225,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L225",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L225",
              },
              "type": "{ <A>(a: A): A; <A, B>(a: A, ab: (a: A) => B): B; <A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C; <A, B, C, D>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): D; <A, B, C, D, E>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E): E; <A, B, C, D, E, F>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F): F; <A, B, C, D, E, F, G>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G): G; <A, B, C, D, E, F, G, H>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H): H; <A, B, C, D, E, F, G, H, I>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I): I; <A, B, C, D, E, F, G, H, I, J>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J): J; <A, B, C, D, E, F, G, H, I, J, K>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K): K; <A, B, C, D, E, F, G, H, I, J, K, L>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L): L; <A, B, C, D, E, F, G, H, I, J, K, L, M>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M): M; <A, B, C, D, E, F, G, H, I, J, K, L, M, N>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N): N; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O): O; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P): P; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q): Q; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R): R; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R, rs: (r: R) => S): S; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R, rs: (r: R) => S, st: (s: S) => T): T; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.tuple",
              "kind": "function",
              "name": "tuple",
              "signature": "tuple: <T extends readonly any[]>(...t: T) => T;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 174,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L174",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L174",
              },
              "type": "<T extends readonly any[]>(...t: T) => T",
            },
            {
              "docs": [
                "/**
 * Creates a tupled version of this function: instead of \`n\` arguments, it accepts a single tuple argument.
 *
 * @example
 * import { tupled } from 'fp-ts/function'
 *
 * const add = tupled((x: number, y: number): number => x + y)
 *
 * assert.strictEqual(add([1, 2]), 3)
 *
 * @since 2.4.0
 */",
              ],
              "id": "function.tupled",
              "kind": "function",
              "name": "tupled",
              "signature": "tupled: <A extends readonly unknown[], B>(f: (...a: A) => B) => (a: A) => B;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 199,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L199",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L199",
              },
              "type": "<A extends readonly unknown[], B>(f: (...a: A) => B) => (a: A) => B",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.unsafeCoerce",
              "kind": "function",
              "name": "unsafeCoerce",
              "signature": "unsafeCoerce: <A, B>(a: A) => B;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L48",
              },
              "type": "<A, B>(a: A) => B",
            },
            {
              "docs": [
                "/**
 * Inverse function of \`tupled\`
 *
 * @since 2.4.0
 */",
              ],
              "id": "function.untupled",
              "kind": "function",
              "name": "untupled",
              "signature": "untupled: <A extends readonly unknown[], B>(f: (a: A) => B) => (...a: A) => B;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 205,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L205",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L205",
              },
              "type": "<A extends readonly unknown[], B>(f: (a: A) => B) => (...a: A) => B",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.Endomorphism",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "function.Endomorphism.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(a: A): A;",
                    "source": {
                      "filename": "lib/function.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L28",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Endomorphism",
              "signature": "interface Endomorphism<A> {}",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L27",
              },
            },
            {
              "docs": [
                "/**
 * @example
 * import { FunctionN } from 'fp-ts/function'
 *
 * export const sum: FunctionN<[number, number], number> = (a, b) => a + b
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.FunctionN",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "function.FunctionN.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(...args: A): B;",
                    "source": {
                      "filename": "lib/function.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L39",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "FunctionN",
              "signature": "interface FunctionN<A extends ReadonlyArray<unknown>, B> {}",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * A *thunk*
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.Lazy",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "function.Lazy.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): A;",
                    "source": {
                      "filename": "lib/function.d.ts",
                      "line": 10,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L10",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L10",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Lazy",
              "signature": "interface Lazy<A> {}",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 9,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L9",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L9",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.Predicate",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "function.Predicate.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(a: A): boolean;",
                    "source": {
                      "filename": "lib/function.d.ts",
                      "line": 16,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L16",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L16",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Predicate",
              "signature": "interface Predicate<A> {}",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 15,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L15",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L15",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "function.Refinement",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "function.Refinement.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(a: A): a is B;",
                    "source": {
                      "filename": "lib/function.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L22",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Refinement",
              "signature": "interface Refinement<A, B extends A> {}",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 21,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L21",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L21",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * A thunk that returns always \`false\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.constFalse",
              "kind": "variable",
              "name": "constFalse",
              "signature": "const constFalse: Lazy<boolean>;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 68,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L68",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L68",
              },
              "type": "Lazy<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * A thunk that returns always \`null\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.constNull",
              "kind": "variable",
              "name": "constNull",
              "signature": "const constNull: Lazy<null>;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 74,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L74",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L74",
              },
              "type": "Lazy<null>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * A thunk that returns always \`true\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.constTrue",
              "kind": "variable",
              "name": "constTrue",
              "signature": "const constTrue: Lazy<boolean>;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 62,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L62",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L62",
              },
              "type": "Lazy<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * A thunk that returns always \`undefined\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.constUndefined",
              "kind": "variable",
              "name": "constUndefined",
              "signature": "const constUndefined: Lazy<undefined>;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 80,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L80",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L80",
              },
              "type": "Lazy<undefined>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * A thunk that returns always \`void\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "function.constVoid",
              "kind": "variable",
              "name": "constVoid",
              "signature": "const constVoid: Lazy<void>;",
              "source": {
                "filename": "lib/function.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L86",
              },
              "type": "Lazy<void>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "function",
        "kind": "namespace",
        "name": "function",
        "signature": "module 'lib/function.d.ts' {}",
        "source": {
          "filename": "lib/function.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.getFunctorComposition",
              "kind": "function",
              "name": "getFunctorComposition",
              "signature": "getFunctorComposition: {
    <F extends URIS2, G extends URIS3, E>(
        F: Functor2<F>,
        G: Functor3C<G, E>
    ): FunctorComposition23C<F, G, E>;
    <F extends URIS2, G extends URIS2, E>(
        F: Functor2<F>,
        G: Functor2C<G, E>
    ): FunctorComposition22C<F, G, E>;
    <F extends URIS2, G extends URIS2>(
        F: Functor2<F>,
        G: Functor2<G>
    ): FunctorComposition22<F, G>;
    <F extends URIS2, G extends URIS, E>(
        F: Functor2C<F, E>,
        G: Functor1<G>
    ): FunctorComposition2C1<F, G, E>;
    <F extends URIS2, G extends URIS>(
        F: Functor2<F>,
        G: Functor1<G>
    ): FunctorComposition21<F, G>;
    <F extends URIS, G extends URIS2, E>(
        F: Functor1<F>,
        G: Functor2C<G, E>
    ): FunctorComposition12C<F, G, E>;
    <F extends URIS, G extends URIS2>(
        F: Functor1<F>,
        G: Functor2<G>
    ): FunctorComposition12<F, G>;
    <F extends URIS, G extends URIS>(
        F: Functor1<F>,
        G: Functor1<G>
    ): FunctorComposition11<F, G>;
    <F, G>(F: Functor<F>, G: Functor<G>): FunctorComposition<F, G>;
};",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 154,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L154",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L154",
              },
              "type": "{ <F extends URIS2, G extends URIS3, E>(F: Functor2<F>, G: Functor3C<G, E>): FunctorComposition23C<F, G, E>; <F extends URIS2, G extends URIS2, E>(F: Functor2<F>, G: Functor2C<G, E>): FunctorComposition22C<F, G, E>; <F extends URIS2, G extends URIS2>(F: Functor2<F>, G: Functor2<G>): FunctorComposition22<F, G>; <F extends URIS2, G extends URIS, E>(F: Functor2C<F, E>, G: Functor1<G>): FunctorComposition2C1<F, G, E>; <F extends URIS2, G extends URIS>(F: Functor2<F>, G: Functor1<G>): FunctorComposition21<F, G>; <F extends URIS, G extends URIS2, E>(F: Functor1<F>, G: Functor2C<G, E>): FunctorComposition12C<F, G, E>; <F extends URIS, G extends URIS2>(F: Functor1<F>, G: Functor2<G>): FunctorComposition12<F, G>; <F extends URIS, G extends URIS>(F: Functor1<F>, G: Functor1<G>): FunctorComposition11<F, G>; <F, G>(F: Functor<F>, G: Functor<G>): FunctorComposition<F, G>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functor.Functor",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.Functor.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(fa: HKT<F, A>, f: (a: A) => B) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L21",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, f: (a: A) => B) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "functor.Functor.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L20",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Functor",
              "signature": "interface Functor<F> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L19",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functor.Functor1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.Functor1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(fa: Kind<F, A>, f: (a: A) => B) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 29,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L29",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L29",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, f: (a: A) => B) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "functor.Functor1.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L28",
                    },
                    "type": "URIS",
                  },
                ],
              },
              "name": "Functor1",
              "signature": "interface Functor1<F extends URIS> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L27",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functor.Functor2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.Functor2.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, A, B>(fa: Kind2<F, E, A>, f: (a: A) => B) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 37,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L37",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L37",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, f: (a: A) => B) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "functor.Functor2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 36,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L36",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L36",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Functor2",
              "signature": "interface Functor2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 35,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L35",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L35",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functor.Functor2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.Functor2C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(fa: Kind2<F, E, A>, f: (a: A) => B) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L46",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, f: (a: A) => B) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "functor.Functor2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L44",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Functor2C",
              "signature": "interface Functor2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 43,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L43",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L43",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functor.Functor3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.Functor3.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => B
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L54",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => B) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "functor.Functor3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L53",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Functor3",
              "signature": "interface Functor3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L52",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "functor.Functor3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.Functor3C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => B
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 63,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L63",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L63",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => B) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "functor.Functor3C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 61,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L61",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L61",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Functor3C",
              "signature": "interface Functor3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L60",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functor.Functor4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.Functor4.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    f: (a: A) => B
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 71,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L71",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L71",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, f: (a: A) => B) => Kind4<F, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "functor.Functor4.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 70,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L70",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L70",
                    },
                    "type": "URIS4",
                  },
                ],
              },
              "name": "Functor4",
              "signature": "interface Functor4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 69,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L69",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L69",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(fa: HKT<F, HKT<G, A>>, f: (a: A) => B) => HKT<F, HKT<G, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L77",
                    },
                    "type": "<A, B>(fa: HKT<F, HKT<G, A>>, f: (a: A) => B) => HKT<F, HKT<G, B>>",
                  },
                ],
              },
              "name": "FunctorComposition",
              "signature": "interface FunctorComposition<F, G> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L76",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition11.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    fa: Kind<F, Kind<G, A>>,
    f: (a: A) => B
) => Kind<F, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 101,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L101",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L101",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind<G, A>>, f: (a: A) => B) => Kind<F, Kind<G, B>>",
                  },
                ],
              },
              "name": "FunctorComposition11",
              "signature": "interface FunctorComposition11<F extends URIS, G extends URIS> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L100",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition12",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition12.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (a: A) => B
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 107,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L107",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L107",
                    },
                    "type": "<E, A, B>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => B) => Kind<F, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorComposition12",
              "signature": "interface FunctorComposition12<F extends URIS, G extends URIS2> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L106",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition12C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition12C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (a: A) => B
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 113,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L113",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L113",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind2<G, E, A>>, f: (a: A) => B) => Kind<F, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorComposition12C",
              "signature": "interface FunctorComposition12C<F extends URIS, G extends URIS2, E> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 112,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L112",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L112",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition21",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition21.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (a: A) => B
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 119,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L119",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L119",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => B) => Kind2<F, E, Kind<G, B>>",
                  },
                ],
              },
              "name": "FunctorComposition21",
              "signature": "interface FunctorComposition21<F extends URIS2, G extends URIS> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L118",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition22",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition22.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <FE, GE, A, B>(
    fa: Kind2<F, FE, Kind2<G, GE, A>>,
    f: (a: A) => B
) => Kind2<F, FE, Kind2<G, GE, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 131,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L131",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L131",
                    },
                    "type": "<FE, GE, A, B>(fa: Kind2<F, FE, Kind2<G, GE, A>>, f: (a: A) => B) => Kind2<F, FE, Kind2<G, GE, B>>",
                  },
                ],
              },
              "name": "FunctorComposition22",
              "signature": "interface FunctorComposition22<F extends URIS2, G extends URIS2> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 130,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L130",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L130",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition22C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition22C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <FE, A, B>(
    fa: Kind2<F, FE, Kind2<G, E, A>>,
    f: (a: A) => B
) => Kind2<F, FE, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 137,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L137",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L137",
                    },
                    "type": "<FE, A, B>(fa: Kind2<F, FE, Kind2<G, E, A>>, f: (a: A) => B) => Kind2<F, FE, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorComposition22C",
              "signature": "interface FunctorComposition22C<F extends URIS2, G extends URIS2, E> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 136,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L136",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L136",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "functor.FunctorComposition23",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition23.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <FE, R, E, A, B>(
    fa: Kind2<F, FE, Kind3<G, R, E, A>>,
    f: (a: A) => B
) => Kind2<F, FE, Kind3<G, R, E, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 143,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L143",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L143",
                    },
                    "type": "<FE, R, E, A, B>(fa: Kind2<F, FE, Kind3<G, R, E, A>>, f: (a: A) => B) => Kind2<F, FE, Kind3<G, R, E, B>>",
                  },
                ],
              },
              "name": "FunctorComposition23",
              "signature": "interface FunctorComposition23<F extends URIS2, G extends URIS3> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 142,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L142",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L142",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "functor.FunctorComposition23C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition23C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <FE, R, A, B>(
    fa: Kind2<F, FE, Kind3<G, R, E, A>>,
    f: (a: A) => B
) => Kind2<F, FE, Kind3<G, R, E, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 149,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L149",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L149",
                    },
                    "type": "<FE, R, A, B>(fa: Kind2<F, FE, Kind3<G, R, E, A>>, f: (a: A) => B) => Kind2<F, FE, Kind3<G, R, E, B>>",
                  },
                ],
              },
              "name": "FunctorComposition23C",
              "signature": "interface FunctorComposition23C<F extends URIS2, G extends URIS3, E> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L148",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorComposition2C1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorComposition2C1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (a: A) => B
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 125,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L125",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L125",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, Kind<G, A>>, f: (a: A) => B) => Kind2<F, E, Kind<G, B>>",
                  },
                ],
              },
              "name": "FunctorComposition2C1",
              "signature": "interface FunctorComposition2C1<F extends URIS2, G extends URIS, E> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 124,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L124",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L124",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorCompositionHKT1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorCompositionHKT1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    fa: HKT<F, Kind<G, A>>,
    f: (a: A) => B
) => HKT<F, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 83,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L83",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L83",
                    },
                    "type": "<A, B>(fa: HKT<F, Kind<G, A>>, f: (a: A) => B) => HKT<F, Kind<G, B>>",
                  },
                ],
              },
              "name": "FunctorCompositionHKT1",
              "signature": "interface FunctorCompositionHKT1<F, G extends URIS> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L82",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorCompositionHKT2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorCompositionHKT2.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, A, B>(
    fa: HKT<F, Kind2<G, E, A>>,
    f: (a: A) => B
) => HKT<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 89,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L89",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L89",
                    },
                    "type": "<E, A, B>(fa: HKT<F, Kind2<G, E, A>>, f: (a: A) => B) => HKT<F, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorCompositionHKT2",
              "signature": "interface FunctorCompositionHKT2<F, G extends URIS2> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L88",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L88",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functor.FunctorCompositionHKT2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functor.FunctorCompositionHKT2C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    fa: HKT<F, Kind2<G, E, A>>,
    f: (a: A) => B
) => HKT<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/Functor.d.ts",
                      "line": 95,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L95",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L95",
                    },
                    "type": "<A, B>(fa: HKT<F, Kind2<G, E, A>>, f: (a: A) => B) => HKT<F, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorCompositionHKT2C",
              "signature": "interface FunctorCompositionHKT2C<F, G extends URIS2, E> {}",
              "source": {
                "filename": "lib/Functor.d.ts",
                "line": 94,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L94",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L94",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`Functor\` is a type constructor which supports a mapping operation \`map\`.
 *
 * \`map\` can be used to turn functions \`a -> b\` into functions \`f a -> f b\` whose argument and return types use the type
 * constructor \`f\` to represent some computational context.
 *
 * Instances must satisfy the following laws:
 *
 * 1. Identity: \`F.map(fa, a => a) <-> fa\`
 * 2. Composition: \`F.map(fa, a => bc(ab(a))) <-> F.map(F.map(fa, ab), bc)\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "functor",
        "kind": "namespace",
        "name": "functor",
        "signature": "module 'lib/Functor.d.ts' {}",
        "source": {
          "filename": "lib/Functor.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.getFunctorWithIndexComposition",
              "kind": "function",
              "name": "getFunctorWithIndexComposition",
              "signature": "getFunctorWithIndexComposition: {
    <F extends URIS2, FI, G extends URIS2, GI, E>(
        F: FunctorWithIndex2<F, FI>,
        G: FunctorWithIndex2C<G, FI, E>
    ): FunctorWithIndexComposition22C<F, FI, G, GI, E>;
    <F extends URIS2, FI, G extends URIS2, GI>(
        F: FunctorWithIndex2<F, FI>,
        G: FunctorWithIndex2<G, FI>
    ): FunctorWithIndexComposition22<F, FI, G, GI>;
    <F extends URIS2, FI, G extends URIS, GI, E>(
        F: FunctorWithIndex2C<F, FI, E>,
        G: FunctorWithIndex1<G, GI>
    ): FunctorWithIndexComposition2C1<F, FI, G, GI, E>;
    <F extends URIS2, FI, G extends URIS, GI>(
        F: FunctorWithIndex2<F, FI>,
        G: FunctorWithIndex1<G, GI>
    ): FunctorWithIndexComposition21<F, FI, G, GI>;
    <F extends URIS, FI, G extends URIS2, GI, E>(
        F: FunctorWithIndex1<F, FI>,
        G: FunctorWithIndex2C<G, GI, E>
    ): FunctorWithIndexComposition12C<F, FI, G, GI, E>;
    <F extends URIS, FI, G extends URIS2, GI>(
        F: FunctorWithIndex1<F, FI>,
        G: FunctorWithIndex2<G, GI>
    ): FunctorWithIndexComposition12<F, FI, G, GI>;
    <F extends URIS, FI, G extends URIS, GI>(
        F: FunctorWithIndex1<F, FI>,
        G: FunctorWithIndex1<G, GI>
    ): FunctorWithIndexComposition11<F, FI, G, GI>;
    <F, FI, G, GI>(
        F: FunctorWithIndex<F, FI>,
        G: FunctorWithIndex<G, GI>
    ): FunctorWithIndexComposition<F, FI, G, GI>;
};",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 145,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L145",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L145",
              },
              "type": "{ <F extends URIS2, FI, G extends URIS2, GI, E>(F: FunctorWithIndex2<F, FI>, G: FunctorWithIndex2C<G, FI, E>): FunctorWithIndexComposition22C<F, FI, G, GI, E>; <F extends URIS2, FI, G extends URIS2, GI>(F: FunctorWithIndex2<F, FI>, G: FunctorWithIndex2<G, FI>): FunctorWithIndexComposition22<F, FI, G, GI>; <F extends URIS2, FI, G extends URIS, GI, E>(F: FunctorWithIndex2C<F, FI, E>, G: FunctorWithIndex1<G, GI>): FunctorWithIndexComposition2C1<F, FI, G, GI, E>; <F extends URIS2, FI, G extends URIS, GI>(F: FunctorWithIndex2<F, FI>, G: FunctorWithIndex1<G, GI>): FunctorWithIndexComposition21<F, FI, G, GI>; <F extends URIS, FI, G extends URIS2, GI, E>(F: FunctorWithIndex1<F, FI>, G: FunctorWithIndex2C<G, GI, E>): FunctorWithIndexComposition12C<F, FI, G, GI, E>; <F extends URIS, FI, G extends URIS2, GI>(F: FunctorWithIndex1<F, FI>, G: FunctorWithIndex2<G, GI>): FunctorWithIndexComposition12<F, FI, G, GI>; <F extends URIS, FI, G extends URIS, GI>(F: FunctorWithIndex1<F, FI>, G: FunctorWithIndex1<G, GI>): FunctorWithIndexComposition11<F, FI, G, GI>; <F, FI, G, GI>(F: FunctorWithIndex<F, FI>, G: FunctorWithIndex<G, GI>): FunctorWithIndexComposition<F, FI, G, GI>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndex.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(fa: HKT<F, A>, f: (i: I, a: A) => B) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 37,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L37",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L37",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, f: (i: I, a: A) => B) => HKT<F, B>",
                  },
                ],
              },
              "name": "FunctorWithIndex",
              "signature": "interface FunctorWithIndex<F, I> extends Functor<F> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L36",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndex1.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    fa: Kind<F, A>,
    f: (i: I, a: A) => B
) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L44",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, f: (i: I, a: A) => B) => Kind<F, B>",
                  },
                ],
              },
              "name": "FunctorWithIndex1",
              "signature": "interface FunctorWithIndex1<F extends URIS, I> extends Functor1<F> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 43,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L43",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L43",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndex2.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <E, A, B>(
    fa: Kind2<F, E, A>,
    f: (i: I, a: A) => B
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 51,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L51",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L51",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, f: (i: I, a: A) => B) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "FunctorWithIndex2",
              "signature": "interface FunctorWithIndex2<F extends URIS2, I> extends Functor2<F> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L50",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndex2C.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    fa: Kind2<F, E, A>,
    f: (i: I, a: A) => B
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 58,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L58",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L58",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, f: (i: I, a: A) => B) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "FunctorWithIndex2C",
              "signature": "interface FunctorWithIndex2C<F extends URIS2, I, E> extends Functor2C<F, E> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 57,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L57",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L57",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndex3.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (i: I, a: A) => B
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L65",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => B) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "FunctorWithIndex3",
              "signature": "interface FunctorWithIndex3<F extends URIS3, I> extends Functor3<F> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 64,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L64",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L64",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndex3C.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (i: I, a: A) => B
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 72,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L72",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L72",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, f: (i: I, a: A) => B) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "FunctorWithIndex3C",
              "signature": "interface FunctorWithIndex3C<F extends URIS3, I, E> extends Functor3C<F, E> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 71,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L71",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L71",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndex4.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    f: (i: I, a: A) => B
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 79,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L79",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L79",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, f: (i: I, a: A) => B) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "FunctorWithIndex4",
              "signature": "interface FunctorWithIndex4<F extends URIS4, I> extends Functor4<F> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 78,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L78",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L78",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    fga: HKT<F, HKT<G, A>>,
    f: (i: [FI, GI], a: A) => B
) => HKT<F, HKT<G, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 85,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L85",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L85",
                    },
                    "type": "<A, B>(fga: HKT<F, HKT<G, A>>, f: (i: [FI, GI], a: A) => B) => HKT<F, HKT<G, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition",
              "signature": "interface FunctorWithIndexComposition<F, FI, G, GI>
    extends FunctorComposition<F, G> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L84",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition11.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    fa: Kind<F, Kind<G, A>>,
    f: (i: [FI, GI], a: A) => B
) => Kind<F, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L92",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind<G, A>>, f: (i: [FI, GI], a: A) => B) => Kind<F, Kind<G, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition11",
              "signature": "interface FunctorWithIndexComposition11<F extends URIS, FI, G extends URIS, GI>
    extends FunctorComposition11<F, G> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 90,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L90",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L90",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition12",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition12.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <E, A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (i: [FI, GI], a: A) => B
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 99,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L99",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L99",
                    },
                    "type": "<E, A, B>(fa: Kind<F, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => B) => Kind<F, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition12",
              "signature": "interface FunctorWithIndexComposition12<F extends URIS, FI, G extends URIS2, GI>
    extends FunctorComposition12<F, G> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 97,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L97",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L97",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition12C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition12C.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    fa: Kind<F, Kind2<G, E, A>>,
    f: (i: [FI, GI], a: A) => B
) => Kind<F, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 106,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L106",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L106",
                    },
                    "type": "<A, B>(fa: Kind<F, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => B) => Kind<F, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition12C",
              "signature": "interface FunctorWithIndexComposition12C<F extends URIS, FI, G extends URIS2, GI, E>
    extends FunctorComposition12C<F, G, E> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 104,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L104",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L104",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition21",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition21.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <E, A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (i: [FI, GI], a: A) => B
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 113,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L113",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L113",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, Kind<G, A>>, f: (i: [FI, GI], a: A) => B) => Kind2<F, E, Kind<G, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition21",
              "signature": "interface FunctorWithIndexComposition21<F extends URIS2, FI, G extends URIS, GI>
    extends FunctorComposition21<F, G> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 111,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L111",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L111",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition22",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition22.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <FE, GE, A, B>(
    fa: Kind2<F, FE, Kind2<G, GE, A>>,
    f: (i: [FI, GI], a: A) => B
) => Kind2<F, FE, Kind2<G, GE, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 127,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L127",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L127",
                    },
                    "type": "<FE, GE, A, B>(fa: Kind2<F, FE, Kind2<G, GE, A>>, f: (i: [FI, GI], a: A) => B) => Kind2<F, FE, Kind2<G, GE, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition22",
              "signature": "interface FunctorWithIndexComposition22<F extends URIS2, FI, G extends URIS2, GI>
    extends FunctorComposition22<F, G> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 125,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L125",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L125",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition22C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition22C.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <FE, A, B>(
    fa: Kind2<F, FE, Kind2<G, E, A>>,
    f: (i: [FI, GI], a: A) => B
) => Kind2<F, FE, Kind2<G, E, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 137,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L137",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L137",
                    },
                    "type": "<FE, A, B>(fa: Kind2<F, FE, Kind2<G, E, A>>, f: (i: [FI, GI], a: A) => B) => Kind2<F, FE, Kind2<G, E, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition22C",
              "signature": "interface FunctorWithIndexComposition22C<F extends URIS2, FI, G extends URIS2, GI, E>
    extends FunctorComposition22C<F, G, E> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 135,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L135",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L135",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "functorWithIndex.FunctorWithIndexComposition2C1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "functorWithIndex.FunctorWithIndexComposition2C1.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    fa: Kind2<F, E, Kind<G, A>>,
    f: (i: [FI, GI], a: A) => B
) => Kind2<F, E, Kind<G, B>>;",
                    "source": {
                      "filename": "lib/FunctorWithIndex.d.ts",
                      "line": 120,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L120",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L120",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, Kind<G, A>>, f: (i: [FI, GI], a: A) => B) => Kind2<F, E, Kind<G, B>>",
                  },
                ],
              },
              "name": "FunctorWithIndexComposition2C1",
              "signature": "interface FunctorWithIndexComposition2C1<F extends URIS2, FI, G extends URIS, GI, E>
    extends FunctorComposition2C1<F, G, E> {}",
              "source": {
                "filename": "lib/FunctorWithIndex.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L118",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`FunctorWithIndex\` is a type constructor which supports a mapping operation \`mapWithIndex\`.
 *
 * \`mapWithIndex\` can be used to turn functions \`i -> a -> b\` into functions \`f a -> f b\` whose argument and return types use the type
 * constructor \`f\` to represent some computational context.
 *
 * Instances must satisfy the following laws:
 *
 * 1. Identity: \`F.mapWithIndex(fa, (_i, a) => a) <-> fa\`
 * 2. Composition: \`F.mapWithIndex(fa, (_i, a) => bc(ab(a))) <-> F.mapWithIndex(F.mapWithIndex(fa, ab), bc)\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "functorWithIndex",
        "kind": "namespace",
        "name": "functorWithIndex",
        "signature": "module 'lib/FunctorWithIndex.d.ts' {}",
        "source": {
          "filename": "lib/FunctorWithIndex.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "group.Group",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "group.Group.inverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "inverse",
                    "signature": "readonly inverse: (a: A) => A;",
                    "source": {
                      "filename": "lib/Group.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Group.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Group.d.ts#L14",
                    },
                    "type": "(a: A) => A",
                  },
                ],
              },
              "name": "Group",
              "signature": "interface Group<A> extends Monoid<A> {}",
              "source": {
                "filename": "lib/Group.d.ts",
                "line": 13,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Group.d.ts#L13",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Group.d.ts#L13",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`Group\` is a \`Monoid\` with inverses. Instances must satisfy the following law in addition to the monoid laws:
 *
 * - Inverse: \`concat(inverse(a), a) <-> empty = concat(a, inverse(a))\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "group",
        "kind": "namespace",
        "name": "group",
        "signature": "module 'lib/Group.d.ts' {}",
        "source": {
          "filename": "lib/Group.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Group.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Group.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "heytingAlgebra.HeytingAlgebra",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "heytingAlgebra.HeytingAlgebra.implies",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "implies",
                    "signature": "readonly implies: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/HeytingAlgebra.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/HeytingAlgebra.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/HeytingAlgebra.d.ts#L30",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                  {
                    "docs": [],
                    "id": "heytingAlgebra.HeytingAlgebra.not",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "not",
                    "signature": "readonly not: (x: A) => A;",
                    "source": {
                      "filename": "lib/HeytingAlgebra.d.ts",
                      "line": 31,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/HeytingAlgebra.d.ts#L31",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/HeytingAlgebra.d.ts#L31",
                    },
                    "type": "(x: A) => A",
                  },
                ],
              },
              "name": "HeytingAlgebra",
              "signature": "interface HeytingAlgebra<A> extends BoundedDistributiveLattice<A> {}",
              "source": {
                "filename": "lib/HeytingAlgebra.d.ts",
                "line": 29,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/HeytingAlgebra.d.ts#L29",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/HeytingAlgebra.d.ts#L29",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * Heyting algebras are bounded (distributive) lattices that are also equipped with an additional binary operation
 * \`implies\` (also written as \`→\`). Heyting algebras also define a complement operation \`not\` (sometimes written as
 * \`¬a\`)
 *
 * However, in Heyting algebras this operation is only a pseudo-complement, since Heyting algebras do not necessarily
 * provide the law of the excluded middle. This means that there is no guarantee that \`a ∨ ¬a = 1\`.
 *
 * Heyting algebras model intuitionistic logic. For a model of classical logic, see the boolean algebra type class
 * implemented as \`BooleanAlgebra\`.
 *
 * A \`HeytingAlgebra\` must satisfy the following laws in addition to \`BoundedDistributiveLattice\` laws:
 *
 * - Implication:
 *   - \`a → a <-> 1\`
 *   - \`a ∧ (a → b) <-> a ∧ b\`
 *   - \`b ∧ (a → b) <-> b\`
 *   - \`a → (b ∧ c) <-> (a → b) ∧ (a → c)\`
 * - Complemented
 *   - \`¬a <-> a → 0\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "heytingAlgebra",
        "kind": "namespace",
        "name": "heytingAlgebra",
        "signature": "module 'lib/HeytingAlgebra.d.ts' {}",
        "source": {
          "filename": "lib/HeytingAlgebra.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/HeytingAlgebra.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/HeytingAlgebra.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "identity.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <A>(that: () => A) => (fa: A) => A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 138,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L138",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L138",
              },
              "type": "<A>(that: () => A) => (fa: A) => A",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "identity.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <B>(that: () => B) => <A>(fa: A) => B | A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 130,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L130",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L130",
              },
              "type": "<B>(that: () => B) => <A>(fa: A) => B | A",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "identity.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(fa: A) => <B>(fab: (a: A) => B) => B;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L34",
              },
              "type": "<A>(fa: A) => <B>(fab: (a: A) => B) => B",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "identity.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(fb: B) => <A>(fa: A) => A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 43,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L43",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L43",
              },
              "type": "<B>(fb: B) => <A>(fa: A) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "identity.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: B
) => (fa: A) => { [K in N | keyof A]: K extends keyof A ? A[K] : B };",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 232,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L232",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L232",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: B) => (fa: A) => { [K in N | keyof A]: K extends keyof A ? A[K] : B; }",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "identity.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(fb: B) => <A>(fa: A) => B;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L52",
              },
              "type": "<B>(fb: B) => <A>(fa: A) => B",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "identity.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => B
) => (fa: A) => { [K in N | keyof A]: K extends keyof A ? A[K] : B };",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 225,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L225",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L225",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => B) => (fa: A) => { [K in N | keyof A]: K extends keyof A ? A[K] : B; }",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "identity.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(name: N) => <A>(fa: A) => { [K in N]: A };",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 221,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L221",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L221",
              },
              "type": "<N extends string>(name: N) => <A>(fa: A) => { [K in N]: A; }",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "identity.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(f: (a: A) => B) => (ma: A) => B;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L66",
              },
              "type": "<A, B>(f: (a: A) => B) => (ma: A) => B",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "identity.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(f: (a: A) => B) => (ma: A) => A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L76",
              },
              "type": "<A, B>(f: (a: A) => B) => (ma: A) => A",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "identity.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <A>(ma: A) => A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L93",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L93",
              },
              "type": "<A>(ma: A) => A",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "identity.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <A, B>(f: (wa: A) => B) => (wa: A) => B;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L81",
              },
              "type": "<A, B>(f: (wa: A) => B) => (wa: A) => B",
            },
            {
              "docs": [
                "/**
 * @category Extract
 * @since 2.6.2
 */",
              ],
              "id": "identity.extract",
              "kind": "function",
              "name": "extract",
              "signature": "extract: <A>(wa: A) => A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L86",
              },
              "type": "<A>(wa: A) => A",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "identity.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: A) => A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L100",
              },
              "type": "<A>(mma: A) => A",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "identity.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: A) => M;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L110",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: A) => M",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "identity.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<A>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 163,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L163",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L163",
              },
              "type": "<A>(E: Eq<A>) => Eq<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "identity.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<A>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L158",
              },
              "type": "<A>(S: Show<A>) => Show<A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "identity.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: A) => B;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L27",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: A) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "identity.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: A) => B;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 105,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L105",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L105",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: A) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "identity.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: A) => B;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L115",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: A) => B",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "identity.Identity",
              "kind": "typeAlias",
              "name": "Identity",
              "signature": "type Identity<A> = A;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L19",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "identity.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L148",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 193,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L193",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L193",
              },
              "type": "Alt1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 173,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L173",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L173",
              },
              "type": "Applicative1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.ChainRec",
              "kind": "variable",
              "name": "ChainRec",
              "signature": "const ChainRec: ChainRec1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L203",
              },
              "type": "ChainRec1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.Comonad",
              "kind": "variable",
              "name": "Comonad",
              "signature": "const Comonad: Comonad1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 198,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L198",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L198",
              },
              "type": "Comonad1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "identity.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: {};",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 217,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L217",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L217",
              },
              "type": "{}",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 183,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L183",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L183",
              },
              "type": "Foldable1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 168,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L168",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L168",
              },
              "type": "Functor1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "identity.identity",
              "kind": "variable",
              "name": "identity",
              "signature": "const identity: Monad1<'Identity'> &
    Foldable1<'Identity'> &
    Traversable1<'Identity'> &
    Alt1<'Identity'> &
    Comonad1<'Identity'> &
    ChainRec1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 208,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L208",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L208",
              },
              "type": "Monad1<"Identity"> & Foldable1<"Identity"> & Traversable1<"Identity"> & Alt1<"Identity"> & Comonad1<"Identity"> & ChainRec1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L178",
              },
              "type": "Monad1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "identity.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 59,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L59",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L59",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "identity.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L123",
              },
              "type": "Sequence1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "identity.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 188,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L188",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L188",
              },
              "type": "Traversable1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "identity.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse1<'Identity'>;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 119,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L119",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L119",
              },
              "type": "PipeableTraverse1<"Identity">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "identity.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Identity.d.ts",
                "line": 143,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L143",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L143",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "identity",
        "kind": "namespace",
        "name": "identity",
        "signature": "module 'lib/Identity.d.ts' {}",
        "source": {
          "filename": "lib/Identity.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "invariant.Invariant",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "invariant.Invariant.imap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "imap",
                    "signature": "readonly imap: <A, B>(
    fa: HKT<F, A>,
    f: (a: A) => B,
    g: (b: B) => A
) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L11",
                    },
                    "type": "<A, B>(fa: HKT<F, A>, f: (a: A) => B, g: (b: B) => A) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "invariant.Invariant.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 10,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L10",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L10",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Invariant",
              "signature": "interface Invariant<F> {}",
              "source": {
                "filename": "lib/Invariant.d.ts",
                "line": 9,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L9",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L9",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "invariant.Invariant1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "invariant.Invariant1.imap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "imap",
                    "signature": "readonly imap: <A, B>(
    fa: Kind<F, A>,
    f: (a: A) => B,
    g: (b: B) => A
) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L19",
                    },
                    "type": "<A, B>(fa: Kind<F, A>, f: (a: A) => B, g: (b: B) => A) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "invariant.Invariant1.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L18",
                    },
                    "type": "URIS",
                  },
                ],
              },
              "name": "Invariant1",
              "signature": "interface Invariant1<F extends URIS> {}",
              "source": {
                "filename": "lib/Invariant.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "invariant.Invariant2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "invariant.Invariant2.imap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "imap",
                    "signature": "readonly imap: <E, A, B>(
    fa: Kind2<F, E, A>,
    f: (a: A) => B,
    g: (b: B) => A
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L27",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, A>, f: (a: A) => B, g: (b: B) => A) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "invariant.Invariant2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L26",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Invariant2",
              "signature": "interface Invariant2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Invariant.d.ts",
                "line": 25,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L25",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L25",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "invariant.Invariant2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "invariant.Invariant2C.imap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "imap",
                    "signature": "readonly imap: <A, B>(
    fa: Kind2<F, E, A>,
    f: (a: A) => B,
    g: (b: B) => A
) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 36,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L36",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L36",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, A>, f: (a: A) => B, g: (b: B) => A) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "invariant.Invariant2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 34,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L34",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L34",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Invariant2C",
              "signature": "interface Invariant2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Invariant.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L33",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "invariant.Invariant3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "invariant.Invariant3.imap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "imap",
                    "signature": "readonly imap: <R, E, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => B,
    g: (b: B) => A
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L44",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => B, g: (b: B) => A) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "invariant.Invariant3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L43",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Invariant3",
              "signature": "interface Invariant3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Invariant.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L42",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.4.2
 */",
              ],
              "id": "invariant.Invariant3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "invariant.Invariant3C.imap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "imap",
                    "signature": "readonly imap: <R, A, B>(
    fa: Kind3<F, R, E, A>,
    f: (a: A) => B,
    g: (b: B) => A
) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L52",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, A>, f: (a: A) => B, g: (b: B) => A) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "invariant.Invariant3C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 51,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L51",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L51",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Invariant3C",
              "signature": "interface Invariant3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/Invariant.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L50",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.4.2
 */",
              ],
              "id": "invariant.Invariant4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "invariant.Invariant4.imap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "imap",
                    "signature": "readonly imap: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, A>,
    f: (a: A) => B,
    g: (b: B) => A
) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 60,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L60",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L60",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, A>, f: (a: A) => B, g: (b: B) => A) => Kind4<F, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "invariant.Invariant4.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Invariant.d.ts",
                      "line": 59,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L59",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L59",
                    },
                    "type": "URIS4",
                  },
                ],
              },
              "name": "Invariant4",
              "signature": "interface Invariant4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Invariant.d.ts",
                "line": 58,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L58",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L58",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "invariant",
        "kind": "namespace",
        "name": "invariant",
        "signature": "module 'lib/Invariant.d.ts' {}",
        "source": {
          "filename": "lib/Invariant.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "io.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(fa: IO<A>) => <B>(fab: IO<(a: A) => B>) => IO<B>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L42",
              },
              "type": "<A>(fa: IO<A>) => <B>(fab: IO<(a: A) => B>) => IO<B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "io.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(fb: IO<B>) => <A>(fa: IO<A>) => IO<A>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L51",
              },
              "type": "<B>(fb: IO<B>) => <A>(fa: IO<A>) => IO<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "io.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: IO<B>
) => (fa: IO<A>) => IO<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 170,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L170",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L170",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: IO<B>) => (fa: IO<A>) => IO<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "io.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(fb: IO<B>) => <A>(fa: IO<A>) => IO<B>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L60",
              },
              "type": "<B>(fb: IO<B>) => <A>(fa: IO<A>) => IO<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "io.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => IO<B>
) => (fa: IO<A>) => IO<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 163,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L163",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L163",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => IO<B>) => (fa: IO<A>) => IO<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "io.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(name: N) => <A>(fa: IO<A>) => IO<{ [K in N]: A }>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 159,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L159",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L159",
              },
              "type": "<N extends string>(name: N) => <A>(fa: IO<A>) => IO<{ [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "io.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(f: (a: A) => IO<B>) => (ma: IO<A>) => IO<B>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 74,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L74",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L74",
              },
              "type": "<A, B>(f: (a: A) => IO<B>) => (ma: IO<A>) => IO<B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "io.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(f: (a: A) => IO<B>) => (ma: IO<A>) => IO<A>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L84",
              },
              "type": "<A, B>(f: (a: A) => IO<B>) => (ma: IO<A>) => IO<A>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "io.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: IO<IO<A>>) => IO<A>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L91",
              },
              "type": "<A>(mma: IO<IO<A>>) => IO<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "io.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <A>(M: Monoid<A>) => Monoid<IO<A>>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 121,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L121",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L121",
              },
              "type": "<A>(M: Monoid<A>) => Monoid<IO<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "io.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <A>(S: Semigroup<A>) => Semigroup<IO<A>>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 116,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L116",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L116",
              },
              "type": "<A>(S: Semigroup<A>) => Semigroup<IO<A>>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "io.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: IO<A>) => IO<B>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 35,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L35",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L35",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: IO<A>) => IO<B>",
            },
            {
              "docs": [
                "/**
 * transform Array of IO to IO of Array
 *
 * this function have the same behavior of \`A.sequence(IO.io)\` but it's stack safe
 *
 * @example
 * import * as RA from 'fp-ts/ReadonlyArray'
 * import { sequenceArray, IO } from 'fp-ts/IO'
 * import { pipe } from 'fp-ts/function'
 *
 * const logger: Array<unknown> = []
 * const log: <A>(a: A) => IO<void> = (a) => () => { logger.push(a) }
 *
 * pipe(RA.range(0, 100), RA.map(log), sequenceArray)()
 * assert.deepStrictEqual(logger, RA.range(0, 100))
 *
 * @since 2.9.0
 */",
              ],
              "id": "io.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <A>(arr: readonly IO<A>[]) => IO<readonly A[]>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 217,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L217",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L217",
              },
              "type": "<A>(arr: readonly IO<A>[]) => IO<readonly A[]>",
            },
            {
              "docs": [
                "/**
 * runs an action for every element in array, and accumulates the results IO in the array.
 *
 * this function have the same behavior of \`A.traverse(IO.io)\` but it's stack safe
 *
 * @example
 * import * as RA from 'fp-ts/ReadonlyArray'
 * import { traverseArray, IO } from 'fp-ts/IO'
 * import { pipe } from 'fp-ts/function'
 *
 * const logger: Array<unknown> = []
 * const log: <A>(a: A) => IO<void> = (a) => () => { logger.push(a) }
 *
 * pipe(RA.range(0, 100), traverseArray(log))()
 * assert.deepStrictEqual(logger, RA.range(0, 100))
 *
 * @since 2.9.0
 */",
              ],
              "id": "io.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <A, B>(
    f: (a: A) => IO<B>
) => (arr: readonly A[]) => IO<readonly B[]>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 198,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L198",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L198",
              },
              "type": "<A, B>(f: (a: A) => IO<B>) => (arr: readonly A[]) => IO<readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "io.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <A, B>(
    f: (index: number, a: A) => IO<B>
) => (arr: readonly A[]) => IO<readonly B[]>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 177,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L177",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L177",
              },
              "type": "<A, B>(f: (index: number, a: A) => IO<B>) => (arr: readonly A[]) => IO<readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "io.IO",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "io.IO.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): A;",
                    "source": {
                      "filename": "lib/IO.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L26",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "IO",
              "signature": "interface IO<A> {}",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 25,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L25",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L25",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "io.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L106",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "io.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'IO'>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 131,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L131",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L131",
              },
              "type": "Applicative1<"IO">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "io.ChainRec",
              "kind": "variable",
              "name": "ChainRec",
              "signature": "const ChainRec: ChainRec1<'IO'>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 146,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L146",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L146",
              },
              "type": "ChainRec1<"IO">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "io.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: IO<{}>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 155,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L155",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L155",
              },
              "type": "IO<{}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadIO
 * @since 2.7.0
 */",
              ],
              "id": "io.fromIO",
              "kind": "variable",
              "name": "fromIO",
              "signature": "const fromIO: <A>(fa: IO<A>) => Kind<M, A>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L96",
              },
              "type": "<A>(fa: IO<A>) => Kind<M, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "io.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'IO'>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 126,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L126",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L126",
              },
              "type": "Functor1<"IO">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "io.io",
              "kind": "variable",
              "name": "io",
              "signature": "const io: Monad1<'IO'> & MonadIO1<'IO'> & ChainRec1<'IO'>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 151,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L151",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L151",
              },
              "type": "Monad1<"IO"> & MonadIO1<"IO"> & ChainRec1<"IO">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "io.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'IO'>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 136,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L136",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L136",
              },
              "type": "Monad1<"IO">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "io.MonadIO",
              "kind": "variable",
              "name": "MonadIO",
              "signature": "const MonadIO: MonadIO1<'IO'>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 141,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L141",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L141",
              },
              "type": "MonadIO1<"IO">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "io.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 67,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L67",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L67",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "io.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/IO.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L101",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * \`\`\`ts
 * interface IO<A> {
 *   (): A
 * }
 * \`\`\`
 *
 * \`IO<A>\` represents a non-deterministic synchronous computation that can cause side effects, yields a value of
 * type \`A\` and **never fails**. If you want to represent a synchronous computation that may fail, please see
 * \`IOEither\`.
 *
 * @since 2.0.0
 */",
        ],
        "id": "io",
        "kind": "namespace",
        "name": "io",
        "signature": "module 'lib/IO.d.ts' {}",
        "source": {
          "filename": "lib/IO.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <E, A>(
    that: Lazy<IOEither<E, A>>
) => (fa: IOEither<E, A>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 269,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L269",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L269",
              },
              "type": "<E, A>(that: Lazy<IOEither<E, A>>) => (fa: IOEither<E, A>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <E2, B>(
    that: Lazy<IOEither<E2, B>>
) => <E1, A>(fa: IOEither<E1, A>) => IOEither<E2 | E1, B | A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 259,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L259",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L259",
              },
              "type": "<E2, B>(that: Lazy<IOEither<E2, B>>) => <E1, A>(fa: IOEither<E1, A>) => IOEither<E2 | E1, B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <E, A>(
    fa: IOEither<E, A>
) => <B>(fab: IOEither<E, (a: A) => B>) => IOEither<E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 183,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L183",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L183",
              },
              "type": "<E, A>(fa: IOEither<E, A>) => <B>(fab: IOEither<E, (a: A) => B>) => IOEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <E, B>(fb: IOEither<E, B>) => <A>(fa: IOEither<E, A>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 192,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L192",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L192",
              },
              "type": "<E, B>(fb: IOEither<E, B>) => <A>(fa: IOEither<E, A>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "ioEither.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, E, B>(
    name: Exclude<N, keyof A>,
    fb: IOEither<E, B>
) => (
    fa: IOEither<E, A>
) => IOEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 445,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L445",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L445",
              },
              "type": "<A, N extends string, E, B>(name: Exclude<N, keyof A>, fb: IOEither<E, B>) => (fa: IOEither<E, A>) => IOEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <E, B>(
    fb: IOEither<E, B>
) => <A>(fa: IOEither<E, A>) => IOEither<E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 201,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L201",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L201",
              },
              "type": "<E, B>(fb: IOEither<E, B>) => <A>(fa: IOEither<E, A>) => IOEither<E, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "ioEither.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, D, B>(
    name: Exclude<N, keyof A>,
    fb: IOEither<D, B>
) => <E>(
    fa: IOEither<E, A>
) => IOEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 438,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L438",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L438",
              },
              "type": "<A, N extends string, D, B>(name: Exclude<N, keyof A>, fb: IOEither<D, B>) => <E>(fa: IOEither<E, A>) => IOEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "ioEither.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <D, A>(
    fa: IOEither<D, A>
) => <E, B>(fab: IOEither<E, (a: A) => B>) => IOEither<D | E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L176",
              },
              "type": "<D, A>(fa: IOEither<D, A>) => <E, B>(fab: IOEither<E, (a: A) => B>) => IOEither<D | E, B>",
            },
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: IOEither<E, A>) => IOEither<G, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 162,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L162",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L162",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: IOEither<E, A>) => IOEither<G, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "ioEither.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, E, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => IOEither<E, B>
) => (
    fa: IOEither<E, A>
) => IOEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 424,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L424",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L424",
              },
              "type": "<N extends string, A, E, B>(name: Exclude<N, keyof A>, f: (a: A) => IOEither<E, B>) => (fa: IOEither<E, A>) => IOEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "ioEither.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <E, A>(fa: IOEither<E, A>) => IOEither<E, { [K in N]: A }>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 413,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L413",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L413",
              },
              "type": "<N extends string>(name: N) => <E, A>(fa: IOEither<E, A>) => IOEither<E, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "ioEither.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, D, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => IOEither<D, B>
) => <E>(
    fa: IOEither<E, A>
) => IOEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 417,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L417",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L417",
              },
              "type": "<N extends string, A, D, B>(name: Exclude<N, keyof A>, f: (a: A) => IOEither<D, B>) => <E>(fa: IOEither<E, A>) => IOEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Make sure that a resource is cleaned up in the event of an exception (\\*). The release action is called regardless of
 * whether the body action throws (\\*) or returns.
 *
 * (\\*) i.e. returns a \`Left\`
 *
 * Derivable from \`MonadThrow\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.bracket",
              "kind": "function",
              "name": "bracket",
              "signature": "bracket: <E, A, B>(
    acquire: IOEither<E, A>,
    use: (a: A) => IOEither<E, B>,
    release: (a: A, e: E.Either<E, B>) => IOEither<E, void>
) => IOEither<E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 401,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L401",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L401",
              },
              "type": "<E, A, B>(acquire: IOEither<E, A>, use: (a: A) => IOEither<E, B>, release: (a: A, e: E.Either<E, B>) => IOEither<E, void>) => IOEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => (ma: IOEither<E, A>) => IOEither<E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 224,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L224",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L224",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => (ma: IOEither<E, A>) => IOEither<E, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "ioEither.chainEitherK",
              "kind": "function",
              "name": "chainEitherK",
              "signature": "chainEitherK: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => (ma: IOEither<E, A>) => IOEither<E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 147,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L147",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L147",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => (ma: IOEither<E, A>) => IOEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainEitherK\`](#chainEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "ioEither.chainEitherKW",
              "kind": "function",
              "name": "chainEitherKW",
              "signature": "chainEitherKW: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <D>(ma: IOEither<D, A>) => IOEither<E | D, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 140,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L140",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L140",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <D>(ma: IOEither<D, A>) => IOEither<E | D, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => (ma: IOEither<E, A>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 245,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L245",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L245",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => (ma: IOEither<E, A>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainFirst\`](#chainFirst).
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.8.0
 */",
              ],
              "id": "ioEither.chainFirstW",
              "kind": "function",
              "name": "chainFirstW",
              "signature": "chainFirstW: <D, A, B>(
    f: (a: A) => IOEither<D, B>
) => <E>(ma: IOEither<E, A>) => IOEither<D | E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 233,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L233",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L233",
              },
              "type": "<D, A, B>(f: (a: A) => IOEither<D, B>) => <E>(ma: IOEither<E, A>) => IOEither<D | E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */",
              ],
              "id": "ioEither.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <D, A, B>(
    f: (a: A) => IOEither<D, B>
) => <E>(ma: IOEither<E, A>) => IOEither<D | E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 217,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L217",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L217",
              },
              "type": "<D, A, B>(f: (a: A) => IOEither<D, B>) => <E>(ma: IOEither<E, A>) => IOEither<D | E, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <E, A>(mma: IOEither<E, IOEither<E, A>>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 252,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L252",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L252",
              },
              "type": "<E, A>(mma: IOEither<E, IOEither<E, A>>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <E, A, B>(
    onLeft: (e: E) => I.IO<B>,
    onRight: (a: A) => I.IO<B>
) => (ma: IOEither<E, A>) => I.IO<B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 83,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L83",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L83",
              },
              "type": "<E, A, B>(onLeft: (e: E) => I.IO<B>, onRight: (a: A) => I.IO<B>) => (ma: IOEither<E, A>) => I.IO<B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.fromEither",
              "kind": "function",
              "name": "fromEither",
              "signature": "fromEither: <E, A>(ma: E.Either<E, A>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 54,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L54",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L54",
              },
              "type": "<E, A>(ma: E.Either<E, A>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "ioEither.fromEitherK",
              "kind": "function",
              "name": "fromEitherK",
              "signature": "fromEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => Either<E, B>
) => (...a: A) => IOEither<E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 131,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L131",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L131",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => Either<E, B>) => (...a: A) => IOEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.fromOption",
              "kind": "function",
              "name": "fromOption",
              "signature": "fromOption: <E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L61",
              },
              "type": "<E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.getAltIOValidation",
              "kind": "function",
              "name": "getAltIOValidation",
              "signature": "getAltIOValidation: <E>(SE: Semigroup<E>) => Alt2C<URI, E>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 325,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L325",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L325",
              },
              "type": "<E>(SE: Semigroup<E>) => Alt2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.getApplicativeIOValidation",
              "kind": "function",
              "name": "getApplicativeIOValidation",
              "signature": "getApplicativeIOValidation: <E>(SE: Semigroup<E>) => Applicative2C<URI, E>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 320,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L320",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L320",
              },
              "type": "<E>(SE: Semigroup<E>) => Applicative2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.getApplyMonoid",
              "kind": "function",
              "name": "getApplyMonoid",
              "signature": "getApplyMonoid: <E, A>(M: Monoid<A>) => Monoid<IOEither<E, A>>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 315,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L315",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L315",
              },
              "type": "<E, A>(M: Monoid<A>) => Monoid<IOEither<E, A>>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most \`Left\` value. If both operands are \`Right\`s then the inner values
 * are concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.getApplySemigroup",
              "kind": "function",
              "name": "getApplySemigroup",
              "signature": "getApplySemigroup: <E, A>(S: Semigroup<A>) => Semigroup<IOEither<E, A>>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 310,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L310",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L310",
              },
              "type": "<E, A>(S: Semigroup<A>) => Semigroup<IOEither<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.1.0
 */",
              ],
              "id": "ioEither.getFilterable",
              "kind": "function",
              "name": "getFilterable",
              "signature": "getFilterable: <E>(M: Monoid<E>) => Filterable2C<URI, E>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 337,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L337",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L337",
              },
              "type": "<E>(M: Monoid<E>) => Filterable2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.getIOValidation",
              "kind": "function",
              "name": "getIOValidation",
              "signature": "getIOValidation: <E>(
    SE: Semigroup<E>
) => Monad2C<URI, E> &
    Bifunctor2<URI> &
    Alt2C<URI, E> &
    MonadIO2C<URI, E> &
    MonadThrow2C<URI, E>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 330,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L330",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L330",
              },
              "type": "<E>(SE: Semigroup<E>) => Monad2C<URI, E> & Bifunctor2<URI> & Alt2C<URI, E> & MonadIO2C<URI, E> & MonadThrow2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.getOrElse",
              "kind": "function",
              "name": "getOrElse",
              "signature": "getOrElse: <E, A>(onLeft: (e: E) => I.IO<A>) => (ma: IOEither<E, A>) => I.IO<A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 95,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L95",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L95",
              },
              "type": "<E, A>(onLeft: (e: E) => I.IO<A>) => (ma: IOEither<E, A>) => I.IO<A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`getOrElse\`](#getOrElse).
 *
 * @category destructors
 * @since 2.6.0
 */",
              ],
              "id": "ioEither.getOrElseW",
              "kind": "function",
              "name": "getOrElseW",
              "signature": "getOrElseW: <E, B>(
    onLeft: (e: E) => I.IO<B>
) => <A>(ma: IOEither<E, A>) => I.IO<B | A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 90,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L90",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L90",
              },
              "type": "<E, B>(onLeft: (e: E) => I.IO<B>) => <A>(ma: IOEither<E, A>) => I.IO<B | A>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most non-\`Left\` value. If both operands are \`Right\`s then the inner values are
 * concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <E, A>(S: Semigroup<A>) => Semigroup<IOEither<E, A>>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 302,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L302",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L302",
              },
              "type": "<E, A>(S: Semigroup<A>) => Semigroup<IOEither<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <E = never, A = never>(l: E) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L32",
              },
              "type": "<E = never, A = never>(l: E) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.leftIO",
              "kind": "function",
              "name": "leftIO",
              "signature": "leftIO: <E = never, A = never>(me: I.IO<E>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L47",
              },
              "type": "<E = never, A = never>(me: I.IO<E>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: IOEither<E, A>) => IOEither<E, B>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 155,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L155",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L155",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: IOEither<E, A>) => IOEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: IOEither<E, A>) => IOEither<G, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 169,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L169",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L169",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: IOEither<E, A>) => IOEither<G, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.orElse",
              "kind": "function",
              "name": "orElse",
              "signature": "orElse: <E, A, M>(
    onLeft: (e: E) => IOEither<M, A>
) => (ma: IOEither<E, A>) => IOEither<M, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L100",
              },
              "type": "<E, A, M>(onLeft: (e: E) => IOEither<M, A>) => (ma: IOEither<E, A>) => IOEither<M, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <E = never, A = never>(a: A) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L37",
              },
              "type": "<E = never, A = never>(a: A) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.rightIO",
              "kind": "function",
              "name": "rightIO",
              "signature": "rightIO: <E = never, A = never>(ma: I.IO<A>) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L42",
              },
              "type": "<E = never, A = never>(ma: I.IO<A>) => IOEither<E, A>",
            },
            {
              "docs": [
                "/**
 *
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <E, A>(
    arr: readonly IOEither<E, A>[]
) => IOEither<E, readonly A[]>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 472,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L472",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L472",
              },
              "type": "<E, A>(arr: readonly IOEither<E, A>[]) => IOEither<E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.sequenceSeqArray",
              "kind": "function",
              "name": "sequenceSeqArray",
              "signature": "sequenceSeqArray: <E, A>(
    arr: readonly IOEither<E, A>[]
) => IOEither<E, readonly A[]>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 488,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L488",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L488",
              },
              "type": "<E, A>(arr: readonly IOEither<E, A>[]) => IOEither<E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <E, A>(ma: IOEither<E, A>) => IOEither<A, E>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 105,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L105",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L105",
              },
              "type": "<E, A>(ma: IOEither<E, A>) => IOEither<A, E>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <A, E, B>(
    f: (a: A) => IOEither<E, B>
) => (arr: readonly A[]) => IOEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 465,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L465",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L465",
              },
              "type": "<A, E, B>(f: (a: A) => IOEither<E, B>) => (arr: readonly A[]) => IOEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <A, E, B>(
    f: (index: number, a: A) => IOEither<E, B>
) => (arr: readonly A[]) => IOEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 459,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L459",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L459",
              },
              "type": "<A, E, B>(f: (index: number, a: A) => IOEither<E, B>) => (arr: readonly A[]) => IOEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.traverseSeqArray",
              "kind": "function",
              "name": "traverseSeqArray",
              "signature": "traverseSeqArray: <A, E, B>(
    f: (a: A) => IOEither<E, B>
) => (arr: readonly A[]) => IOEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 482,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L482",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L482",
              },
              "type": "<A, E, B>(f: (a: A) => IOEither<E, B>) => (arr: readonly A[]) => IOEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.traverseSeqArrayWithIndex",
              "kind": "function",
              "name": "traverseSeqArrayWithIndex",
              "signature": "traverseSeqArrayWithIndex: <A, E, B>(
    f: (index: number, a: A) => IOEither<E, B>
) => (arr: readonly A[]) => IOEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 476,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L476",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L476",
              },
              "type": "<A, E, B>(f: (index: number, a: A) => IOEither<E, B>) => (arr: readonly A[]) => IOEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * Constructs a new \`IOEither\` from a function that performs a side effect and might throw
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.tryCatch",
              "kind": "function",
              "name": "tryCatch",
              "signature": "tryCatch: <E, A>(f: Lazy<A>, onError: (reason: unknown) => E) => IOEither<E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 78,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L78",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L78",
              },
              "type": "<E, A>(f: Lazy<A>, onError: (reason: unknown) => E) => IOEither<E, A>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.IOEither",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "IOEither",
              "signature": "interface IOEither<E, A> extends IO<Either<E, A>> {}",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L27",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 289,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L289",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L289",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 375,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L375",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L375",
              },
              "type": "Alt2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Use \`ApplicativePar\` instead
 *
 * @since 2.7.0
 * @category instances
 * @deprecated
 */",
              ],
              "id": "ioEither.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 365,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L365",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L365",
              },
              "type": "Applicative2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.8.4
 */",
              ],
              "id": "ioEither.ApplicativePar",
              "kind": "variable",
              "name": "ApplicativePar",
              "signature": "const ApplicativePar: Applicative2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 352,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L352",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L352",
              },
              "type": "Applicative2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.8.4
 */",
              ],
              "id": "ioEither.ApplicativeSeq",
              "kind": "variable",
              "name": "ApplicativeSeq",
              "signature": "const ApplicativeSeq: Applicative2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 357,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L357",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L357",
              },
              "type": "Applicative2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 347,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L347",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L347",
              },
              "type": "Bifunctor2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: IOEither<never, {}>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 409,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L409",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L409",
              },
              "type": "IOEither<never, {}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.filterOrElse",
              "kind": "variable",
              "name": "filterOrElse",
              "signature": "const filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        ma: IOEither<E, A>
    ) => IOEither<E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        ma: IOEither<E, A>
    ) => IOEither<E, A>;
};",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L123",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (ma: IOEither<E, A>) => IOEither<E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (ma: IOEither<E, A>) => IOEither<E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`filterOrElse\`](#filterOrElse).
 *
 * @since 2.9.0
 */",
              ],
              "id": "ioEither.filterOrElseW",
              "kind": "variable",
              "name": "filterOrElseW",
              "signature": "const filterOrElseW: {
    <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <E1>(
        ma: IOEither<E1, A>
    ) => IOEither<E2 | E1, B>;
    <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <E1>(
        ma: IOEither<E1, A>
    ) => IOEither<E2 | E1, A>;
};",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 111,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L111",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L111",
              },
              "type": "{ <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <E1>(ma: IOEither<E1, A>) => IOEither<E2 | E1, B>; <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <E1>(ma: IOEither<E1, A>) => IOEither<E2 | E1, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadIO
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.fromIO",
              "kind": "variable",
              "name": "fromIO",
              "signature": "const fromIO: <E, A>(fa: I.IO<A>) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 274,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L274",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L274",
              },
              "type": "<E, A>(fa: I.IO<A>) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.fromPredicate",
              "kind": "variable",
              "name": "fromPredicate",
              "signature": "const fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        a: A
    ) => IOEither<E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => IOEither<E, A>;
};",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 68,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L68",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L68",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (a: A) => IOEither<E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => IOEither<E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 342,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L342",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L342",
              },
              "type": "Functor2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.ioEither",
              "kind": "variable",
              "name": "ioEither",
              "signature": "const ioEither: Monad2<'IOEither'> &
    Bifunctor2<'IOEither'> &
    Alt2<'IOEither'> &
    MonadIO2<'IOEither'> &
    MonadThrow2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 390,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L390",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L390",
              },
              "type": "Monad2<"IOEither"> & Bifunctor2<"IOEither"> & Alt2<"IOEither"> & MonadIO2<"IOEither"> & MonadThrow2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 370,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L370",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L370",
              },
              "type": "Monad2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.MonadIO",
              "kind": "variable",
              "name": "MonadIO",
              "signature": "const MonadIO: MonadIO2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 380,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L380",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L380",
              },
              "type": "MonadIO2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.MonadThrow",
              "kind": "variable",
              "name": "MonadThrow",
              "signature": "const MonadThrow: MonadThrow2<'IOEither'>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 385,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L385",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L385",
              },
              "type": "MonadThrow2<"IOEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * Equivalent to [\`right\`](#right).
 *
 * @category Applicative
 * @since 2.8.5
 */",
              ],
              "id": "ioEither.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <E, A>(a: A) => Kind2<F, E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 210,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L210",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L210",
              },
              "type": "<E, A>(a: A) => Kind2<F, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadThrow
 * @since 2.7.0
 */",
              ],
              "id": "ioEither.throwError",
              "kind": "variable",
              "name": "throwError",
              "signature": "const throwError: <E, A>(e: E) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 279,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L279",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L279",
              },
              "type": "<E, A>(e: E) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ioEither.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/IOEither.d.ts",
                "line": 284,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L284",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L284",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * \`IOEither<E, A>\` represents a synchronous computation that either yields a value of type \`A\` or fails yielding an
 * error of type \`E\`. If you want to represent a synchronous computation that never fails, please see \`IO\`.
 *
 * @since 2.0.0
 */",
        ],
        "id": "ioEither",
        "kind": "namespace",
        "name": "ioEither",
        "signature": "module 'lib/IOEither.d.ts' {}",
        "source": {
          "filename": "lib/IOEither.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [
            {
              "constructors": [
                {
                  "docs": [],
                  "id": "ioRef.IORef.0-constructor",
                  "kind": "classConstructor",
                  "name": "constructor",
                  "signature": "constructor(value: {});",
                  "source": {
                    "filename": "lib/IORef.d.ts",
                    "line": 23,
                    "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts#L23",
                    "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts#L23",
                  },
                },
              ],
              "docs": [
                "/**
 * @example
 * import { io } from 'fp-ts/IO'
 * import { newIORef } from 'fp-ts/IORef'
 *
 * assert.strictEqual(io.chain(newIORef(1), ref => io.chain(ref.write(2), () => ref.read))(), 2)
 *
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "ioRef.IORef",
              "isAbstract": false,
              "kind": "class",
              "members": {
                "methods": [
                  {
                    "docs": [
                      "/**
   * @since 2.0.0
   */",
                    ],
                    "id": "ioRef.IORef.modify",
                    "isStatic": false,
                    "kind": "classMethod",
                    "name": "modify",
                    "signature": "modify: (f: (a: A) => A) => IO<void>;",
                    "source": {
                      "filename": "lib/IORef.d.ts",
                      "line": 31,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts#L31",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts#L31",
                    },
                    "type": "(f: (a: A) => A) => IO<void>",
                  },
                  {
                    "docs": [
                      "/**
   * @since 2.0.0
   */",
                    ],
                    "id": "ioRef.IORef.write",
                    "isStatic": false,
                    "kind": "classMethod",
                    "name": "write",
                    "signature": "write: (a: A) => IO<void>;",
                    "source": {
                      "filename": "lib/IORef.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts#L27",
                    },
                    "type": "(a: A) => IO<void>",
                  },
                ],
                "properties": [
                  {
                    "docs": [
                      "/**
   * @since 2.0.0
   */",
                    ],
                    "id": "ioRef.IORef.read",
                    "isStatic": false,
                    "kind": "classProperty",
                    "name": "read",
                    "signature": "readonly read: IO<A>;",
                    "source": {
                      "filename": "lib/IORef.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts#L22",
                    },
                    "type": "IO<A>",
                  },
                ],
              },
              "name": "IORef",
              "signature": "class IORef<A> {}",
              "source": {
                "filename": "lib/IORef.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts#L17",
              },
            },
          ],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ioRef.newIORef",
              "kind": "function",
              "name": "newIORef",
              "signature": "newIORef: <A>(a: A) => IO<IORef<A>>;",
              "source": {
                "filename": "lib/IORef.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts#L37",
              },
              "type": "<A>(a: A) => IO<IORef<A>>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * Mutable references in the \`IO\` monad
 *
 * @since 2.0.0
 */",
        ],
        "id": "ioRef",
        "kind": "namespace",
        "name": "ioRef",
        "signature": "module 'lib/IORef.d.ts' {}",
        "source": {
          "filename": "lib/IORef.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "joinSemilattice.JoinSemilattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "joinSemilattice.JoinSemilattice.join",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "join",
                    "signature": "readonly join: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/JoinSemilattice.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/JoinSemilattice.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/JoinSemilattice.d.ts#L18",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                ],
              },
              "name": "JoinSemilattice",
              "signature": "interface JoinSemilattice<A> {}",
              "source": {
                "filename": "lib/JoinSemilattice.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/JoinSemilattice.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/JoinSemilattice.d.ts#L17",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A join-semilattice (or upper semilattice) is a semilattice whose operation is called \`join\`, and which can be thought
 * of as a least upper bound.
 *
 * A \`JoinSemilattice\` must satisfy the following laws:
 *
 * - Associativity: \`a ∨ (b ∨ c) <-> (a ∨ b) ∨ c\`
 * - Commutativity: \`a ∨ b <-> b ∨ a\`
 * - Idempotency:   \`a ∨ a <-> a\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "joinSemilattice",
        "kind": "namespace",
        "name": "joinSemilattice",
        "signature": "module 'lib/JoinSemilattice.d.ts' {}",
        "source": {
          "filename": "lib/JoinSemilattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/JoinSemilattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/JoinSemilattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "lattice.Lattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Lattice",
              "signature": "interface Lattice<A> extends JoinSemilattice<A>, MeetSemilattice<A> {}",
              "source": {
                "filename": "lib/Lattice.d.ts",
                "line": 15,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Lattice.d.ts#L15",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Lattice.d.ts#L15",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`Lattice\` must satisfy the following in addition to \`JoinSemilattice\` and \`MeetSemilattice\` laws:
 *
 * - Absorbtion law for meet: \`a ∧ (a ∨ b) <-> a\`
 * - Absorbtion law for join: \`a ∨ (a ∧ b) <-> a\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "lattice",
        "kind": "namespace",
        "name": "lattice",
        "signature": "module 'lib/Lattice.d.ts' {}",
        "source": {
          "filename": "lib/Lattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Lattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Lattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * A \`Magma\` is a pair \`(A, concat)\` in which \`A\` is a non-empty set and \`concat\` is a binary operation on \`A\`
 *
 * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.
 *
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "magma.Magma",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "magma.Magma.concat",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "concat",
                    "signature": "readonly concat: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/Magma.d.ts",
                      "line": 10,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Magma.d.ts#L10",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Magma.d.ts#L10",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                ],
              },
              "name": "Magma",
              "signature": "interface Magma<A> {}",
              "source": {
                "filename": "lib/Magma.d.ts",
                "line": 9,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Magma.d.ts#L9",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Magma.d.ts#L9",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`Magma\` is a pair \`(A, concat)\` in which \`A\` is a non-empty set and \`concat\` is a binary operation on \`A\`
 *
 * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.
 *
 * @category type classes
 * @since 2.0.0
 */",
        ],
        "id": "magma",
        "kind": "namespace",
        "name": "magma",
        "signature": "module 'lib/Magma.d.ts' {}",
        "source": {
          "filename": "lib/Magma.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Magma.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Magma.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "map.collect",
              "kind": "function",
              "name": "collect",
              "signature": "collect: <K>(O: Ord<K>) => <A, B>(f: (k: K, a: A) => B) => (m: Map<K, A>) => B[];",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L76",
              },
              "type": "<K>(O: Ord<K>) => <A, B>(f: (k: K, a: A) => B) => (m: Map<K, A>) => B[]",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "map.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <K, A>(fa: Map<K, Option<A>>) => Map<K, A>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 205,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L205",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L205",
              },
              "type": "<K, A>(fa: Map<K, Option<A>>) => Map<K, A>",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "map.deleteAt",
              "kind": "function",
              "name": "deleteAt",
              "signature": "deleteAt: <K>(E: Eq<K>) => (k: K) => <A>(m: Map<K, A>) => Map<K, A>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L106",
              },
              "type": "<K>(E: Eq<K>) => (k: K) => <A>(m: Map<K, A>) => Map<K, A>",
            },
            {
              "docs": [
                "/**
 * Test whether or not a value is a member of a map
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): <K>(m: Map<K, A>) => boolean;
    <K>(a: A, m: Map<K, A>): boolean;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L55",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): <K>(m: Map<K, A>) => boolean; <K>(a: A, m: Map<K, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "map.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <A, B>(f: (a: A) => Option<B>) => <K>(fa: Map<K, A>) => Map<K, B>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 218,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L218",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L218",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => <K>(fa: Map<K, A>) => Map<K, B>",
            },
            {
              "docs": [
                "/**
 * Create a map from a foldable collection of key/value pairs, using the
 * specified \`Magma\` to combine values for duplicate keys.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "map.fromFoldable",
              "kind": "function",
              "name": "fromFoldable",
              "signature": "fromFoldable: {
    <F extends URIS3, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable3<F>): <R, E>(
        fka: Kind3<F, R, E, [K, A]>
    ) => Map<K, A>;
    <F extends URIS2, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable2<F>): <E>(
        fka: Kind2<F, E, [K, A]>
    ) => Map<K, A>;
    <F extends URIS, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable1<F>): (
        fka: Kind<F, [K, A]>
    ) => Map<K, A>;
    <F, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable<F>): (
        fka: HKT<F, [K, A]>
    ) => Map<K, A>;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 185,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L185",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L185",
              },
              "type": "{ <F extends URIS3, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable3<F>): <R, E>(fka: Kind3<F, R, E, [K, A]>) => Map<K, A>; <F extends URIS2, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable2<F>): <E>(fka: Kind2<F, E, [K, A]>) => Map<K, A>; <F extends URIS, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable1<F>): (fka: Kind<F, [K, A]>) => Map<K, A>; <F, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable<F>): (fka: HKT<F, [K, A]>) => Map<K, A>; }",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <K, A>(SK: Eq<K>, SA: Eq<A>) => Eq<Map<K, A>>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 164,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L164",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L164",
              },
              "type": "<K, A>(SK: Eq<K>, SA: Eq<A>) => Eq<Map<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.getFilterableWithIndex",
              "kind": "function",
              "name": "getFilterableWithIndex",
              "signature": "getFilterableWithIndex: <K = never>() => FilterableWithIndex2C<'Map', K, K>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 271,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L271",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L271",
              },
              "type": "<K = never>() => FilterableWithIndex2C<"Map", K, K>",
            },
            {
              "docs": [
                "/**
 * Gets \`Monoid\` instance for Maps given \`Semigroup\` instance for their values
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <K, A>(SK: Eq<K>, SA: Semigroup<A>) => Monoid<Map<K, A>>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L171",
              },
              "type": "<K, A>(SK: Eq<K>, SA: Semigroup<A>) => Monoid<Map<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <K, A>(SK: Show<K>, SA: Show<A>) => Show<Map<K, A>>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L26",
              },
              "type": "<K, A>(SK: Show<K>, SA: Show<A>) => Show<Map<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.getWitherable",
              "kind": "function",
              "name": "getWitherable",
              "signature": "getWitherable: <K>(
    O: Ord<K>
) => Witherable2C<'Map', K> & TraversableWithIndex2C<'Map', K, K>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 276,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L276",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L276",
              },
              "type": "<K>(O: Ord<K>) => Witherable2C<"Map", K> & TraversableWithIndex2C<"Map", K, K>",
            },
            {
              "docs": [
                "/**
 * Insert or replace a key/value pair in a map
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "map.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <K>(E: Eq<K>) => <A>(k: K, a: A) => (m: Map<K, A>) => Map<K, A>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 99,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L99",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L99",
              },
              "type": "<K>(E: Eq<K>) => <A>(k: K, a: A) => (m: Map<K, A>) => Map<K, A>",
            },
            {
              "docs": [
                "/**
 * Test whether or not a map is empty
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.isEmpty",
              "kind": "function",
              "name": "isEmpty",
              "signature": "isEmpty: <K, A>(d: Map<K, A>) => boolean;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L38",
              },
              "type": "<K, A>(d: Map<K, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether or not one \`Map\` contains all of the keys and values contained in another \`Map\`
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.isSubmap",
              "kind": "function",
              "name": "isSubmap",
              "signature": "isSubmap: <K, A>(
    SK: Eq<K>,
    SA: Eq<A>
) => {
    (that: Map<K, A>): (me: Map<K, A>) => boolean;
    (me: Map<K, A>, that: Map<K, A>): boolean;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 149,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L149",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L149",
              },
              "type": "<K, A>(SK: Eq<K>, SA: Eq<A>) => { (that: Map<K, A>): (me: Map<K, A>) => boolean; (me: Map<K, A>, that: Map<K, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * Get a sorted array of the keys contained in a map
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.keys",
              "kind": "function",
              "name": "keys",
              "signature": "keys: <K>(O: Ord<K>) => <A>(m: Map<K, A>) => K[];",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L66",
              },
              "type": "<K>(O: Ord<K>) => <A>(m: Map<K, A>) => K[]",
            },
            {
              "docs": [
                "/**
 * Lookup the value for a key in a \`Map\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.lookup",
              "kind": "function",
              "name": "lookup",
              "signature": "lookup: <K>(E: Eq<K>) => {
    (k: K): <A>(m: Map<K, A>) => Option<A>;
    <A>(k: K, m: Map<K, A>): Option<A>;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 138,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L138",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L138",
              },
              "type": "<K>(E: Eq<K>) => { (k: K): <A>(m: Map<K, A>) => Option<A>; <A>(k: K, m: Map<K, A>): Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Lookup the value for a key in a \`Map\`.
 * If the result is a \`Some\`, the existing key is also returned.
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.lookupWithKey",
              "kind": "function",
              "name": "lookupWithKey",
              "signature": "lookupWithKey: <K>(E: Eq<K>) => {
    (k: K): <A>(m: Map<K, A>) => Option<[K, A]>;
    <A>(k: K, m: Map<K, A>): Option<[K, A]>;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 127,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L127",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L127",
              },
              "type": "<K>(E: Eq<K>) => { (k: K): <A>(m: Map<K, A>) => Option<[K, A]>; <A>(k: K, m: Map<K, A>): Option<[K, A]>; }",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "map.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <K>(fa: Map<K, A>) => Map<K, B>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 226,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L226",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L226",
              },
              "type": "<A, B>(f: (a: A) => B) => <K>(fa: Map<K, A>) => Map<K, B>",
            },
            {
              "docs": [
                "/**
 * @category FunctorWithIndex
 * @since 2.7.1
 */",
              ],
              "id": "map.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <K, A, B>(f: (k: K, a: A) => B) => (fa: Map<K, A>) => Map<K, B>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 231,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L231",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L231",
              },
              "type": "<K, A, B>(f: (k: K, a: A) => B) => (fa: Map<K, A>) => Map<K, B>",
            },
            {
              "docs": [
                "/**
 * Test whether or not a key exists in a map
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.member",
              "kind": "function",
              "name": "member",
              "signature": "member: <K>(E: Eq<K>) => {
    (k: K): <A>(m: Map<K, A>) => boolean;
    <A>(k: K, m: Map<K, A>): boolean;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 44,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L44",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L44",
              },
              "type": "<K>(E: Eq<K>) => { (k: K): <A>(m: Map<K, A>) => boolean; <A>(k: K, m: Map<K, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "map.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <K>(
    E: Eq<K>
) => <A>(k: K, f: (a: A) => A) => (m: Map<K, A>) => Option<Map<K, A>>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 114,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L114",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L114",
              },
              "type": "<K>(E: Eq<K>) => <A>(k: K, f: (a: A) => A) => (m: Map<K, A>) => Option<Map<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "map.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => <K>(fa: Map<K, A>) => Separated<Map<K, B>, Map<K, C>>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 244,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L244",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L244",
              },
              "type": "<A, B, C>(f: (a: A) => Either<B, C>) => <K>(fa: Map<K, A>) => Separated<Map<K, B>, Map<K, C>>",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map, returning the value as well as the subsequent map
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.pop",
              "kind": "function",
              "name": "pop",
              "signature": "pop: <K>(E: Eq<K>) => (k: K) => <A>(m: Map<K, A>) => Option<[A, Map<K, A>]>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 120,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L120",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L120",
              },
              "type": "<K>(E: Eq<K>) => (k: K) => <A>(m: Map<K, A>) => Option<[A, Map<K, A>]>",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "map.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <K, A, B>(fa: Map<K, Either<A, B>>) => Separated<Map<K, A>, Map<K, B>>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 251,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L251",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L251",
              },
              "type": "<K, A, B>(fa: Map<K, Either<A, B>>) => Separated<Map<K, A>, Map<K, B>>",
            },
            {
              "docs": [
                "/**
 * Create a map with one key/value pair
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.singleton",
              "kind": "function",
              "name": "singleton",
              "signature": "singleton: <K, A>(k: K, a: A) => Map<K, A>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 177,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L177",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L177",
              },
              "type": "<K, A>(k: K, a: A) => Map<K, A>",
            },
            {
              "docs": [
                "/**
 * Calculate the number of key/value pairs in a map
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.size",
              "kind": "function",
              "name": "size",
              "signature": "size: <K, A>(d: Map<K, A>) => number;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L32",
              },
              "type": "<K, A>(d: Map<K, A>) => number",
            },
            {
              "docs": [
                "/**
 * Get a sorted of the key/value pairs contained in a map
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.toArray",
              "kind": "function",
              "name": "toArray",
              "signature": "toArray: <K>(O: Ord<K>) => <A>(m: Map<K, A>) => [K, A][];",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L82",
              },
              "type": "<K>(O: Ord<K>) => <A>(m: Map<K, A>) => [K, A][]",
            },
            {
              "docs": [
                "/**
 * Unfolds a map into a list of key/value pairs
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.toUnfoldable",
              "kind": "function",
              "name": "toUnfoldable",
              "signature": "toUnfoldable: {
    <K, F extends URIS>(O: Ord<K>, U: Unfoldable1<F>): <A>(
        d: Map<K, A>
    ) => Kind<F, [K, A]>;
    <K, F>(O: Ord<K>, U: Unfoldable<F>): <A>(d: Map<K, A>) => HKT<F, [K, A]>;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L88",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L88",
              },
              "type": "{ <K, F extends URIS>(O: Ord<K>, U: Unfoldable1<F>): <A>(d: Map<K, A>) => Kind<F, [K, A]>; <K, F>(O: Ord<K>, U: Unfoldable<F>): <A>(d: Map<K, A>) => HKT<F, [K, A]>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "map.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <K>(
    E: Eq<K>
) => <A>(k: K, a: A) => (m: Map<K, A>) => Option<Map<K, A>>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L110",
              },
              "type": "<K>(E: Eq<K>) => <A>(k: K, a: A) => (m: Map<K, A>) => Option<Map<K, A>>",
            },
            {
              "docs": [
                "/**
 * Get a sorted array of the values contained in a map
 *
 * @since 2.0.0
 */",
              ],
              "id": "map.values",
              "kind": "function",
              "name": "values",
              "signature": "values: <A>(O: Ord<A>) => <K>(m: Map<K, A>) => A[];",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 72,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L72",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L72",
              },
              "type": "<A>(O: Ord<A>) => <K>(m: Map<K, A>) => A[]",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 261,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L261",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L261",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "map.Compactable",
              "kind": "variable",
              "name": "Compactable",
              "signature": "const Compactable: Compactable2<'Map'>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 286,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L286",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L286",
              },
              "type": "Compactable2<"Map">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "map.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: Map<never, never>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 159,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L159",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L159",
              },
              "type": "Map<never, never>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "map.filter",
              "kind": "variable",
              "name": "filter",
              "signature": "const filter: {
    <A, B extends A>(refinement: Refinement<A, B>): <K>(fa: Map<K, A>) => Map<K, B>;
    <A>(predicate: Predicate<A>): <K>(fa: Map<K, A>) => Map<K, A>;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 210,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L210",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L210",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <K>(fa: Map<K, A>) => Map<K, B>; <A>(predicate: Predicate<A>): <K>(fa: Map<K, A>) => Map<K, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "map.Filterable",
              "kind": "variable",
              "name": "Filterable",
              "signature": "const Filterable: Filterable2<'Map'>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 291,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L291",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L291",
              },
              "type": "Filterable2<"Map">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "map.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Map'>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 281,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L281",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L281",
              },
              "type": "Functor2<"Map">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.map_",
              "kind": "variable",
              "name": "map_",
              "signature": "const map_: Filterable2<'Map'>;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 296,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L296",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L296",
              },
              "type": "Filterable2<"Map">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "map.partition",
              "kind": "variable",
              "name": "partition",
              "signature": "const partition: {
    <A, B extends A>(refinement: Refinement<A, B>): <K>(
        fa: Map<K, A>
    ) => Separated<Map<K, A>, Map<K, B>>;
    <A>(predicate: Predicate<A>): <K>(
        fa: Map<K, A>
    ) => Separated<Map<K, A>, Map<K, A>>;
};",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 236,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L236",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L236",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <K>(fa: Map<K, A>) => Separated<Map<K, A>, Map<K, B>>; <A>(predicate: Predicate<A>): <K>(fa: Map<K, A>) => Separated<Map<K, A>, Map<K, A>>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "map.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Map.d.ts",
                "line": 256,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L256",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L256",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "map",
        "kind": "namespace",
        "name": "map",
        "signature": "module 'lib/Map.d.ts' {}",
        "source": {
          "filename": "lib/Map.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "meetSemilattice.MeetSemilattice",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "meetSemilattice.MeetSemilattice.meet",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "meet",
                    "signature": "readonly meet: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/MeetSemilattice.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MeetSemilattice.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MeetSemilattice.d.ts#L18",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                ],
              },
              "name": "MeetSemilattice",
              "signature": "interface MeetSemilattice<A> {}",
              "source": {
                "filename": "lib/MeetSemilattice.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MeetSemilattice.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MeetSemilattice.d.ts#L17",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A meet-semilattice (or lower semilattice) is a semilattice whose operation is called \`meet\`, and which can be thought
 * of as a greatest lower bound.
 *
 * A \`MeetSemilattice\` must satisfy the following laws:
 *
 * - Associativity: \`a ∧ (b ∧ c) <-> (a ∧ b) ∧ c\`
 * - Commutativity: \`a ∧ b <-> b ∧ a\`
 * - Idempotency:   \`a ∧ a <-> a\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "meetSemilattice",
        "kind": "namespace",
        "name": "meetSemilattice",
        "signature": "module 'lib/MeetSemilattice.d.ts' {}",
        "source": {
          "filename": "lib/MeetSemilattice.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MeetSemilattice.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MeetSemilattice.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monad.Monad",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Monad",
              "signature": "interface Monad<F> extends Applicative<F>, Chain<F> {}",
              "source": {
                "filename": "lib/Monad.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L31",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monad.Monad1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Monad1",
              "signature": "interface Monad1<F extends URIS> extends Applicative1<F>, Chain1<F> {}",
              "source": {
                "filename": "lib/Monad.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L36",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monad.Monad2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Monad2",
              "signature": "interface Monad2<M extends URIS2> extends Applicative2<M>, Chain2<M> {}",
              "source": {
                "filename": "lib/Monad.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L41",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monad.Monad2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Monad2C",
              "signature": "interface Monad2C<M extends URIS2, L> extends Applicative2C<M, L>, Chain2C<M, L> {}",
              "source": {
                "filename": "lib/Monad.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L46",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monad.Monad3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Monad3",
              "signature": "interface Monad3<M extends URIS3> extends Applicative3<M>, Chain3<M> {}",
              "source": {
                "filename": "lib/Monad.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L51",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "monad.Monad3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Monad3C",
              "signature": "interface Monad3C<M extends URIS3, E> extends Applicative3C<M, E>, Chain3C<M, E> {}",
              "source": {
                "filename": "lib/Monad.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L56",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monad.Monad4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Monad4",
              "signature": "interface Monad4<M extends URIS4> extends Applicative4<M>, Chain4<M> {}",
              "source": {
                "filename": "lib/Monad.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L61",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Monad\` type class combines the operations of the \`Chain\` and
 * \`Applicative\` type classes. Therefore, \`Monad\` instances represent type
 * constructors which support sequential composition, and also lifting of
 * functions of arbitrary arity.
 *
 * Instances must satisfy the following laws in addition to the \`Applicative\` and \`Chain\` laws:
 *
 * 1. Left identity: \`M.chain(M.of(a), f) <-> f(a)\`
 * 2. Right identity: \`M.chain(fa, M.of) <-> fa\`
 *
 * Note. \`Functor\`'s \`map\` can be derived: \`A.map = (fa, f) => A.chain(fa, a => A.of(f(a)))\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "monad",
        "kind": "namespace",
        "name": "monad",
        "signature": "module 'lib/Monad.d.ts' {}",
        "source": {
          "filename": "lib/Monad.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadIO.MonadIO",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadIO.MonadIO.fromIO",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromIO",
                    "signature": "readonly fromIO: <A>(fa: IO<A>) => HKT<M, A>;",
                    "source": {
                      "filename": "lib/MonadIO.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L14",
                    },
                    "type": "<A>(fa: IO<A>) => HKT<M, A>",
                  },
                ],
              },
              "name": "MonadIO",
              "signature": "interface MonadIO<M> extends Monad<M> {}",
              "source": {
                "filename": "lib/MonadIO.d.ts",
                "line": 13,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L13",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L13",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadIO.MonadIO1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadIO.MonadIO1.fromIO",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromIO",
                    "signature": "readonly fromIO: <A>(fa: IO<A>) => Kind<M, A>;",
                    "source": {
                      "filename": "lib/MonadIO.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L21",
                    },
                    "type": "<A>(fa: IO<A>) => Kind<M, A>",
                  },
                ],
              },
              "name": "MonadIO1",
              "signature": "interface MonadIO1<M extends URIS> extends Monad1<M> {}",
              "source": {
                "filename": "lib/MonadIO.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L20",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadIO.MonadIO2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadIO.MonadIO2.fromIO",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromIO",
                    "signature": "readonly fromIO: <E, A>(fa: IO<A>) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/MonadIO.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L28",
                    },
                    "type": "<E, A>(fa: IO<A>) => Kind2<M, E, A>",
                  },
                ],
              },
              "name": "MonadIO2",
              "signature": "interface MonadIO2<M extends URIS2> extends Monad2<M> {}",
              "source": {
                "filename": "lib/MonadIO.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L27",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadIO.MonadIO2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadIO.MonadIO2C.fromIO",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromIO",
                    "signature": "readonly fromIO: <A>(fa: IO<A>) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/MonadIO.d.ts",
                      "line": 35,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L35",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L35",
                    },
                    "type": "<A>(fa: IO<A>) => Kind2<M, E, A>",
                  },
                ],
              },
              "name": "MonadIO2C",
              "signature": "interface MonadIO2C<M extends URIS2, E> extends Monad2C<M, E> {}",
              "source": {
                "filename": "lib/MonadIO.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L34",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadIO.MonadIO3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadIO.MonadIO3.fromIO",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromIO",
                    "signature": "readonly fromIO: <R, E, A>(fa: IO<A>) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadIO.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L42",
                    },
                    "type": "<R, E, A>(fa: IO<A>) => Kind3<M, R, E, A>",
                  },
                ],
              },
              "name": "MonadIO3",
              "signature": "interface MonadIO3<M extends URIS3> extends Monad3<M> {}",
              "source": {
                "filename": "lib/MonadIO.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L41",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "monadIO.MonadIO3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadIO.MonadIO3C.fromIO",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromIO",
                    "signature": "readonly fromIO: <R, A>(fa: IO<A>) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadIO.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L49",
                    },
                    "type": "<R, A>(fa: IO<A>) => Kind3<M, R, E, A>",
                  },
                ],
              },
              "name": "MonadIO3C",
              "signature": "interface MonadIO3C<M extends URIS3, E> extends Monad3C<M, E> {}",
              "source": {
                "filename": "lib/MonadIO.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L48",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.4.4
 */",
              ],
              "id": "monadIO.MonadIO4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadIO.MonadIO4.fromIO",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromIO",
                    "signature": "readonly fromIO: <S, R, E, A>(fa: IO<A>) => Kind4<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadIO.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L56",
                    },
                    "type": "<S, R, E, A>(fa: IO<A>) => Kind4<M, S, R, E, A>",
                  },
                ],
              },
              "name": "MonadIO4",
              "signature": "interface MonadIO4<M extends URIS4> extends Monad4<M> {}",
              "source": {
                "filename": "lib/MonadIO.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L55",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * Lift a computation from the \`IO\` monad
 *
 * @since 2.0.0
 */",
        ],
        "id": "monadIO",
        "kind": "namespace",
        "name": "monadIO",
        "signature": "module 'lib/MonadIO.d.ts' {}",
        "source": {
          "filename": "lib/MonadIO.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadTask.MonadTask",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadTask.MonadTask.fromTask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromTask",
                    "signature": "readonly fromTask: <A>(fa: Task<A>) => HKT<M, A>;",
                    "source": {
                      "filename": "lib/MonadTask.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L14",
                    },
                    "type": "<A>(fa: Task<A>) => HKT<M, A>",
                  },
                ],
              },
              "name": "MonadTask",
              "signature": "interface MonadTask<M> extends MonadIO<M> {}",
              "source": {
                "filename": "lib/MonadTask.d.ts",
                "line": 13,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L13",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L13",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadTask.MonadTask1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadTask.MonadTask1.fromTask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromTask",
                    "signature": "readonly fromTask: <A>(fa: Task<A>) => Kind<M, A>;",
                    "source": {
                      "filename": "lib/MonadTask.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L21",
                    },
                    "type": "<A>(fa: Task<A>) => Kind<M, A>",
                  },
                ],
              },
              "name": "MonadTask1",
              "signature": "interface MonadTask1<M extends URIS> extends MonadIO1<M> {}",
              "source": {
                "filename": "lib/MonadTask.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L20",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadTask.MonadTask2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadTask.MonadTask2.fromTask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromTask",
                    "signature": "readonly fromTask: <E, A>(fa: Task<A>) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/MonadTask.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L28",
                    },
                    "type": "<E, A>(fa: Task<A>) => Kind2<M, E, A>",
                  },
                ],
              },
              "name": "MonadTask2",
              "signature": "interface MonadTask2<M extends URIS2> extends MonadIO2<M> {}",
              "source": {
                "filename": "lib/MonadTask.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L27",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadTask.MonadTask2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadTask.MonadTask2C.fromTask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromTask",
                    "signature": "readonly fromTask: <A>(fa: Task<A>) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/MonadTask.d.ts",
                      "line": 35,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L35",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L35",
                    },
                    "type": "<A>(fa: Task<A>) => Kind2<M, E, A>",
                  },
                ],
              },
              "name": "MonadTask2C",
              "signature": "interface MonadTask2C<M extends URIS2, E> extends MonadIO2C<M, E> {}",
              "source": {
                "filename": "lib/MonadTask.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L34",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadTask.MonadTask3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadTask.MonadTask3.fromTask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromTask",
                    "signature": "readonly fromTask: <R, E, A>(fa: Task<A>) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadTask.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L42",
                    },
                    "type": "<R, E, A>(fa: Task<A>) => Kind3<M, R, E, A>",
                  },
                ],
              },
              "name": "MonadTask3",
              "signature": "interface MonadTask3<M extends URIS3> extends MonadIO3<M> {}",
              "source": {
                "filename": "lib/MonadTask.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L41",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "monadTask.MonadTask3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadTask.MonadTask3C.fromTask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromTask",
                    "signature": "readonly fromTask: <R, A>(fa: Task<A>) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadTask.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L49",
                    },
                    "type": "<R, A>(fa: Task<A>) => Kind3<M, R, E, A>",
                  },
                ],
              },
              "name": "MonadTask3C",
              "signature": "interface MonadTask3C<M extends URIS3, E> extends MonadIO3C<M, E> {}",
              "source": {
                "filename": "lib/MonadTask.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L48",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.4.4
 */",
              ],
              "id": "monadTask.MonadTask4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadTask.MonadTask4.fromTask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromTask",
                    "signature": "readonly fromTask: <S, R, E, A>(fa: Task<A>) => Kind4<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadTask.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L56",
                    },
                    "type": "<S, R, E, A>(fa: Task<A>) => Kind4<M, S, R, E, A>",
                  },
                ],
              },
              "name": "MonadTask4",
              "signature": "interface MonadTask4<M extends URIS4> extends MonadIO4<M> {}",
              "source": {
                "filename": "lib/MonadTask.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L55",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * Lift a computation from the \`Task\` monad
 *
 * @since 2.0.0
 */",
        ],
        "id": "monadTask",
        "kind": "namespace",
        "name": "monadTask",
        "signature": "module 'lib/MonadTask.d.ts' {}",
        "source": {
          "filename": "lib/MonadTask.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadThrow.MonadThrow",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadThrow.MonadThrow.throwError",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "throwError",
                    "signature": "readonly throwError: <E, A>(e: E) => HKT<M, A>;",
                    "source": {
                      "filename": "lib/MonadThrow.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L18",
                    },
                    "type": "<E, A>(e: E) => HKT<M, A>",
                  },
                ],
              },
              "name": "MonadThrow",
              "signature": "interface MonadThrow<M> extends Monad<M> {}",
              "source": {
                "filename": "lib/MonadThrow.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadThrow.MonadThrow1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadThrow.MonadThrow1.throwError",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "throwError",
                    "signature": "readonly throwError: <E, A>(e: E) => Kind<M, A>;",
                    "source": {
                      "filename": "lib/MonadThrow.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L25",
                    },
                    "type": "<E, A>(e: E) => Kind<M, A>",
                  },
                ],
              },
              "name": "MonadThrow1",
              "signature": "interface MonadThrow1<M extends URIS> extends Monad1<M> {}",
              "source": {
                "filename": "lib/MonadThrow.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L24",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadThrow.MonadThrow2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadThrow.MonadThrow2.throwError",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "throwError",
                    "signature": "readonly throwError: <E, A>(e: E) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/MonadThrow.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L32",
                    },
                    "type": "<E, A>(e: E) => Kind2<M, E, A>",
                  },
                ],
              },
              "name": "MonadThrow2",
              "signature": "interface MonadThrow2<M extends URIS2> extends Monad2<M> {}",
              "source": {
                "filename": "lib/MonadThrow.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L31",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadThrow.MonadThrow2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadThrow.MonadThrow2C.throwError",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "throwError",
                    "signature": "readonly throwError: <A>(e: E) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/MonadThrow.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L39",
                    },
                    "type": "<A>(e: E) => Kind2<M, E, A>",
                  },
                ],
              },
              "name": "MonadThrow2C",
              "signature": "interface MonadThrow2C<M extends URIS2, E> extends Monad2C<M, E> {}",
              "source": {
                "filename": "lib/MonadThrow.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadThrow.MonadThrow3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadThrow.MonadThrow3.throwError",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "throwError",
                    "signature": "readonly throwError: <R, E, A>(e: E) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadThrow.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L46",
                    },
                    "type": "<R, E, A>(e: E) => Kind3<M, R, E, A>",
                  },
                ],
              },
              "name": "MonadThrow3",
              "signature": "interface MonadThrow3<M extends URIS3> extends Monad3<M> {}",
              "source": {
                "filename": "lib/MonadThrow.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L45",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "monadThrow.MonadThrow3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadThrow.MonadThrow3C.throwError",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "throwError",
                    "signature": "readonly throwError: <R, A>(e: E) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadThrow.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L53",
                    },
                    "type": "<R, A>(e: E) => Kind3<M, R, E, A>",
                  },
                ],
              },
              "name": "MonadThrow3C",
              "signature": "interface MonadThrow3C<M extends URIS3, E> extends Monad3C<M, E> {}",
              "source": {
                "filename": "lib/MonadThrow.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L52",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monadThrow.MonadThrow4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monadThrow.MonadThrow4.throwError",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "throwError",
                    "signature": "readonly throwError: <S, R, E, A>(e: E) => Kind4<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/MonadThrow.d.ts",
                      "line": 60,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L60",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L60",
                    },
                    "type": "<S, R, E, A>(e: E) => Kind4<M, S, R, E, A>",
                  },
                ],
              },
              "name": "MonadThrow4",
              "signature": "interface MonadThrow4<M extends URIS4> extends Monad4<M> {}",
              "source": {
                "filename": "lib/MonadThrow.d.ts",
                "line": 59,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L59",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L59",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`MonadThrow\` type class represents those monads which support errors via
 * \`throwError\`, where \`throwError(e)\` halts, yielding the error \`e\`.
 *
 * Laws:
 *
 * - Left zero: \`M.chain(M.throwError(e), f) = M.throwError(e)\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "monadThrow",
        "kind": "namespace",
        "name": "monadThrow",
        "signature": "module 'lib/MonadThrow.d.ts' {}",
        "source": {
          "filename": "lib/MonadThrow.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Given a sequence of \`as\`, concat them and return the total.
 *
 * If \`as\` is empty, return the monoid \`empty\` value.
 *
 * @example
 * import * as M from 'fp-ts/Monoid'
 *
 * assert.deepStrictEqual(M.fold(M.monoidSum)([1, 2, 3]), 6)
 * assert.deepStrictEqual(M.fold(M.monoidSum)([]), 0)
 *
 * @since 2.0.0
 */",
              ],
              "id": "monoid.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <A>(M: Monoid<A>) => (as: ReadonlyArray<A>) => A;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 137,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L137",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L137",
              },
              "type": "<A>(M: Monoid<A>) => (as: ReadonlyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * The dual of a \`Monoid\`, obtained by swapping the arguments of \`concat\`.
 *
 * @example
 * import { getDualMonoid, monoidString } from 'fp-ts/Monoid'
 *
 * assert.deepStrictEqual(getDualMonoid(monoidString).concat('a', 'b'), 'ba')
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "monoid.getDualMonoid",
              "kind": "function",
              "name": "getDualMonoid",
              "signature": "getDualMonoid: <A>(M: Monoid<A>) => Monoid<A>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L171",
              },
              "type": "<A>(M: Monoid<A>) => Monoid<A>",
            },
            {
              "docs": [
                "/**
 * Endomorphism form a monoid where the \`empty\` value is the identity function.
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.getEndomorphismMonoid",
              "kind": "function",
              "name": "getEndomorphismMonoid",
              "signature": "getEndomorphismMonoid: <A = never>() => Monoid<Endomorphism<A>>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 202,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L202",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L202",
              },
              "type": "<A = never>() => Monoid<Endomorphism<A>>",
            },
            {
              "docs": [
                "/**
 * Unary functions form a monoid as long as you can provide a monoid for the codomain.
 *
 * @example
 * import { Predicate } from 'fp-ts/function'
 * import * as M from 'fp-ts/Monoid'
 *
 * const f: Predicate<number> = (n) => n <= 2
 * const g: Predicate<number> = (n) => n >= 0
 *
 * const M1 = M.getFunctionMonoid(M.monoidAll)<number>()
 *
 * assert.deepStrictEqual(M1.concat(f, g)(1), true)
 * assert.deepStrictEqual(M1.concat(f, g)(3), false)
 *
 * const M2 = M.getFunctionMonoid(M.monoidAny)<number>()
 *
 * assert.deepStrictEqual(M2.concat(f, g)(1), true)
 * assert.deepStrictEqual(M2.concat(f, g)(3), true)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.getFunctionMonoid",
              "kind": "function",
              "name": "getFunctionMonoid",
              "signature": "getFunctionMonoid: <M>(M: Monoid<M>) => <A = never>() => Monoid<(a: A) => M>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 195,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L195",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L195",
              },
              "type": "<M>(M: Monoid<M>) => <A = never>() => Monoid<(a: A) => M>",
            },
            {
              "docs": [
                "/**
 * Get a monoid where \`concat\` will return the maximum, based on the provided bounded order.
 *
 * The \`empty\` value is the \`bottom\` value.
 *
 * @example
 * import * as B from 'fp-ts/Bounded'
 * import * as M from 'fp-ts/Monoid'
 *
 * const M1 = M.getJoinMonoid(B.boundedNumber)
 *
 * assert.deepStrictEqual(M1.concat(1, 2), 2)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.getJoinMonoid",
              "kind": "function",
              "name": "getJoinMonoid",
              "signature": "getJoinMonoid: <A>(B: Bounded<A>) => Monoid<A>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L262",
              },
              "type": "<A>(B: Bounded<A>) => Monoid<A>",
            },
            {
              "docs": [
                "/**
 * Get a monoid where \`concat\` will return the minimum, based on the provided bounded order.
 *
 * The \`empty\` value is the \`top\` value.
 *
 * @example
 * import * as B from 'fp-ts/Bounded'
 * import * as M from 'fp-ts/Monoid'
 *
 * const M1 = M.getMeetMonoid(B.boundedNumber)
 *
 * assert.deepStrictEqual(M1.concat(1, 2), 1)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.getMeetMonoid",
              "kind": "function",
              "name": "getMeetMonoid",
              "signature": "getMeetMonoid: <A>(B: Bounded<A>) => Monoid<A>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 245,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L245",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L245",
              },
              "type": "<A>(B: Bounded<A>) => Monoid<A>",
            },
            {
              "docs": [
                "/**
 * Given a struct of monoids returns a monoid for the struct.
 *
 * @example
 * import * as M from 'fp-ts/Monoid'
 *
 * interface Point {
 *   readonly x: number
 *   readonly y: number
 * }
 *
 * const monoidPoint = M.getStructMonoid<Point>({
 *   x: M.monoidSum,
 *   y: M.monoidSum
 * })
 *
 * assert.deepStrictEqual(monoidPoint.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.getStructMonoid",
              "kind": "function",
              "name": "getStructMonoid",
              "signature": "getStructMonoid: <O extends Readonly<Record<string, any>>>(monoids: {
    [K in keyof O]: Monoid<O[K]>;
}) => Monoid<O>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 224,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L224",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L224",
              },
              "type": "<O extends Readonly<Record<string, any>>>(monoids: { [K in keyof O]: Monoid<O[K]>; }) => Monoid<O>",
            },
            {
              "docs": [
                "/**
 * Given a tuple of monoids returns a monoid for the tuple
 *
 * @example
 * import { getTupleMonoid, monoidString, monoidSum, monoidAll } from 'fp-ts/Monoid'
 *
 * const M1 = getTupleMonoid(monoidString, monoidSum)
 * assert.deepStrictEqual(M1.concat(['a', 1], ['b', 2]), ['ab', 3])
 *
 * const M2 = getTupleMonoid(monoidString, monoidSum, monoidAll)
 * assert.deepStrictEqual(M2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.getTupleMonoid",
              "kind": "function",
              "name": "getTupleMonoid",
              "signature": "getTupleMonoid: <T extends readonly Monoid<any>[]>(
    ...monoids: T
) => Monoid<{ [K in keyof T]: T[K] extends S.Semigroup<infer A> ? A : never }>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L153",
              },
              "type": "<T extends readonly Monoid<any>[]>(...monoids: T) => Monoid<{ [K in keyof T]: T[K] extends S.Semigroup<infer A> ? A : never; }>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "monoid.Monoid",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "monoid.Monoid.empty",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "empty",
                    "signature": "readonly empty: A;",
                    "source": {
                      "filename": "lib/Monoid.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L44",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Monoid",
              "signature": "interface Monoid<A> extends S.Semigroup<A> {}",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 43,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L43",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L43",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * \`boolean\` monoid under conjunction.
 *
 * The \`empty\` value is \`true\`.
 *
 * @example
 * import * as M from 'fp-ts/Monoid'
 *
 * assert.deepStrictEqual(M.monoidAll.concat(true, true), true)
 * assert.deepStrictEqual(M.monoidAll.concat(true, false), false)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.monoidAll",
              "kind": "variable",
              "name": "monoidAll",
              "signature": "const monoidAll: Monoid<boolean>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L60",
              },
              "type": "Monoid<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`boolean\` monoid under disjunction.
 *
 * The \`empty\` value is \`false\`.
 *
 * @example
 * import * as M from 'fp-ts/Monoid'
 *
 * assert.deepStrictEqual(M.monoidAny.concat(true, true), true)
 * assert.deepStrictEqual(M.monoidAny.concat(true, false), true)
 * assert.deepStrictEqual(M.monoidAny.concat(false, false), false)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.monoidAny",
              "kind": "variable",
              "name": "monoidAny",
              "signature": "const monoidAny: Monoid<boolean>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L76",
              },
              "type": "Monoid<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`number\` monoid under multiplication.
 *
 * The \`empty\` value is \`1\`.
 *
 * @example
 * import * as M from 'fp-ts/Monoid'
 *
 * assert.deepStrictEqual(M.monoidProduct.concat(2, 3), 6)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.monoidProduct",
              "kind": "variable",
              "name": "monoidProduct",
              "signature": "const monoidProduct: Monoid<number>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 104,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L104",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L104",
              },
              "type": "Monoid<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`string\` monoid under concatenation.
 *
 * The \`empty\` value is \`''\`.
 *
 * @example
 * import * as M from 'fp-ts/Monoid'
 *
 * assert.deepStrictEqual(M.monoidString.concat('a', 'b'), 'ab')
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.monoidString",
              "kind": "variable",
              "name": "monoidString",
              "signature": "const monoidString: Monoid<string>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L118",
              },
              "type": "Monoid<string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`number\` monoid under addition.
 *
 * The \`empty\` value is \`0\`.
 *
 * @example
 * import * as M from 'fp-ts/Monoid'
 *
 * assert.deepStrictEqual(M.monoidSum.concat(2, 3), 5)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.monoidSum",
              "kind": "variable",
              "name": "monoidSum",
              "signature": "const monoidSum: Monoid<number>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 90,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L90",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L90",
              },
              "type": "Monoid<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "monoid.monoidVoid",
              "kind": "variable",
              "name": "monoidVoid",
              "signature": "const monoidVoid: Monoid<void>;",
              "source": {
                "filename": "lib/Monoid.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L123",
              },
              "type": "Monoid<void>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * \`Monoid\` extends the power of \`Semigroup\` by providing an additional \`empty\` value.
 *
 * \`\`\`ts
 * interface Semigroup<A> {
 *   readonly concat: (x: A, y: A) => A
 * }
 *
 * interface Monoid<A> extends Semigroup<A> {
 *   readonly empty: A
 * }
 * \`\`\`
 *
 * This \`empty\` value should be an identity for the \`concat\` operation, which means the following equalities hold for any choice of \`x\`.
 *
 * \`\`\`ts
 * concat(x, empty) = concat(empty, x) = x
 * \`\`\`
 *
 * Many types that form a \`Semigroup\` also form a \`Monoid\`, such as \`number\`s (with \`0\`) and \`string\`s (with \`''\`).
 *
 * \`\`\`ts
 * import { Monoid } from 'fp-ts/Monoid'
 *
 * const monoidString: Monoid<string> = {
 *   concat: (x, y) => x + y,
 *   empty: ''
 * }
 * \`\`\`
 *
 * *Adapted from https://typelevel.org/cats*
 *
 * @since 2.0.0
 */",
        ],
        "id": "monoid",
        "kind": "namespace",
        "name": "monoid",
        "signature": "module 'lib/Monoid.d.ts' {}",
        "source": {
          "filename": "lib/Monoid.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.6.2
 */",
              ],
              "id": "nonEmptyArray.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <A>(
    that: Lazy<NonEmptyArray<A>>
) => (fa: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 326,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L326",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L326",
              },
              "type": "<A>(that: Lazy<NonEmptyArray<A>>) => (fa: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "nonEmptyArray.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <B>(
    that: Lazy<NonEmptyArray<B>>
) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<B | A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 318,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L318",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L318",
              },
              "type": "<B>(that: Lazy<NonEmptyArray<B>>) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(
    fa: NonEmptyArray<A>
) => <B>(fab: NonEmptyArray<(a: A) => B>) => NonEmptyArray<B>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 333,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L333",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L333",
              },
              "type": "<A>(fa: NonEmptyArray<A>) => <B>(fab: NonEmptyArray<(a: A) => B>) => NonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(
    fb: NonEmptyArray<B>
) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 342,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L342",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L342",
              },
              "type": "<B>(fb: NonEmptyArray<B>) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "nonEmptyArray.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: NonEmptyArray<B>
) => (
    fa: NonEmptyArray<A>
) => NonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 544,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L544",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L544",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: NonEmptyArray<B>) => (fa: NonEmptyArray<A>) => NonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(
    fb: NonEmptyArray<B>
) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<B>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 351,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L351",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L351",
              },
              "type": "<B>(fb: NonEmptyArray<B>) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "nonEmptyArray.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => NonEmptyArray<B>
) => (
    fa: NonEmptyArray<A>
) => NonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 531,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L531",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L531",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => NonEmptyArray<B>) => (fa: NonEmptyArray<A>) => NonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "nonEmptyArray.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<{ [K in N]: A }>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 519,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L519",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L519",
              },
              "type": "<N extends string>(name: N) => <A>(fa: NonEmptyArray<A>) => NonEmptyArray<{ [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(
    f: (a: A) => NonEmptyArray<B>
) => (ma: NonEmptyArray<A>) => NonEmptyArray<B>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 358,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L358",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L358",
              },
              "type": "<A, B>(f: (a: A) => NonEmptyArray<B>) => (ma: NonEmptyArray<A>) => NonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(
    f: (a: A) => NonEmptyArray<B>
) => (ma: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 368,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L368",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L368",
              },
              "type": "<A, B>(f: (a: A) => NonEmptyArray<B>) => (ma: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.2.0
 */",
              ],
              "id": "nonEmptyArray.concat",
              "kind": "function",
              "name": "concat",
              "signature": "concat: {
    <A>(fx: Array<A>, fy: NonEmptyArray<A>): NonEmptyArray<A>;
    <A>(fx: NonEmptyArray<A>, fy: A[]): NonEmptyArray<A>;
};",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 249,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L249",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L249",
              },
              "type": "{ <A>(fx: Array<A>, fy: NonEmptyArray<A>): NonEmptyArray<A>; <A>(fx: NonEmptyArray<A>, fy: A[]): NonEmptyArray<A>; }",
            },
            {
              "docs": [
                "/**
 * Append an element to the front of an array, creating a new non empty array
 *
 * @example
 * import { cons } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(cons(1, [2, 3, 4]), [1, 2, 3, 4])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.cons",
              "kind": "function",
              "name": "cons",
              "signature": "cons: <A>(head: A, tail: A[]) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L40",
              },
              "type": "<A>(head: A, tail: A[]) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.copy",
              "kind": "function",
              "name": "copy",
              "signature": "copy: <A>(nea: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 223,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L223",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L223",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <A>(ma: NonEmptyArray<A>) => NonEmptyArray<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 375,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L375",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L375",
              },
              "type": "<A>(ma: NonEmptyArray<A>) => NonEmptyArray<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <A, B>(
    f: (fa: NonEmptyArray<A>) => B
) => (ma: NonEmptyArray<A>) => NonEmptyArray<B>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 380,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L380",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L380",
              },
              "type": "<A, B>(f: (fa: NonEmptyArray<A>) => B) => (ma: NonEmptyArray<A>) => NonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.filter",
              "kind": "function",
              "name": "filter",
              "signature": "filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        nea: NonEmptyArray<A>
    ) => Option<NonEmptyArray<A>>;
    <A>(predicate: Predicate<A>): (
        nea: NonEmptyArray<A>
    ) => Option<NonEmptyArray<A>>;
};",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 228,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L228",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L228",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>; <A>(predicate: Predicate<A>): (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.filterWithIndex",
              "kind": "function",
              "name": "filterWithIndex",
              "signature": "filterWithIndex: <A>(
    predicate: (i: number, a: A) => boolean
) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 235,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L235",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L235",
              },
              "type": "<A>(predicate: (i: number, a: A) => boolean) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: NonEmptyArray<NonEmptyArray<A>>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 387,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L387",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L387",
              },
              "type": "<A>(mma: NonEmptyArray<NonEmptyArray<A>>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "nonEmptyArray.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <A>(S: Semigroup<A>) => (fa: NonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 254,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L254",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L254",
              },
              "type": "<A>(S: Semigroup<A>) => (fa: NonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <S>(
    S: Semigroup<S>
) => <A>(f: (a: A) => S) => (fa: NonEmptyArray<A>) => S;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 311,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L311",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L311",
              },
              "type": "<S>(S: Semigroup<S>) => <A>(f: (a: A) => S) => (fa: NonEmptyArray<A>) => S",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.foldMapWithIndex",
              "kind": "function",
              "name": "foldMapWithIndex",
              "signature": "foldMapWithIndex: <S>(
    S: Semigroup<S>
) => <A>(f: (i: number, a: A) => S) => (fa: NonEmptyArray<A>) => S;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 304,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L304",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L304",
              },
              "type": "<S>(S: Semigroup<S>) => <A>(f: (i: number, a: A) => S) => (fa: NonEmptyArray<A>) => S",
            },
            {
              "docs": [
                "/**
 * Builds a \`NonEmptyArray\` from an \`Array\` returning \`none\` if \`as\` is an empty array
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.fromArray",
              "kind": "function",
              "name": "fromArray",
              "signature": "fromArray: <A>(as: A[]) => Option<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 59,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L59",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L59",
              },
              "type": "<A>(as: A[]) => Option<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @example
 * import { getEq, cons } from 'fp-ts/NonEmptyArray'
 * import { eqNumber } from 'fp-ts/Eq'
 *
 * const E = getEq(eqNumber)
 * assert.strictEqual(E.equals(cons(1, [2]), [1, 2]), true)
 * assert.strictEqual(E.equals(cons(1, [2]), [1, 3]), false)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 129,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L129",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L129",
              },
              "type": "<A>(E: Eq<A>) => Eq<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Builds a \`Semigroup\` instance for \`NonEmptyArray\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <A = never>() => Semigroup<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 116,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L116",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L116",
              },
              "type": "<A = never>() => Semigroup<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L88",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L88",
              },
              "type": "<A>(S: Show<A>) => Show<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Group equal, consecutive elements of an array into non empty arrays.
 *
 * @example
 * import { cons, group } from 'fp-ts/NonEmptyArray'
 * import { ordNumber } from 'fp-ts/Ord'
 *
 * assert.deepStrictEqual(group(ordNumber)([1, 2, 1, 1]), [
 *   cons(1, []),
 *   cons(2, []),
 *   cons(1, [1])
 * ])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.group",
              "kind": "function",
              "name": "group",
              "signature": "group: <B>(E: Eq<B>) => {
    <A extends B>(as: NonEmptyArray<A>): NonEmptyArray<NonEmptyArray<A>>;
    <A extends B>(as: A[]): NonEmptyArray<A>[];
};",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 146,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L146",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L146",
              },
              "type": "<B>(E: Eq<B>) => { <A extends B>(as: NonEmptyArray<A>): NonEmptyArray<NonEmptyArray<A>>; <A extends B>(as: A[]): NonEmptyArray<A>[]; }",
            },
            {
              "docs": [
                "/**
 * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a \`string\`-returning
 * function on each element, and grouping the results according to values returned
 *
 * @example
 * import { cons, groupBy } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['foo', 'bar', 'foobar']), {
 *   '3': cons('foo', ['bar']),
 *   '6': cons('foobar', [])
 * })
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.groupBy",
              "kind": "function",
              "name": "groupBy",
              "signature": "groupBy: <A>(
    f: (a: A) => string
) => (as: A[]) => Record<string, NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 185,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L185",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L185",
              },
              "type": "<A>(f: (a: A) => string) => (as: A[]) => Record<string, NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Sort and then group the elements of an array into non empty arrays.
 *
 * @example
 * import { cons, groupSort } from 'fp-ts/NonEmptyArray'
 * import { ordNumber } from 'fp-ts/Ord'
 *
 * assert.deepStrictEqual(groupSort(ordNumber)([1, 2, 1, 1]), [cons(1, [1, 1]), cons(2, [])])
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.groupSort",
              "kind": "function",
              "name": "groupSort",
              "signature": "groupSort: <B>(O: Ord<B>) => {
    <A extends B>(as: NonEmptyArray<A>): NonEmptyArray<NonEmptyArray<A>>;
    <A extends B>(as: A[]): NonEmptyArray<A>[];
};",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 164,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L164",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L164",
              },
              "type": "<B>(O: Ord<B>) => { <A extends B>(as: NonEmptyArray<A>): NonEmptyArray<NonEmptyArray<A>>; <A extends B>(as: A[]): NonEmptyArray<A>[]; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.head",
              "kind": "function",
              "name": "head",
              "signature": "head: <A>(nea: NonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 92,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L92",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L92",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * Get all but the last element of a non empty array, creating a new array.
 *
 * @example
 * import { init } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])
 * assert.deepStrictEqual(init([1]), [])
 *
 * @since 2.2.0
 */",
              ],
              "id": "nonEmptyArray.init",
              "kind": "function",
              "name": "init",
              "signature": "init: <A>(nea: NonEmptyArray<A>) => A[];",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 201,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L201",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L201",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => A[]",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <A>(
    i: number,
    a: A
) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 210,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L210",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L210",
              },
              "type": "<A>(i: number, a: A) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Places an element in between members of an array
 *
 * @example
 * import { cons, intersperse } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(intersperse(9)(cons(1, [2, 3, 4])), cons(1, [9, 2, 9, 3, 9, 4]))
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "nonEmptyArray.intersperse",
              "kind": "function",
              "name": "intersperse",
              "signature": "intersperse: <A>(e: A) => (as: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 299,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L299",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L299",
              },
              "type": "<A>(e: A) => (as: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.last",
              "kind": "function",
              "name": "last",
              "signature": "last: <A>(nea: NonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 189,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L189",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L189",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: NonEmptyArray<A>) => NonEmptyArray<B>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 395,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L395",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L395",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: NonEmptyArray<A>) => NonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @category FunctorWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <A, B>(
    f: (i: number, a: A) => B
) => (fa: NonEmptyArray<A>) => NonEmptyArray<B>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 400,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L400",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L400",
              },
              "type": "<A, B>(f: (i: number, a: A) => B) => (fa: NonEmptyArray<A>) => NonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.max",
              "kind": "function",
              "name": "max",
              "signature": "max: <A>(ord: Ord<A>) => (nea: NonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 109,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L109",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L109",
              },
              "type": "<A>(ord: Ord<A>) => (nea: NonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.min",
              "kind": "function",
              "name": "min",
              "signature": "min: <A>(ord: Ord<A>) => (nea: NonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 105,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L105",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L105",
              },
              "type": "<A>(ord: Ord<A>) => (nea: NonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <A>(
    i: number,
    f: (a: A) => A
) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 218,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L218",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L218",
              },
              "type": "<A>(i: number, f: (a: A) => A) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Prepend an element to every member of an array
 *
 * @example
 * import { cons, prependToAll } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(prependToAll(9)(cons(1, [2, 3, 4])), cons(9, [1, 9, 2, 9, 3, 9, 4]))
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "nonEmptyArray.prependToAll",
              "kind": "function",
              "name": "prependToAll",
              "signature": "prependToAll: <A>(e: A) => (xs: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 287,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L287",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L287",
              },
              "type": "<A>(e: A) => (xs: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: NonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 405,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L405",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L405",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: NonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: NonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 415,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L415",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L415",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: NonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.reduceRightWithIndex",
              "kind": "function",
              "name": "reduceRightWithIndex",
              "signature": "reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: number, a: A, b: B) => B
) => (fa: NonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 420,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L420",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L420",
              },
              "type": "<A, B>(b: B, f: (i: number, a: A, b: B) => B) => (fa: NonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.reduceWithIndex",
              "kind": "function",
              "name": "reduceWithIndex",
              "signature": "reduceWithIndex: <A, B>(
    b: B,
    f: (i: number, b: B, a: A) => B
) => (fa: NonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 410,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L410",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L410",
              },
              "type": "<A, B>(b: B, f: (i: number, b: B, a: A) => B) => (fa: NonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.reverse",
              "kind": "function",
              "name": "reverse",
              "signature": "reverse: <A>(nea: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L101",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Append an element to the end of an array, creating a new non empty array
 *
 * @example
 * import { snoc } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(snoc([1, 2, 3], 4), [1, 2, 3, 4])
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.snoc",
              "kind": "function",
              "name": "snoc",
              "signature": "snoc: <A>(init: A[], end: A) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L52",
              },
              "type": "<A>(init: A[], end: A) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.sort",
              "kind": "function",
              "name": "sort",
              "signature": "sort: <B>(O: Ord<B>) => <A extends B>(nea: NonEmptyArray<A>) => NonEmptyArray<A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 206,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L206",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L206",
              },
              "type": "<B>(O: Ord<B>) => <A extends B>(nea: NonEmptyArray<A>) => NonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.tail",
              "kind": "function",
              "name": "tail",
              "signature": "tail: <A>(nea: NonEmptyArray<A>) => A[];",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L96",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => A[]",
            },
            {
              "docs": [
                "/**
 * Produces a couple of the first element of the array, and a new array of the remaining elements, if any
 *
 * @example
 * import { cons, uncons } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(uncons(cons(1, [2, 3, 4])), [1, [2, 3, 4]])
 *
 * @category destructors
 * @since 2.9.0
 */",
              ],
              "id": "nonEmptyArray.uncons",
              "kind": "function",
              "name": "uncons",
              "signature": "uncons: <A>(nea: NonEmptyArray<A>) => readonly [A, A[]];",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 71,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L71",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L71",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => readonly [A, A[]]",
            },
            {
              "docs": [
                "/**
 * Produces a couple of a copy of the array without its last element, and that last element
 *
 * @example
 * import { snoc, unsnoc } from 'fp-ts/NonEmptyArray'
 *
 * assert.deepStrictEqual(unsnoc(snoc([1, 2, 3], 4)), [[1, 2, 3], 4])
 *
 * @category destructors
 * @since 2.9.0
 */",
              ],
              "id": "nonEmptyArray.unsnoc",
              "kind": "function",
              "name": "unsnoc",
              "signature": "unsnoc: <A>(nea: NonEmptyArray<A>) => readonly [A[], A];",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 83,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L83",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L83",
              },
              "type": "<A>(nea: NonEmptyArray<A>) => readonly [A[], A]",
            },
            {
              "docs": [
                "/**
 * @since 2.5.1
 */",
              ],
              "id": "nonEmptyArray.unzip",
              "kind": "function",
              "name": "unzip",
              "signature": "unzip: <A, B>(as: NonEmptyArray<[A, B]>) => [NonEmptyArray<A>, NonEmptyArray<B>];",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 275,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L275",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L275",
              },
              "type": "<A, B>(as: NonEmptyArray<[A, B]>) => [NonEmptyArray<A>, NonEmptyArray<B>]",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <A>(
    i: number,
    a: A
) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 214,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L214",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L214",
              },
              "type": "<A>(i: number, a: A) => (nea: NonEmptyArray<A>) => Option<NonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.1
 */",
              ],
              "id": "nonEmptyArray.zipWith",
              "kind": "function",
              "name": "zipWith",
              "signature": "zipWith: <A, B, C>(
    fa: NonEmptyArray<A>,
    fb: NonEmptyArray<B>,
    f: (a: A, b: B) => C
) => NonEmptyArray<C>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 259,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L259",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L259",
              },
              "type": "<A, B, C>(fa: NonEmptyArray<A>, fb: NonEmptyArray<B>, f: (a: A, b: B) => C) => NonEmptyArray<C>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.NonEmptyArray",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "nonEmptyArray.NonEmptyArray.0",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "interfaceProperty",
                    "name": "0",
                    "signature": "0: A;",
                    "source": {
                      "filename": "lib/NonEmptyArray.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L27",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "NonEmptyArray",
              "signature": "interface NonEmptyArray<A> extends Array<A> {}",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L26",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 446,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L446",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L446",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 496,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L496",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L496",
              },
              "type": "Alt1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 466,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L466",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L466",
              },
              "type": "Applicative1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.Comonad",
              "kind": "variable",
              "name": "Comonad",
              "signature": "const Comonad: Comonad1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 501,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L501",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L501",
              },
              "type": "Comonad1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "nonEmptyArray.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: NonEmptyArray<{}>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 515,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L515",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L515",
              },
              "type": "NonEmptyArray<{}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.extract",
              "kind": "variable",
              "name": "extract",
              "signature": "const extract: <A>(wa: Kind<W, A>) => A;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 436,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L436",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L436",
              },
              "type": "<A>(wa: Kind<W, A>) => A",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 476,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L476",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L476",
              },
              "type": "Foldable1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.FoldableWithIndex",
              "kind": "variable",
              "name": "FoldableWithIndex",
              "signature": "const FoldableWithIndex: FoldableWithIndex1<'NonEmptyArray', number>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 481,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L481",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L481",
              },
              "type": "FoldableWithIndex1<"NonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 456,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L456",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L456",
              },
              "type": "Functor1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.FunctorWithIndex",
              "kind": "variable",
              "name": "FunctorWithIndex",
              "signature": "const FunctorWithIndex: FunctorWithIndex1<'NonEmptyArray', number>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 461,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L461",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L461",
              },
              "type": "FunctorWithIndex1<"NonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 471,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L471",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L471",
              },
              "type": "Monad1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.nonEmptyArray",
              "kind": "variable",
              "name": "nonEmptyArray",
              "signature": "const nonEmptyArray: Monad1<'NonEmptyArray'> &
    Comonad1<'NonEmptyArray'> &
    TraversableWithIndex1<'NonEmptyArray', number> &
    FunctorWithIndex1<'NonEmptyArray', number> &
    FoldableWithIndex1<'NonEmptyArray', number> &
    Alt1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 506,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L506",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L506",
              },
              "type": "Monad1<"NonEmptyArray"> & Comonad1<"NonEmptyArray"> & TraversableWithIndex1<"NonEmptyArray", number> & FunctorWithIndex1<"NonEmptyArray", number> & FoldableWithIndex1<"NonEmptyArray", number> & Alt1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 244,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L244",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L244",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "nonEmptyArray.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 428,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L428",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L428",
              },
              "type": "Sequence1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 486,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L486",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L486",
              },
              "type": "Traversable1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "nonEmptyArray.TraversableWithIndex",
              "kind": "variable",
              "name": "TraversableWithIndex",
              "signature": "const TraversableWithIndex: TraversableWithIndex1<'NonEmptyArray', number>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 491,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L491",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L491",
              },
              "type": "TraversableWithIndex1<"NonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "nonEmptyArray.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse1<'NonEmptyArray'>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 424,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L424",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L424",
              },
              "type": "PipeableTraverse1<"NonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "nonEmptyArray.traverseWithIndex",
              "kind": "variable",
              "name": "traverseWithIndex",
              "signature": "const traverseWithIndex: PipeableTraverseWithIndex1<'NonEmptyArray', number>;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 432,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L432",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L432",
              },
              "type": "PipeableTraverseWithIndex1<"NonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "nonEmptyArray.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 441,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L441",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L441",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.1
 */",
              ],
              "id": "nonEmptyArray.zip",
              "kind": "variable",
              "name": "zip",
              "signature": "const zip: {
    <B>(bs: NonEmptyArray<B>): <A>(as: NonEmptyArray<A>) => NonEmptyArray<[A, B]>;
    <A, B>(as: NonEmptyArray<A>, bs: NonEmptyArray<B>): NonEmptyArray<[A, B]>;
};",
              "source": {
                "filename": "lib/NonEmptyArray.d.ts",
                "line": 268,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L268",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L268",
              },
              "type": "{ <B>(bs: NonEmptyArray<B>): <A>(as: NonEmptyArray<A>) => NonEmptyArray<[A, B]>; <A, B>(as: NonEmptyArray<A>, bs: NonEmptyArray<B>): NonEmptyArray<[A, B]>; }",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * Data structure which represents non-empty arrays
 *
 * @since 2.0.0
 */",
        ],
        "id": "nonEmptyArray",
        "kind": "namespace",
        "name": "nonEmptyArray",
        "signature": "module 'lib/NonEmptyArray.d.ts' {}",
        "source": {
          "filename": "lib/NonEmptyArray.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * In case of \`Option\` returns the left-most non-\`None\` value.
 *
 * @example
 * import * as O from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     O.some('a'),
 *     O.alt(() => O.some('b'))
 *   ),
 *   O.some('a')
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     O.none,
 *     O.alt(() => O.some('b'))
 *   ),
 *   O.some('b')
 * )
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "option.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <A>(that: Lazy<Option<A>>) => (fa: Option<A>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 468,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L468",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L468",
              },
              "type": "<A>(that: Lazy<Option<A>>) => (fa: Option<A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "option.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <B>(that: Lazy<Option<B>>) => <A>(fa: Option<A>) => Option<B | A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 439,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L439",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L439",
              },
              "type": "<B>(that: Lazy<Option<B>>) => <A>(fa: Option<A>) => Option<B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "option.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(fa: Option<A>) => <B>(fab: Option<(a: A) => B>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 383,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L383",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L383",
              },
              "type": "<A>(fa: Option<A>) => <B>(fab: Option<(a: A) => B>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "option.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(fb: Option<B>) => <A>(fa: Option<A>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 392,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L392",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L392",
              },
              "type": "<B>(fb: Option<B>) => <A>(fa: Option<A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "option.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: Option<B>
) => (fa: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 875,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L875",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L875",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: Option<B>) => (fa: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "option.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(fb: Option<B>) => <A>(fa: Option<A>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 401,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L401",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L401",
              },
              "type": "<B>(fb: Option<B>) => <A>(fa: Option<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "option.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => Option<B>
) => (fa: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 868,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L868",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L868",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => Option<B>) => (fa: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "option.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <A>(fa: Option<A>) => Option<{ [K in N]: A }>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 864,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L864",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L864",
              },
              "type": "<N extends string>(name: N) => <A>(fa: Option<A>) => Option<{ [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "option.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(f: (a: A) => Option<B>) => (ma: Option<A>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 415,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L415",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L415",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (ma: Option<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "option.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(f: (a: A) => Option<B>) => (ma: Option<A>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 425,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L425",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L425",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (ma: Option<A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * This is \`chain\` + \`fromNullable\`, useful when working with optional values.
 *
 * @example
 * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * interface Employee {
 *   company?: {
 *     address?: {
 *       street?: {
 *         name?: string
 *       }
 *     }
 *   }
 * }
 *
 * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     fromNullable(employee1.company),
 *     chainNullableK(company => company.address),
 *     chainNullableK(address => address.street),
 *     chainNullableK(street => street.name)
 *   ),
 *   some('high street')
 * )
 *
 * const employee2: Employee = { company: { address: { street: {} } } }
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     fromNullable(employee2.company),
 *     chainNullableK(company => company.address),
 *     chainNullableK(address => address.street),
 *     chainNullableK(street => street.name)
 *   ),
 *   none
 * )
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "option.chainNullableK",
              "kind": "function",
              "name": "chainNullableK",
              "signature": "chainNullableK: <A, B>(
    f: (a: A) => B | null | undefined
) => (ma: Option<A>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 368,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L368",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L368",
              },
              "type": "<A, B>(f: (a: A) => B | null | undefined) => (ma: Option<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "option.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <A>(fa: Option<Option<A>>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 510,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L510",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L510",
              },
              "type": "<A>(fa: Option<Option<A>>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "option.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <A>(ma: Option<A>) => Option<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 490,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L490",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L490",
              },
              "type": "<A>(ma: Option<A>) => Option<Option<A>>",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if \`ma\` contains \`a\`
 *
 * @example
 * import { some, none, elem } from 'fp-ts/Option'
 * import { eqNumber } from 'fp-ts/Eq'
 *
 * assert.strictEqual(elem(eqNumber)(1, some(1)), true)
 * assert.strictEqual(elem(eqNumber)(2, some(1)), false)
 * assert.strictEqual(elem(eqNumber)(1, none), false)
 *
 * @since 2.0.0
 */",
              ],
              "id": "option.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => (a: A, ma: Option<A>) => boolean;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 806,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L806",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L806",
              },
              "type": "<A>(E: Eq<A>) => (a: A, ma: Option<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the predicate is satisfied by the wrapped value
 *
 * @example
 * import { some, none, exists } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.strictEqual(
 *   pipe(
 *     some(1),
 *     exists(n => n > 0)
 *   ),
 *   true
 * )
 * assert.strictEqual(
 *   pipe(
 *     some(1),
 *     exists(n => n > 1)
 *   ),
 *   false
 * )
 * assert.strictEqual(
 *   pipe(
 *     none,
 *     exists(n => n > 0)
 *   ),
 *   false
 * )
 *
 * @since 2.0.0
 */",
              ],
              "id": "option.exists",
              "kind": "function",
              "name": "exists",
              "signature": "exists: <A>(predicate: Predicate<A>) => (ma: Option<A>) => boolean;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 838,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L838",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L838",
              },
              "type": "<A>(predicate: Predicate<A>) => (ma: Option<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "option.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <A, B>(f: (wa: Option<A>) => B) => (wa: Option<A>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 483,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L483",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L483",
              },
              "type": "<A, B>(f: (wa: Option<A>) => B) => (wa: Option<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "option.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <A, B>(f: (a: A) => Option<B>) => (fa: Option<A>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 528,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L528",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L528",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (fa: Option<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "option.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: Option<Option<A>>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 432,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L432",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L432",
              },
              "type": "<A>(mma: Option<Option<A>>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Takes a (lazy) default value, a function, and an \`Option\` value, if the \`Option\` value is \`None\` the default value is
 * returned, otherwise the function is applied to the value inside the \`Some\` and the result is returned.
 *
 * @example
 * import { some, none, fold } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.strictEqual(
 *   pipe(
 *     some(1),
 *     fold(() => 'a none', a => \`a some containing \${a}\`)
 *   ),
 *   'a some containing 1'
 * )
 *
 * assert.strictEqual(
 *   pipe(
 *     none,
 *     fold(() => 'a none', a => \`a some containing \${a}\`)
 *   ),
 *   'a none'
 * )
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "option.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <A, B>(onNone: Lazy<B>, onSome: (a: A) => B) => (ma: Option<A>) => B;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 210,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L210",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L210",
              },
              "type": "<A, B>(onNone: Lazy<B>, onSome: (a: A) => B) => (ma: Option<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "option.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Option<A>) => M;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 500,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L500",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L500",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Option<A>) => M",
            },
            {
              "docs": [
                "/**
 * Transforms an \`Either\` to an \`Option\` discarding the error.
 *
 * Alias of [getRight](#getRight)
 *
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.fromEither",
              "kind": "function",
              "name": "fromEither",
              "signature": "fromEither: <E, A>(ma: Either<E, A>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 182,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L182",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L182",
              },
              "type": "<E, A>(ma: Either<E, A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Constructs a new \`Option\` from a nullable type. If the value is \`null\` or \`undefined\`, returns \`None\`, otherwise
 * returns the value wrapped in a \`Some\`.
 *
 * @example
 * import { none, some, fromNullable } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(fromNullable(undefined), none)
 * assert.deepStrictEqual(fromNullable(null), none)
 * assert.deepStrictEqual(fromNullable(1), some(1))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.fromNullable",
              "kind": "function",
              "name": "fromNullable",
              "signature": "fromNullable: <A>(a: A) => Option<NonNullable<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 108,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L108",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L108",
              },
              "type": "<A>(a: A) => Option<NonNullable<A>>",
            },
            {
              "docs": [
                "/**
 * Returns a *smart constructor* from a function that returns a nullable value.
 *
 * @example
 * import { fromNullableK, none, some } from 'fp-ts/Option'
 *
 * const f = (s: string): number | undefined => {
 *   const n = parseFloat(s)
 *   return isNaN(n) ? undefined : n
 * }
 *
 * const g = fromNullableK(f)
 *
 * assert.deepStrictEqual(g('1'), some(1))
 * assert.deepStrictEqual(g('a'), none)
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "option.fromNullableK",
              "kind": "function",
              "name": "fromNullableK",
              "signature": "fromNullableK: <A extends readonly unknown[], B>(
    f: (...a: A) => B | null | undefined
) => (...a: A) => Option<NonNullable<B>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 315,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L315",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L315",
              },
              "type": "<A extends readonly unknown[], B>(f: (...a: A) => B | null | undefined) => (...a: A) => Option<NonNullable<B>>",
            },
            {
              "docs": [
                "/**
 * Returns a *smart constructor* based on the given predicate.
 *
 * @example
 * import { none, some, fromPredicate } from 'fp-ts/Option'
 *
 * const getOption = fromPredicate((n: number) => n >= 0)
 *
 * assert.deepStrictEqual(getOption(-1), none)
 * assert.deepStrictEqual(getOption(1), some(1))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.fromPredicate",
              "kind": "function",
              "name": "fromPredicate",
              "signature": "fromPredicate: {
    <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Option<B>;
    <A>(predicate: Predicate<A>): (a: A) => Option<A>;
};",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L123",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Option<B>; <A>(predicate: Predicate<A>): (a: A) => Option<A>; }",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getApplyMonoid",
              "kind": "function",
              "name": "getApplyMonoid",
              "signature": "getApplyMonoid: <A>(M: Monoid<A>) => Monoid<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 651,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L651",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L651",
              },
              "type": "<A>(M: Monoid<A>) => Monoid<Option<A>>",
            },
            {
              "docs": [
                "/**
 * \`Apply\` semigroup
 *
 * | x       | y       | concat(x, y)       |
 * | ------- | ------- | ------------------ |
 * | none    | none    | none               |
 * | some(a) | none    | none               |
 * | none    | some(a) | none               |
 * | some(a) | some(b) | some(concat(a, b)) |
 *
 * @example
 * import { getApplySemigroup, some, none } from 'fp-ts/Option'
 * import { semigroupSum } from 'fp-ts/Semigroup'
 *
 * const S = getApplySemigroup(semigroupSum)
 * assert.deepStrictEqual(S.concat(none, none), none)
 * assert.deepStrictEqual(S.concat(some(1), none), none)
 * assert.deepStrictEqual(S.concat(none, some(1)), none)
 * assert.deepStrictEqual(S.concat(some(1), some(2)), some(3))
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getApplySemigroup",
              "kind": "function",
              "name": "getApplySemigroup",
              "signature": "getApplySemigroup: <A>(S: Semigroup<A>) => Semigroup<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 646,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L646",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L646",
              },
              "type": "<A>(S: Semigroup<A>) => Semigroup<Option<A>>",
            },
            {
              "docs": [
                "/**
 * @example
 * import { none, some, getEq } from 'fp-ts/Option'
 * import { eqNumber } from 'fp-ts/Eq'
 *
 * const E = getEq(eqNumber)
 * assert.strictEqual(E.equals(none, none), true)
 * assert.strictEqual(E.equals(none, some(1)), false)
 * assert.strictEqual(E.equals(some(1), none), false)
 * assert.strictEqual(E.equals(some(1), some(2)), false)
 * assert.strictEqual(E.equals(some(1), some(1)), true)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 599,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L599",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L599",
              },
              "type": "<A>(E: Eq<A>) => Eq<Option<A>>",
            },
            {
              "docs": [
                "/**
 * Monoid returning the left-most non-\`None\` value
 *
 * | x       | y       | concat(x, y) |
 * | ------- | ------- | ------------ |
 * | none    | none    | none         |
 * | some(a) | none    | some(a)      |
 * | none    | some(a) | some(a)      |
 * | some(a) | some(b) | some(a)      |
 *
 * @example
 * import { getFirstMonoid, some, none } from 'fp-ts/Option'
 *
 * const M = getFirstMonoid<number>()
 * assert.deepStrictEqual(M.concat(none, none), none)
 * assert.deepStrictEqual(M.concat(some(1), none), some(1))
 * assert.deepStrictEqual(M.concat(none, some(1)), some(1))
 * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getFirstMonoid",
              "kind": "function",
              "name": "getFirstMonoid",
              "signature": "getFirstMonoid: <A = never>() => Monoid<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 674,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L674",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L674",
              },
              "type": "<A = never>() => Monoid<Option<A>>",
            },
            {
              "docs": [
                "/**
 * Monoid returning the right-most non-\`None\` value
 *
 * | x       | y       | concat(x, y) |
 * | ------- | ------- | ------------ |
 * | none    | none    | none         |
 * | some(a) | none    | some(a)      |
 * | none    | some(a) | some(a)      |
 * | some(a) | some(b) | some(b)      |
 *
 * @example
 * import { getLastMonoid, some, none } from 'fp-ts/Option'
 *
 * const M = getLastMonoid<number>()
 * assert.deepStrictEqual(M.concat(none, none), none)
 * assert.deepStrictEqual(M.concat(some(1), none), some(1))
 * assert.deepStrictEqual(M.concat(none, some(1)), some(1))
 * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getLastMonoid",
              "kind": "function",
              "name": "getLastMonoid",
              "signature": "getLastMonoid: <A = never>() => Monoid<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 697,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L697",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L697",
              },
              "type": "<A = never>() => Monoid<Option<A>>",
            },
            {
              "docs": [
                "/**
 * Returns the \`Left\` value of an \`Either\` if possible.
 *
 * @example
 * import { getLeft, none, some } from 'fp-ts/Option'
 * import { right, left } from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(getLeft(right(1)), none)
 * assert.deepStrictEqual(getLeft(left('a')), some('a'))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.getLeft",
              "kind": "function",
              "name": "getLeft",
              "signature": "getLeft: <E, A>(ma: Either<E, A>) => Option<E>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L157",
              },
              "type": "<E, A>(ma: Either<E, A>) => Option<E>",
            },
            {
              "docs": [
                "/**
 * Monoid returning the left-most non-\`None\` value. If both operands are \`Some\`s then the inner values are
 * concatenated using the provided \`Semigroup\`
 *
 * | x       | y       | concat(x, y)       |
 * | ------- | ------- | ------------------ |
 * | none    | none    | none               |
 * | some(a) | none    | some(a)            |
 * | none    | some(a) | some(a)            |
 * | some(a) | some(b) | some(concat(a, b)) |
 *
 * @example
 * import { getMonoid, some, none } from 'fp-ts/Option'
 * import { semigroupSum } from 'fp-ts/Semigroup'
 *
 * const M = getMonoid(semigroupSum)
 * assert.deepStrictEqual(M.concat(none, none), none)
 * assert.deepStrictEqual(M.concat(some(1), none), some(1))
 * assert.deepStrictEqual(M.concat(none, some(1)), some(1))
 * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <A>(S: Semigroup<A>) => Monoid<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 722,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L722",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L722",
              },
              "type": "<A>(S: Semigroup<A>) => Monoid<Option<A>>",
            },
            {
              "docs": [
                "/**
 * The \`Ord\` instance allows \`Option\` values to be compared with
 * \`compare\`, whenever there is an \`Ord\` instance for
 * the type the \`Option\` contains.
 *
 * \`None\` is considered to be less than any \`Some\` value.
 *
 *
 * @example
 * import { none, some, getOrd } from 'fp-ts/Option'
 * import { ordNumber } from 'fp-ts/Ord'
 *
 * const O = getOrd(ordNumber)
 * assert.strictEqual(O.compare(none, none), 0)
 * assert.strictEqual(O.compare(none, some(1)), -1)
 * assert.strictEqual(O.compare(some(1), none), 1)
 * assert.strictEqual(O.compare(some(1), some(2)), -1)
 * assert.strictEqual(O.compare(some(1), some(1)), 0)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getOrd",
              "kind": "function",
              "name": "getOrd",
              "signature": "getOrd: <A>(O: Ord<A>) => Ord<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 622,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L622",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L622",
              },
              "type": "<A>(O: Ord<A>) => Ord<Option<A>>",
            },
            {
              "docs": [
                "/**
 * Extracts the value out of the structure, if it exists. Otherwise returns the given default value
 *
 * @example
 * import { some, none, getOrElse } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.strictEqual(
 *   pipe(
 *     some(1),
 *     getOrElse(() => 0)
 *   ),
 *   1
 * )
 * assert.strictEqual(
 *   pipe(
 *     none,
 *     getOrElse(() => 0)
 *   ),
 *   0
 * )
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "option.getOrElse",
              "kind": "function",
              "name": "getOrElse",
              "signature": "getOrElse: <A>(onNone: Lazy<A>) => (ma: Option<A>) => A;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 295,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L295",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L295",
              },
              "type": "<A>(onNone: Lazy<A>) => (ma: Option<A>) => A",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`getOrElse\`](#getOrElse).
 *
 * @category destructors
 * @since 2.6.0
 */",
              ],
              "id": "option.getOrElseW",
              "kind": "function",
              "name": "getOrElseW",
              "signature": "getOrElseW: <B>(onNone: Lazy<B>) => <A>(ma: Option<A>) => B | A;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 269,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L269",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L269",
              },
              "type": "<B>(onNone: Lazy<B>) => <A>(ma: Option<A>) => B | A",
            },
            {
              "docs": [
                "/**
 * Returns a \`Refinement\` (i.e. a custom type guard) from a \`Option\` returning function.
 * This function ensures that a custom type guard definition is type-safe.
 *
 * \`\`\`ts
 * import { some, none, getRefinement } from 'fp-ts/Option'
 *
 * type A = { type: 'A' }
 * type B = { type: 'B' }
 * type C = A | B
 *
 * const isA = (c: C): c is A => c.type === 'B' // <= typo but typescript doesn't complain
 * const isA = getRefinement<C, A>(c => (c.type === 'B' ? some(c) : none)) // static error: Type '"B"' is not assignable to type '"A"'
 * \`\`\`
 *
 * @since 2.0.0
 */",
              ],
              "id": "option.getRefinement",
              "kind": "function",
              "name": "getRefinement",
              "signature": "getRefinement: <A, B extends A>(
    getOption: (a: A) => Option<B>
) => Refinement<A, B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 856,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L856",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L856",
              },
              "type": "<A, B extends A>(getOption: (a: A) => Option<B>) => Refinement<A, B>",
            },
            {
              "docs": [
                "/**
 * Returns the \`Right\` value of an \`Either\` if possible.
 *
 * @example
 * import { getRight, none, some } from 'fp-ts/Option'
 * import { right, left } from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(getRight(right(1)), some(1))
 * assert.deepStrictEqual(getRight(left('a')), none)
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.getRight",
              "kind": "function",
              "name": "getRight",
              "signature": "getRight: <E, A>(ma: Either<E, A>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L171",
              },
              "type": "<E, A>(ma: Either<E, A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<Option<A>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 583,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L583",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L583",
              },
              "type": "<A>(S: Show<A>) => Show<Option<A>>",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the option is \`None\`, \`false\` otherwise.
 *
 * @example
 * import { some, none, isNone } from 'fp-ts/Option'
 *
 * assert.strictEqual(isNone(some(1)), false)
 * assert.strictEqual(isNone(none), true)
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "option.isNone",
              "kind": "function",
              "name": "isNone",
              "signature": "isNone: <A>(fa: Option<A>) => fa is None;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 79,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L79",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L79",
              },
              "type": "<A>(fa: Option<A>) => fa is None",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the option is an instance of \`Some\`, \`false\` otherwise.
 *
 * @example
 * import { some, none, isSome } from 'fp-ts/Option'
 *
 * assert.strictEqual(isSome(some(1)), true)
 * assert.strictEqual(isSome(none), false)
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "option.isSome",
              "kind": "function",
              "name": "isSome",
              "signature": "isSome: <A>(fa: Option<A>) => fa is Some<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L66",
              },
              "type": "<A>(fa: Option<A>) => fa is Some<A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "option.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: Option<A>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 376,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L376",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L376",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: Option<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "option.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (fa: Option<A>) => Separated<Option<B>, Option<C>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 541,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L541",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L541",
              },
              "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: Option<A>) => Separated<Option<B>, Option<C>>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "option.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: Option<A>) => B;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 495,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L495",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L495",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: Option<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "option.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: Option<A>) => B;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 505,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L505",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L505",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: Option<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "option.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <A, B>(ma: Option<Either<A, B>>) => Separated<Option<A>, Option<B>>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 515,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L515",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L515",
              },
              "type": "<A, B>(ma: Option<Either<A, B>>) => Separated<Option<A>, Option<B>>",
            },
            {
              "docs": [
                "/**
 * get an array of option and convert it to option of array
 *
 * this function have the same behavior of \`A.sequence(O.option)\` but it's optimized and perform better
 *
 * @example
 *
 * import * as A from 'fp-ts/Array'
 * import { sequenceArray, some, none, fromPredicate } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * const arr = A.range(0, 10)
 * assert.deepStrictEqual(pipe(arr, A.map(some), sequenceArray), some(arr))
 * assert.deepStrictEqual(pipe(arr, A.map(fromPredicate(x => x > 8)), sequenceArray), none)
 *
 * @since 2.9.0
 */",
              ],
              "id": "option.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <A>(arr: readonly Option<A>[]) => Option<readonly A[]>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 923,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L923",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L923",
              },
              "type": "<A>(arr: readonly Option<A>[]) => Option<readonly A[]>",
            },
            {
              "docs": [
                "/**
 * Constructs a \`Some\`. Represents an optional value that exists.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.some",
              "kind": "function",
              "name": "some",
              "signature": "some: <A>(a: A) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L93",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L93",
              },
              "type": "<A>(a: A) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Extracts the value out of the structure, if it exists. Otherwise returns \`null\`.
 *
 * @example
 * import { some, none, toNullable } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.strictEqual(
 *   pipe(
 *     some(1),
 *     toNullable
 *   ),
 *   1
 * )
 * assert.strictEqual(
 *   pipe(
 *     none,
 *     toNullable
 *   ),
 *   null
 * )
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "option.toNullable",
              "kind": "function",
              "name": "toNullable",
              "signature": "toNullable: <A>(ma: Option<A>) => A | null;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 236,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L236",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L236",
              },
              "type": "<A>(ma: Option<A>) => A | null",
            },
            {
              "docs": [
                "/**
 * Extracts the value out of the structure, if it exists. Otherwise returns \`undefined\`.
 *
 * @example
 * import { some, none, toUndefined } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.strictEqual(
 *   pipe(
 *     some(1),
 *     toUndefined
 *   ),
 *   1
 * )
 * assert.strictEqual(
 *   pipe(
 *     none,
 *     toUndefined
 *   ),
 *   undefined
 * )
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "option.toUndefined",
              "kind": "function",
              "name": "toUndefined",
              "signature": "toUndefined: <A>(ma: Option<A>) => A | undefined;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L262",
              },
              "type": "<A>(ma: Option<A>) => A | undefined",
            },
            {
              "docs": [
                "/**
 * Runs an action for every element in array and accumulates the results in option
 *
 * this function have the same behavior of \`A.sequence(O.option)\` but it's optimized and perform better
 *
 * @example
 *
 * import * as A from 'fp-ts/Array'
 * import { traverseArray, some, fromPredicate, none } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * const arr = A.range(0, 10)
 * assert.deepStrictEqual(pipe(arr, traverseArray(some)), some(arr))
 * assert.deepStrictEqual(pipe(arr, traverseArray(fromPredicate((x) => x > 5))), none)
 *
 * @since 2.9.0
 */",
              ],
              "id": "option.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <A, B>(
    f: (a: A) => Option<B>
) => (arr: readonly A[]) => Option<readonly B[]>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 903,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L903",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L903",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (arr: readonly A[]) => Option<readonly B[]>",
            },
            {
              "docs": [
                "/**
 *
 * @since 2.9.0
 */",
              ],
              "id": "option.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <A, B>(
    f: (index: number, a: A) => Option<B>
) => (arr: readonly A[]) => Option<readonly B[]>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 883,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L883",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L883",
              },
              "type": "<A, B>(f: (index: number, a: A) => Option<B>) => (arr: readonly A[]) => Option<readonly B[]>",
            },
            {
              "docs": [
                "/**
 * Transforms an exception into an \`Option\`. If \`f\` throws, returns \`None\`, otherwise returns the output wrapped in a
 * \`Some\`.
 *
 * @example
 * import { none, some, tryCatch } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(
 *   tryCatch(() => {
 *     throw new Error()
 *   }),
 *   none
 * )
 * assert.deepStrictEqual(tryCatch(() => 1), some(1))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.tryCatch",
              "kind": "function",
              "name": "tryCatch",
              "signature": "tryCatch: <A>(f: Lazy<A>) => Option<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 143,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L143",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L143",
              },
              "type": "<A>(f: Lazy<A>) => Option<A>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "option.None",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "None",
              "signature": "interface None {}",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "option.Some",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "option.Some.value",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "value",
                    "signature": "readonly value: A;",
                    "source": {
                      "filename": "lib/Option.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L47",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Some",
              "signature": "interface Some<A> {}",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L45",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "option.Option",
              "kind": "typeAlias",
              "name": "Option",
              "signature": "type Option<A> = None | Some<A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L53",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 573,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L573",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L573",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 747,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L747",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L747",
              },
              "type": "Alt1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Alternative",
              "kind": "variable",
              "name": "Alternative",
              "signature": "const Alternative: Alternative1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 752,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L752",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L752",
              },
              "type": "Alternative1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 732,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L732",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L732",
              },
              "type": "Applicative1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Compactable",
              "kind": "variable",
              "name": "Compactable",
              "signature": "const Compactable: Compactable1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 762,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L762",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L762",
              },
              "type": "Compactable1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "option.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: Option<{}>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 860,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L860",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L860",
              },
              "type": "Option<{}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Extend",
              "kind": "variable",
              "name": "Extend",
              "signature": "const Extend: Extend1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 757,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L757",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L757",
              },
              "type": "Extend1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "option.filter",
              "kind": "variable",
              "name": "filter",
              "signature": "const filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (fa: Option<A>) => Option<B>;
    <A>(predicate: Predicate<A>): (fa: Option<A>) => Option<A>;
};",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 520,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L520",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L520",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Option<A>) => Option<B>; <A>(predicate: Predicate<A>): (fa: Option<A>) => Option<A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Filterable",
              "kind": "variable",
              "name": "Filterable",
              "signature": "const Filterable: Filterable1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 767,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L767",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L767",
              },
              "type": "Filterable1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 742,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L742",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L742",
              },
              "type": "Foldable1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 727,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L727",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L727",
              },
              "type": "Functor1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "option.mapNullable",
              "kind": "variable",
              "name": "mapNullable",
              "signature": "const mapNullable: <A, B>(f: (a: A) => B) => (ma: Option<A>) => Option<B>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 323,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L323",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L323",
              },
              "type": "<A, B>(f: (a: A) => B) => (ma: Option<A>) => Option<B>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 737,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L737",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L737",
              },
              "type": "Monad1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.MonadThrow",
              "kind": "variable",
              "name": "MonadThrow",
              "signature": "const MonadThrow: MonadThrow1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 782,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L782",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L782",
              },
              "type": "MonadThrow1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`None\` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "option.none",
              "kind": "variable",
              "name": "none",
              "signature": "const none: Option<never>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L86",
              },
              "type": "Option<never>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.7.0
 */",
              ],
              "id": "option.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 408,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L408",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L408",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.option",
              "kind": "variable",
              "name": "option",
              "signature": "const option: Monad1<'Option'> &
    Foldable1<'Option'> &
    Alternative1<'Option'> &
    Extend1<'Option'> &
    Witherable1<'Option'> &
    MonadThrow1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 787,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L787",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L787",
              },
              "type": "Monad1<"Option"> & Foldable1<"Option"> & Alternative1<"Option"> & Extend1<"Option"> & Witherable1<"Option"> & MonadThrow1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "option.partition",
              "kind": "variable",
              "name": "partition",
              "signature": "const partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Option<A>
    ) => Separated<Option<A>, Option<B>>;
    <A>(predicate: Predicate<A>): (fa: Option<A>) => Separated<Option<A>, Option<A>>;
};",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 533,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L533",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L533",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Option<A>) => Separated<Option<A>, Option<B>>; <A>(predicate: Predicate<A>): (fa: Option<A>) => Separated<Option<A>, Option<A>>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "option.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 553,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L553",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L553",
              },
              "type": "Sequence1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadThrow
 * @since 2.7.0
 */",
              ],
              "id": "option.throwError",
              "kind": "variable",
              "name": "throwError",
              "signature": "const throwError: <E, A>(e: E) => Kind<M, A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 478,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L478",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L478",
              },
              "type": "<E, A>(e: E) => Kind<M, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 772,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L772",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L772",
              },
              "type": "Traversable1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "option.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 548,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L548",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L548",
              },
              "type": "PipeableTraverse1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "option.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 568,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L568",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L568",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "option.wilt",
              "kind": "variable",
              "name": "wilt",
              "signature": "const wilt: PipeableWilt1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 563,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L563",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L563",
              },
              "type": "PipeableWilt1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "option.wither",
              "kind": "variable",
              "name": "wither",
              "signature": "const wither: PipeableWither1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 558,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L558",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L558",
              },
              "type": "PipeableWither1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "option.Witherable",
              "kind": "variable",
              "name": "Witherable",
              "signature": "const Witherable: Witherable1<'Option'>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 777,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L777",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L777",
              },
              "type": "Witherable1<"Option">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Alternative
 * @since 2.7.0
 */",
              ],
              "id": "option.zero",
              "kind": "variable",
              "name": "zero",
              "signature": "const zero: <A>() => Kind<F, A>;",
              "source": {
                "filename": "lib/Option.d.ts",
                "line": 473,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L473",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L473",
              },
              "type": "<A>() => Kind<F, A>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * \`\`\`ts
 * type Option<A> = None | Some<A>
 * \`\`\`
 *
 * \`Option<A>\` is a container for an optional value of type \`A\`. If the value of type \`A\` is present, the \`Option<A>\` is
 * an instance of \`Some<A>\`, containing the present value of type \`A\`. If the value is absent, the \`Option<A>\` is an
 * instance of \`None\`.
 *
 * An option could be looked at as a collection or foldable structure with either one or zero elements.
 * Another way to look at \`Option\` is: it represents the effect of a possibly failing computation.
 *
 * @since 2.0.0
 */",
        ],
        "id": "option",
        "kind": "namespace",
        "name": "option",
        "signature": "module 'lib/Option.d.ts' {}",
        "source": {
          "filename": "lib/Option.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "optionT.getOptionM",
              "kind": "function",
              "name": "getOptionM",
              "signature": "getOptionM: {
    <M extends URIS2>(M: Monad2<M>): OptionM2<M>;
    <M extends URIS2, E>(M: Monad2C<M, E>): OptionM2C<M, E>;
    <M extends URIS>(M: Monad1<M>): OptionM1<M>;
    <M>(M: Monad<M>): OptionM<M>;
};",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L84",
              },
              "type": "{ <M extends URIS2>(M: Monad2<M>): OptionM2<M>; <M extends URIS2, E>(M: Monad2C<M, E>): OptionM2C<M, E>; <M extends URIS>(M: Monad1<M>): OptionM1<M>; <M>(M: Monad<M>): OptionM<M>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "optionT.OptionM",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "optionT.OptionM.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(fa: OptionT<M, A>, that: Lazy<OptionT<M, A>>) => OptionT<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 24,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L24",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L24",
                    },
                    "type": "<A>(fa: OptionT<M, A>, that: Lazy<OptionT<M, A>>) => OptionT<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    ma: OptionT<M, A>,
    f: (a: A) => OptionT<M, B>
) => OptionT<M, B>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 23,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L23",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L23",
                    },
                    "type": "<A, B>(ma: OptionT<M, A>, f: (a: A) => OptionT<M, B>) => OptionT<M, B>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <A, R>(
    ma: OptionT<M, A>,
    onNone: Lazy<HKT<M, R>>,
    onSome: (a: A) => HKT<M, R>
) => HKT<M, R>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L25",
                    },
                    "type": "<A, R>(ma: OptionT<M, A>, onNone: Lazy<HKT<M, R>>, onSome: (a: A) => HKT<M, R>) => HKT<M, R>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <A>(ma: HKT<M, A>) => OptionT<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L27",
                    },
                    "type": "<A>(ma: HKT<M, A>) => OptionT<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM.getOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getOrElse",
                    "signature": "readonly getOrElse: <A>(ma: OptionT<M, A>, onNone: Lazy<HKT<M, A>>) => HKT<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L26",
                    },
                    "type": "<A>(ma: OptionT<M, A>, onNone: Lazy<HKT<M, A>>) => HKT<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM.none",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "none",
                    "signature": "readonly none: <A = never>() => OptionT<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L28",
                    },
                    "type": "<A = never>() => OptionT<M, A>",
                  },
                ],
              },
              "name": "OptionM",
              "signature": "interface OptionM<M> extends ApplicativeCompositionHKT1<M, URI> {}",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 22,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L22",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L22",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "optionT.OptionM1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "optionT.OptionM1.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(
    fa: OptionT1<M, A>,
    that: Lazy<OptionT1<M, A>>
) => OptionT1<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L40",
                    },
                    "type": "<A>(fa: Kind<M, Option<A>>, that: Lazy<Kind<M, Option<A>>>) => Kind<M, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM1.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    ma: OptionT1<M, A>,
    f: (a: A) => OptionT1<M, B>
) => OptionT1<M, B>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L39",
                    },
                    "type": "<A, B>(ma: Kind<M, Option<A>>, f: (a: A) => Kind<M, Option<A>>) => Kind<M, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM1.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <A, R>(
    ma: OptionT1<M, A>,
    onNone: Lazy<Kind<M, R>>,
    onSome: (a: A) => Kind<M, R>
) => Kind<M, R>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L41",
                    },
                    "type": "<A, R>(ma: Kind<M, Option<A>>, onNone: Lazy<Kind<M, R>>, onSome: (a: A) => Kind<M, R>) => Kind<M, R>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM1.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <A>(ma: Kind<M, A>) => OptionT1<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L43",
                    },
                    "type": "<A>(ma: Kind<M, A>) => Kind<M, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM1.getOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getOrElse",
                    "signature": "readonly getOrElse: <A>(
    ma: OptionT1<M, A>,
    onNone: Lazy<Kind<M, A>>
) => Kind<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L42",
                    },
                    "type": "<A>(ma: Kind<M, Option<A>>, onNone: Lazy<Kind<M, A>>) => Kind<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM1.none",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "none",
                    "signature": "readonly none: <A = never>() => OptionT1<M, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L44",
                    },
                    "type": "<A = never>() => Kind<M, Option<A>>",
                  },
                ],
              },
              "name": "OptionM1",
              "signature": "interface OptionM1<M extends URIS> extends ApplicativeComposition11<M, URI> {}",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "optionT.OptionM2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "optionT.OptionM2.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <E, A>(
    fa: OptionT2<M, E, A>,
    that: Lazy<OptionT2<M, E, A>>
) => OptionT2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L56",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L56",
                    },
                    "type": "<E, A>(fa: Kind2<M, E, Option<A>>, that: Lazy<Kind2<M, E, Option<A>>>) => Kind2<M, E, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <E, A, B>(
    ma: OptionT2<M, E, A>,
    f: (a: A) => OptionT2<M, E, B>
) => OptionT2<M, E, B>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L55",
                    },
                    "type": "<E, A, B>(ma: Kind2<M, E, Option<A>>, f: (a: A) => Kind2<M, E, Option<A>>) => Kind2<M, E, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <E, A, R>(
    ma: OptionT2<M, E, A>,
    onNone: Lazy<Kind2<M, E, R>>,
    onSome: (a: A) => Kind2<M, E, R>
) => Kind2<M, E, R>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L57",
                    },
                    "type": "<E, A, R>(ma: Kind2<M, E, Option<A>>, onNone: Lazy<Kind2<M, E, R>>, onSome: (a: A) => Kind2<M, E, R>) => Kind2<M, E, R>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <E, A>(ma: Kind2<M, E, A>) => OptionT2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 63,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L63",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L63",
                    },
                    "type": "<E, A>(ma: Kind2<M, E, A>) => Kind2<M, E, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2.getOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getOrElse",
                    "signature": "readonly getOrElse: <E, A>(
    ma: OptionT2<M, E, A>,
    onNone: Lazy<Kind2<M, E, A>>
) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 62,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L62",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L62",
                    },
                    "type": "<E, A>(ma: Kind2<M, E, Option<A>>, onNone: Lazy<Kind2<M, E, A>>) => Kind2<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2.none",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "none",
                    "signature": "readonly none: <E = never, A = never>() => OptionT2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 64,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L64",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L64",
                    },
                    "type": "<E = never, A = never>() => Kind2<M, E, Option<A>>",
                  },
                ],
              },
              "name": "OptionM2",
              "signature": "interface OptionM2<M extends URIS2> extends ApplicativeComposition21<M, URI> {}",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 54,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L54",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L54",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "optionT.OptionM2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "optionT.OptionM2C.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(
    fa: OptionT2<M, E, A>,
    that: Lazy<OptionT2<M, E, A>>
) => OptionT2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 71,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L71",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L71",
                    },
                    "type": "<A>(fa: Kind2<M, E, Option<A>>, that: Lazy<Kind2<M, E, Option<A>>>) => Kind2<M, E, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    ma: OptionT2<M, E, A>,
    f: (a: A) => OptionT2<M, E, B>
) => OptionT2<M, E, B>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 70,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L70",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L70",
                    },
                    "type": "<A, B>(ma: Kind2<M, E, Option<A>>, f: (a: A) => Kind2<M, E, Option<A>>) => Kind2<M, E, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2C.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <A, R>(
    ma: OptionT2<M, E, A>,
    onNone: Lazy<Kind2<M, E, R>>,
    onSome: (a: A) => Kind2<M, E, R>
) => Kind2<M, E, R>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 72,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L72",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L72",
                    },
                    "type": "<A, R>(ma: Kind2<M, E, Option<A>>, onNone: Lazy<Kind2<M, E, R>>, onSome: (a: A) => Kind2<M, E, R>) => Kind2<M, E, R>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2C.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <A>(ma: Kind2<M, E, A>) => OptionT2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 78,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L78",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L78",
                    },
                    "type": "<A>(ma: Kind2<M, E, A>) => Kind2<M, E, Option<A>>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2C.getOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getOrElse",
                    "signature": "readonly getOrElse: <A>(
    ma: OptionT2<M, E, A>,
    onNone: Lazy<Kind2<M, E, A>>
) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L77",
                    },
                    "type": "<A>(ma: Kind2<M, E, Option<A>>, onNone: Lazy<Kind2<M, E, A>>) => Kind2<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "optionT.OptionM2C.none",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "none",
                    "signature": "readonly none: <A = never>() => OptionT2<M, E, A>;",
                    "source": {
                      "filename": "lib/OptionT.d.ts",
                      "line": 79,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L79",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L79",
                    },
                    "type": "<A = never>() => Kind2<M, E, Option<A>>",
                  },
                ],
              },
              "name": "OptionM2C",
              "signature": "interface OptionM2C<M extends URIS2, E>
    extends ApplicativeComposition2C1<M, URI, E> {}",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 69,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L69",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L69",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "optionT.OptionT",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "OptionT",
              "signature": "interface OptionT<M, A> extends HKT<M, Option<A>> {}",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 18,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L18",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L18",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "optionT.OptionT1",
              "kind": "typeAlias",
              "name": "OptionT1",
              "signature": "type OptionT1<M extends URIS, A> = Kind<M, Option<A>>;",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L34",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "optionT.OptionT2",
              "kind": "typeAlias",
              "name": "OptionT2",
              "signature": "type OptionT2<M extends URIS2, E, A> = Kind2<M, E, Option<A>>;",
              "source": {
                "filename": "lib/OptionT.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L50",
              },
            },
          ],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "optionT",
        "kind": "namespace",
        "name": "optionT",
        "signature": "module 'lib/OptionT.d.ts' {}",
        "source": {
          "filename": "lib/OptionT.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Test whether a value is between a minimum and a maximum (inclusive)
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.between",
              "kind": "function",
              "name": "between",
              "signature": "between: <A>(O: Ord<A>) => (low: A, hi: A) => (x: A) => boolean;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L86",
              },
              "type": "<A>(O: Ord<A>) => (low: A, hi: A) => (x: A) => boolean",
            },
            {
              "docs": [
                "/**
 * Clamp a value between a minimum and a maximum
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.clamp",
              "kind": "function",
              "name": "clamp",
              "signature": "clamp: <A>(O: Ord<A>) => (low: A, hi: A) => (x: A) => A;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 80,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L80",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L80",
              },
              "type": "<A>(O: Ord<A>) => (low: A, hi: A) => (x: A) => A",
            },
            {
              "docs": [
                "/**
 * @category Contravariant
 * @since 2.0.0
 */",
              ],
              "id": "ord.contramap",
              "kind": "function",
              "name": "contramap",
              "signature": "contramap: <A, B>(f: (b: B) => A) => (fa: Ord<A>) => Ord<B>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 195,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L195",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L195",
              },
              "type": "<A, B>(f: (b: B) => A) => (fa: Ord<A>) => Ord<B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "ord.fromCompare",
              "kind": "function",
              "name": "fromCompare",
              "signature": "fromCompare: <A>(compare: (x: A, y: A) => Ordering) => Ord<A>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L91",
              },
              "type": "<A>(compare: (x: A, y: A) => Ordering) => Ord<A>",
            },
            {
              "docs": [
                "/**
 * Test whether one value is _non-strictly greater than_ another
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.geq",
              "kind": "function",
              "name": "geq",
              "signature": "geq: <A>(O: Ord<A>) => (x: A, y: A) => boolean;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 62,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L62",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L62",
              },
              "type": "<A>(O: Ord<A>) => (x: A, y: A) => boolean",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "ord.getDualOrd",
              "kind": "function",
              "name": "getDualOrd",
              "signature": "getDualOrd: <A>(O: Ord<A>) => Ord<A>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 190,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L190",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L190",
              },
              "type": "<A>(O: Ord<A>) => Ord<A>",
            },
            {
              "docs": [
                "/**
 * Returns a \`Monoid\` such that:
 *
 * - its \`concat(ord1, ord2)\` operation will order first by \`ord1\`, and then by \`ord2\`
 * - its \`empty\` value is an \`Ord\` that always considers compared elements equal
 *
 * @example
 * import { sort } from 'fp-ts/Array'
 * import { contramap, getDualOrd, getMonoid, ordBoolean, ordNumber, ordString } from 'fp-ts/Ord'
 * import { pipe } from 'fp-ts/function'
 * import { fold } from 'fp-ts/Monoid'
 *
 * interface User {
 *   id: number
 *   name: string
 *   age: number
 *   rememberMe: boolean
 * }
 *
 * const byName = pipe(
 *   ordString,
 *   contramap((p: User) => p.name)
 * )
 *
 * const byAge = pipe(
 *   ordNumber,
 *   contramap((p: User) => p.age)
 * )
 *
 * const byRememberMe = pipe(
 *   ordBoolean,
 *   contramap((p: User) => p.rememberMe)
 * )
 *
 * const M = getMonoid<User>()
 *
 * const users: Array<User> = [
 *   { id: 1, name: 'Guido', age: 47, rememberMe: false },
 *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
 *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
 *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }
 * ]
 *
 * // sort by name, then by age, then by \`rememberMe\`
 * const O1 = fold(M)([byName, byAge, byRememberMe])
 * assert.deepStrictEqual(sort(O1)(users), [
 *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
 *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },
 *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
 *   { id: 1, name: 'Guido', age: 47, rememberMe: false }
 * ])
 *
 * // now \`rememberMe = true\` first, then by name, then by age
 * const O2 = fold(M)([getDualOrd(byRememberMe), byName, byAge])
 * assert.deepStrictEqual(sort(O2)(users), [
 *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },
 *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
 *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
 *   { id: 1, name: 'Guido', age: 47, rememberMe: false }
 * ])
 *
 * @category instances
 * @since 2.4.0
 */",
              ],
              "id": "ord.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <A = never>() => Monoid<Ord<A>>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 164,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L164",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L164",
              },
              "type": "<A = never>() => Monoid<Ord<A>>",
            },
            {
              "docs": [
                "/**
 * Use \`getMonoid\` instead
 *
 * @category instances
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "ord.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <A = never>() => Semigroup<Ord<A>>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 99,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L99",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L99",
              },
              "type": "<A = never>() => Semigroup<Ord<A>>",
            },
            {
              "docs": [
                "/**
 * Given a tuple of \`Ord\`s returns an \`Ord\` for the tuple
 *
 * @example
 * import { getTupleOrd, ordString, ordNumber, ordBoolean } from 'fp-ts/Ord'
 *
 * const O = getTupleOrd(ordString, ordNumber, ordBoolean)
 * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)
 * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)
 * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.getTupleOrd",
              "kind": "function",
              "name": "getTupleOrd",
              "signature": "getTupleOrd: <T extends readonly Ord<any>[]>(
    ...ords: T
) => Ord<{ [K in keyof T]: T[K] extends Ord<infer A> ? A : never }>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 179,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L179",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L179",
              },
              "type": "<T extends readonly Ord<any>[]>(...ords: T) => Ord<{ [K in keyof T]: T[K] extends Ord<infer A> ? A : never; }>",
            },
            {
              "docs": [
                "/**
 * Test whether one value is _strictly greater than_ another
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.gt",
              "kind": "function",
              "name": "gt",
              "signature": "gt: <A>(O: Ord<A>) => (x: A, y: A) => boolean;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L50",
              },
              "type": "<A>(O: Ord<A>) => (x: A, y: A) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether one value is _non-strictly less than_ another
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.leq",
              "kind": "function",
              "name": "leq",
              "signature": "leq: <A>(O: Ord<A>) => (x: A, y: A) => boolean;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L56",
              },
              "type": "<A>(O: Ord<A>) => (x: A, y: A) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether one value is _strictly less than_ another
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.lt",
              "kind": "function",
              "name": "lt",
              "signature": "lt: <A>(O: Ord<A>) => (x: A, y: A) => boolean;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 44,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L44",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L44",
              },
              "type": "<A>(O: Ord<A>) => (x: A, y: A) => boolean",
            },
            {
              "docs": [
                "/**
 * Take the maximum of two values. If they are considered equal, the first argument is chosen
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.max",
              "kind": "function",
              "name": "max",
              "signature": "max: <A>(O: Ord<A>) => (x: A, y: A) => A;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 74,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L74",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L74",
              },
              "type": "<A>(O: Ord<A>) => (x: A, y: A) => A",
            },
            {
              "docs": [
                "/**
 * Take the minimum of two values. If they are considered equal, the first argument is chosen
 *
 * @since 2.0.0
 */",
              ],
              "id": "ord.min",
              "kind": "function",
              "name": "min",
              "signature": "min: <A>(O: Ord<A>) => (x: A, y: A) => A;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 68,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L68",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L68",
              },
              "type": "<A>(O: Ord<A>) => (x: A, y: A) => A",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "ord.Ord",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "ord.Ord.compare",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compare",
                    "signature": "readonly compare: (x: A, y: A) => Ordering;",
                    "source": {
                      "filename": "lib/Ord.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L22",
                    },
                    "type": "(x: A, y: A) => Ordering",
                  },
                ],
              },
              "name": "Ord",
              "signature": "interface Ord<A> extends Eq<A> {}",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 21,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L21",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L21",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 205,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L205",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L205",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "ord.Contravariant",
              "kind": "variable",
              "name": "Contravariant",
              "signature": "const Contravariant: Contravariant1<'Ord'>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 220,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L220",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L220",
              },
              "type": "Contravariant1<"Ord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.ord",
              "kind": "variable",
              "name": "ord",
              "signature": "const ord: Contravariant1<'Ord'>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 225,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L225",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L225",
              },
              "type": "Contravariant1<"Ord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.ordBoolean",
              "kind": "variable",
              "name": "ordBoolean",
              "signature": "const ordBoolean: Ord<boolean>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L38",
              },
              "type": "Ord<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.ordDate",
              "kind": "variable",
              "name": "ordDate",
              "signature": "const ordDate: Ord<Date>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 215,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L215",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L215",
              },
              "type": "Ord<Date>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.ordNumber",
              "kind": "variable",
              "name": "ordNumber",
              "signature": "const ordNumber: Ord<number>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L33",
              },
              "type": "Ord<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.ordString",
              "kind": "variable",
              "name": "ordString",
              "signature": "const ordString: Ord<string>;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L28",
              },
              "type": "Ord<string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ord.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Ord.d.ts",
                "line": 200,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L200",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L200",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * The \`Ord\` type class represents types which support comparisons with a _total order_.
 *
 * Instances should satisfy the laws of total orderings:
 *
 * 1. Reflexivity: \`S.compare(a, a) <= 0\`
 * 2. Antisymmetry: if \`S.compare(a, b) <= 0\` and \`S.compare(b, a) <= 0\` then \`a <-> b\`
 * 3. Transitivity: if \`S.compare(a, b) <= 0\` and \`S.compare(b, c) <= 0\` then \`S.compare(a, c) <= 0\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "ord",
        "kind": "namespace",
        "name": "ord",
        "signature": "module 'lib/Ord.d.ts' {}",
        "source": {
          "filename": "lib/Ord.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "ordering.invert",
              "kind": "function",
              "name": "invert",
              "signature": "invert: (O: Ordering) => Ordering;",
              "source": {
                "filename": "lib/Ordering.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts#L37",
              },
              "type": "(O: Ordering) => Ordering",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "ordering.sign",
              "kind": "function",
              "name": "sign",
              "signature": "sign: (n: number) => Ordering;",
              "source": {
                "filename": "lib/Ordering.d.ts",
                "line": 15,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts#L15",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts#L15",
              },
              "type": "(n: number) => Ordering",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "ordering.Ordering",
              "kind": "typeAlias",
              "name": "Ordering",
              "signature": "type Ordering = -1 | 0 | 1;",
              "source": {
                "filename": "lib/Ordering.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts#L11",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ordering.eqOrdering",
              "kind": "variable",
              "name": "eqOrdering",
              "signature": "const eqOrdering: Eq<Ordering>;",
              "source": {
                "filename": "lib/Ordering.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts#L20",
              },
              "type": "Eq<Ordering>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.4.0
 */",
              ],
              "id": "ordering.monoidOrdering",
              "kind": "variable",
              "name": "monoidOrdering",
              "signature": "const monoidOrdering: Monoid<Ordering>;",
              "source": {
                "filename": "lib/Ordering.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts#L33",
              },
              "type": "Monoid<Ordering>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Use \`monoidOrdering\` instead
 *
 * @category instances
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "ordering.semigroupOrdering",
              "kind": "variable",
              "name": "semigroupOrdering",
              "signature": "const semigroupOrdering: Semigroup<Ordering>;",
              "source": {
                "filename": "lib/Ordering.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts#L28",
              },
              "type": "Semigroup<Ordering>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "ordering",
        "kind": "namespace",
        "name": "ordering",
        "signature": "module 'lib/Ordering.d.ts' {}",
        "source": {
          "filename": "lib/Ordering.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.pipeable",
              "kind": "function",
              "name": "pipeable",
              "signature": "pipeable: {
    <F extends URIS4, I>(I: { readonly URI: F } & I): (I extends Chain4<F>
        ? PipeableChain4<F>
        : I extends Apply4<F>
        ? PipeableApply4<F>
        : I extends Functor4<F>
        ? PipeableFunctor4<F>
        : {}) &
        (I extends Contravariant4<F> ? PipeableContravariant4<F> : {}) &
        (I extends FunctorWithIndex4<F, infer Ix>
            ? PipeableFunctorWithIndex4<F, Ix>
            : {}) &
        (I extends Bifunctor4<F> ? PipeableBifunctor4<F> : {}) &
        (I extends Extend4<F> ? PipeableExtend4<F> : {}) &
        (I extends FoldableWithIndex4<F, infer Ix>
            ? PipeableFoldableWithIndex4<F, Ix>
            : I extends Foldable4<F>
            ? PipeableFoldable4<F>
            : {}) &
        (I extends Alt4<F> ? PipeableAlt4<F> : {}) &
        (I extends FilterableWithIndex4<F, infer Ix>
            ? PipeableFilterableWithIndex4<F, Ix>
            : I extends Filterable4<F>
            ? PipeableFilterable4<F>
            : I extends Compactable4<F>
            ? PipeableCompactable4<F>
            : {}) &
        (I extends Profunctor4<F> ? PipeableProfunctor4<F> : {}) &
        (I extends Semigroupoid4<F> ? PipeableSemigroupoid4<F> : {}) &
        (I extends MonadThrow4<F> ? PipeableMonadThrow4<F> : {});
    <F extends URIS3, I>(I: { readonly URI: F } & I): (I extends Chain3<F>
        ? PipeableChain3<F>
        : I extends Apply3<F>
        ? PipeableApply3<F>
        : I extends Functor3<F>
        ? PipeableFunctor3<F>
        : {}) &
        (I extends Contravariant3<F> ? PipeableContravariant3<F> : {}) &
        (I extends FunctorWithIndex3<F, infer Ix>
            ? PipeableFunctorWithIndex3<F, Ix>
            : {}) &
        (I extends Bifunctor3<F> ? PipeableBifunctor3<F> : {}) &
        (I extends Extend3<F> ? PipeableExtend3<F> : {}) &
        (I extends FoldableWithIndex3<F, infer Ix>
            ? PipeableFoldableWithIndex3<F, Ix>
            : I extends Foldable3<F>
            ? PipeableFoldable3<F>
            : {}) &
        (I extends Alt3<F> ? PipeableAlt3<F> : {}) &
        (I extends FilterableWithIndex3<F, infer Ix>
            ? PipeableFilterableWithIndex3<F, Ix>
            : I extends Filterable3<F>
            ? PipeableFilterable3<F>
            : I extends Compactable3<F>
            ? PipeableCompactable3<F>
            : {}) &
        (I extends Profunctor3<F> ? PipeableProfunctor3<F> : {}) &
        (I extends Semigroupoid3<F> ? PipeableSemigroupoid3<F> : {}) &
        (I extends MonadThrow3<F> ? PipeableMonadThrow3<F> : {});
    <F extends URIS3, I, E>(I: { readonly URI: F } & I): (I extends Chain3C<F, E>
        ? PipeableChain3C<F, E>
        : I extends Apply3C<F, E>
        ? PipeableApply3C<F, E>
        : I extends Functor3C<F, E>
        ? PipeableFunctor3C<F, E>
        : {}) &
        (I extends Contravariant3C<F, E> ? PipeableContravariant3C<F, E> : {}) &
        (I extends FunctorWithIndex3C<F, infer Ix, E>
            ? PipeableFunctorWithIndex3C<F, Ix, E>
            : {}) &
        (I extends Bifunctor3C<F, E> ? PipeableBifunctor3C<F, E> : {}) &
        (I extends Extend3C<F, E> ? PipeableExtend3C<F, E> : {}) &
        (I extends FoldableWithIndex3C<F, infer Ix, E>
            ? PipeableFoldableWithIndex3C<F, Ix, E>
            : I extends Foldable3C<F, E>
            ? PipeableFoldable3C<F, E>
            : {}) &
        (I extends Alt3C<F, E> ? PipeableAlt3C<F, E> : {}) &
        (I extends FilterableWithIndex3C<F, infer Ix, E>
            ? PipeableFilterableWithIndex3C<F, Ix, E>
            : I extends Filterable3C<F, E>
            ? PipeableFilterable3C<F, E>
            : I extends Compactable3C<F, E>
            ? PipeableCompactable3C<F, E>
            : {}) &
        (I extends Profunctor3C<F, E> ? PipeableProfunctor3C<F, E> : {}) &
        (I extends Semigroupoid3C<F, E> ? PipeableSemigroupoid3C<F, E> : {}) &
        (I extends MonadThrow3C<F, E> ? PipeableMonadThrow3C<F, E> : {});
    <F extends URIS2, I, E>(
        I: { readonly URI: F; readonly _E: E } & I
    ): (I extends Chain2C<F, E>
        ? PipeableChain2C<F, E>
        : I extends Apply2C<F, E>
        ? PipeableApply2C<F, E>
        : I extends Functor2C<F, E>
        ? PipeableFunctor2C<F, E>
        : {}) &
        (I extends Contravariant2C<F, E> ? PipeableContravariant2C<F, E> : {}) &
        (I extends FunctorWithIndex2C<F, infer Ix, E>
            ? PipeableFunctorWithIndex2C<F, Ix, E>
            : {}) &
        (I extends Extend2C<F, E> ? PipeableExtend2C<F, E> : {}) &
        (I extends FoldableWithIndex2C<F, infer Ix, E>
            ? PipeableFoldableWithIndex2C<F, Ix, E>
            : I extends Foldable2C<F, E>
            ? PipeableFoldable2C<F, E>
            : {}) &
        (I extends Alt2C<F, E> ? PipeableAlt2C<F, E> : {}) &
        (I extends FilterableWithIndex2C<F, infer Ix, E>
            ? PipeableFilterableWithIndex2C<F, Ix, E>
            : I extends Filterable2C<F, E>
            ? PipeableFilterable2C<F, E>
            : I extends Compactable2C<F, E>
            ? PipeableCompactable2C<F, E>
            : {}) &
        (I extends Profunctor2C<F, E> ? PipeableProfunctor2C<F, E> : {}) &
        (I extends Semigroupoid2C<F, E> ? PipeableSemigroupoid2C<F, E> : {}) &
        (I extends MonadThrow2C<F, E> ? PipeableMonadThrow2C<F, E> : {});
    <F extends URIS2, I>(I: { readonly URI: F } & I): (I extends Chain2<F>
        ? PipeableChain2<F>
        : I extends Apply2<F>
        ? PipeableApply2<F>
        : I extends Functor2<F>
        ? PipeableFunctor2<F>
        : {}) &
        (I extends Contravariant2<F> ? PipeableContravariant2<F> : {}) &
        (I extends FunctorWithIndex2<F, infer Ix>
            ? PipeableFunctorWithIndex2<F, Ix>
            : {}) &
        (I extends Bifunctor2<F> ? PipeableBifunctor2<F> : {}) &
        (I extends Extend2<F> ? PipeableExtend2<F> : {}) &
        (I extends FoldableWithIndex2<F, infer Ix>
            ? PipeableFoldableWithIndex2<F, Ix>
            : I extends Foldable2<F>
            ? PipeableFoldable2<F>
            : {}) &
        (I extends Alt2<F> ? PipeableAlt2<F> : {}) &
        (I extends FilterableWithIndex2<F, infer Ix>
            ? PipeableFilterableWithIndex2<F, Ix>
            : I extends Filterable2<F>
            ? PipeableFilterable2<F>
            : I extends Compactable2<F>
            ? PipeableCompactable2<F>
            : {}) &
        (I extends Profunctor2<F> ? PipeableProfunctor2<F> : {}) &
        (I extends Semigroupoid2<F> ? PipeableSemigroupoid2<F> : {}) &
        (I extends MonadThrow2<F> ? PipeableMonadThrow2<F> : {});
    <F extends URIS, I>(I: { readonly URI: F } & I): (I extends Chain1<F>
        ? PipeableChain1<F>
        : I extends Apply1<F>
        ? PipeableApply1<F>
        : I extends Functor1<F>
        ? PipeableFunctor1<F>
        : {}) &
        (I extends Contravariant1<F> ? PipeableContravariant1<F> : {}) &
        (I extends FunctorWithIndex1<F, infer Ix>
            ? PipeableFunctorWithIndex1<F, Ix>
            : {}) &
        (I extends Extend1<F> ? PipeableExtend1<F> : {}) &
        (I extends FoldableWithIndex1<F, infer Ix>
            ? PipeableFoldableWithIndex1<F, Ix>
            : I extends Foldable1<F>
            ? PipeableFoldable1<F>
            : {}) &
        (I extends Alt1<F> ? PipeableAlt1<F> : {}) &
        (I extends FilterableWithIndex1<F, infer Ix>
            ? PipeableFilterableWithIndex1<F, Ix>
            : I extends Filterable1<F>
            ? PipeableFilterable1<F>
            : I extends Compactable1<F>
            ? PipeableCompactable1<F>
            : {}) &
        (I extends MonadThrow1<F> ? PipeableMonadThrow1<F> : {});
    <F, I>(I: { readonly URI: F } & I): (I extends Chain<F>
        ? PipeableChain<F>
        : I extends Apply<F>
        ? PipeableApply<F>
        : I extends Functor<F>
        ? PipeableFunctor<F>
        : {}) &
        (I extends Contravariant<F> ? PipeableContravariant<F> : {}) &
        (I extends FunctorWithIndex<F, infer Ix>
            ? PipeableFunctorWithIndex<F, Ix>
            : {}) &
        (I extends Bifunctor<F> ? PipeableBifunctor<F> : {}) &
        (I extends Extend<F> ? PipeableExtend<F> : {}) &
        (I extends FoldableWithIndex<F, infer Ix>
            ? PipeableFoldableWithIndex<F, Ix>
            : I extends Foldable<F>
            ? PipeableFoldable<F>
            : {}) &
        (I extends Alt<F> ? PipeableAlt<F> : {}) &
        (I extends FilterableWithIndex<F, infer Ix>
            ? PipeableFilterableWithIndex<F, Ix>
            : I extends Filterable<F>
            ? PipeableFilterable<F>
            : I extends Compactable<F>
            ? PipeableCompactable<F>
            : {}) &
        (I extends Profunctor<F> ? PipeableProfunctor<F> : {}) &
        (I extends Semigroupoid<F> ? PipeableSemigroupoid<F> : {}) &
        (I extends MonadThrow<F> ? PipeableMonadThrow<F> : {});
};",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 1096,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1096",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1096",
              },
              "type": "{ <F extends URIS4, I>(I: {    readonly URI: F;} & I): (I extends Chain4<F> ? PipeableChain4<F> : I extends Apply4<F> ? PipeableApply4<F> : I extends Functor4<F> ? PipeableFunctor4<F> : {}) & (I extends Contravariant4<F> ? PipeableContravariant4<F> : {}) & (I extends FunctorWithIndex4<F, infer Ix> ? PipeableFunctorWithIndex4<F, Ix> : {}) & (I extends Bifunctor4<F> ? PipeableBifunctor4<F> : {}) & (I extends Extend4<F> ? PipeableExtend4<F> : {}) & (I extends FoldableWithIndex4<F, infer Ix> ? PipeableFoldableWithIndex4<F, Ix> : I extends Foldable4<F> ? PipeableFoldable4<F> : {}) & (I extends Alt4<F> ? PipeableAlt4<F> : {}) & (I extends FilterableWithIndex4<F, infer Ix> ? PipeableFilterableWithIndex4<F, Ix> : I extends Filterable4<F> ? PipeableFilterable4<F> : I extends Compactable4<F> ? PipeableCompactable4<F> : {}) & (I extends Profunctor4<F> ? PipeableProfunctor4<F> : {}) & (I extends Semigroupoid4<F> ? PipeableSemigroupoid4<F> : {}) & (I extends MonadThrow4<F> ? PipeableMonadThrow4<F> : {}); <F extends URIS3, I>(I: { readonly URI: F; } & I): (I extends Chain3<F> ? PipeableChain3<F> : I extends Apply3<F> ? PipeableApply3<F> : I extends Functor3<F> ? PipeableFunctor3<F> : {}) & (I extends Contravariant3<F> ? PipeableContravariant3<F> : {}) & (I extends FunctorWithIndex3<F, infer Ix> ? PipeableFunctorWithIndex3<F, Ix> : {}) & (I extends Bifunctor3<F> ? PipeableBifunctor3<F> : {}) & (I extends Extend3<F> ? PipeableExtend3<F> : {}) & (I extends FoldableWithIndex3<F, infer Ix> ? PipeableFoldableWithIndex3<F, Ix> : I extends Foldable3<F> ? PipeableFoldable3<F> : {}) & (I extends Alt3<F> ? PipeableAlt3<F> : {}) & (I extends FilterableWithIndex3<F, infer Ix> ? PipeableFilterableWithIndex3<F, Ix> : I extends Filterable3<F> ? PipeableFilterable3<F> : I extends Compactable3<F> ? PipeableCompactable3<F> : {}) & (I extends Profunctor3<F> ? PipeableProfunctor3<F> : {}) & (I extends Semigroupoid3<F> ? PipeableSemigroupoid3<F> : {}) & (I extends MonadThrow3<F> ? PipeableMonadThrow3<F> : {}); <F extends URIS3, I, E>(I: { readonly URI: F; } & I): (I extends Chain3C<F, E> ? PipeableChain3C<F, E> : I extends Apply3C<F, E> ? PipeableApply3C<F, E> : I extends Functor3C<F, E> ? PipeableFunctor3C<F, E> : {}) & (I extends Contravariant3C<F, E> ? PipeableContravariant3C<F, E> : {}) & (I extends FunctorWithIndex3C<F, infer Ix, E> ? PipeableFunctorWithIndex3C<F, Ix, E> : {}) & (I extends Bifunctor3C<F, E> ? PipeableBifunctor3C<F, E> : {}) & (I extends Extend3C<F, E> ? PipeableExtend3C<F, E> : {}) & (I extends FoldableWithIndex3C<F, infer Ix, E> ? PipeableFoldableWithIndex3C<F, Ix, E> : I extends Foldable3C<F, E> ? PipeableFoldable3C<F, E> : {}) & (I extends Alt3C<F, E> ? PipeableAlt3C<F, E> : {}) & (I extends FilterableWithIndex3C<F, infer Ix, E> ? PipeableFilterableWithIndex3C<F, Ix, E> : I extends Filterable3C<F, E> ? PipeableFilterable3C<F, E> : I extends Compactable3C<F, E> ? PipeableCompactable3C<F, E> : {}) & (I extends Profunctor3C<F, E> ? PipeableProfunctor3C<F, E> : {}) & (I extends Semigroupoid3C<F, E> ? PipeableSemigroupoid3C<F, E> : {}) & (I extends MonadThrow3C<F, E> ? PipeableMonadThrow3C<F, E> : {}); <F extends URIS2, I, E>(I: { readonly URI: F; readonly _E: E; } & I): (I extends Chain2C<F, E> ? PipeableChain2C<F, E> : I extends Apply2C<F, E> ? PipeableApply2C<F, E> : I extends Functor2C<F, E> ? PipeableFunctor2C<F, E> : {}) & (I extends Contravariant2C<F, E> ? PipeableContravariant2C<F, E> : {}) & (I extends FunctorWithIndex2C<F, infer Ix, E> ? PipeableFunctorWithIndex2C<F, Ix, E> : {}) & (I extends Extend2C<F, E> ? PipeableExtend2C<F, E> : {}) & (I extends FoldableWithIndex2C<F, infer Ix, E> ? PipeableFoldableWithIndex2C<F, Ix, E> : I extends Foldable2C<F, E> ? PipeableFoldable2C<F, E> : {}) & (I extends Alt2C<F, E> ? PipeableAlt2C<F, E> : {}) & (I extends FilterableWithIndex2C<F, infer Ix, E> ? PipeableFilterableWithIndex2C<F, Ix, E> : I extends Filterable2C<F, E> ? PipeableFilterable2C<F, E> : I extends Compactable2C<F, E> ? PipeableCompactable2C<F, E> : {}) & (I extends Profunctor2C<F, E> ? PipeableProfunctor2C<F, E> : {}) & (I extends Semigroupoid2C<F, E> ? PipeableSemigroupoid2C<F, E> : {}) & (I extends MonadThrow2C<F, E> ? PipeableMonadThrow2C<F, E> : {}); <F extends URIS2, I>(I: { readonly URI: F; } & I): (I extends Chain2<F> ? PipeableChain2<F> : I extends Apply2<F> ? PipeableApply2<F> : I extends Functor2<F> ? PipeableFunctor2<F> : {}) & (I extends Contravariant2<F> ? PipeableContravariant2<F> : {}) & (I extends FunctorWithIndex2<F, infer Ix> ? PipeableFunctorWithIndex2<F, Ix> : {}) & (I extends Bifunctor2<F> ? PipeableBifunctor2<F> : {}) & (I extends Extend2<F> ? PipeableExtend2<F> : {}) & (I extends FoldableWithIndex2<F, infer Ix> ? PipeableFoldableWithIndex2<F, Ix> : I extends Foldable2<F> ? PipeableFoldable2<F> : {}) & (I extends Alt2<F> ? PipeableAlt2<F> : {}) & (I extends FilterableWithIndex2<F, infer Ix> ? PipeableFilterableWithIndex2<F, Ix> : I extends Filterable2<F> ? PipeableFilterable2<F> : I extends Compactable2<F> ? PipeableCompactable2<F> : {}) & (I extends Profunctor2<F> ? PipeableProfunctor2<F> : {}) & (I extends Semigroupoid2<F> ? PipeableSemigroupoid2<F> : {}) & (I extends MonadThrow2<F> ? PipeableMonadThrow2<F> : {}); <F extends URIS, I>(I: { readonly URI: F; } & I): (I extends Chain1<F> ? PipeableChain1<F> : I extends Apply1<F> ? PipeableApply1<F> : I extends Functor1<F> ? PipeableFunctor1<F> : {}) & (I extends Contravariant1<F> ? PipeableContravariant1<F> : {}) & (I extends FunctorWithIndex1<F, infer Ix> ? PipeableFunctorWithIndex1<F, Ix> : {}) & (I extends Extend1<F> ? PipeableExtend1<F> : {}) & (I extends FoldableWithIndex1<F, infer Ix> ? PipeableFoldableWithIndex1<F, Ix> : I extends Foldable1<F> ? PipeableFoldable1<F> : {}) & (I extends Alt1<F> ? PipeableAlt1<F> : {}) & (I extends FilterableWithIndex1<F, infer Ix> ? PipeableFilterableWithIndex1<F, Ix> : I extends Filterable1<F> ? PipeableFilterable1<F> : I extends Compactable1<F> ? PipeableCompactable1<F> : {}) & (I extends MonadThrow1<F> ? PipeableMonadThrow1<F> : {}); <F, I>(I: { readonly URI: F; } & I): (I extends Chain<F> ? PipeableChain<F> : I extends Apply<F> ? PipeableApply<F> : I extends Functor<F> ? PipeableFunctor<F> : {}) & (I extends Contravariant<F> ? PipeableContravariant<F> : {}) & (I extends FunctorWithIndex<F, infer Ix> ? PipeableFunctorWithIndex<F, Ix> : {}) & (I extends Bifunctor<F> ? PipeableBifunctor<F> : {}) & (I extends Extend<F> ? PipeableExtend<F> : {}) & (I extends FoldableWithIndex<F, infer Ix> ? PipeableFoldableWithIndex<F, Ix> : I extends Foldable<F> ? PipeableFoldable<F> : {}) & (I extends Alt<F> ? PipeableAlt<F> : {}) & (I extends FilterableWithIndex<F, infer Ix> ? PipeableFilterableWithIndex<F, Ix> : I extends Filterable<F> ? PipeableFilterable<F> : I extends Compactable<F> ? PipeableCompactable<F> : {}) & (I extends Profunctor<F> ? PipeableProfunctor<F> : {}) & (I extends Semigroupoid<F> ? PipeableSemigroupoid<F> : {}) & (I extends MonadThrow<F> ? PipeableMonadThrow<F> : {}); }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableAlt",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableAlt.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(that: Lazy<HKT<F, A>>) => (fa: HKT<F, A>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 546,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L546",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L546",
                    },
                    "type": "<A>(that: Lazy<HKT<F, A>>) => (fa: HKT<F, A>) => HKT<F, A>",
                  },
                ],
              },
              "name": "PipeableAlt",
              "signature": "interface PipeableAlt<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 545,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L545",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L545",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableAlt1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableAlt1.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(that: Lazy<Kind<F, A>>) => (fa: Kind<F, A>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 552,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L552",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L552",
                    },
                    "type": "<A>(that: Lazy<Kind<F, A>>) => (fa: Kind<F, A>) => Kind<F, A>",
                  },
                ],
              },
              "name": "PipeableAlt1",
              "signature": "interface PipeableAlt1<F extends URIS> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 551,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L551",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L551",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableAlt2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableAlt2.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <E, A>(
    that: Lazy<Kind2<F, E, A>>
) => (fa: Kind2<F, E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 558,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L558",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L558",
                    },
                    "type": "<E, A>(that: Lazy<Kind2<F, E, A>>) => (fa: Kind2<F, E, A>) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "PipeableAlt2",
              "signature": "interface PipeableAlt2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 557,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L557",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L557",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableAlt2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableAlt2C.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(
    that: Lazy<Kind2<F, E, A>>
) => (fa: Kind2<F, E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 564,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L564",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L564",
                    },
                    "type": "<A>(that: Lazy<Kind2<F, E, A>>) => (fa: Kind2<F, E, A>) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "PipeableAlt2C",
              "signature": "interface PipeableAlt2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 563,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L563",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L563",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableAlt3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableAlt3.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <R, E, A>(
    that: Lazy<Kind3<F, R, E, A>>
) => (fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 570,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L570",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L570",
                    },
                    "type": "<R, E, A>(that: Lazy<Kind3<F, R, E, A>>) => (fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "PipeableAlt3",
              "signature": "interface PipeableAlt3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 569,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L569",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L569",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableAlt3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableAlt3C.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <R, A>(
    that: Lazy<Kind3<F, R, E, A>>
) => (fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 576,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L576",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L576",
                    },
                    "type": "<R, A>(that: Lazy<Kind3<F, R, E, A>>) => (fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "PipeableAlt3C",
              "signature": "interface PipeableAlt3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 575,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L575",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L575",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableAlt4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableAlt4.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <S, R, E, A>(
    that: Lazy<Kind4<F, S, R, E, A>>
) => (fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 582,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L582",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L582",
                    },
                    "type": "<S, R, E, A>(that: Lazy<Kind4<F, S, R, E, A>>) => (fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>",
                  },
                ],
              },
              "name": "PipeableAlt4",
              "signature": "interface PipeableAlt4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 581,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L581",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L581",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableApply",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A>(fa: HKT<F, A>) => <B>(fab: HKT<F, (a: A) => B>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 227,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L227",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L227",
                    },
                    "type": "<A>(fa: HKT<F, A>) => <B>(fab: HKT<F, (a: A) => B>) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply.apFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apFirst",
                    "signature": "readonly apFirst: <B>(fb: HKT<F, B>) => <A>(fa: HKT<F, A>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 228,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L228",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L228",
                    },
                    "type": "<B>(fb: HKT<F, B>) => <A>(fa: HKT<F, A>) => HKT<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply.apSecond",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apSecond",
                    "signature": "readonly apSecond: <B>(fb: HKT<F, B>) => <A>(fa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 229,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L229",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L229",
                    },
                    "type": "<B>(fb: HKT<F, B>) => <A>(fa: HKT<F, A>) => HKT<F, B>",
                  },
                ],
              },
              "name": "PipeableApply",
              "signature": "interface PipeableApply<F> extends PipeableFunctor<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 226,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L226",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L226",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableApply1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply1.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A>(fa: Kind<F, A>) => <B>(fab: Kind<F, (a: A) => B>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 235,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L235",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L235",
                    },
                    "type": "<A>(fa: Kind<F, A>) => <B>(fab: Kind<F, (a: A) => B>) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply1.apFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apFirst",
                    "signature": "readonly apFirst: <B>(fb: Kind<F, B>) => <A>(fa: Kind<F, A>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 236,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L236",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L236",
                    },
                    "type": "<B>(fb: Kind<F, B>) => <A>(fa: Kind<F, A>) => Kind<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply1.apSecond",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apSecond",
                    "signature": "readonly apSecond: <B>(fb: Kind<F, B>) => <A>(fa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 237,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L237",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L237",
                    },
                    "type": "<B>(fb: Kind<F, B>) => <A>(fa: Kind<F, A>) => Kind<F, B>",
                  },
                ],
              },
              "name": "PipeableApply1",
              "signature": "interface PipeableApply1<F extends URIS> extends PipeableFunctor1<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 234,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L234",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L234",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableApply2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply2.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <E, A>(
    fa: Kind2<F, E, A>
) => <B>(fab: Kind2<F, E, (a: A) => B>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 243,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L243",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L243",
                    },
                    "type": "<E, A>(fa: Kind2<F, E, A>) => <B>(fab: Kind2<F, E, (a: A) => B>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply2.apFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apFirst",
                    "signature": "readonly apFirst: <E, B>(
    fb: Kind2<F, E, B>
) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 244,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L244",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L244",
                    },
                    "type": "<E, B>(fb: Kind2<F, E, B>) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply2.apSecond",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apSecond",
                    "signature": "readonly apSecond: <E, B>(
    fb: Kind2<F, E, B>
) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 245,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L245",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L245",
                    },
                    "type": "<E, B>(fb: Kind2<F, E, B>) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableApply2",
              "signature": "interface PipeableApply2<F extends URIS2> extends PipeableFunctor2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 242,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L242",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L242",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableApply2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply2C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <A>(
    fa: Kind2<F, E, A>
) => <B>(fab: Kind2<F, E, (a: A) => B>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 251,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L251",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L251",
                    },
                    "type": "<A>(fa: Kind2<F, E, A>) => <B>(fab: Kind2<F, E, (a: A) => B>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply2C.apFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apFirst",
                    "signature": "readonly apFirst: <B>(
    fb: Kind2<F, E, B>
) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 252,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L252",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L252",
                    },
                    "type": "<B>(fb: Kind2<F, E, B>) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply2C.apSecond",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apSecond",
                    "signature": "readonly apSecond: <B>(
    fb: Kind2<F, E, B>
) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 253,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L253",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L253",
                    },
                    "type": "<B>(fb: Kind2<F, E, B>) => <A>(fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableApply2C",
              "signature": "interface PipeableApply2C<F extends URIS2, E> extends PipeableFunctor2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 250,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L250",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L250",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableApply3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply3.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, E, A>(
    fa: Kind3<F, R, E, A>
) => <B>(fab: Kind3<F, R, E, (a: A) => B>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 259,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L259",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L259",
                    },
                    "type": "<R, E, A>(fa: Kind3<F, R, E, A>) => <B>(fab: Kind3<F, R, E, (a: A) => B>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply3.apFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apFirst",
                    "signature": "readonly apFirst: <R, E, B>(
    fb: Kind3<F, R, E, B>
) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 260,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L260",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L260",
                    },
                    "type": "<R, E, B>(fb: Kind3<F, R, E, B>) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply3.apSecond",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apSecond",
                    "signature": "readonly apSecond: <R, E, B>(
    fb: Kind3<F, R, E, B>
) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 261,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L261",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L261",
                    },
                    "type": "<R, E, B>(fb: Kind3<F, R, E, B>) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableApply3",
              "signature": "interface PipeableApply3<F extends URIS3> extends PipeableFunctor3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 258,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L258",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L258",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableApply3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply3C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, A>(
    fa: Kind3<F, R, E, A>
) => <B>(fab: Kind3<F, R, E, (a: A) => B>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 267,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L267",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L267",
                    },
                    "type": "<R, A>(fa: Kind3<F, R, E, A>) => <B>(fab: Kind3<F, R, E, (a: A) => B>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply3C.apFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apFirst",
                    "signature": "readonly apFirst: <R, B>(
    fb: Kind3<F, R, E, B>
) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 268,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L268",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L268",
                    },
                    "type": "<R, B>(fb: Kind3<F, R, E, B>) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply3C.apSecond",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apSecond",
                    "signature": "readonly apSecond: <R, B>(
    fb: Kind3<F, R, E, B>
) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 269,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L269",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L269",
                    },
                    "type": "<R, B>(fb: Kind3<F, R, E, B>) => <A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableApply3C",
              "signature": "interface PipeableApply3C<F extends URIS3, E> extends PipeableFunctor3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 266,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L266",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L266",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableApply4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply4.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, R, E, A>(
    fa: Kind4<F, S, R, E, A>
) => <B>(fab: Kind4<F, S, R, E, (a: A) => B>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 275,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L275",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L275",
                    },
                    "type": "<S, R, E, A>(fa: Kind4<F, S, R, E, A>) => <B>(fab: Kind4<F, S, R, E, (a: A) => B>) => Kind4<F, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply4.apFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apFirst",
                    "signature": "readonly apFirst: <S, R, E, B>(
    fb: Kind4<F, S, R, E, B>
) => <A>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 278,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L278",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L278",
                    },
                    "type": "<S, R, E, B>(fb: Kind4<F, S, R, E, B>) => <A>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableApply4.apSecond",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "apSecond",
                    "signature": "readonly apSecond: <S, R, E, B>(
    fb: Kind4<F, S, R, E, B>
) => <A>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 279,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L279",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L279",
                    },
                    "type": "<S, R, E, B>(fb: Kind4<F, S, R, E, B>) => <A>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "PipeableApply4",
              "signature": "interface PipeableApply4<F extends URIS4> extends PipeableFunctor4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 274,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L274",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L274",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableBifunctor",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: HKT2<F, E, A>) => HKT2<F, G, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 396,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L396",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L396",
                    },
                    "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: HKT2<F, E, A>) => HKT2<F, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, G>(
    f: (e: E) => G
) => <A>(fa: HKT2<F, E, A>) => HKT2<F, G, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 397,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L397",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L397",
                    },
                    "type": "<E, G>(f: (e: E) => G) => <A>(fa: HKT2<F, E, A>) => HKT2<F, G, A>",
                  },
                ],
              },
              "name": "PipeableBifunctor",
              "signature": "interface PipeableBifunctor<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 395,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L395",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L395",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableBifunctor2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor2.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: Kind2<F, E, A>) => Kind2<F, G, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 403,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L403",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L403",
                    },
                    "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: Kind2<F, E, A>) => Kind2<F, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor2.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, G>(
    f: (e: E) => G
) => <A>(fa: Kind2<F, E, A>) => Kind2<F, G, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 404,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L404",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L404",
                    },
                    "type": "<E, G>(f: (e: E) => G) => <A>(fa: Kind2<F, E, A>) => Kind2<F, G, A>",
                  },
                ],
              },
              "name": "PipeableBifunctor2",
              "signature": "interface PipeableBifunctor2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 402,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L402",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L402",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableBifunctor3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor3.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 410,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L410",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L410",
                    },
                    "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor3.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, G>(
    f: (e: E) => G
) => <R, A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 411,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L411",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L411",
                    },
                    "type": "<E, G>(f: (e: E) => G) => <R, A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, A>",
                  },
                ],
              },
              "name": "PipeableBifunctor3",
              "signature": "interface PipeableBifunctor3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 409,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L409",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L409",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableBifunctor3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor3C.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 417,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L417",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L417",
                    },
                    "type": "<G, A, B>(f: (e: E) => G, g: (a: A) => B) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor3C.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <G>(
    f: (e: E) => G
) => <R, A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 418,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L418",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L418",
                    },
                    "type": "<G>(f: (e: E) => G) => <R, A>(fa: Kind3<F, R, E, A>) => Kind3<F, R, G, A>",
                  },
                ],
              },
              "name": "PipeableBifunctor3C",
              "signature": "interface PipeableBifunctor3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 416,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L416",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L416",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableBifunctor4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor4.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => <S, R>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, G, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 424,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L424",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L424",
                    },
                    "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => <S, R>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, G, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableBifunctor4.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, G>(
    f: (e: E) => G
) => <S, R, A>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, G, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 428,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L428",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L428",
                    },
                    "type": "<E, G>(f: (e: E) => G) => <S, R, A>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, G, A>",
                  },
                ],
              },
              "name": "PipeableBifunctor4",
              "signature": "interface PipeableBifunctor4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 423,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L423",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L423",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableChain",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(f: (a: A) => HKT<F, B>) => (ma: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 285,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L285",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L285",
                    },
                    "type": "<A, B>(f: (a: A) => HKT<F, B>) => (ma: HKT<F, A>) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain.chainFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainFirst",
                    "signature": "readonly chainFirst: <A, B>(
    f: (a: A) => HKT<F, B>
) => (ma: HKT<F, A>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 286,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L286",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L286",
                    },
                    "type": "<A, B>(f: (a: A) => HKT<F, B>) => (ma: HKT<F, A>) => HKT<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain.flatten",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "flatten",
                    "signature": "readonly flatten: <A>(mma: HKT<F, HKT<F, A>>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 287,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L287",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L287",
                    },
                    "type": "<A>(mma: HKT<F, HKT<F, A>>) => HKT<F, A>",
                  },
                ],
              },
              "name": "PipeableChain",
              "signature": "interface PipeableChain<F> extends PipeableApply<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 284,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L284",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L284",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableChain1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain1.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    f: (a: A) => Kind<F, B>
) => (ma: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 293,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L293",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L293",
                    },
                    "type": "<A, B>(f: (a: A) => Kind<F, B>) => (ma: Kind<F, A>) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain1.chainFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainFirst",
                    "signature": "readonly chainFirst: <A, B>(
    f: (a: A) => Kind<F, B>
) => (ma: Kind<F, A>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 294,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L294",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L294",
                    },
                    "type": "<A, B>(f: (a: A) => Kind<F, B>) => (ma: Kind<F, A>) => Kind<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain1.flatten",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "flatten",
                    "signature": "readonly flatten: <A>(mma: Kind<F, Kind<F, A>>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 295,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L295",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L295",
                    },
                    "type": "<A>(mma: Kind<F, Kind<F, A>>) => Kind<F, A>",
                  },
                ],
              },
              "name": "PipeableChain1",
              "signature": "interface PipeableChain1<F extends URIS> extends PipeableApply1<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 292,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L292",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L292",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableChain2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain2.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <E, A, B>(
    f: (a: A) => Kind2<F, E, B>
) => (ma: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 301,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L301",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L301",
                    },
                    "type": "<E, A, B>(f: (a: A) => Kind2<F, E, B>) => (ma: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain2.chainFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainFirst",
                    "signature": "readonly chainFirst: <E, A, B>(
    f: (a: A) => Kind2<F, E, B>
) => (ma: Kind2<F, E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 302,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L302",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L302",
                    },
                    "type": "<E, A, B>(f: (a: A) => Kind2<F, E, B>) => (ma: Kind2<F, E, A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain2.flatten",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "flatten",
                    "signature": "readonly flatten: <E, A>(mma: Kind2<F, E, Kind2<F, E, A>>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 303,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L303",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L303",
                    },
                    "type": "<E, A>(mma: Kind2<F, E, Kind2<F, E, A>>) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "PipeableChain2",
              "signature": "interface PipeableChain2<F extends URIS2> extends PipeableApply2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 300,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L300",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L300",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableChain2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain2C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    f: (a: A) => Kind2<F, E, B>
) => (ma: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 309,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L309",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L309",
                    },
                    "type": "<A, B>(f: (a: A) => Kind2<F, E, B>) => (ma: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain2C.chainFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainFirst",
                    "signature": "readonly chainFirst: <A, B>(
    f: (a: A) => Kind2<F, E, B>
) => (ma: Kind2<F, E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 310,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L310",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L310",
                    },
                    "type": "<A, B>(f: (a: A) => Kind2<F, E, B>) => (ma: Kind2<F, E, A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain2C.flatten",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "flatten",
                    "signature": "readonly flatten: <A>(mma: Kind2<F, E, Kind2<F, E, A>>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 311,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L311",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L311",
                    },
                    "type": "<A>(mma: Kind2<F, E, Kind2<F, E, A>>) => Kind2<F, E, A>",
                  },
                ],
              },
              "name": "PipeableChain2C",
              "signature": "interface PipeableChain2C<F extends URIS2, E> extends PipeableApply2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 308,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L308",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L308",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableChain3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain3.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, E, A, B>(
    f: (a: A) => Kind3<F, R, E, B>
) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 317,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L317",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L317",
                    },
                    "type": "<R, E, A, B>(f: (a: A) => Kind3<F, R, E, B>) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain3.chainFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainFirst",
                    "signature": "readonly chainFirst: <R, E, A, B>(
    f: (a: A) => Kind3<F, R, E, B>
) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 318,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L318",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L318",
                    },
                    "type": "<R, E, A, B>(f: (a: A) => Kind3<F, R, E, B>) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain3.flatten",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "flatten",
                    "signature": "readonly flatten: <R, E, A>(
    mma: Kind3<F, R, E, Kind3<F, R, E, A>>
) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 319,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L319",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L319",
                    },
                    "type": "<R, E, A>(mma: Kind3<F, R, E, Kind3<F, R, E, A>>) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "PipeableChain3",
              "signature": "interface PipeableChain3<F extends URIS3> extends PipeableApply3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 316,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L316",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L316",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableChain3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain3C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, A, B>(
    f: (a: A) => Kind3<F, R, E, B>
) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 325,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L325",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L325",
                    },
                    "type": "<R, A, B>(f: (a: A) => Kind3<F, R, E, B>) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain3C.chainFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainFirst",
                    "signature": "readonly chainFirst: <R, A, B>(
    f: (a: A) => Kind3<F, R, E, B>
) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 326,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L326",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L326",
                    },
                    "type": "<R, A, B>(f: (a: A) => Kind3<F, R, E, B>) => (ma: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain3C.flatten",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "flatten",
                    "signature": "readonly flatten: <R, A>(
    mma: Kind3<F, R, E, Kind3<F, R, E, A>>
) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 327,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L327",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L327",
                    },
                    "type": "<R, A>(mma: Kind3<F, R, E, Kind3<F, R, E, A>>) => Kind3<F, R, E, A>",
                  },
                ],
              },
              "name": "PipeableChain3C",
              "signature": "interface PipeableChain3C<F extends URIS3, E> extends PipeableApply3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 324,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L324",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L324",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableChain4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain4.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, R, E, A, B>(
    f: (a: A) => Kind4<F, S, R, E, B>
) => (ma: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 333,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L333",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L333",
                    },
                    "type": "<S, R, E, A, B>(f: (a: A) => Kind4<F, S, R, E, B>) => (ma: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain4.chainFirst",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chainFirst",
                    "signature": "readonly chainFirst: <S, R, E, A, B>(
    f: (a: A) => Kind4<F, S, R, E, B>
) => (ma: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 336,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L336",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L336",
                    },
                    "type": "<S, R, E, A, B>(f: (a: A) => Kind4<F, S, R, E, B>) => (ma: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableChain4.flatten",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "flatten",
                    "signature": "readonly flatten: <S, R, E, A>(
    mma: Kind4<F, S, R, E, Kind4<F, S, R, E, A>>
) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 339,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L339",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L339",
                    },
                    "type": "<S, R, E, A>(mma: Kind4<F, S, R, E, Kind4<F, S, R, E, A>>) => Kind4<F, S, R, E, A>",
                  },
                ],
              },
              "name": "PipeableChain4",
              "signature": "interface PipeableChain4<F extends URIS4> extends PipeableApply4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 332,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L332",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L332",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableCompactable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fa: HKT<F, Option<A>>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 588,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L588",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L588",
                    },
                    "type": "<A>(fa: HKT<F, Option<A>>) => HKT<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fa: HKT<F, Either<A, B>>
) => Separated<HKT<F, A>, HKT<F, B>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 589,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L589",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L589",
                    },
                    "type": "<A, B>(fa: HKT<F, Either<A, B>>) => Separated<HKT<F, A>, HKT<F, B>>",
                  },
                ],
              },
              "name": "PipeableCompactable",
              "signature": "interface PipeableCompactable<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 587,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L587",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L587",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableCompactable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable1.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fa: Kind<F, Option<A>>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 595,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L595",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L595",
                    },
                    "type": "<A>(fa: Kind<F, Option<A>>) => Kind<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable1.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fa: Kind<F, Either<A, B>>
) => Separated<Kind<F, A>, Kind<F, B>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 596,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L596",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L596",
                    },
                    "type": "<A, B>(fa: Kind<F, Either<A, B>>) => Separated<Kind<F, A>, Kind<F, B>>",
                  },
                ],
              },
              "name": "PipeableCompactable1",
              "signature": "interface PipeableCompactable1<F extends URIS> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 594,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L594",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L594",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableCompactable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable2.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <E, A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 602,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L602",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L602",
                    },
                    "type": "<E, A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable2.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <E, A, B>(
    fa: Kind2<F, E, Either<A, B>>
) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 603,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L603",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L603",
                    },
                    "type": "<E, A, B>(fa: Kind2<F, E, Either<A, B>>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>",
                  },
                ],
              },
              "name": "PipeableCompactable2",
              "signature": "interface PipeableCompactable2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 601,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L601",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L601",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableCompactable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable2C.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 609,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L609",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L609",
                    },
                    "type": "<A>(fa: Kind2<F, E, Option<A>>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable2C.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <A, B>(
    fa: Kind2<F, E, Either<A, B>>
) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 610,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L610",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L610",
                    },
                    "type": "<A, B>(fa: Kind2<F, E, Either<A, B>>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>",
                  },
                ],
              },
              "name": "PipeableCompactable2C",
              "signature": "interface PipeableCompactable2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 608,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L608",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L608",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableCompactable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable3.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <R, E, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 616,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L616",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L616",
                    },
                    "type": "<R, E, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable3.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <R, E, A, B>(
    fa: Kind3<F, R, E, Either<A, B>>
) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 617,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L617",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L617",
                    },
                    "type": "<R, E, A, B>(fa: Kind3<F, R, E, Either<A, B>>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>",
                  },
                ],
              },
              "name": "PipeableCompactable3",
              "signature": "interface PipeableCompactable3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 615,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L615",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L615",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableCompactable3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable3C.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <R, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 623,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L623",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L623",
                    },
                    "type": "<R, A>(fa: Kind3<F, R, E, Option<A>>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable3C.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <R, A, B>(
    fa: Kind3<F, R, E, Either<A, B>>
) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 624,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L624",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L624",
                    },
                    "type": "<R, A, B>(fa: Kind3<F, R, E, Either<A, B>>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>",
                  },
                ],
              },
              "name": "PipeableCompactable3C",
              "signature": "interface PipeableCompactable3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 622,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L622",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L622",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableCompactable4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable4.compact",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compact",
                    "signature": "readonly compact: <S, R, E, A>(
    fa: Kind4<F, S, R, E, Option<A>>
) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 630,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L630",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L630",
                    },
                    "type": "<S, R, E, A>(fa: Kind4<F, S, R, E, Option<A>>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableCompactable4.separate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "separate",
                    "signature": "readonly separate: <S, R, E, A, B>(
    fa: Kind4<F, S, R, E, Either<A, B>>
) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 631,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L631",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L631",
                    },
                    "type": "<S, R, E, A, B>(fa: Kind4<F, S, R, E, Either<A, B>>) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>",
                  },
                ],
              },
              "name": "PipeableCompactable4",
              "signature": "interface PipeableCompactable4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 629,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L629",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L629",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableContravariant",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableContravariant.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(f: (b: B) => A) => (fa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 143,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L143",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L143",
                    },
                    "type": "<A, B>(f: (b: B) => A) => (fa: HKT<F, A>) => HKT<F, B>",
                  },
                ],
              },
              "name": "PipeableContravariant",
              "signature": "interface PipeableContravariant<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 142,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L142",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L142",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableContravariant1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableContravariant1.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(f: (b: B) => A) => (fa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 149,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L149",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L149",
                    },
                    "type": "<A, B>(f: (b: B) => A) => (fa: Kind<F, A>) => Kind<F, B>",
                  },
                ],
              },
              "name": "PipeableContravariant1",
              "signature": "interface PipeableContravariant1<F extends URIS> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L148",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableContravariant2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableContravariant2.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(
    f: (b: B) => A
) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 155,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L155",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L155",
                    },
                    "type": "<A, B>(f: (b: B) => A) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableContravariant2",
              "signature": "interface PipeableContravariant2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 154,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L154",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L154",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableContravariant2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableContravariant2C.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(
    f: (b: B) => A
) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 161,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L161",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L161",
                    },
                    "type": "<A, B>(f: (b: B) => A) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableContravariant2C",
              "signature": "interface PipeableContravariant2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 160,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L160",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L160",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableContravariant3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableContravariant3.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(
    f: (b: B) => A
) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 167,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L167",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L167",
                    },
                    "type": "<A, B>(f: (b: B) => A) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableContravariant3",
              "signature": "interface PipeableContravariant3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 166,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L166",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L166",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableContravariant3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableContravariant3C.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(
    f: (b: B) => A
) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 173,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L173",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L173",
                    },
                    "type": "<A, B>(f: (b: B) => A) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableContravariant3C",
              "signature": "interface PipeableContravariant3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 172,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L172",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L172",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableContravariant4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableContravariant4.contramap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "contramap",
                    "signature": "readonly contramap: <A, B>(
    f: (b: B) => A
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 179,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L179",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L179",
                    },
                    "type": "<A, B>(f: (b: B) => A) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "PipeableContravariant4",
              "signature": "interface PipeableContravariant4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L178",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableExtend",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend.duplicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "duplicate",
                    "signature": "readonly duplicate: <A>(wa: HKT<F, A>) => HKT<F, HKT<F, A>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 346,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L346",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L346",
                    },
                    "type": "<A>(wa: HKT<F, A>) => HKT<F, HKT<F, A>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <A, B>(f: (wa: HKT<F, A>) => B) => (wa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 345,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L345",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L345",
                    },
                    "type": "<A, B>(f: (wa: HKT<F, A>) => B) => (wa: HKT<F, A>) => HKT<F, B>",
                  },
                ],
              },
              "name": "PipeableExtend",
              "signature": "interface PipeableExtend<F> extends PipeableFunctor<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 344,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L344",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L344",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableExtend1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend1.duplicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "duplicate",
                    "signature": "readonly duplicate: <A>(wa: Kind<F, A>) => Kind<F, Kind<F, A>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 353,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L353",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L353",
                    },
                    "type": "<A>(wa: Kind<F, A>) => Kind<F, Kind<F, A>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend1.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <A, B>(
    f: (wa: Kind<F, A>) => B
) => (wa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 352,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L352",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L352",
                    },
                    "type": "<A, B>(f: (wa: Kind<F, A>) => B) => (wa: Kind<F, A>) => Kind<F, B>",
                  },
                ],
              },
              "name": "PipeableExtend1",
              "signature": "interface PipeableExtend1<F extends URIS> extends PipeableFunctor1<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 351,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L351",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L351",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableExtend2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend2.duplicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "duplicate",
                    "signature": "readonly duplicate: <E, A>(wa: Kind2<F, E, A>) => Kind2<F, E, Kind2<F, E, A>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 360,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L360",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L360",
                    },
                    "type": "<E, A>(wa: Kind2<F, E, A>) => Kind2<F, E, Kind2<F, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend2.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <E, A, B>(
    f: (wa: Kind2<F, E, A>) => B
) => (wa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 359,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L359",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L359",
                    },
                    "type": "<E, A, B>(f: (wa: Kind2<F, E, A>) => B) => (wa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableExtend2",
              "signature": "interface PipeableExtend2<F extends URIS2> extends PipeableFunctor2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 358,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L358",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L358",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableExtend2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend2C.duplicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "duplicate",
                    "signature": "readonly duplicate: <A>(wa: Kind2<F, E, A>) => Kind2<F, E, Kind2<F, E, A>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 367,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L367",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L367",
                    },
                    "type": "<A>(wa: Kind2<F, E, A>) => Kind2<F, E, Kind2<F, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend2C.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <A, B>(
    f: (wa: Kind2<F, E, A>) => B
) => (wa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 366,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L366",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L366",
                    },
                    "type": "<A, B>(f: (wa: Kind2<F, E, A>) => B) => (wa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableExtend2C",
              "signature": "interface PipeableExtend2C<F extends URIS2, E> extends PipeableFunctor2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 365,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L365",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L365",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableExtend3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend3.duplicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "duplicate",
                    "signature": "readonly duplicate: <R, E, A>(
    wa: Kind3<F, R, E, A>
) => Kind3<F, R, E, Kind3<F, R, E, A>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 374,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L374",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L374",
                    },
                    "type": "<R, E, A>(wa: Kind3<F, R, E, A>) => Kind3<F, R, E, Kind3<F, R, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend3.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <R, E, A, B>(
    f: (wa: Kind3<F, R, E, A>) => B
) => (wa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 373,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L373",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L373",
                    },
                    "type": "<R, E, A, B>(f: (wa: Kind3<F, R, E, A>) => B) => (wa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableExtend3",
              "signature": "interface PipeableExtend3<F extends URIS3> extends PipeableFunctor3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 372,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L372",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L372",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableExtend3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend3C.duplicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "duplicate",
                    "signature": "readonly duplicate: <R, A>(
    wa: Kind3<F, R, E, A>
) => Kind3<F, R, E, Kind3<F, R, E, A>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 381,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L381",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L381",
                    },
                    "type": "<R, A>(wa: Kind3<F, R, E, A>) => Kind3<F, R, E, Kind3<F, R, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend3C.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <R, A, B>(
    f: (wa: Kind3<F, R, E, A>) => B
) => (wa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 380,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L380",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L380",
                    },
                    "type": "<R, A, B>(f: (wa: Kind3<F, R, E, A>) => B) => (wa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableExtend3C",
              "signature": "interface PipeableExtend3C<F extends URIS3, E> extends PipeableFunctor3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 379,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L379",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L379",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableExtend4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend4.duplicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "duplicate",
                    "signature": "readonly duplicate: <S, R, E, A>(
    wa: Kind4<F, S, R, E, A>
) => Kind4<F, S, R, E, Kind4<F, S, R, E, A>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 390,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L390",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L390",
                    },
                    "type": "<S, R, E, A>(wa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, Kind4<F, S, R, E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableExtend4.extend",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "extend",
                    "signature": "readonly extend: <S, R, E, A, B>(
    f: (wa: Kind4<F, S, R, E, A>) => B
) => (wa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 387,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L387",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L387",
                    },
                    "type": "<S, R, E, A, B>(f: (wa: Kind4<F, S, R, E, A>) => B) => (wa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "PipeableExtend4",
              "signature": "interface PipeableExtend4<F extends URIS4> extends PipeableFunctor4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 386,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L386",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L386",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (fa: HKT<F, A>) => HKT<F, B>;
    <A>(predicate: Predicate<A>): (fa: HKT<F, A>) => HKT<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 639,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L639",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L639",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: HKT<F, A>) => HKT<F, B>; <A>(predicate: Predicate<A>): (fa: HKT<F, A>) => HKT<F, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    f: (a: A) => Option<B>
) => (fa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 643,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L643",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L643",
                    },
                    "type": "<A, B>(f: (a: A) => Option<B>) => (fa: HKT<F, A>) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: HKT<F, A>
    ) => Separated<HKT<F, A>, HKT<F, B>>;
    <A>(predicate: Predicate<A>): (
        fa: HKT<F, A>
    ) => Separated<HKT<F, A>, HKT<F, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 644,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L644",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L644",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: HKT<F, A>) => Separated<HKT<F, A>, HKT<F, B>>; <A>(predicate: Predicate<A>): (fa: HKT<F, A>) => Separated<HKT<F, A>, HKT<F, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (fa: HKT<F, A>) => Separated<HKT<F, B>, HKT<F, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 648,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L648",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L648",
                    },
                    "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: HKT<F, A>) => Separated<HKT<F, B>, HKT<F, C>>",
                  },
                ],
              },
              "name": "PipeableFilterable",
              "signature": "interface PipeableFilterable<F> extends PipeableCompactable<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 638,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L638",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L638",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable1.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Kind<F, A>
    ) => Kind<F, B>;
    <A>(predicate: Predicate<A>): (fa: Kind<F, A>) => Kind<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 654,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L654",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L654",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Kind<F, A>) => Kind<F, B>; <A>(predicate: Predicate<A>): (fa: Kind<F, A>) => Kind<F, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable1.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    f: (a: A) => Option<B>
) => (fa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 658,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L658",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L658",
                    },
                    "type": "<A, B>(f: (a: A) => Option<B>) => (fa: Kind<F, A>) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable1.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Kind<F, A>
    ) => Separated<Kind<F, A>, Kind<F, B>>;
    <A>(predicate: Predicate<A>): (
        fa: Kind<F, A>
    ) => Separated<Kind<F, A>, Kind<F, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 659,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L659",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L659",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Kind<F, A>) => Separated<Kind<F, A>, Kind<F, B>>; <A>(predicate: Predicate<A>): (fa: Kind<F, A>) => Separated<Kind<F, A>, Kind<F, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable1.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (fa: Kind<F, A>) => Separated<Kind<F, B>, Kind<F, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 663,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L663",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L663",
                    },
                    "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: Kind<F, A>) => Separated<Kind<F, B>, Kind<F, C>>",
                  },
                ],
              },
              "name": "PipeableFilterable1",
              "signature": "interface PipeableFilterable1<F extends URIS> extends PipeableCompactable1<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 653,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L653",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L653",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: {
    <A, B extends A>(refinement: Refinement<A, B>): <E>(
        fa: Kind2<F, E, A>
    ) => Kind2<F, E, B>;
    <A>(predicate: Predicate<A>): <E>(fa: Kind2<F, E, A>) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 669,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L669",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L669",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>; <A>(predicate: Predicate<A>): <E>(fa: Kind2<F, E, A>) => Kind2<F, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    f: (a: A) => Option<B>
) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 673,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L673",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L673",
                    },
                    "type": "<A, B>(f: (a: A) => Option<B>) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: {
    <A, B extends A>(refinement: Refinement<A, B>): <E>(
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;
    <A>(predicate: Predicate<A>): <E>(
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 674,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L674",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L674",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>; <A>(predicate: Predicate<A>): <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 678,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L678",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L678",
                    },
                    "type": "<A, B, C>(f: (a: A) => Either<B, C>) => <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                ],
              },
              "name": "PipeableFilterable2",
              "signature": "interface PipeableFilterable2<F extends URIS2> extends PipeableCompactable2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 668,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L668",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L668",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2C.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Kind2<F, E, A>
    ) => Kind2<F, E, B>;
    <A>(predicate: Predicate<A>): (fa: Kind2<F, E, A>) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 686,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L686",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L686",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Kind2<F, E, A>) => Kind2<F, E, B>; <A>(predicate: Predicate<A>): (fa: Kind2<F, E, A>) => Kind2<F, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2C.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    f: (a: A) => Option<B>
) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 690,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L690",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L690",
                    },
                    "type": "<A, B>(f: (a: A) => Option<B>) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2C.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;
    <A>(predicate: Predicate<A>): (
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 691,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L691",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L691",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>; <A>(predicate: Predicate<A>): (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable2C.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 695,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L695",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L695",
                    },
                    "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                ],
              },
              "name": "PipeableFilterable2C",
              "signature": "interface PipeableFilterable2C<F extends URIS2, E>
    extends PipeableCompactable2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 685,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L685",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L685",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: {
    <A, B extends A>(refinement: Refinement<A, B>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, B>;
    <A>(predicate: Predicate<A>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 703,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L703",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L703",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>; <A>(predicate: Predicate<A>): <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    f: (a: A) => Option<B>
) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 707,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L707",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L707",
                    },
                    "type": "<A, B>(f: (a: A) => Option<B>) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: {
    <A, B extends A>(refinement: Refinement<A, B>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;
    <A>(predicate: Predicate<A>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 708,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L708",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L708",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <R, E>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>; <A>(predicate: Predicate<A>): <R, E>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => <R, E>(
    fa: Kind3<F, R, E, A>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 714,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L714",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L714",
                    },
                    "type": "<A, B, C>(f: (a: A) => Either<B, C>) => <R, E>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                ],
              },
              "name": "PipeableFilterable3",
              "signature": "interface PipeableFilterable3<F extends URIS3> extends PipeableCompactable3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 702,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L702",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L702",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableFilterable3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3C.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: {
    <A, B extends A>(refinement: Refinement<A, B>): <R>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, B>;
    <A>(predicate: Predicate<A>): <R>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 722,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L722",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L722",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>; <A>(predicate: Predicate<A>): <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3C.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    f: (a: A) => Option<B>
) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 726,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L726",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L726",
                    },
                    "type": "<A, B>(f: (a: A) => Option<B>) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3C.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: {
    <A, B extends A>(refinement: Refinement<A, B>): <R>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;
    <A>(predicate: Predicate<A>): <R>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 727,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L727",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L727",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <R>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>; <A>(predicate: Predicate<A>): <R>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable3C.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => <R>(
    fa: Kind3<F, R, E, A>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 733,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L733",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L733",
                    },
                    "type": "<A, B, C>(f: (a: A) => Either<B, C>) => <R>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                ],
              },
              "name": "PipeableFilterable3C",
              "signature": "interface PipeableFilterable3C<F extends URIS3, E>
    extends PipeableCompactable3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 721,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L721",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L721",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterable4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable4.filter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filter",
                    "signature": "readonly filter: {
    <A, B extends A>(refinement: Refinement<A, B>): <S, R, E>(
        fa: Kind4<F, S, R, E, A>
    ) => Kind4<F, S, R, E, B>;
    <A>(predicate: Predicate<A>): <S, R, E>(
        fa: Kind4<F, S, R, E, A>
    ) => Kind4<F, S, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 741,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L741",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L741",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>; <A>(predicate: Predicate<A>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable4.filterMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMap",
                    "signature": "readonly filterMap: <A, B>(
    f: (a: A) => Option<B>
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 745,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L745",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L745",
                    },
                    "type": "<A, B>(f: (a: A) => Option<B>) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable4.partition",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partition",
                    "signature": "readonly partition: {
    <A, B extends A>(refinement: Refinement<A, B>): <S, R, E>(
        fa: Kind4<F, S, R, E, A>
    ) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>;
    <A>(predicate: Predicate<A>): <S, R, E>(
        fa: Kind4<F, S, R, E, A>
    ) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 746,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L746",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L746",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>; <A>(predicate: Predicate<A>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterable4.partitionMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMap",
                    "signature": "readonly partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => <S, R, E>(
    fa: Kind4<F, S, R, E, A>
) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 754,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L754",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L754",
                    },
                    "type": "<A, B, C>(f: (a: A) => Either<B, C>) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>",
                  },
                ],
              },
              "name": "PipeableFilterable4",
              "signature": "interface PipeableFilterable4<F extends URIS4> extends PipeableCompactable4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 740,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L740",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L740",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterableWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    f: (i: I, a: A) => Option<B>
) => (fa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 766,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L766",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L766",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => Option<B>) => (fa: HKT<F, A>) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (
        fa: HKT<F, A>
    ) => HKT<F, B>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): (
        fa: HKT<F, A>
    ) => HKT<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 762,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L762",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L762",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (fa: HKT<F, A>) => HKT<F, B>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): (fa: HKT<F, A>) => HKT<F, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    f: (i: I, a: A) => Either<B, C>
) => (fa: HKT<F, A>) => Separated<HKT<F, B>, HKT<F, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 773,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L773",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L773",
                    },
                    "type": "<A, B, C>(f: (i: I, a: A) => Either<B, C>) => (fa: HKT<F, A>) => Separated<HKT<F, B>, HKT<F, C>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (
        fa: HKT<F, A>
    ) => Separated<HKT<F, A>, HKT<F, B>>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): (
        fa: HKT<F, A>
    ) => Separated<HKT<F, A>, HKT<F, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 767,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L767",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L767",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (fa: HKT<F, A>) => Separated<HKT<F, A>, HKT<F, B>>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): (fa: HKT<F, A>) => Separated<HKT<F, A>, HKT<F, A>>; }",
                  },
                ],
              },
              "name": "PipeableFilterableWithIndex",
              "signature": "interface PipeableFilterableWithIndex<F, I> extends PipeableFilterable<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 761,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L761",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L761",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterableWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex1.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    f: (i: I, a: A) => Option<B>
) => (fa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 785,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L785",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L785",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => Option<B>) => (fa: Kind<F, A>) => Kind<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex1.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (
        fa: Kind<F, A>
    ) => Kind<F, B>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): (
        fa: Kind<F, A>
    ) => Kind<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 781,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L781",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L781",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (fa: Kind<F, A>) => Kind<F, B>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): (fa: Kind<F, A>) => Kind<F, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex1.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    f: (i: I, a: A) => Either<B, C>
) => (fa: Kind<F, A>) => Separated<Kind<F, B>, Kind<F, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 792,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L792",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L792",
                    },
                    "type": "<A, B, C>(f: (i: I, a: A) => Either<B, C>) => (fa: Kind<F, A>) => Separated<Kind<F, B>, Kind<F, C>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex1.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (
        fa: Kind<F, A>
    ) => Separated<Kind<F, A>, Kind<F, B>>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): (
        fa: Kind<F, A>
    ) => Separated<Kind<F, A>, Kind<F, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 786,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L786",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L786",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (fa: Kind<F, A>) => Separated<Kind<F, A>, Kind<F, B>>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): (fa: Kind<F, A>) => Separated<Kind<F, A>, Kind<F, A>>; }",
                  },
                ],
              },
              "name": "PipeableFilterableWithIndex1",
              "signature": "interface PipeableFilterableWithIndex1<F extends URIS, I>
    extends PipeableFilterable1<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 780,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L780",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L780",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterableWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    f: (i: I, a: A) => Option<B>
) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 804,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L804",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L804",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => Option<B>) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <E>(
        fa: Kind2<F, E, A>
    ) => Kind2<F, E, B>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <E>(
        fa: Kind2<F, E, A>
    ) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 800,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L800",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L800",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <E>(fa: Kind2<F, E, A>) => Kind2<F, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    f: (i: I, a: A) => Either<B, C>
) => <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 813,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L813",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L813",
                    },
                    "type": "<A, B, C>(f: (i: I, a: A) => Either<B, C>) => <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <E>(
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <E>(
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 805,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L805",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L805",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <E>(fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>; }",
                  },
                ],
              },
              "name": "PipeableFilterableWithIndex2",
              "signature": "interface PipeableFilterableWithIndex2<F extends URIS2, I>
    extends PipeableFilterable2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 799,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L799",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L799",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterableWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2C.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    f: (i: I, a: A) => Option<B>
) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 825,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L825",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L825",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => Option<B>) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2C.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (
        fa: Kind2<F, E, A>
    ) => Kind2<F, E, B>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): (
        fa: Kind2<F, E, A>
    ) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 821,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L821",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L821",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (fa: Kind2<F, E, A>) => Kind2<F, E, B>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): (fa: Kind2<F, E, A>) => Kind2<F, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2C.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    f: (i: I, a: A) => Either<B, C>
) => (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 832,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L832",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L832",
                    },
                    "type": "<A, B, C>(f: (i: I, a: A) => Either<B, C>) => (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, B>, Kind2<F, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex2C.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): (
        fa: Kind2<F, E, A>
    ) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 826,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L826",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L826",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, B>>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): (fa: Kind2<F, E, A>) => Separated<Kind2<F, E, A>, Kind2<F, E, A>>; }",
                  },
                ],
              },
              "name": "PipeableFilterableWithIndex2C",
              "signature": "interface PipeableFilterableWithIndex2C<F extends URIS2, I, E>
    extends PipeableFilterable2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 820,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L820",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L820",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterableWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    f: (i: I, a: A) => Option<B>
) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 846,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L846",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L846",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => Option<B>) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, B>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 840,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L840",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L840",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    f: (i: I, a: A) => Either<B, C>
) => <R, E>(
    fa: Kind3<F, R, E, A>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 857,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L857",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L857",
                    },
                    "type": "<A, B, C>(f: (i: I, a: A) => Either<B, C>) => <R, E>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 849,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L849",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L849",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R, E>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R, E>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>; }",
                  },
                ],
              },
              "name": "PipeableFilterableWithIndex3",
              "signature": "interface PipeableFilterableWithIndex3<F extends URIS3, I>
    extends PipeableFilterable3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 839,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L839",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L839",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableFilterableWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3C.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    f: (i: I, a: A) => Option<B>
) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 869,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L869",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L869",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => Option<B>) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3C.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, B>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R, E>(
        fa: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 865,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L865",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L865",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3C.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    f: (i: I, a: A) => Either<B, C>
) => <R>(
    fa: Kind3<F, R, E, A>
) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 878,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L878",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L878",
                    },
                    "type": "<A, B, C>(f: (i: I, a: A) => Either<B, C>) => <R>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, B>, Kind3<F, R, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex3C.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R>(
        fa: Kind3<F, R, E, A>
    ) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 870,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L870",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L870",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <R>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, B>>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <R>(fa: Kind3<F, R, E, A>) => Separated<Kind3<F, R, E, A>, Kind3<F, R, E, A>>; }",
                  },
                ],
              },
              "name": "PipeableFilterableWithIndex3C",
              "signature": "interface PipeableFilterableWithIndex3C<F extends URIS3, I, E>
    extends PipeableFilterable3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 864,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L864",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L864",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFilterableWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex4.filterMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterMapWithIndex",
                    "signature": "readonly filterMapWithIndex: <A, B>(
    f: (i: I, a: A) => Option<B>
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 892,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L892",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L892",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => Option<B>) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex4.filterWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterWithIndex",
                    "signature": "readonly filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <
        S,
        R,
        E
    >(
        fa: Kind4<F, S, R, E, A>
    ) => Kind4<F, S, R, E, B>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <S, R, E>(
        fa: Kind4<F, S, R, E, A>
    ) => Kind4<F, S, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 886,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L886",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L886",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex4.partitionMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionMapWithIndex",
                    "signature": "readonly partitionMapWithIndex: <A, B, C>(
    f: (i: I, a: A) => Either<B, C>
) => <S, R, E>(
    fa: Kind4<F, S, R, E, A>
) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 903,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L903",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L903",
                    },
                    "type": "<A, B, C>(f: (i: I, a: A) => Either<B, C>) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Separated<Kind4<F, S, R, E, B>, Kind4<F, S, R, E, C>>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFilterableWithIndex4.partitionWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "partitionWithIndex",
                    "signature": "readonly partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <
        S,
        R,
        E
    >(
        fa: Kind4<F, S, R, E, A>
    ) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>;
    <A>(predicateWithIndex: PredicateWithIndex<I, A>): <S, R, E>(
        fa: Kind4<F, S, R, E, A>
    ) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, A>>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 895,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L895",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L895",
                    },
                    "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<I, A, B>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, B>>; <A>(predicateWithIndex: PredicateWithIndex<I, A>): <S, R, E>(fa: Kind4<F, S, R, E, A>) => Separated<Kind4<F, S, R, E, A>, Kind4<F, S, R, E, A>>; }",
                  },
                ],
              },
              "name": "PipeableFilterableWithIndex4",
              "signature": "interface PipeableFilterableWithIndex4<F extends URIS4, I>
    extends PipeableFilterable4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 885,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L885",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L885",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => (fa: HKT<F, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 435,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L435",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L435",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: HKT<F, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: HKT<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 434,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L434",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L434",
                    },
                    "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: HKT<F, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: HKT<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 436,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L436",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L436",
                    },
                    "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: HKT<F, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldable",
              "signature": "interface PipeableFoldable<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 433,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L433",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L433",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable1.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => (fa: Kind<F, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 443,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L443",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L443",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Kind<F, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable1.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: Kind<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 442,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L442",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L442",
                    },
                    "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: Kind<F, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable1.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => (fa: Kind<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 444,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L444",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L444",
                    },
                    "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: Kind<F, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldable1",
              "signature": "interface PipeableFoldable1<F extends URIS> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 441,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L441",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L441",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable2.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => <E>(fa: Kind2<F, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 451,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L451",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L451",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: Kind2<F, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable2.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(
    b: B,
    f: (b: B, a: A) => B
) => <E>(fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 450,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L450",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L450",
                    },
                    "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: Kind2<F, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable2.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => <E>(fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 452,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L452",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L452",
                    },
                    "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: Kind2<F, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldable2",
              "signature": "interface PipeableFoldable2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 449,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L449",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L449",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable2C.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => (fa: Kind2<F, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 459,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L459",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L459",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Kind2<F, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable2C.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 458,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L458",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L458",
                    },
                    "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: Kind2<F, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable2C.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => (fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 460,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L460",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L460",
                    },
                    "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: Kind2<F, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldable2C",
              "signature": "interface PipeableFoldable2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 457,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L457",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L457",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable3.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => <R, E>(fa: Kind3<F, R, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 467,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L467",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L467",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <R, E>(fa: Kind3<F, R, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable3.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(
    b: B,
    f: (b: B, a: A) => B
) => <R, E>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 466,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L466",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L466",
                    },
                    "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <R, E>(fa: Kind3<F, R, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable3.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => <R, E>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 468,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L468",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L468",
                    },
                    "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <R, E>(fa: Kind3<F, R, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldable3",
              "signature": "interface PipeableFoldable3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 465,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L465",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L465",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableFoldable3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable3C.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => <R>(fa: Kind3<F, R, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 475,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L475",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L475",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <R>(fa: Kind3<F, R, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable3C.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(
    b: B,
    f: (b: B, a: A) => B
) => <R>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 474,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L474",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L474",
                    },
                    "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <R>(fa: Kind3<F, R, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable3C.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => <R>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 476,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L476",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L476",
                    },
                    "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <R>(fa: Kind3<F, R, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldable3C",
              "signature": "interface PipeableFoldable3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 473,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L473",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L473",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldable4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable4.foldMap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMap",
                    "signature": "readonly foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 483,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L483",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L483",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable4.reduce",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduce",
                    "signature": "readonly reduce: <A, B>(
    b: B,
    f: (b: B, a: A) => B
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 482,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L482",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L482",
                    },
                    "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldable4.reduceRight",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRight",
                    "signature": "readonly reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 484,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L484",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L484",
                    },
                    "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldable4",
              "signature": "interface PipeableFoldable4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 481,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L481",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L481",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldableWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: I, a: A) => M) => (fa: HKT<F, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 491,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L491",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L491",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (i: I, a: A) => M) => (fa: HKT<F, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: I, a: A, b: B) => B
) => (fa: HKT<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 492,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L492",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L492",
                    },
                    "type": "<A, B>(b: B, f: (i: I, a: A, b: B) => B) => (fa: HKT<F, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    b: B,
    f: (i: I, b: B, a: A) => B
) => (fa: HKT<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 490,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L490",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L490",
                    },
                    "type": "<A, B>(b: B, f: (i: I, b: B, a: A) => B) => (fa: HKT<F, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldableWithIndex",
              "signature": "interface PipeableFoldableWithIndex<F, I> extends PipeableFoldable<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 489,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L489",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L489",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldableWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex1.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: I, a: A) => M) => (fa: Kind<F, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 499,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L499",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L499",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (i: I, a: A) => M) => (fa: Kind<F, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex1.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: I, a: A, b: B) => B
) => (fa: Kind<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 500,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L500",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L500",
                    },
                    "type": "<A, B>(b: B, f: (i: I, a: A, b: B) => B) => (fa: Kind<F, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex1.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    b: B,
    f: (i: I, b: B, a: A) => B
) => (fa: Kind<F, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 498,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L498",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L498",
                    },
                    "type": "<A, B>(b: B, f: (i: I, b: B, a: A) => B) => (fa: Kind<F, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldableWithIndex1",
              "signature": "interface PipeableFoldableWithIndex1<F extends URIS, I>
    extends PipeableFoldable1<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 497,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L497",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L497",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldableWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex2.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: I, a: A) => M) => <E>(fa: Kind2<F, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 507,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L507",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L507",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (i: I, a: A) => M) => <E>(fa: Kind2<F, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex2.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: I, a: A, b: B) => B
) => <E>(fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 508,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L508",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L508",
                    },
                    "type": "<A, B>(b: B, f: (i: I, a: A, b: B) => B) => <E>(fa: Kind2<F, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex2.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    b: B,
    f: (i: I, b: B, a: A) => B
) => <E>(fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 506,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L506",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L506",
                    },
                    "type": "<A, B>(b: B, f: (i: I, b: B, a: A) => B) => <E>(fa: Kind2<F, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldableWithIndex2",
              "signature": "interface PipeableFoldableWithIndex2<F extends URIS2, I>
    extends PipeableFoldable2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 505,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L505",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L505",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldableWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex2C.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: I, a: A) => M) => (fa: Kind2<F, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 515,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L515",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L515",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (i: I, a: A) => M) => (fa: Kind2<F, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex2C.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: I, a: A, b: B) => B
) => (fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 516,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L516",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L516",
                    },
                    "type": "<A, B>(b: B, f: (i: I, a: A, b: B) => B) => (fa: Kind2<F, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex2C.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    b: B,
    f: (i: I, b: B, a: A) => B
) => (fa: Kind2<F, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 514,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L514",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L514",
                    },
                    "type": "<A, B>(b: B, f: (i: I, b: B, a: A) => B) => (fa: Kind2<F, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldableWithIndex2C",
              "signature": "interface PipeableFoldableWithIndex2C<F extends URIS2, I, E>
    extends PipeableFoldable2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 513,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L513",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L513",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldableWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex3.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: I, a: A) => M) => <R, E>(fa: Kind3<F, R, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 523,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L523",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L523",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (i: I, a: A) => M) => <R, E>(fa: Kind3<F, R, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex3.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: I, a: A, b: B) => B
) => <R, E>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 524,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L524",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L524",
                    },
                    "type": "<A, B>(b: B, f: (i: I, a: A, b: B) => B) => <R, E>(fa: Kind3<F, R, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex3.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    b: B,
    f: (i: I, b: B, a: A) => B
) => <R, E>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 522,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L522",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L522",
                    },
                    "type": "<A, B>(b: B, f: (i: I, b: B, a: A) => B) => <R, E>(fa: Kind3<F, R, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldableWithIndex3",
              "signature": "interface PipeableFoldableWithIndex3<F extends URIS3, I>
    extends PipeableFoldable3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 521,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L521",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L521",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableFoldableWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex3C.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: I, a: A) => M) => <R>(fa: Kind3<F, R, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 531,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L531",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L531",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (i: I, a: A) => M) => <R>(fa: Kind3<F, R, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex3C.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: I, a: A, b: B) => B
) => <R>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 532,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L532",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L532",
                    },
                    "type": "<A, B>(b: B, f: (i: I, a: A, b: B) => B) => <R>(fa: Kind3<F, R, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex3C.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    b: B,
    f: (i: I, b: B, a: A) => B
) => <R>(fa: Kind3<F, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 530,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L530",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L530",
                    },
                    "type": "<A, B>(b: B, f: (i: I, b: B, a: A) => B) => <R>(fa: Kind3<F, R, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldableWithIndex3C",
              "signature": "interface PipeableFoldableWithIndex3C<F extends URIS3, I, E>
    extends PipeableFoldable3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 529,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L529",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L529",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFoldableWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex4.foldMapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "foldMapWithIndex",
                    "signature": "readonly foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: I, a: A) => M) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => M;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 539,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L539",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L539",
                    },
                    "type": "<M>(M: Monoid<M>) => <A>(f: (i: I, a: A) => M) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => M",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex4.reduceRightWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceRightWithIndex",
                    "signature": "readonly reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: I, a: A, b: B) => B
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 540,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L540",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L540",
                    },
                    "type": "<A, B>(b: B, f: (i: I, a: A, b: B) => B) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFoldableWithIndex4.reduceWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "reduceWithIndex",
                    "signature": "readonly reduceWithIndex: <A, B>(
    b: B,
    f: (i: I, b: B, a: A) => B
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 538,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L538",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L538",
                    },
                    "type": "<A, B>(b: B, f: (i: I, b: B, a: A) => B) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => B",
                  },
                ],
              },
              "name": "PipeableFoldableWithIndex4",
              "signature": "interface PipeableFoldableWithIndex4<F extends URIS4, I>
    extends PipeableFoldable4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 537,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L537",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L537",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctor",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctor.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(f: (a: A) => B) => (fa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 101,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L101",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L101",
                    },
                    "type": "<A, B>(f: (a: A) => B) => (fa: HKT<F, A>) => HKT<F, B>",
                  },
                ],
              },
              "name": "PipeableFunctor",
              "signature": "interface PipeableFunctor<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L100",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctor1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctor1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(f: (a: A) => B) => (fa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 107,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L107",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L107",
                    },
                    "type": "<A, B>(f: (a: A) => B) => (fa: Kind<F, A>) => Kind<F, B>",
                  },
                ],
              },
              "name": "PipeableFunctor1",
              "signature": "interface PipeableFunctor1<F extends URIS> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L106",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctor2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctor2.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    f: (a: A) => B
) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 113,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L113",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L113",
                    },
                    "type": "<A, B>(f: (a: A) => B) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctor2",
              "signature": "interface PipeableFunctor2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 112,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L112",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L112",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctor2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctor2C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(f: (a: A) => B) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 119,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L119",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L119",
                    },
                    "type": "<A, B>(f: (a: A) => B) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctor2C",
              "signature": "interface PipeableFunctor2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L118",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctor3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctor3.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    f: (a: A) => B
) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 125,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L125",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L125",
                    },
                    "type": "<A, B>(f: (a: A) => B) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctor3",
              "signature": "interface PipeableFunctor3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 124,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L124",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L124",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableFunctor3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctor3C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    f: (a: A) => B
) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 131,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L131",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L131",
                    },
                    "type": "<A, B>(f: (a: A) => B) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctor3C",
              "signature": "interface PipeableFunctor3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 130,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L130",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L130",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctor4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctor4.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <A, B>(
    f: (a: A) => B
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 137,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L137",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L137",
                    },
                    "type": "<A, B>(f: (a: A) => B) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctor4",
              "signature": "interface PipeableFunctor4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 136,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L136",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L136",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctorWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctorWithIndex.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    f: (i: I, a: A) => B
) => (fa: HKT<F, A>) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 185,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L185",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L185",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => B) => (fa: HKT<F, A>) => HKT<F, B>",
                  },
                ],
              },
              "name": "PipeableFunctorWithIndex",
              "signature": "interface PipeableFunctorWithIndex<F, I> extends PipeableFunctor<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 184,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L184",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L184",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctorWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctorWithIndex1.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    f: (i: I, a: A) => B
) => (fa: Kind<F, A>) => Kind<F, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 191,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L191",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L191",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => B) => (fa: Kind<F, A>) => Kind<F, B>",
                  },
                ],
              },
              "name": "PipeableFunctorWithIndex1",
              "signature": "interface PipeableFunctorWithIndex1<F extends URIS, I> extends PipeableFunctor1<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 190,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L190",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L190",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctorWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctorWithIndex2.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    f: (i: I, a: A) => B
) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 197,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L197",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L197",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => B) => <E>(fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctorWithIndex2",
              "signature": "interface PipeableFunctorWithIndex2<F extends URIS2, I>
    extends PipeableFunctor2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 196,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L196",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L196",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctorWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctorWithIndex2C.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    f: (i: I, a: A) => B
) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 203,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L203",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L203",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => B) => (fa: Kind2<F, E, A>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctorWithIndex2C",
              "signature": "interface PipeableFunctorWithIndex2C<F extends URIS2, I, E>
    extends PipeableFunctor2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 202,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L202",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L202",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctorWithIndex3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctorWithIndex3.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    f: (i: I, a: A) => B
) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 209,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L209",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L209",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => B) => <R, E>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctorWithIndex3",
              "signature": "interface PipeableFunctorWithIndex3<F extends URIS3, I>
    extends PipeableFunctor3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 208,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L208",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L208",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableFunctorWithIndex3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctorWithIndex3C.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    f: (i: I, a: A) => B
) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 215,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L215",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L215",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => B) => <R>(fa: Kind3<F, R, E, A>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctorWithIndex3C",
              "signature": "interface PipeableFunctorWithIndex3C<F extends URIS3, I, E>
    extends PipeableFunctor3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 214,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L214",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L214",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableFunctorWithIndex4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableFunctorWithIndex4.mapWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapWithIndex",
                    "signature": "readonly mapWithIndex: <A, B>(
    f: (i: I, a: A) => B
) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 221,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L221",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L221",
                    },
                    "type": "<A, B>(f: (i: I, a: A) => B) => <S, R, E>(fa: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "PipeableFunctorWithIndex4",
              "signature": "interface PipeableFunctorWithIndex4<F extends URIS4, I>
    extends PipeableFunctor4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 220,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L220",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L220",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableMonadThrow",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow.filterOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterOrElse",
                    "signature": "readonly filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        ma: HKT<F, A>
    ) => HKT<F, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        ma: HKT<F, A>
    ) => HKT<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 992,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L992",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L992",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (ma: HKT<F, A>) => HKT<F, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (ma: HKT<F, A>) => HKT<F, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow.fromEither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromEither",
                    "signature": "readonly fromEither: <E, A>(ma: Either<E, A>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 987,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L987",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L987",
                    },
                    "type": "<E, A>(ma: Either<E, A>) => HKT<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow.fromOption",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromOption",
                    "signature": "readonly fromOption: <E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 986,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L986",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L986",
                    },
                    "type": "<E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => HKT<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow.fromPredicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromPredicate",
                    "signature": "readonly fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        a: A
    ) => HKT<F, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => HKT<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 988,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L988",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L988",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (a: A) => HKT<F, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => HKT<F, A>; }",
                  },
                ],
              },
              "name": "PipeableMonadThrow",
              "signature": "interface PipeableMonadThrow<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 985,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L985",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L985",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableMonadThrow1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow1.filterOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterOrElse",
                    "signature": "readonly filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        ma: Kind<F, A>
    ) => Kind<F, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        ma: Kind<F, A>
    ) => Kind<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1007,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1007",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1007",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (ma: Kind<F, A>) => Kind<F, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (ma: Kind<F, A>) => Kind<F, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow1.fromEither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromEither",
                    "signature": "readonly fromEither: <E, A>(ma: Either<E, A>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1002,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1002",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1002",
                    },
                    "type": "<E, A>(ma: Either<E, A>) => Kind<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow1.fromOption",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromOption",
                    "signature": "readonly fromOption: <E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1001,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1001",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1001",
                    },
                    "type": "<E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => Kind<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow1.fromPredicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromPredicate",
                    "signature": "readonly fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        a: A
    ) => Kind<F, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => Kind<F, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1003,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1003",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1003",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (a: A) => Kind<F, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => Kind<F, A>; }",
                  },
                ],
              },
              "name": "PipeableMonadThrow1",
              "signature": "interface PipeableMonadThrow1<F extends URIS> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 1000,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1000",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1000",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableMonadThrow2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2.filterOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterOrElse",
                    "signature": "readonly filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        ma: Kind2<F, E, A>
    ) => Kind2<F, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        ma: Kind2<F, E, A>
    ) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1022,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1022",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1022",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (ma: Kind2<F, E, A>) => Kind2<F, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (ma: Kind2<F, E, A>) => Kind2<F, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2.fromEither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromEither",
                    "signature": "readonly fromEither: <E, A>(ma: Either<E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1017,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1017",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1017",
                    },
                    "type": "<E, A>(ma: Either<E, A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2.fromOption",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromOption",
                    "signature": "readonly fromOption: <E>(
    onNone: Lazy<E>
) => <A>(ma: Option<A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1016,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1016",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1016",
                    },
                    "type": "<E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2.fromPredicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromPredicate",
                    "signature": "readonly fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        a: A
    ) => Kind2<F, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        a: A
    ) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1018,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1018",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1018",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (a: A) => Kind2<F, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => Kind2<F, E, A>; }",
                  },
                ],
              },
              "name": "PipeableMonadThrow2",
              "signature": "interface PipeableMonadThrow2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 1015,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1015",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1015",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableMonadThrow2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2C.filterOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterOrElse",
                    "signature": "readonly filterOrElse: {
    <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        ma: Kind2<F, E, A>
    ) => Kind2<F, E, B>;
    <A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        ma: Kind2<F, E, A>
    ) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1037,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1037",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1037",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (ma: Kind2<F, E, A>) => Kind2<F, E, B>; <A>(predicate: Predicate<A>, onFalse: (a: A) => E): (ma: Kind2<F, E, A>) => Kind2<F, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2C.fromEither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromEither",
                    "signature": "readonly fromEither: <A>(ma: Either<E, A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1032,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1032",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1032",
                    },
                    "type": "<A>(ma: Either<E, A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2C.fromOption",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromOption",
                    "signature": "readonly fromOption: (onNone: Lazy<E>) => <A>(ma: Option<A>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1031,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1031",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1031",
                    },
                    "type": "(onNone: Lazy<E>) => <A>(ma: Option<A>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow2C.fromPredicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromPredicate",
                    "signature": "readonly fromPredicate: {
    <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        a: A
    ) => Kind2<F, E, B>;
    <A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => Kind2<F, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1033,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1033",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1033",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (a: A) => Kind2<F, E, B>; <A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => Kind2<F, E, A>; }",
                  },
                ],
              },
              "name": "PipeableMonadThrow2C",
              "signature": "interface PipeableMonadThrow2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 1030,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1030",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1030",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableMonadThrow3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3.filterOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterOrElse",
                    "signature": "readonly filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(
        ma: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        ma: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1052,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1052",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1052",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(ma: Kind3<F, R, E, A>) => Kind3<F, R, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(ma: Kind3<F, R, E, A>) => Kind3<F, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3.fromEither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromEither",
                    "signature": "readonly fromEither: <R, E, A>(ma: Either<E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1047,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1047",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1047",
                    },
                    "type": "<R, E, A>(ma: Either<E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3.fromOption",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromOption",
                    "signature": "readonly fromOption: <E>(
    onNone: Lazy<E>
) => <R, A>(ma: Option<A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1046,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1046",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1046",
                    },
                    "type": "<E>(onNone: Lazy<E>) => <R, A>(ma: Option<A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3.fromPredicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromPredicate",
                    "signature": "readonly fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(
        a: A
    ) => Kind3<F, U, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        a: A
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1048,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1048",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1048",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(a: A) => Kind3<F, U, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(a: A) => Kind3<F, R, E, A>; }",
                  },
                ],
              },
              "name": "PipeableMonadThrow3",
              "signature": "interface PipeableMonadThrow3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 1045,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1045",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1045",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableMonadThrow3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3C.filterOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterOrElse",
                    "signature": "readonly filterOrElse: {
    <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(
        ma: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, B>;
    <A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        ma: Kind3<F, R, E, A>
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1069,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1069",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1069",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(ma: Kind3<F, R, E, A>) => Kind3<F, R, E, B>; <A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(ma: Kind3<F, R, E, A>) => Kind3<F, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3C.fromEither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromEither",
                    "signature": "readonly fromEither: <R, A>(ma: Either<E, A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1064,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1064",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1064",
                    },
                    "type": "<R, A>(ma: Either<E, A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3C.fromOption",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromOption",
                    "signature": "readonly fromOption: (
    onNone: Lazy<E>
) => <R, A>(ma: Option<A>) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1063,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1063",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1063",
                    },
                    "type": "(onNone: Lazy<E>) => <R, A>(ma: Option<A>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow3C.fromPredicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromPredicate",
                    "signature": "readonly fromPredicate: {
    <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(
        a: A
    ) => Kind3<F, U, E, B>;
    <A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        a: A
    ) => Kind3<F, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1065,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1065",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1065",
                    },
                    "type": "{ <A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(a: A) => Kind3<F, U, E, B>; <A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(a: A) => Kind3<F, R, E, A>; }",
                  },
                ],
              },
              "name": "PipeableMonadThrow3C",
              "signature": "interface PipeableMonadThrow3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 1062,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1062",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1062",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableMonadThrow4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow4.filterOrElse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "filterOrElse",
                    "signature": "readonly filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <
        S,
        R
    >(
        ma: Kind4<F, S, R, E, A>
    ) => Kind4<F, S, R, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(
        ma: Kind4<F, S, R, E, A>
    ) => Kind4<F, S, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1086,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1086",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1086",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <S, R>(ma: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(ma: Kind4<F, S, R, E, A>) => Kind4<F, S, R, E, A>; }",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow4.fromEither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromEither",
                    "signature": "readonly fromEither: <S, R, E, A>(ma: Either<E, A>) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1081,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1081",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1081",
                    },
                    "type": "<S, R, E, A>(ma: Either<E, A>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow4.fromOption",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromOption",
                    "signature": "readonly fromOption: <E>(
    onNone: Lazy<E>
) => <S, R, A>(ma: Option<A>) => Kind4<F, S, R, E, A>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1080,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1080",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1080",
                    },
                    "type": "<E>(onNone: Lazy<E>) => <S, R, A>(ma: Option<A>) => Kind4<F, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "pipeable.PipeableMonadThrow4.fromPredicate",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromPredicate",
                    "signature": "readonly fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <
        S,
        R
    >(
        a: A
    ) => Kind4<F, S, R, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(
        a: A
    ) => Kind4<F, S, R, E, A>;
};",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 1082,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1082",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1082",
                    },
                    "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <S, R>(a: A) => Kind4<F, S, R, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(a: A) => Kind4<F, S, R, E, A>; }",
                  },
                ],
              },
              "name": "PipeableMonadThrow4",
              "signature": "interface PipeableMonadThrow4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 1079,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1079",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1079",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableProfunctor",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableProfunctor.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <E, A, D, B>(
    f: (d: D) => E,
    g: (a: A) => B
) => (fbc: HKT2<F, E, A>) => HKT2<F, D, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 911,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L911",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L911",
                    },
                    "type": "<E, A, D, B>(f: (d: D) => E, g: (a: A) => B) => (fbc: HKT2<F, E, A>) => HKT2<F, D, B>",
                  },
                ],
              },
              "name": "PipeableProfunctor",
              "signature": "interface PipeableProfunctor<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 910,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L910",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L910",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableProfunctor2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableProfunctor2.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <E, A, D, B>(
    f: (d: D) => E,
    g: (a: A) => B
) => (fbc: Kind2<F, E, A>) => Kind2<F, D, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 917,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L917",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L917",
                    },
                    "type": "<E, A, D, B>(f: (d: D) => E, g: (a: A) => B) => (fbc: Kind2<F, E, A>) => Kind2<F, D, B>",
                  },
                ],
              },
              "name": "PipeableProfunctor2",
              "signature": "interface PipeableProfunctor2<F extends URIS2> extends PipeableFunctor2<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 916,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L916",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L916",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableProfunctor2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableProfunctor2C.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <A, D, B>(
    f: (d: D) => E,
    g: (a: A) => B
) => (fbc: Kind2<F, E, A>) => Kind2<F, D, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 923,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L923",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L923",
                    },
                    "type": "<A, D, B>(f: (d: D) => E, g: (a: A) => B) => (fbc: Kind2<F, E, A>) => Kind2<F, D, B>",
                  },
                ],
              },
              "name": "PipeableProfunctor2C",
              "signature": "interface PipeableProfunctor2C<F extends URIS2, E> extends PipeableFunctor2C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 922,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L922",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L922",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableProfunctor3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableProfunctor3.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <R, E, A, D, B>(
    f: (d: D) => E,
    g: (a: A) => B
) => (fbc: Kind3<F, R, E, A>) => Kind3<F, R, D, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 929,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L929",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L929",
                    },
                    "type": "<R, E, A, D, B>(f: (d: D) => E, g: (a: A) => B) => (fbc: Kind3<F, R, E, A>) => Kind3<F, R, D, B>",
                  },
                ],
              },
              "name": "PipeableProfunctor3",
              "signature": "interface PipeableProfunctor3<F extends URIS3> extends PipeableFunctor3<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 928,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L928",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L928",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableProfunctor3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableProfunctor3C.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <R, A, D, B>(
    f: (d: D) => E,
    g: (a: A) => B
) => (fbc: Kind3<F, R, E, A>) => Kind3<F, R, D, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 935,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L935",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L935",
                    },
                    "type": "<R, A, D, B>(f: (d: D) => E, g: (a: A) => B) => (fbc: Kind3<F, R, E, A>) => Kind3<F, R, D, B>",
                  },
                ],
              },
              "name": "PipeableProfunctor3C",
              "signature": "interface PipeableProfunctor3C<F extends URIS3, E> extends PipeableFunctor3C<F, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 934,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L934",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L934",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableProfunctor4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableProfunctor4.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <S, R, E, A, D, B>(
    f: (d: D) => E,
    g: (a: A) => B
) => (fbc: Kind4<F, S, R, E, A>) => Kind4<F, S, R, D, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 941,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L941",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L941",
                    },
                    "type": "<S, R, E, A, D, B>(f: (d: D) => E, g: (a: A) => B) => (fbc: Kind4<F, S, R, E, A>) => Kind4<F, S, R, D, B>",
                  },
                ],
              },
              "name": "PipeableProfunctor4",
              "signature": "interface PipeableProfunctor4<F extends URIS4> extends PipeableFunctor4<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 940,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L940",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L940",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableSemigroupoid",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableSemigroupoid.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <E, A>(
    la: HKT2<F, E, A>
) => <B>(ab: HKT2<F, A, B>) => HKT2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 950,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L950",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L950",
                    },
                    "type": "<E, A>(la: HKT2<F, E, A>) => <B>(ab: HKT2<F, A, B>) => HKT2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableSemigroupoid",
              "signature": "interface PipeableSemigroupoid<F> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 949,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L949",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L949",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableSemigroupoid2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableSemigroupoid2.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <E, A>(
    la: Kind2<F, E, A>
) => <B>(ab: Kind2<F, A, B>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 956,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L956",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L956",
                    },
                    "type": "<E, A>(la: Kind2<F, E, A>) => <B>(ab: Kind2<F, A, B>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableSemigroupoid2",
              "signature": "interface PipeableSemigroupoid2<F extends URIS2> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 955,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L955",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L955",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableSemigroupoid2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableSemigroupoid2C.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <A>(
    la: Kind2<F, E, A>
) => <B>(ab: Kind2<F, A, B>) => Kind2<F, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 962,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L962",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L962",
                    },
                    "type": "<A>(la: Kind2<F, E, A>) => <B>(ab: Kind2<F, A, B>) => Kind2<F, E, B>",
                  },
                ],
              },
              "name": "PipeableSemigroupoid2C",
              "signature": "interface PipeableSemigroupoid2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 961,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L961",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L961",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableSemigroupoid3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableSemigroupoid3.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <R, E, A>(
    la: Kind3<F, R, E, A>
) => <B>(ab: Kind3<F, R, A, B>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 968,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L968",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L968",
                    },
                    "type": "<R, E, A>(la: Kind3<F, R, E, A>) => <B>(ab: Kind3<F, R, A, B>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableSemigroupoid3",
              "signature": "interface PipeableSemigroupoid3<F extends URIS3> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 967,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L967",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L967",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "pipeable.PipeableSemigroupoid3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableSemigroupoid3C.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <R, A>(
    la: Kind3<F, R, E, A>
) => <B>(ab: Kind3<F, R, A, B>) => Kind3<F, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 974,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L974",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L974",
                    },
                    "type": "<R, A>(la: Kind3<F, R, E, A>) => <B>(ab: Kind3<F, R, A, B>) => Kind3<F, R, E, B>",
                  },
                ],
              },
              "name": "PipeableSemigroupoid3C",
              "signature": "interface PipeableSemigroupoid3C<F extends URIS3, E> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 973,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L973",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L973",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.PipeableSemigroupoid4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "pipeable.PipeableSemigroupoid4.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <S, R, E, A>(
    la: Kind4<F, S, R, E, A>
) => <B>(ab: Kind4<F, S, R, A, B>) => Kind4<F, S, R, E, B>;",
                    "source": {
                      "filename": "lib/pipeable.d.ts",
                      "line": 980,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L980",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L980",
                    },
                    "type": "<S, R, E, A>(la: Kind4<F, S, R, E, A>) => <B>(ab: Kind4<F, S, R, A, B>) => Kind4<F, S, R, E, B>",
                  },
                ],
              },
              "name": "PipeableSemigroupoid4",
              "signature": "interface PipeableSemigroupoid4<F extends URIS4> {}",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 979,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L979",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L979",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * Use [\`pipe\`](https://gcanti.github.io/fp-ts/modules/function.ts.html#flow) from \`function\` module instead.
 *
 * @since 2.0.0
 */",
              ],
              "id": "pipeable.pipe",
              "kind": "variable",
              "name": "pipe",
              "signature": "const pipe: {
    <A>(a: A): A;
    <A, B>(a: A, ab: (a: A) => B): B;
    <A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C;
    <A, B, C, D>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): D;
    <A, B, C, D, E>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E
    ): E;
    <A, B, C, D, E, F>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F
    ): F;
    <A, B, C, D, E, F, G>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G
    ): G;
    <A, B, C, D, E, F, G, H>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H
    ): H;
    <A, B, C, D, E, F, G, H, I>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I
    ): I;
    <A, B, C, D, E, F, G, H, I, J>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J
    ): J;
    <A, B, C, D, E, F, G, H, I, J, K>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K
    ): K;
    <A, B, C, D, E, F, G, H, I, J, K, L>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L
    ): L;
    <A, B, C, D, E, F, G, H, I, J, K, L, M>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M
    ): M;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N
    ): N;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O
    ): O;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P
    ): P;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q
    ): Q;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q,
        qr: (q: Q) => R
    ): R;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q,
        qr: (q: Q) => R,
        rs: (r: R) => S
    ): S;
    <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(
        a: A,
        ab: (a: A) => B,
        bc: (b: B) => C,
        cd: (c: C) => D,
        de: (d: D) => E,
        ef: (e: E) => F,
        fg: (f: F) => G,
        gh: (g: G) => H,
        hi: (h: H) => I,
        ij: (i: I) => J,
        jk: (j: J) => K,
        kl: (k: K) => L,
        lm: (l: L) => M,
        mn: (m: M) => N,
        no: (n: N) => O,
        op: (o: O) => P,
        pq: (p: P) => Q,
        qr: (q: Q) => R,
        rs: (r: R) => S,
        st: (s: S) => T
    ): T;
};",
              "source": {
                "filename": "lib/pipeable.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L96",
              },
              "type": "{ <A>(a: A): A; <A, B>(a: A, ab: (a: A) => B): B; <A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C; <A, B, C, D>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): D; <A, B, C, D, E>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E): E; <A, B, C, D, E, F>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F): F; <A, B, C, D, E, F, G>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G): G; <A, B, C, D, E, F, G, H>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H): H; <A, B, C, D, E, F, G, H, I>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I): I; <A, B, C, D, E, F, G, H, I, J>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J): J; <A, B, C, D, E, F, G, H, I, J, K>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K): K; <A, B, C, D, E, F, G, H, I, J, K, L>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L): L; <A, B, C, D, E, F, G, H, I, J, K, L, M>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M): M; <A, B, C, D, E, F, G, H, I, J, K, L, M, N>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N): N; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O): O; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P): P; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q): Q; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R): R; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R, rs: (r: R) => S): S; <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R, rs: (r: R) => S, st: (s: S) => T): T; }",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "pipeable",
        "kind": "namespace",
        "name": "pipeable",
        "signature": "module 'lib/pipeable.d.ts' {}",
        "source": {
          "filename": "lib/pipeable.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "profunctor.Profunctor",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, A, B>(fa: HKT2<F, E, A>, f: (a: A) => B) => HKT<F, B>;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L12",
                    },
                    "type": "<E, A, B>(fa: HKT2<F, E, A>, f: (a: A) => B) => HKT<F, B>",
                  },
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <E, A, D, B>(
    fea: HKT2<F, E, A>,
    f: (d: D) => E,
    g: (a: A) => B
) => HKT2<F, D, B>;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 13,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L13",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L13",
                    },
                    "type": "<E, A, D, B>(fea: HKT2<F, E, A>, f: (d: D) => E, g: (a: A) => B) => HKT2<F, D, B>",
                  },
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L11",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Profunctor",
              "signature": "interface Profunctor<F> {}",
              "source": {
                "filename": "lib/Profunctor.d.ts",
                "line": 10,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L10",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L10",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "profunctor.Profunctor2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor2.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <E, A, D, B>(
    fea: Kind2<F, E, A>,
    f: (d: D) => E,
    g: (a: A) => B
) => Kind2<F, D, B>;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L20",
                    },
                    "type": "<E, A, D, B>(fea: Kind2<F, E, A>, f: (d: D) => E, g: (a: A) => B) => Kind2<F, D, B>",
                  },
                ],
              },
              "name": "Profunctor2",
              "signature": "interface Profunctor2<F extends URIS2> extends Functor2<F> {}",
              "source": {
                "filename": "lib/Profunctor.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L19",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "profunctor.Profunctor2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor2C.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <A, D, B>(
    fea: Kind2<F, E, A>,
    f: (d: D) => E,
    g: (a: A) => B
) => Kind2<F, D, B>;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L27",
                    },
                    "type": "<A, D, B>(fea: Kind2<F, E, A>, f: (d: D) => E, g: (a: A) => B) => Kind2<F, D, B>",
                  },
                ],
              },
              "name": "Profunctor2C",
              "signature": "interface Profunctor2C<F extends URIS2, E> extends Functor2C<F, E> {}",
              "source": {
                "filename": "lib/Profunctor.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L26",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "profunctor.Profunctor3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor3.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <R, E, A, D, B>(
    fea: Kind3<F, R, E, A>,
    f: (d: D) => E,
    g: (a: A) => B
) => Kind3<F, R, D, B>;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 34,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L34",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L34",
                    },
                    "type": "<R, E, A, D, B>(fea: Kind3<F, R, E, A>, f: (d: D) => E, g: (a: A) => B) => Kind3<F, R, D, B>",
                  },
                ],
              },
              "name": "Profunctor3",
              "signature": "interface Profunctor3<F extends URIS3> extends Functor3<F> {}",
              "source": {
                "filename": "lib/Profunctor.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L33",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "profunctor.Profunctor3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor3C.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <R, A, D, B>(
    fea: Kind3<F, R, E, A>,
    f: (d: D) => E,
    g: (a: A) => B
) => Kind3<F, R, D, B>;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L41",
                    },
                    "type": "<R, A, D, B>(fea: Kind3<F, R, E, A>, f: (d: D) => E, g: (a: A) => B) => Kind3<F, R, D, B>",
                  },
                ],
              },
              "name": "Profunctor3C",
              "signature": "interface Profunctor3C<F extends URIS3, E> extends Functor3C<F, E> {}",
              "source": {
                "filename": "lib/Profunctor.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L40",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "profunctor.Profunctor4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "profunctor.Profunctor4.promap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "promap",
                    "signature": "readonly promap: <S, R, E, A, D, B>(
    fea: Kind4<F, S, R, E, A>,
    f: (d: D) => E,
    g: (a: A) => B
) => Kind4<F, S, R, D, B>;",
                    "source": {
                      "filename": "lib/Profunctor.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L48",
                    },
                    "type": "<S, R, E, A, D, B>(fea: Kind4<F, S, R, E, A>, f: (d: D) => E, g: (a: A) => B) => Kind4<F, S, R, D, B>",
                  },
                ],
              },
              "name": "Profunctor4",
              "signature": "interface Profunctor4<F extends URIS4> extends Functor4<F> {}",
              "source": {
                "filename": "lib/Profunctor.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L47",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "profunctor",
        "kind": "namespace",
        "name": "profunctor",
        "signature": "module 'lib/Profunctor.d.ts' {}",
        "source": {
          "filename": "lib/Profunctor.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Takes a range specified by \`low\` (the first argument) and \`high\` (the second), and returns a random integer uniformly
 * distributed in the closed interval \`[low, high]\`. It is unspecified what happens if \`low > high\`, or if either of
 * \`low\` or \`high\` is not an integer.
 *
 * @since 2.0.0
 */",
              ],
              "id": "random.randomInt",
              "kind": "function",
              "name": "randomInt",
              "signature": "randomInt: (low: number, high: number) => IO<number>;",
              "source": {
                "filename": "lib/Random.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Random.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Random.d.ts#L19",
              },
              "type": "(low: number, high: number) => IO<number>",
            },
            {
              "docs": [
                "/**
 * Returns a random number between a minimum value (inclusive) and a maximum value (exclusive). It is unspecified what
 * happens if \`maximum < minimum\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "random.randomRange",
              "kind": "function",
              "name": "randomRange",
              "signature": "randomRange: (min: number, max: number) => IO<number>;",
              "source": {
                "filename": "lib/Random.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Random.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Random.d.ts#L26",
              },
              "type": "(min: number, max: number) => IO<number>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * Returns a random number between 0 (inclusive) and 1 (exclusive). This is a direct wrapper around JavaScript's
 * \`Math.random()\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "random.random",
              "kind": "variable",
              "name": "random",
              "signature": "const random: IO<number>;",
              "source": {
                "filename": "lib/Random.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Random.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Random.d.ts#L11",
              },
              "type": "IO<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Returns a random boolean value with an equal chance of being \`true\` or \`false\`
 *
 * @since 2.0.0
 */",
              ],
              "id": "random.randomBool",
              "kind": "variable",
              "name": "randomBool",
              "signature": "const randomBool: IO<boolean>;",
              "source": {
                "filename": "lib/Random.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Random.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Random.d.ts#L32",
              },
              "type": "IO<boolean>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "random",
        "kind": "namespace",
        "name": "random",
        "signature": "module 'lib/Random.d.ts' {}",
        "source": {
          "filename": "lib/Random.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Random.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Random.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "reader.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <R, A>(fa: Reader<R, A>) => <B>(fab: Reader<R, (a: A) => B>) => Reader<R, B>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L63",
              },
              "type": "<R, A>(fa: Reader<R, A>) => <B>(fab: Reader<R, (a: A) => B>) => Reader<R, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "reader.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <R, B>(fb: Reader<R, B>) => <A>(fa: Reader<R, A>) => Reader<R, A>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 72,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L72",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L72",
              },
              "type": "<R, B>(fb: Reader<R, B>) => <A>(fa: Reader<R, A>) => Reader<R, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "reader.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, R, B>(
    name: Exclude<N, keyof A>,
    fb: Reader<R, B>
) => (
    fa: Reader<R, A>
) => Reader<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 239,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L239",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L239",
              },
              "type": "<A, N extends string, R, B>(name: Exclude<N, keyof A>, fb: Reader<R, B>) => (fa: Reader<R, A>) => Reader<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "reader.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <R, B>(fb: Reader<R, B>) => <A>(fa: Reader<R, A>) => Reader<R, B>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L81",
              },
              "type": "<R, B>(fb: Reader<R, B>) => <A>(fa: Reader<R, A>) => Reader<R, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "reader.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, Q, B>(
    name: Exclude<N, keyof A>,
    fb: Reader<Q, B>
) => <R>(
    fa: Reader<R, A>
) => Reader<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 232,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L232",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L232",
              },
              "type": "<A, N extends string, Q, B>(name: Exclude<N, keyof A>, fb: Reader<Q, B>) => <R>(fa: Reader<R, A>) => Reader<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "reader.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <Q, A>(
    fa: Reader<Q, A>
) => <R, B>(fab: Reader<R, (a: A) => B>) => Reader<Q & R, B>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L56",
              },
              "type": "<Q, A>(fa: Reader<Q, A>) => <R, B>(fab: Reader<R, (a: A) => B>) => Reader<Q & R, B>",
            },
            {
              "docs": [
                "/**
 * Reads the current context
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "reader.ask",
              "kind": "function",
              "name": "ask",
              "signature": "ask: <R>() => Reader<R, R>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L26",
              },
              "type": "<R>() => Reader<R, R>",
            },
            {
              "docs": [
                "/**
 * Projects a value from the global context in a Reader
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "reader.asks",
              "kind": "function",
              "name": "asks",
              "signature": "asks: <R, A>(f: (r: R) => A) => Reader<R, A>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L33",
              },
              "type": "<R, A>(f: (r: R) => A) => Reader<R, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "reader.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, R, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => Reader<R, B>
) => (
    fa: Reader<R, A>
) => Reader<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 214,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L214",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L214",
              },
              "type": "<N extends string, A, R, B>(name: Exclude<N, keyof A>, f: (a: A) => Reader<R, B>) => (fa: Reader<R, A>) => Reader<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "reader.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <R, A>(fa: Reader<R, A>) => Reader<R, { [K in N]: A }>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L203",
              },
              "type": "<N extends string>(name: N) => <R, A>(fa: Reader<R, A>) => Reader<R, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "reader.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, Q, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => Reader<Q, B>
) => <R>(
    fa: Reader<R, A>
) => Reader<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 207,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L207",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L207",
              },
              "type": "<N extends string, A, Q, B>(name: Exclude<N, keyof A>, f: (a: A) => Reader<Q, B>) => <R>(fa: Reader<R, A>) => Reader<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "reader.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, R, B>(
    f: (a: A) => Reader<R, B>
) => (ma: Reader<R, A>) => Reader<R, B>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 102,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L102",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L102",
              },
              "type": "<A, R, B>(f: (a: A) => Reader<R, B>) => (ma: Reader<R, A>) => Reader<R, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "reader.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, R, B>(
    f: (a: A) => Reader<R, B>
) => (ma: Reader<R, A>) => Reader<R, A>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 112,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L112",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L112",
              },
              "type": "<A, R, B>(f: (a: A) => Reader<R, B>) => (ma: Reader<R, A>) => Reader<R, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */",
              ],
              "id": "reader.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <R, A, B>(
    f: (a: A) => Reader<R, B>
) => <Q>(ma: Reader<Q, A>) => Reader<Q & R, B>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 95,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L95",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L95",
              },
              "type": "<R, A, B>(f: (a: A) => Reader<R, B>) => <Q>(ma: Reader<Q, A>) => Reader<Q & R, B>",
            },
            {
              "docs": [
                "/**
 * @category Semigroupoid
 * @since 2.0.0
 */",
              ],
              "id": "reader.compose",
              "kind": "function",
              "name": "compose",
              "signature": "compose: <A, B>(ab: Reader<A, B>) => <C>(bc: Reader<B, C>) => Reader<A, C>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 124,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L124",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L124",
              },
              "type": "<A, B>(ab: Reader<A, B>) => <C>(bc: Reader<B, C>) => Reader<A, C>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "reader.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <R, A>(mma: Reader<R, Reader<R, A>>) => Reader<R, A>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 119,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L119",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L119",
              },
              "type": "<R, A>(mma: Reader<R, Reader<R, A>>) => Reader<R, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "reader.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <R, A>(M: Monoid<A>) => Monoid<Reader<R, A>>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 159,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L159",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L159",
              },
              "type": "<R, A>(M: Monoid<A>) => Monoid<Reader<R, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "reader.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <R, A>(S: Semigroup<A>) => Semigroup<Reader<R, A>>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 154,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L154",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L154",
              },
              "type": "<R, A>(S: Semigroup<A>) => Semigroup<Reader<R, A>>",
            },
            {
              "docs": [
                "/**
 * Changes the value of the local context during the execution of the action \`ma\` (similar to \`Contravariant\`'s
 * \`contramap\`).
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "reader.local",
              "kind": "function",
              "name": "local",
              "signature": "local: <Q, R>(f: (d: Q) => R) => <A>(ma: Reader<R, A>) => Reader<Q, A>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L41",
              },
              "type": "<Q, R>(f: (d: Q) => R) => <A>(ma: Reader<R, A>) => Reader<Q, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "reader.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <R>(fa: Reader<R, A>) => Reader<R, B>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 49,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L49",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L49",
              },
              "type": "<A, B>(f: (a: A) => B) => <R>(fa: Reader<R, A>) => Reader<R, B>",
            },
            {
              "docs": [
                "/**
 * @category Profunctor
 * @since 2.0.0
 */",
              ],
              "id": "reader.promap",
              "kind": "function",
              "name": "promap",
              "signature": "promap: <E, A, D, B>(
    f: (d: D) => E,
    g: (a: A) => B
) => (fbc: Reader<E, A>) => Reader<D, B>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 129,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L129",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L129",
              },
              "type": "<E, A, D, B>(f: (d: D) => E, g: (a: A) => B) => (fbc: Reader<E, A>) => Reader<D, B>",
            },
            {
              "docs": [
                "/**
 * this function have the same behavior of \`A.sequence(R.reader)\` but it's stack safe and optimized
 *
 * @example
 * import * as RA from 'fp-ts/ReadonlyArray'
 * import { sequenceArray, Reader } from 'fp-ts/Reader'
 * import { pipe } from 'fp-ts/function'
 *
 * const add: (x: number) => Reader<{value:number}, number> = x => config => x + config.value
 * const arr = RA.range(0, 100)
 *
 * assert.deepStrictEqual(pipe(arr, RA.map(add), sequenceArray)({value: 3}), pipe(arr, RA.map(x => x + 3)))
 *
 * @since 2.9.0
 */",
              ],
              "id": "reader.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <R, A>(arr: readonly Reader<R, A>[]) => Reader<R, readonly A[]>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 290,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L290",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L290",
              },
              "type": "<R, A>(arr: readonly Reader<R, A>[]) => Reader<R, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * this function have the same behavior of \`A.traverse(R.reader)\` but it's stack safe and optimized
 *
 * @example
 * import * as RA from 'fp-ts/ReadonlyArray'
 * import { traverseArray, Reader } from 'fp-ts/Reader'
 * import { pipe } from 'fp-ts/function'
 *
 * const add: (x: number) => Reader<{value:number}, number> = x => config => x + config.value
 * const arr = RA.range(0, 100)
 *
 * assert.deepStrictEqual(pipe(arr, traverseArray(add))({value: 3}), pipe(arr, RA.map(x => x + 3)))
 *
 * @since 2.9.0
 */",
              ],
              "id": "reader.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <R, A, B>(
    f: (a: A) => Reader<R, B>
) => (arr: readonly A[]) => Reader<R, readonly B[]>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 272,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L272",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L272",
              },
              "type": "<R, A, B>(f: (a: A) => Reader<R, B>) => (arr: readonly A[]) => Reader<R, readonly B[]>",
            },
            {
              "docs": [
                "/**
 *
 * @since 2.9.0
 */",
              ],
              "id": "reader.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <R, A, B>(
    f: (index: number, a: A) => Reader<R, B>
) => (arr: readonly A[]) => Reader<R, readonly B[]>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 254,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L254",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L254",
              },
              "type": "<R, A, B>(f: (index: number, a: A) => Reader<R, B>) => (arr: readonly A[]) => Reader<R, readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "reader.Reader",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "reader.Reader.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(r: R): A;",
                    "source": {
                      "filename": "lib/Reader.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L18",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Reader",
              "signature": "interface Reader<R, A> {}",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L17",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "reader.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L144",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "reader.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 169,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L169",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L169",
              },
              "type": "Applicative2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "reader.Category",
              "kind": "variable",
              "name": "Category",
              "signature": "const Category: Category2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 184,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L184",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L184",
              },
              "type": "Category2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.8.3
 */",
              ],
              "id": "reader.Choice",
              "kind": "variable",
              "name": "Choice",
              "signature": "const Choice: Choice2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L194",
              },
              "type": "Choice2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "reader.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: Reader<unknown, {}>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 228,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L228",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L228",
              },
              "type": "Reader<unknown, {}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "reader.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 164,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L164",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L164",
              },
              "type": "Functor2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Category
 * @since 2.0.0
 */",
              ],
              "id": "reader.id",
              "kind": "variable",
              "name": "id",
              "signature": "const id: <A>() => Kind2<F, A, A>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 134,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L134",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L134",
              },
              "type": "<A>() => Kind2<F, A, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "reader.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 174,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L174",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L174",
              },
              "type": "Monad2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "reader.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <E, A>(a: A) => Kind2<F, E, A>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L88",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L88",
              },
              "type": "<E, A>(a: A) => Kind2<F, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "reader.Profunctor",
              "kind": "variable",
              "name": "Profunctor",
              "signature": "const Profunctor: Profunctor2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 179,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L179",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L179",
              },
              "type": "Profunctor2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "reader.reader",
              "kind": "variable",
              "name": "reader",
              "signature": "const reader: Monad2<'Reader'> &
    Profunctor2<'Reader'> &
    Category2<'Reader'> &
    Strong2<'Reader'> &
    Choice2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 199,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L199",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L199",
              },
              "type": "Monad2<"Reader"> & Profunctor2<"Reader"> & Category2<"Reader"> & Strong2<"Reader"> & Choice2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.8.3
 */",
              ],
              "id": "reader.Strong",
              "kind": "variable",
              "name": "Strong",
              "signature": "const Strong: Strong2<'Reader'>;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 189,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L189",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L189",
              },
              "type": "Strong2<"Reader">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "reader.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Reader.d.ts",
                "line": 139,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L139",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L139",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "reader",
        "kind": "namespace",
        "name": "reader",
        "signature": "module 'lib/Reader.d.ts' {}",
        "source": {
          "filename": "lib/Reader.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <R, E, A>(
    that: () => ReaderEither<R, E, A>
) => (fa: ReaderEither<R, E, A>) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 302,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L302",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L302",
              },
              "type": "<R, E, A>(that: () => ReaderEither<R, E, A>) => (fa: ReaderEither<R, E, A>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "readerEither.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <R2, E2, B>(
    that: () => ReaderEither<R2, E2, B>
) => <R1, E1, A>(
    fa: ReaderEither<R1, E1, A>
) => ReaderEither<R1 & R2, E2 | E1, B | A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 292,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L292",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L292",
              },
              "type": "<R2, E2, B>(that: () => ReaderEither<R2, E2, B>) => <R1, E1, A>(fa: ReaderEither<R1, E1, A>) => ReaderEither<R1 & R2, E2 | E1, B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <R, E, A>(
    fa: ReaderEither<R, E, A>
) => <B>(fab: ReaderEither<R, E, (a: A) => B>) => ReaderEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 204,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L204",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L204",
              },
              "type": "<R, E, A>(fa: ReaderEither<R, E, A>) => <B>(fab: ReaderEither<R, E, (a: A) => B>) => ReaderEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <R, E, B>(
    fb: ReaderEither<R, E, B>
) => <A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 215,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L215",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L215",
              },
              "type": "<R, E, B>(fb: ReaderEither<R, E, B>) => <A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerEither.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, R, E, B>(
    name: Exclude<N, keyof A>,
    fb: ReaderEither<R, E, B>
) => (
    fa: ReaderEither<R, E, A>
) => ReaderEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 444,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L444",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L444",
              },
              "type": "<A, N extends string, R, E, B>(name: Exclude<N, keyof A>, fb: ReaderEither<R, E, B>) => (fa: ReaderEither<R, E, A>) => ReaderEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <R, E, B>(
    fb: ReaderEither<R, E, B>
) => <A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 226,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L226",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L226",
              },
              "type": "<R, E, B>(fb: ReaderEither<R, E, B>) => <A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerEither.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, Q, D, B>(
    name: Exclude<N, keyof A>,
    fb: ReaderEither<Q, D, B>
) => <R, E>(
    fa: ReaderEither<R, E, A>
) => ReaderEither<
    Q & R,
    D | E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 435,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L435",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L435",
              },
              "type": "<A, N extends string, Q, D, B>(name: Exclude<N, keyof A>, fb: ReaderEither<Q, D, B>) => <R, E>(fa: ReaderEither<R, E, A>) => ReaderEither<Q & R, D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "readerEither.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <Q, D, A>(
    fa: ReaderEither<Q, D, A>
) => <R, E, B>(
    fab: ReaderEither<R, E, (a: A) => B>
) => ReaderEither<Q & R, D | E, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 195,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L195",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L195",
              },
              "type": "<Q, D, A>(fa: ReaderEither<Q, D, A>) => <R, E, B>(fab: ReaderEither<R, E, (a: A) => B>) => ReaderEither<Q & R, D | E, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.ask",
              "kind": "function",
              "name": "ask",
              "signature": "ask: <R, E = never>() => ReaderEither<R, E, R>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L47",
              },
              "type": "<R, E = never>() => ReaderEither<R, E, R>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.asks",
              "kind": "function",
              "name": "asks",
              "signature": "asks: <R, E = never, A = never>(f: (r: R) => A) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L52",
              },
              "type": "<R, E = never, A = never>(f: (r: R) => A) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Map a pair of functions over the two last type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => <R>(fa: ReaderEither<R, E, A>) => ReaderEither<R, G, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L178",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => <R>(fa: ReaderEither<R, E, A>) => ReaderEither<R, G, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerEither.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, R, E, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => ReaderEither<R, E, B>
) => (
    fa: ReaderEither<R, E, A>
) => ReaderEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 420,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L420",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L420",
              },
              "type": "<N extends string, A, R, E, B>(name: Exclude<N, keyof A>, f: (a: A) => ReaderEither<R, E, B>) => (fa: ReaderEither<R, E, A>) => ReaderEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerEither.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <R, E, A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, { [K in N]: A }>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 405,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L405",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L405",
              },
              "type": "<N extends string>(name: N) => <R, E, A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerEither.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, Q, D, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => ReaderEither<Q, D, B>
) => <R, E>(
    fa: ReaderEither<R, E, A>
) => ReaderEither<
    Q & R,
    D | E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 411,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L411",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L411",
              },
              "type": "<N extends string, A, Q, D, B>(name: Exclude<N, keyof A>, f: (a: A) => ReaderEither<Q, D, B>) => <R, E>(fa: ReaderEither<R, E, A>) => ReaderEither<Q & R, D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <R, E, A, B>(
    f: (a: A) => ReaderEither<R, E, B>
) => (ma: ReaderEither<R, E, A>) => ReaderEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 253,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L253",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L253",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderEither<R, E, B>) => (ma: ReaderEither<R, E, A>) => ReaderEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerEither.chainEitherK",
              "kind": "function",
              "name": "chainEitherK",
              "signature": "chainEitherK: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <R>(ma: ReaderEither<R, E, A>) => ReaderEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 136,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L136",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L136",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <R>(ma: ReaderEither<R, E, A>) => ReaderEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainEitherK\`](#chainEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "readerEither.chainEitherKW",
              "kind": "function",
              "name": "chainEitherKW",
              "signature": "chainEitherKW: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <R, D>(ma: ReaderEither<R, D, A>) => ReaderEither<R, E | D, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 129,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L129",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L129",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <R, D>(ma: ReaderEither<R, D, A>) => ReaderEither<R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <R, E, A, B>(
    f: (a: A) => ReaderEither<R, E, B>
) => (ma: ReaderEither<R, E, A>) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 276,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L276",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L276",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderEither<R, E, B>) => (ma: ReaderEither<R, E, A>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainFirst\`](#chainFirst)
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.8.0
 */",
              ],
              "id": "readerEither.chainFirstW",
              "kind": "function",
              "name": "chainFirstW",
              "signature": "chainFirstW: <R, D, A, B>(
    f: (a: A) => ReaderEither<R, D, B>
) => <Q, E>(ma: ReaderEither<Q, E, A>) => ReaderEither<Q & R, D | E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 264,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L264",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L264",
              },
              "type": "<R, D, A, B>(f: (a: A) => ReaderEither<R, D, B>) => <Q, E>(ma: ReaderEither<Q, E, A>) => ReaderEither<Q & R, D | E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */",
              ],
              "id": "readerEither.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <R, E, A, B>(
    f: (a: A) => ReaderEither<R, E, B>
) => <Q, D>(ma: ReaderEither<Q, D, A>) => ReaderEither<Q & R, E | D, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 244,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L244",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L244",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderEither<R, E, B>) => <Q, D>(ma: ReaderEither<Q, D, A>) => ReaderEither<Q & R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <R, E, A>(
    mma: ReaderEither<R, E, ReaderEither<R, E, A>>
) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 285,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L285",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L285",
              },
              "type": "<R, E, A>(mma: ReaderEither<R, E, ReaderEither<R, E, A>>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <R, E, A, B>(
    onLeft: (e: E) => R.Reader<R, B>,
    onRight: (a: A) => R.Reader<R, B>
) => (ma: ReaderEither<R, E, A>) => R.Reader<R, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L81",
              },
              "type": "<R, E, A, B>(onLeft: (e: E) => R.Reader<R, B>, onRight: (a: A) => R.Reader<R, B>) => (ma: ReaderEither<R, E, A>) => R.Reader<R, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.fromEither",
              "kind": "function",
              "name": "fromEither",
              "signature": "fromEither: <R, E, A>(ma: E.Either<E, A>) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 59,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L59",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L59",
              },
              "type": "<R, E, A>(ma: E.Either<E, A>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerEither.fromEitherK",
              "kind": "function",
              "name": "fromEitherK",
              "signature": "fromEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => Either<E, B>
) => <R>(...a: A) => ReaderEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 120,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L120",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L120",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => Either<E, B>) => <R>(...a: A) => ReaderEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.fromOption",
              "kind": "function",
              "name": "fromOption",
              "signature": "fromOption: <E>(
    onNone: () => E
) => <R, A>(ma: Option<A>) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L66",
              },
              "type": "<E>(onNone: () => E) => <R, A>(ma: Option<A>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.getAltReaderValidation",
              "kind": "function",
              "name": "getAltReaderValidation",
              "signature": "getAltReaderValidation: <E>(SE: Semigroup<E>) => Alt3C<URI, E>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 355,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L355",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L355",
              },
              "type": "<E>(SE: Semigroup<E>) => Alt3C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.getApplicativeReaderValidation",
              "kind": "function",
              "name": "getApplicativeReaderValidation",
              "signature": "getApplicativeReaderValidation: <E>(SE: Semigroup<E>) => Applicative3C<URI, E>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 350,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L350",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L350",
              },
              "type": "<E>(SE: Semigroup<E>) => Applicative3C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.getApplyMonoid",
              "kind": "function",
              "name": "getApplyMonoid",
              "signature": "getApplyMonoid: <R, E, A>(M: Monoid<A>) => Monoid<ReaderEither<R, E, A>>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 345,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L345",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L345",
              },
              "type": "<R, E, A>(M: Monoid<A>) => Monoid<ReaderEither<R, E, A>>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most \`Left\` value. If both operands are \`Right\`s then the inner values
 * are concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.getApplySemigroup",
              "kind": "function",
              "name": "getApplySemigroup",
              "signature": "getApplySemigroup: <R, E, A>(
    S: Semigroup<A>
) => Semigroup<ReaderEither<R, E, A>>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 340,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L340",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L340",
              },
              "type": "<R, E, A>(S: Semigroup<A>) => Semigroup<ReaderEither<R, E, A>>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.getOrElse",
              "kind": "function",
              "name": "getOrElse",
              "signature": "getOrElse: <E, R, A>(
    onLeft: (e: E) => R.Reader<R, A>
) => (ma: ReaderEither<R, E, A>) => R.Reader<R, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 98,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L98",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L98",
              },
              "type": "<E, R, A>(onLeft: (e: E) => R.Reader<R, A>) => (ma: ReaderEither<R, E, A>) => R.Reader<R, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`getOrElse\`](#getOrElse).
 *
 * @category destructors
 * @since 2.6.0
 */",
              ],
              "id": "readerEither.getOrElseW",
              "kind": "function",
              "name": "getOrElseW",
              "signature": "getOrElseW: <R, E, B>(
    onLeft: (e: E) => R.Reader<R, B>
) => <Q, A>(ma: ReaderEither<Q, E, A>) => R.Reader<Q & R, B | A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L91",
              },
              "type": "<R, E, B>(onLeft: (e: E) => R.Reader<R, B>) => <Q, A>(ma: ReaderEither<Q, E, A>) => R.Reader<Q & R, B | A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerEither.getReaderValidation",
              "kind": "function",
              "name": "getReaderValidation",
              "signature": "getReaderValidation: <E>(
    SE: Semigroup<E>
) => Monad3C<URI, E> & Bifunctor3<URI> & Alt3C<URI, E> & MonadThrow3C<URI, E>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 360,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L360",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L360",
              },
              "type": "<E>(SE: Semigroup<E>) => Monad3C<URI, E> & Bifunctor3<URI> & Alt3C<URI, E> & MonadThrow3C<URI, E>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most non-\`Left\` value. If both operands are \`Right\`s then the inner values are
 * concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <R, E, A>(S: Semigroup<A>) => Semigroup<ReaderEither<R, E, A>>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 332,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L332",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L332",
              },
              "type": "<R, E, A>(S: Semigroup<A>) => Semigroup<ReaderEither<R, E, A>>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <R, E = never, A = never>(e: E) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L27",
              },
              "type": "<R, E = never, A = never>(e: E) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.leftReader",
              "kind": "function",
              "name": "leftReader",
              "signature": "leftReader: <R, E = never, A = never>(
    me: R.Reader<R, E>
) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L42",
              },
              "type": "<R, E = never, A = never>(me: R.Reader<R, E>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.local",
              "kind": "function",
              "name": "local",
              "signature": "local: <Q, R>(
    f: (f: Q) => R
) => <E, A>(ma: ReaderEither<R, E, A>) => ReaderEither<Q, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L115",
              },
              "type": "<Q, R>(f: (f: Q) => R) => <E, A>(ma: ReaderEither<R, E, A>) => ReaderEither<Q, E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(
    f: (a: A) => B
) => <R, E>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L171",
              },
              "type": "<A, B>(f: (a: A) => B) => <R, E>(fa: ReaderEither<R, E, A>) => ReaderEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the second type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(
    f: (e: E) => G
) => <R, A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, G, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 188,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L188",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L188",
              },
              "type": "<E, G>(f: (e: E) => G) => <R, A>(fa: ReaderEither<R, E, A>) => ReaderEither<R, G, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.orElse",
              "kind": "function",
              "name": "orElse",
              "signature": "orElse: <E, R, M, A>(
    onLeft: (e: E) => ReaderEither<R, M, A>
) => (ma: ReaderEither<R, E, A>) => ReaderEither<R, M, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 103,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L103",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L103",
              },
              "type": "<E, R, M, A>(onLeft: (e: E) => ReaderEither<R, M, A>) => (ma: ReaderEither<R, E, A>) => ReaderEither<R, M, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <R, E = never, A = never>(a: A) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L32",
              },
              "type": "<R, E = never, A = never>(a: A) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.rightReader",
              "kind": "function",
              "name": "rightReader",
              "signature": "rightReader: <R, E = never, A = never>(
    ma: R.Reader<R, A>
) => ReaderEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L37",
              },
              "type": "<R, E = never, A = never>(ma: R.Reader<R, A>) => ReaderEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerEither.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <R, E, A>(
    arr: readonly ReaderEither<R, E, A>[]
) => ReaderEither<R, E, readonly A[]>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 471,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L471",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L471",
              },
              "type": "<R, E, A>(arr: readonly ReaderEither<R, E, A>[]) => ReaderEither<R, E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <R, E, A>(ma: ReaderEither<R, E, A>) => ReaderEither<R, A, E>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L110",
              },
              "type": "<R, E, A>(ma: ReaderEither<R, E, A>) => ReaderEither<R, A, E>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerEither.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <R, E, A, B>(
    f: (a: A) => ReaderEither<R, E, B>
) => (arr: readonly A[]) => ReaderEither<R, E, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 465,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L465",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L465",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderEither<R, E, B>) => (arr: readonly A[]) => ReaderEither<R, E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerEither.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <R, E, A, B>(
    f: (index: number, a: A) => ReaderEither<R, E, B>
) => (arr: readonly A[]) => ReaderEither<R, E, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 459,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L459",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L459",
              },
              "type": "<R, E, A, B>(f: (index: number, a: A) => ReaderEither<R, E, B>) => (arr: readonly A[]) => ReaderEither<R, E, readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.ReaderEither",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ReaderEither",
              "signature": "interface ReaderEither<R, E, A> extends Reader<R, Either<E, A>> {}",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 22,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L22",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L22",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 319,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L319",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L319",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt3<'ReaderEither'>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 387,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L387",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L387",
              },
              "type": "Alt3<"ReaderEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative3<'ReaderEither'>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 372,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L372",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L372",
              },
              "type": "Applicative3<"ReaderEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor3<'ReaderEither'>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 382,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L382",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L382",
              },
              "type": "Bifunctor3<"ReaderEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerEither.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: ReaderEither<unknown, never, {}>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 401,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L401",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L401",
              },
              "type": "ReaderEither<unknown, never, {}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.filterOrElse",
              "kind": "variable",
              "name": "filterOrElse",
              "signature": "const filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(
        ma: ReaderEither<R, E, A>
    ) => ReaderEither<R, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        ma: ReaderEither<R, E, A>
    ) => ReaderEither<R, E, A>;
};",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L158",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(ma: ReaderEither<R, E, A>) => ReaderEither<R, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(ma: ReaderEither<R, E, A>) => ReaderEither<R, E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`filterOrElse\`](#filterOrElse).
 *
 * @since 2.9.0
 */",
              ],
              "id": "readerEither.filterOrElseW",
              "kind": "variable",
              "name": "filterOrElseW",
              "signature": "const filterOrElseW: {
    <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <
        R,
        E1
    >(
        ma: ReaderEither<R, E1, A>
    ) => ReaderEither<R, E2 | E1, B>;
    <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <R, E1>(
        ma: ReaderEither<R, E1, A>
    ) => ReaderEither<R, E2 | E1, A>;
};",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L144",
              },
              "type": "{ <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <R, E1>(ma: ReaderEither<R, E1, A>) => ReaderEither<R, E2 | E1, B>; <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <R, E1>(ma: ReaderEither<R, E1, A>) => ReaderEither<R, E2 | E1, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.fromPredicate",
              "kind": "variable",
              "name": "fromPredicate",
              "signature": "const fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(
        a: A
    ) => ReaderEither<U, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        a: A
    ) => ReaderEither<R, E, A>;
};",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 73,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L73",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L73",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(a: A) => ReaderEither<U, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(a: A) => ReaderEither<R, E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor3<'ReaderEither'>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 367,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L367",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L367",
              },
              "type": "Functor3<"ReaderEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad3<'ReaderEither'>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 377,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L377",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L377",
              },
              "type": "Monad3<"ReaderEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.MonadThrow",
              "kind": "variable",
              "name": "MonadThrow",
              "signature": "const MonadThrow: MonadThrow3<'ReaderEither'>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 392,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L392",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L392",
              },
              "type": "MonadThrow3<"ReaderEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * Equivalent to [\`right\`](#right).
 *
 * @category Applicative
 * @since 2.8.5
 */",
              ],
              "id": "readerEither.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <R, E, A>(a: A) => Kind3<F, R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 237,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L237",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L237",
              },
              "type": "<R, E, A>(a: A) => Kind3<F, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.readerEither",
              "kind": "variable",
              "name": "readerEither",
              "signature": "const readerEither: Monad3<'ReaderEither'> &
    Bifunctor3<'ReaderEither'> &
    Alt3<'ReaderEither'> &
    MonadThrow3<'ReaderEither'>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 397,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L397",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L397",
              },
              "type": "Monad3<"ReaderEither"> & Bifunctor3<"ReaderEither"> & Alt3<"ReaderEither"> & MonadThrow3<"ReaderEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadThrow
 * @since 2.7.0
 */",
              ],
              "id": "readerEither.throwError",
              "kind": "variable",
              "name": "throwError",
              "signature": "const throwError: <R, E, A>(e: E) => Kind3<M, R, E, A>;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 309,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L309",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L309",
              },
              "type": "<R, E, A>(e: E) => Kind3<M, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerEither.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReaderEither.d.ts",
                "line": 314,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L314",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L314",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "readerEither",
        "kind": "namespace",
        "name": "readerEither",
        "signature": "module 'lib/ReaderEither.d.ts' {}",
        "source": {
          "filename": "lib/ReaderEither.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "readerT.getReaderM",
              "kind": "function",
              "name": "getReaderM",
              "signature": "getReaderM: {
    <M extends URIS3>(M: Monad3<M>): ReaderM3<M>;
    <M extends URIS2>(M: Monad2<M>): ReaderM2<M>;
    <M extends URIS2, E>(M: Monad2C<M, E>): ReaderM2C<M, E>;
    <M extends URIS>(M: Monad1<M>): ReaderM1<M>;
    <M>(M: Monad<M>): ReaderM<M>;
};",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 113,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L113",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L113",
              },
              "type": "{ <M extends URIS3>(M: Monad3<M>): ReaderM3<M>; <M extends URIS2>(M: Monad2<M>): ReaderM2<M>; <M extends URIS2, E>(M: Monad2C<M, E>): ReaderM2C<M, E>; <M extends URIS>(M: Monad1<M>): ReaderM1<M>; <M>(M: Monad<M>): ReaderM<M>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderM",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, A, B>(
    mab: ReaderT<M, R, (a: A) => B>,
    ma: ReaderT<M, R, A>
) => ReaderT<M, R, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L20",
                    },
                    "type": "<R, A, B>(mab: ReaderT<M, R, (a: A) => B>, ma: ReaderT<M, R, A>) => ReaderT<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.ask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ask",
                    "signature": "readonly ask: <R>() => ReaderT<M, R, R>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L22",
                    },
                    "type": "<R>() => ReaderT<M, R, R>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.asks",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "asks",
                    "signature": "readonly asks: <R, A>(f: (r: R) => A) => ReaderT<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 23,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L23",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L23",
                    },
                    "type": "<R, A>(f: (r: R) => A) => ReaderT<M, R, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, A, B>(
    ma: ReaderT<M, R, A>,
    f: (a: A) => ReaderT<M, R, B>
) => ReaderT<M, R, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L21",
                    },
                    "type": "<R, A, B>(ma: ReaderT<M, R, A>, f: (a: A) => ReaderT<M, R, B>) => ReaderT<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <R, A>(ma: HKT<M, A>) => ReaderT<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L26",
                    },
                    "type": "<R, A>(ma: HKT<M, A>) => ReaderT<M, R, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.fromReader",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromReader",
                    "signature": "readonly fromReader: <R, A>(ma: Reader<R, A>) => ReaderT<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L25",
                    },
                    "type": "<R, A>(ma: Reader<R, A>) => ReaderT<M, R, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.local",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "local",
                    "signature": "readonly local: <R, A, Q>(
    ma: ReaderT<M, R, A>,
    f: (d: Q) => R
) => ReaderT<M, Q, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 24,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L24",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L24",
                    },
                    "type": "<R, A, Q>(ma: ReaderT<M, R, A>, f: (d: Q) => R) => ReaderT<M, Q, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, A, B>(
    ma: ReaderT<M, R, A>,
    f: (a: A) => B
) => ReaderT<M, R, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L18",
                    },
                    "type": "<R, A, B>(ma: ReaderT<M, R, A>, f: (a: A) => B) => ReaderT<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <R, A>(a: A) => ReaderT<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L19",
                    },
                    "type": "<R, A>(a: A) => ReaderT<M, R, A>",
                  },
                ],
              },
              "name": "ReaderM",
              "signature": "interface ReaderM<M> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderM1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, A, B>(
    mab: ReaderT1<M, R, (a: A) => B>,
    ma: ReaderT1<M, R, A>
) => ReaderT1<M, R, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L41",
                    },
                    "type": "<R, A, B>(mab: ReaderT1<M, R, (a: A) => B>, ma: ReaderT1<M, R, A>) => ReaderT1<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.ask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ask",
                    "signature": "readonly ask: <R>() => ReaderT1<M, R, R>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L43",
                    },
                    "type": "<R>() => ReaderT1<M, R, R>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.asks",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "asks",
                    "signature": "readonly asks: <R, A>(f: (r: R) => A) => ReaderT1<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L44",
                    },
                    "type": "<R, A>(f: (r: R) => A) => ReaderT1<M, R, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, A, B>(
    ma: ReaderT1<M, R, A>,
    f: (a: A) => ReaderT1<M, R, B>
) => ReaderT1<M, R, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L42",
                    },
                    "type": "<R, A, B>(ma: ReaderT1<M, R, A>, f: (a: A) => ReaderT1<M, R, B>) => ReaderT1<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <R, A>(ma: Kind<M, A>) => ReaderT1<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L47",
                    },
                    "type": "<R, A>(ma: Kind<M, A>) => ReaderT1<M, R, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.fromReader",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromReader",
                    "signature": "readonly fromReader: <R, A>(ma: Reader<R, A>) => ReaderT1<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L46",
                    },
                    "type": "<R, A>(ma: Reader<R, A>) => ReaderT1<M, R, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.local",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "local",
                    "signature": "readonly local: <R, A, Q>(
    ma: ReaderT1<M, R, A>,
    f: (d: Q) => R
) => ReaderT1<M, Q, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 45,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L45",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L45",
                    },
                    "type": "<R, A, Q>(ma: ReaderT1<M, R, A>, f: (d: Q) => R) => ReaderT1<M, Q, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, A, B>(
    ma: ReaderT1<M, R, A>,
    f: (a: A) => B
) => ReaderT1<M, R, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L39",
                    },
                    "type": "<R, A, B>(ma: ReaderT1<M, R, A>, f: (a: A) => B) => ReaderT1<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM1.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <R, A>(a: A) => ReaderT1<M, R, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L40",
                    },
                    "type": "<R, A>(a: A) => ReaderT1<M, R, A>",
                  },
                ],
              },
              "name": "ReaderM1",
              "signature": "interface ReaderM1<M extends URIS> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L38",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderM2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, E, A, B>(
    mab: ReaderT2<M, R, E, (a: A) => B>,
    ma: ReaderT2<M, R, E, A>
) => ReaderT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 62,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L62",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L62",
                    },
                    "type": "<R, E, A, B>(mab: ReaderT2<M, R, E, (a: A) => B>, ma: ReaderT2<M, R, E, A>) => ReaderT2<M, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.ask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ask",
                    "signature": "readonly ask: <R, E>() => ReaderT2<M, R, E, R>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 64,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L64",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L64",
                    },
                    "type": "<R, E>() => ReaderT2<M, R, E, R>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.asks",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "asks",
                    "signature": "readonly asks: <R, E, A>(f: (r: R) => A) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L65",
                    },
                    "type": "<R, E, A>(f: (r: R) => A) => ReaderT2<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, E, A, B>(
    ma: ReaderT2<M, R, E, A>,
    f: (a: A) => ReaderT2<M, R, E, B>
) => ReaderT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 63,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L63",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L63",
                    },
                    "type": "<R, E, A, B>(ma: ReaderT2<M, R, E, A>, f: (a: A) => ReaderT2<M, R, E, B>) => ReaderT2<M, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <R, E, A>(ma: Kind2<M, E, A>) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 68,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L68",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L68",
                    },
                    "type": "<R, E, A>(ma: Kind2<M, E, A>) => ReaderT2<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.fromReader",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromReader",
                    "signature": "readonly fromReader: <R, E, A>(ma: Reader<R, A>) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 67,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L67",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L67",
                    },
                    "type": "<R, E, A>(ma: Reader<R, A>) => ReaderT2<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.local",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "local",
                    "signature": "readonly local: <R, E, A, Q>(
    ma: ReaderT2<M, R, E, A>,
    f: (d: Q) => R
) => ReaderT2<M, Q, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L66",
                    },
                    "type": "<R, E, A, Q>(ma: ReaderT2<M, R, E, A>, f: (d: Q) => R) => ReaderT2<M, Q, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, E, A, B>(
    ma: ReaderT2<M, R, E, A>,
    f: (a: A) => B
) => ReaderT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 60,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L60",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L60",
                    },
                    "type": "<R, E, A, B>(ma: ReaderT2<M, R, E, A>, f: (a: A) => B) => ReaderT2<M, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <R, E, A>(a: A) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 61,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L61",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L61",
                    },
                    "type": "<R, E, A>(a: A) => ReaderT2<M, R, E, A>",
                  },
                ],
              },
              "name": "ReaderM2",
              "signature": "interface ReaderM2<M extends URIS2> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 59,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L59",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L59",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.2.0
 */",
              ],
              "id": "readerT.ReaderM2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, A, B>(
    mab: ReaderT2<M, R, E, (a: A) => B>,
    ma: ReaderT2<M, R, E, A>
) => ReaderT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 76,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L76",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L76",
                    },
                    "type": "<R, A, B>(mab: ReaderT2<M, R, E, (a: A) => B>, ma: ReaderT2<M, R, E, A>) => ReaderT2<M, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.ask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ask",
                    "signature": "readonly ask: <R>() => ReaderT2<M, R, E, R>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 78,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L78",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L78",
                    },
                    "type": "<R>() => ReaderT2<M, R, E, R>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.asks",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "asks",
                    "signature": "readonly asks: <R, A>(f: (r: R) => A) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 79,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L79",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L79",
                    },
                    "type": "<R, A>(f: (r: R) => A) => ReaderT2<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, A, B>(
    ma: ReaderT2<M, R, E, A>,
    f: (a: A) => ReaderT2<M, R, E, B>
) => ReaderT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L77",
                    },
                    "type": "<R, A, B>(ma: ReaderT2<M, R, E, A>, f: (a: A) => ReaderT2<M, R, E, B>) => ReaderT2<M, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <R, A>(ma: Kind2<M, E, A>) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L82",
                    },
                    "type": "<R, A>(ma: Kind2<M, E, A>) => ReaderT2<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.fromReader",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromReader",
                    "signature": "readonly fromReader: <R, A>(ma: Reader<R, A>) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 81,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L81",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L81",
                    },
                    "type": "<R, A>(ma: Reader<R, A>) => ReaderT2<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.local",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "local",
                    "signature": "readonly local: <R, A, Q>(
    ma: ReaderT2<M, R, E, A>,
    f: (d: Q) => R
) => ReaderT2<M, Q, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 80,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L80",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L80",
                    },
                    "type": "<R, A, Q>(ma: ReaderT2<M, R, E, A>, f: (d: Q) => R) => ReaderT2<M, Q, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, A, B>(
    ma: ReaderT2<M, R, E, A>,
    f: (a: A) => B
) => ReaderT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 74,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L74",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L74",
                    },
                    "type": "<R, A, B>(ma: ReaderT2<M, R, E, A>, f: (a: A) => B) => ReaderT2<M, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM2C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <R, A>(a: A) => ReaderT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 75,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L75",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L75",
                    },
                    "type": "<R, A>(a: A) => ReaderT2<M, R, E, A>",
                  },
                ],
              },
              "name": "ReaderM2C",
              "signature": "interface ReaderM2C<M extends URIS2, E> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 73,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L73",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L73",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderM3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <R, U, E, A, B>(
    mab: ReaderT3<M, R, U, E, (a: A) => B>,
    ma: ReaderT3<M, R, U, E, A>
) => ReaderT3<M, R, U, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 96,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L96",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L96",
                    },
                    "type": "<R, U, E, A, B>(mab: ReaderT3<M, R, U, E, (a: A) => B>, ma: ReaderT3<M, R, U, E, A>) => ReaderT3<M, R, U, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.ask",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ask",
                    "signature": "readonly ask: <R, U, E>() => ReaderT3<M, R, U, E, R>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 104,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L104",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L104",
                    },
                    "type": "<R, U, E>() => ReaderT3<M, R, U, E, R>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.asks",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "asks",
                    "signature": "readonly asks: <R, U, E, A>(f: (r: R) => A) => ReaderT3<M, R, U, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 105,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L105",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L105",
                    },
                    "type": "<R, U, E, A>(f: (r: R) => A) => ReaderT3<M, R, U, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, U, E, A, B>(
    ma: ReaderT3<M, R, U, E, A>,
    f: (a: A) => ReaderT3<M, R, U, E, B>
) => ReaderT3<M, R, U, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L100",
                    },
                    "type": "<R, U, E, A, B>(ma: ReaderT3<M, R, U, E, A>, f: (a: A) => ReaderT3<M, R, U, E, B>) => ReaderT3<M, R, U, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <R, U, E, A>(ma: Kind3<M, U, E, A>) => ReaderT3<M, R, U, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 108,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L108",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L108",
                    },
                    "type": "<R, U, E, A>(ma: Kind3<M, U, E, A>) => ReaderT3<M, R, U, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.fromReader",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromReader",
                    "signature": "readonly fromReader: <R, U, E, A>(ma: Reader<R, A>) => ReaderT3<M, R, U, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 107,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L107",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L107",
                    },
                    "type": "<R, U, E, A>(ma: Reader<R, A>) => ReaderT3<M, R, U, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.local",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "local",
                    "signature": "readonly local: <R, U, E, A, Q>(
    ma: ReaderT3<M, R, U, E, A>,
    f: (d: Q) => R
) => ReaderT3<M, Q, U, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 106,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L106",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L106",
                    },
                    "type": "<R, U, E, A, Q>(ma: ReaderT3<M, R, U, E, A>, f: (d: Q) => R) => ReaderT3<M, Q, U, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, U, E, A, B>(
    ma: ReaderT3<M, R, U, E, A>,
    f: (a: A) => B
) => ReaderT3<M, R, U, E, B>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 94,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L94",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L94",
                    },
                    "type": "<R, U, E, A, B>(ma: ReaderT3<M, R, U, E, A>, f: (a: A) => B) => ReaderT3<M, R, U, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "readerT.ReaderM3.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <R, U, E, A>(a: A) => ReaderT3<M, R, U, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 95,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L95",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L95",
                    },
                    "type": "<R, U, E, A>(a: A) => ReaderT3<M, R, U, E, A>",
                  },
                ],
              },
              "name": "ReaderM3",
              "signature": "interface ReaderM3<M extends URIS3> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L93",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L93",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderT",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderT.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(r: R): HKT<M, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L12",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ReaderT",
              "signature": "interface ReaderT<M, R, A> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L11",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderT1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderT1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(r: R): Kind<M, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 33,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L33",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L33",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ReaderT1",
              "signature": "interface ReaderT1<M extends URIS, R, A> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L32",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderT2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderT2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(r: R): Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L54",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ReaderT2",
              "signature": "interface ReaderT2<M extends URIS2, R, E, A> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L53",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "readerT.ReaderT3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "readerT.ReaderT3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(r: R): Kind3<M, U, E, A>;",
                    "source": {
                      "filename": "lib/ReaderT.d.ts",
                      "line": 88,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L88",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L88",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ReaderT3",
              "signature": "interface ReaderT3<M extends URIS3, R, U, E, A> {}",
              "source": {
                "filename": "lib/ReaderT.d.ts",
                "line": 87,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L87",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L87",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "readerT",
        "kind": "namespace",
        "name": "readerT",
        "signature": "module 'lib/ReaderT.d.ts' {}",
        "source": {
          "filename": "lib/ReaderT.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <R, A>(
    fa: ReaderTask<R, A>
) => <B>(fab: ReaderTask<R, (a: A) => B>) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 98,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L98",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L98",
              },
              "type": "<R, A>(fa: ReaderTask<R, A>) => <B>(fab: ReaderTask<R, (a: A) => B>) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <R, B>(
    fb: ReaderTask<R, B>
) => <A>(fa: ReaderTask<R, A>) => ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 107,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L107",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L107",
              },
              "type": "<R, B>(fb: ReaderTask<R, B>) => <A>(fa: ReaderTask<R, A>) => ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTask.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, R, B>(
    name: Exclude<N, keyof A>,
    fb: ReaderTask<R, B>
) => (
    fa: ReaderTask<R, A>
) => ReaderTask<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 254,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L254",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L254",
              },
              "type": "<A, N extends string, R, B>(name: Exclude<N, keyof A>, fb: ReaderTask<R, B>) => (fa: ReaderTask<R, A>) => ReaderTask<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <R, B>(
    fb: ReaderTask<R, B>
) => <A>(fa: ReaderTask<R, A>) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 116,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L116",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L116",
              },
              "type": "<R, B>(fb: ReaderTask<R, B>) => <A>(fa: ReaderTask<R, A>) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTask.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, Q, B>(
    name: Exclude<N, keyof A>,
    fb: ReaderTask<Q, B>
) => <R>(
    fa: ReaderTask<R, A>
) => ReaderTask<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 247,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L247",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L247",
              },
              "type": "<A, N extends string, Q, B>(name: Exclude<N, keyof A>, fb: ReaderTask<Q, B>) => <R>(fa: ReaderTask<R, A>) => ReaderTask<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "readerTask.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <Q, A>(
    fa: ReaderTask<Q, A>
) => <R, B>(fab: ReaderTask<R, (a: A) => B>) => ReaderTask<Q & R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 89,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L89",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L89",
              },
              "type": "<Q, A>(fa: ReaderTask<Q, A>) => <R, B>(fab: ReaderTask<R, (a: A) => B>) => ReaderTask<Q & R, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.ask",
              "kind": "function",
              "name": "ask",
              "signature": "ask: <R>() => ReaderTask<R, R>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L40",
              },
              "type": "<R>() => ReaderTask<R, R>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.asks",
              "kind": "function",
              "name": "asks",
              "signature": "asks: <R, A = never>(f: (r: R) => A) => ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L45",
              },
              "type": "<R, A = never>(f: (r: R) => A) => ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTask.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, R, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => ReaderTask<R, B>
) => (
    fa: ReaderTask<R, A>
) => ReaderTask<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 233,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L233",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L233",
              },
              "type": "<N extends string, A, R, B>(name: Exclude<N, keyof A>, f: (a: A) => ReaderTask<R, B>) => (fa: ReaderTask<R, A>) => ReaderTask<R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTask.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <R, A>(fa: ReaderTask<R, A>) => ReaderTask<R, { [K in N]: A }>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 220,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L220",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L220",
              },
              "type": "<N extends string>(name: N) => <R, A>(fa: ReaderTask<R, A>) => ReaderTask<R, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTask.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, Q, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => ReaderTask<Q, B>
) => <R>(
    fa: ReaderTask<R, A>
) => ReaderTask<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 226,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L226",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L226",
              },
              "type": "<N extends string, A, Q, B>(name: Exclude<N, keyof A>, f: (a: A) => ReaderTask<Q, B>) => <R>(fa: ReaderTask<R, A>) => ReaderTask<Q & R, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, R, B>(
    f: (a: A) => ReaderTask<R, B>
) => (ma: ReaderTask<R, A>) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 139,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L139",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L139",
              },
              "type": "<A, R, B>(f: (a: A) => ReaderTask<R, B>) => (ma: ReaderTask<R, A>) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, R, B>(
    f: (a: A) => ReaderTask<R, B>
) => (ma: ReaderTask<R, A>) => ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 149,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L149",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L149",
              },
              "type": "<A, R, B>(f: (a: A) => ReaderTask<R, B>) => (ma: ReaderTask<R, A>) => ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTask.chainIOK",
              "kind": "function",
              "name": "chainIOK",
              "signature": "chainIOK: <A, B>(
    f: (a: A) => IO<B>
) => <R>(ma: ReaderTask<R, A>) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 62,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L62",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L62",
              },
              "type": "<A, B>(f: (a: A) => IO<B>) => <R>(ma: ReaderTask<R, A>) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTask.chainTaskK",
              "kind": "function",
              "name": "chainTaskK",
              "signature": "chainTaskK: <A, B>(
    f: (a: A) => T.Task<B>
) => <R>(ma: ReaderTask<R, A>) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 74,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L74",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L74",
              },
              "type": "<A, B>(f: (a: A) => T.Task<B>) => <R>(ma: ReaderTask<R, A>) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of  [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.7
 */",
              ],
              "id": "readerTask.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <R, A, B>(
    f: (a: A) => ReaderTask<R, B>
) => <Q>(ma: ReaderTask<Q, A>) => ReaderTask<Q & R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 130,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L130",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L130",
              },
              "type": "<R, A, B>(f: (a: A) => ReaderTask<R, B>) => <Q>(ma: ReaderTask<Q, A>) => ReaderTask<Q & R, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <R, A>(mma: ReaderTask<R, ReaderTask<R, A>>) => ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 156,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L156",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L156",
              },
              "type": "<R, A>(mma: ReaderTask<R, ReaderTask<R, A>>) => ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.fromIO",
              "kind": "function",
              "name": "fromIO",
              "signature": "fromIO: <R, A>(ma: IO<A>) => ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 35,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L35",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L35",
              },
              "type": "<R, A>(ma: IO<A>) => ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTask.fromIOK",
              "kind": "function",
              "name": "fromIOK",
              "signature": "fromIOK: <A extends readonly unknown[], B>(
    f: (...a: A) => IO<B>
) => <R>(...a: A) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L55",
              },
              "type": "<A extends readonly unknown[], B>(f: (...a: A) => IO<B>) => <R>(...a: A) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.fromReader",
              "kind": "function",
              "name": "fromReader",
              "signature": "fromReader: <R, A = never>(ma: R.Reader<R, A>) => ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 30,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L30",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L30",
              },
              "type": "<R, A = never>(ma: R.Reader<R, A>) => ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.fromTask",
              "kind": "function",
              "name": "fromTask",
              "signature": "fromTask: <R, A>(ma: T.Task<A>) => ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 25,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L25",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L25",
              },
              "type": "<R, A>(ma: T.Task<A>) => ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTask.fromTaskK",
              "kind": "function",
              "name": "fromTaskK",
              "signature": "fromTaskK: <A extends readonly unknown[], B>(
    f: (...a: A) => Task<B>
) => <R>(...a: A) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 67,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L67",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L67",
              },
              "type": "<A extends readonly unknown[], B>(f: (...a: A) => Task<B>) => <R>(...a: A) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <R, A>(M: Monoid<A>) => Monoid<ReaderTask<R, A>>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 181,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L181",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L181",
              },
              "type": "<R, A>(M: Monoid<A>) => Monoid<ReaderTask<R, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <R, A>(S: Semigroup<A>) => Semigroup<ReaderTask<R, A>>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L176",
              },
              "type": "<R, A>(S: Semigroup<A>) => Semigroup<ReaderTask<R, A>>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.local",
              "kind": "function",
              "name": "local",
              "signature": "local: <Q, R>(f: (f: Q) => R) => <A>(ma: ReaderTask<R, A>) => ReaderTask<Q, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L50",
              },
              "type": "<Q, R>(f: (f: Q) => R) => <A>(ma: ReaderTask<R, A>) => ReaderTask<Q, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <R>(fa: ReaderTask<R, A>) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L82",
              },
              "type": "<A, B>(f: (a: A) => B) => <R>(fa: ReaderTask<R, A>) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "readerTask.run",
              "kind": "function",
              "name": "run",
              "signature": "run: <R, A>(ma: ReaderTask<R, A>, r: R) => Promise<A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 212,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L212",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L212",
              },
              "type": "<R, A>(ma: ReaderTask<R, A>, r: R) => Promise<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTask.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <R, A>(
    arr: readonly ReaderTask<R, A>[]
) => ReaderTask<R, readonly A[]>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 280,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L280",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L280",
              },
              "type": "<R, A>(arr: readonly ReaderTask<R, A>[]) => ReaderTask<R, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTask.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <R, A, B>(
    f: (a: A) => ReaderTask<R, B>
) => (arr: readonly A[]) => ReaderTask<R, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 274,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L274",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L274",
              },
              "type": "<R, A, B>(f: (a: A) => ReaderTask<R, B>) => (arr: readonly A[]) => ReaderTask<R, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTask.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <R, A, B>(
    f: (index: number, a: A) => ReaderTask<R, B>
) => (arr: readonly A[]) => ReaderTask<R, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 268,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L268",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L268",
              },
              "type": "<R, A, B>(f: (index: number, a: A) => ReaderTask<R, B>) => (arr: readonly A[]) => ReaderTask<R, readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.ReaderTask",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "readerTask.ReaderTask.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(r: R): Task<A>;",
                    "source": {
                      "filename": "lib/ReaderTask.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L19",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ReaderTask",
              "signature": "interface ReaderTask<R, A> {}",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 18,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L18",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L18",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 166,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L166",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L166",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTask.ApplicativePar",
              "kind": "variable",
              "name": "ApplicativePar",
              "signature": "const ApplicativePar: Applicative2<'ReaderTask'>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 191,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L191",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L191",
              },
              "type": "Applicative2<"ReaderTask">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTask.ApplicativeSeq",
              "kind": "variable",
              "name": "ApplicativeSeq",
              "signature": "const ApplicativeSeq: Applicative2<'ReaderTask'>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 196,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L196",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L196",
              },
              "type": "Applicative2<"ReaderTask">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTask.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: ReaderTask<unknown, {}>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 216,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L216",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L216",
              },
              "type": "ReaderTask<unknown, {}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTask.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'ReaderTask'>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 186,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L186",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L186",
              },
              "type": "Functor2<"ReaderTask">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <E, A>(a: A) => Kind2<F, E, A>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L123",
              },
              "type": "<E, A>(a: A) => Kind2<F, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.readerTask",
              "kind": "variable",
              "name": "readerTask",
              "signature": "const readerTask: MonadTask2<'ReaderTask'>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 201,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L201",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L201",
              },
              "type": "MonadTask2<"ReaderTask">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Like \`readerTask\` but \`ap\` is sequential
 *
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.readerTaskSeq",
              "kind": "variable",
              "name": "readerTaskSeq",
              "signature": "const readerTaskSeq: MonadTask2<'ReaderTask'>;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 208,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L208",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L208",
              },
              "type": "MonadTask2<"ReaderTask">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerTask.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReaderTask.d.ts",
                "line": 161,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L161",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L161",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.3.0
 */",
        ],
        "id": "readerTask",
        "kind": "namespace",
        "name": "readerTask",
        "signature": "module 'lib/ReaderTask.d.ts' {}",
        "source": {
          "filename": "lib/ReaderTask.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <R, E, A>(
    that: () => ReaderTaskEither<R, E, A>
) => (fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 413,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L413",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L413",
              },
              "type": "<R, E, A>(that: () => ReaderTaskEither<R, E, A>) => (fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <R2, E2, B>(
    that: () => ReaderTaskEither<R2, E2, B>
) => <R1, E1, A>(
    fa: ReaderTaskEither<R1, E1, A>
) => ReaderTaskEither<R1 & R2, E2 | E1, B | A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 403,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L403",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L403",
              },
              "type": "<R2, E2, B>(that: () => ReaderTaskEither<R2, E2, B>) => <R1, E1, A>(fa: ReaderTaskEither<R1, E1, A>) => ReaderTaskEither<R1 & R2, E2 | E1, B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <R, E, A>(
    fa: ReaderTaskEither<R, E, A>
) => <B>(fab: ReaderTaskEither<R, E, (a: A) => B>) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 313,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L313",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L313",
              },
              "type": "<R, E, A>(fa: ReaderTaskEither<R, E, A>) => <B>(fab: ReaderTaskEither<R, E, (a: A) => B>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <R, E, B>(
    fb: ReaderTaskEither<R, E, B>
) => <A>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 324,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L324",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L324",
              },
              "type": "<R, E, B>(fb: ReaderTaskEither<R, E, B>) => <A>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTaskEither.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, R, E, B>(
    name: Exclude<N, keyof A>,
    fb: ReaderTaskEither<R, E, B>
) => (
    fa: ReaderTaskEither<R, E, A>
) => ReaderTaskEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 586,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L586",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L586",
              },
              "type": "<A, N extends string, R, E, B>(name: Exclude<N, keyof A>, fb: ReaderTaskEither<R, E, B>) => (fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <R, E, B>(
    fb: ReaderTaskEither<R, E, B>
) => <A>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 335,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L335",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L335",
              },
              "type": "<R, E, B>(fb: ReaderTaskEither<R, E, B>) => <A>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTaskEither.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, Q, D, B>(
    name: Exclude<N, keyof A>,
    fb: ReaderTaskEither<Q, D, B>
) => <R, E>(
    fa: ReaderTaskEither<R, E, A>
) => ReaderTaskEither<
    Q & R,
    D | E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 577,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L577",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L577",
              },
              "type": "<A, N extends string, Q, D, B>(name: Exclude<N, keyof A>, fb: ReaderTaskEither<Q, D, B>) => <R, E>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<Q & R, D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "readerTaskEither.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <Q, D, A>(
    fa: ReaderTaskEither<Q, D, A>
) => <R, E, B>(
    fab: ReaderTaskEither<R, E, (a: A) => B>
) => ReaderTaskEither<Q & R, D | E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 304,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L304",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L304",
              },
              "type": "<Q, D, A>(fa: ReaderTaskEither<Q, D, A>) => <R, E, B>(fab: ReaderTaskEither<R, E, (a: A) => B>) => ReaderTaskEither<Q & R, D | E, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.ask",
              "kind": "function",
              "name": "ask",
              "signature": "ask: <R, E = never>() => ReaderTaskEither<R, E, R>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L106",
              },
              "type": "<R, E = never>() => ReaderTaskEither<R, E, R>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.asks",
              "kind": "function",
              "name": "asks",
              "signature": "asks: <R, E = never, A = never>(f: (r: R) => A) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 111,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L111",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L111",
              },
              "type": "<R, E = never, A = never>(f: (r: R) => A) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Map a pair of functions over the two last type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => <R>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, G, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 285,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L285",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L285",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => <R>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, G, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTaskEither.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, R, E, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => ReaderTaskEither<R, E, B>
) => (
    fa: ReaderTaskEither<R, E, A>
) => ReaderTaskEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 562,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L562",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L562",
              },
              "type": "<N extends string, A, R, E, B>(name: Exclude<N, keyof A>, f: (a: A) => ReaderTaskEither<R, E, B>) => (fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTaskEither.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <R, E, A>(
    fa: ReaderTaskEither<R, E, A>
) => ReaderTaskEither<R, E, { [K in N]: A }>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 547,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L547",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L547",
              },
              "type": "<N extends string>(name: N) => <R, E, A>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readerTaskEither.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, Q, D, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => ReaderTaskEither<Q, D, B>
) => <R, E>(
    fa: ReaderTaskEither<R, E, A>
) => ReaderTaskEither<
    Q & R,
    D | E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 553,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L553",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L553",
              },
              "type": "<N extends string, A, Q, D, B>(name: Exclude<N, keyof A>, f: (a: A) => ReaderTaskEither<Q, D, B>) => <R, E>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<Q & R, D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Make sure that a resource is cleaned up in the event of an exception (\\*). The release action is called regardless of
 * whether the body action throws (\\*) or returns.
 *
 * (\\*) i.e. returns a \`Left\`
 *
 * Derivable from \`MonadThrow\`.
 *
 * @since 2.0.4
 */",
              ],
              "id": "readerTaskEither.bracket",
              "kind": "function",
              "name": "bracket",
              "signature": "bracket: <R, E, A, B>(
    aquire: ReaderTaskEither<R, E, A>,
    use: (a: A) => ReaderTaskEither<R, E, B>,
    release: (a: A, e: Either<E, B>) => ReaderTaskEither<R, E, void>
) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 535,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L535",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L535",
              },
              "type": "<R, E, A, B>(aquire: ReaderTaskEither<R, E, A>, use: (a: A) => ReaderTaskEither<R, E, B>, release: (a: A, e: Either<E, B>) => ReaderTaskEither<R, E, void>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <R, E, A, B>(
    f: (a: A) => ReaderTaskEither<R, E, B>
) => (ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 362,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L362",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L362",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderTaskEither<R, E, B>) => (ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTaskEither.chainEitherK",
              "kind": "function",
              "name": "chainEitherK",
              "signature": "chainEitherK: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 222,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L222",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L222",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainEitherK\`](#chainEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "readerTaskEither.chainEitherKW",
              "kind": "function",
              "name": "chainEitherKW",
              "signature": "chainEitherKW: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <R, D>(ma: ReaderTaskEither<R, D, A>) => ReaderTaskEither<R, E | D, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 215,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L215",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L215",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <R, D>(ma: ReaderTaskEither<R, D, A>) => ReaderTaskEither<R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <R, E, A, B>(
    f: (a: A) => ReaderTaskEither<R, E, B>
) => (ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 385,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L385",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L385",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderTaskEither<R, E, B>) => (ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainFirst\`](#chainFirst).
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.8.0
 */",
              ],
              "id": "readerTaskEither.chainFirstW",
              "kind": "function",
              "name": "chainFirstW",
              "signature": "chainFirstW: <R, E, A, B>(
    f: (a: A) => ReaderTaskEither<R, E, B>
) => <Q, D>(ma: ReaderTaskEither<Q, D, A>) => ReaderTaskEither<Q & R, E | D, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 373,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L373",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L373",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderTaskEither<R, E, B>) => <Q, D>(ma: ReaderTaskEither<Q, D, A>) => ReaderTaskEither<Q & R, E | D, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTaskEither.chainIOEitherK",
              "kind": "function",
              "name": "chainIOEitherK",
              "signature": "chainIOEitherK: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 245,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L245",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L245",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainIOEitherK\`](#chainIOEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "readerTaskEither.chainIOEitherKW",
              "kind": "function",
              "name": "chainIOEitherKW",
              "signature": "chainIOEitherKW: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => <R, D>(ma: ReaderTaskEither<R, D, A>) => ReaderTaskEither<R, E | D, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 238,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L238",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L238",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => <R, D>(ma: ReaderTaskEither<R, D, A>) => ReaderTaskEither<R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTaskEither.chainTaskEitherK",
              "kind": "function",
              "name": "chainTaskEitherK",
              "signature": "chainTaskEitherK: <E, A, B>(
    f: (a: A) => TE.TaskEither<E, B>
) => <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 268,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L268",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L268",
              },
              "type": "<E, A, B>(f: (a: A) => TE.TaskEither<E, B>) => <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainTaskEitherK\`](#chainTaskEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "readerTaskEither.chainTaskEitherKW",
              "kind": "function",
              "name": "chainTaskEitherKW",
              "signature": "chainTaskEitherKW: <E, A, B>(
    f: (a: A) => TE.TaskEither<E, B>
) => <R, D>(ma: ReaderTaskEither<R, D, A>) => ReaderTaskEither<R, E | D, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 261,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L261",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L261",
              },
              "type": "<E, A, B>(f: (a: A) => TE.TaskEither<E, B>) => <R, D>(ma: ReaderTaskEither<R, D, A>) => ReaderTaskEither<R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */",
              ],
              "id": "readerTaskEither.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <R, E, A, B>(
    f: (a: A) => ReaderTaskEither<R, E, B>
) => <Q, D>(ma: ReaderTaskEither<Q, D, A>) => ReaderTaskEither<Q & R, E | D, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 353,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L353",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L353",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderTaskEither<R, E, B>) => <Q, D>(ma: ReaderTaskEither<Q, D, A>) => ReaderTaskEither<Q & R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <R, E, A>(
    mma: ReaderTaskEither<R, E, ReaderTaskEither<R, E, A>>
) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 394,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L394",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L394",
              },
              "type": "<R, E, A>(mma: ReaderTaskEither<R, E, ReaderTaskEither<R, E, A>>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <R, E, A, B>(
    onLeft: (e: E) => ReaderTask<R, B>,
    onRight: (a: A) => ReaderTask<R, B>
) => (ma: ReaderTaskEither<R, E, A>) => ReaderTask<R, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 140,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L140",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L140",
              },
              "type": "<R, E, A, B>(onLeft: (e: E) => ReaderTask<R, B>, onRight: (a: A) => ReaderTask<R, B>) => (ma: ReaderTaskEither<R, E, A>) => ReaderTask<R, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromEither",
              "kind": "function",
              "name": "fromEither",
              "signature": "fromEither: <R, E, A>(ma: E.Either<E, A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L118",
              },
              "type": "<R, E, A>(ma: E.Either<E, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTaskEither.fromEitherK",
              "kind": "function",
              "name": "fromEitherK",
              "signature": "fromEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => Either<E, B>
) => <R>(...a: A) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 206,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L206",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L206",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => Either<E, B>) => <R>(...a: A) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromIOEither",
              "kind": "function",
              "name": "fromIOEither",
              "signature": "fromIOEither: <R, E, A>(ma: IOEither<E, A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L86",
              },
              "type": "<R, E, A>(ma: IOEither<E, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTaskEither.fromIOEitherK",
              "kind": "function",
              "name": "fromIOEitherK",
              "signature": "fromIOEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => IOEither<E, B>
) => <R>(...a: A) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 229,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L229",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L229",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => IOEither<E, B>) => <R>(...a: A) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromOption",
              "kind": "function",
              "name": "fromOption",
              "signature": "fromOption: <E>(
    onNone: Lazy<E>
) => <R, A>(ma: Option<A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 125,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L125",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L125",
              },
              "type": "<E>(onNone: Lazy<E>) => <R, A>(ma: Option<A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromReaderEither",
              "kind": "function",
              "name": "fromReaderEither",
              "signature": "fromReaderEither: <R, E, A>(
    ma: ReaderEither<R, E, A>
) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L91",
              },
              "type": "<R, E, A>(ma: ReaderEither<R, E, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromTaskEither",
              "kind": "function",
              "name": "fromTaskEither",
              "signature": "fromTaskEither: <R, E, A>(ma: TE.TaskEither<E, A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L41",
              },
              "type": "<R, E, A>(ma: TE.TaskEither<E, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "readerTaskEither.fromTaskEitherK",
              "kind": "function",
              "name": "fromTaskEitherK",
              "signature": "fromTaskEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => TaskEither<E, B>
) => <R>(...a: A) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 252,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L252",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L252",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => TaskEither<E, B>) => <R>(...a: A) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.getAltReaderTaskValidation",
              "kind": "function",
              "name": "getAltReaderTaskValidation",
              "signature": "getAltReaderTaskValidation: <E>(SE: Semigroup<E>) => Alt3C<URI, E>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 476,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L476",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L476",
              },
              "type": "<E>(SE: Semigroup<E>) => Alt3C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.getApplicativeReaderTaskValidation",
              "kind": "function",
              "name": "getApplicativeReaderTaskValidation",
              "signature": "getApplicativeReaderTaskValidation: <E>(
    A: Apply1<T.URI>,
    SE: Semigroup<E>
) => Applicative3C<URI, E>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 471,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L471",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L471",
              },
              "type": "<E>(A: Apply1<T.URI>, SE: Semigroup<E>) => Applicative3C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.getApplyMonoid",
              "kind": "function",
              "name": "getApplyMonoid",
              "signature": "getApplyMonoid: <R, E, A>(M: Monoid<A>) => Monoid<ReaderTaskEither<R, E, A>>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 466,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L466",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L466",
              },
              "type": "<R, E, A>(M: Monoid<A>) => Monoid<ReaderTaskEither<R, E, A>>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most \`Left\` value. If both operands are \`Right\`s then the inner values
 * are concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.getApplySemigroup",
              "kind": "function",
              "name": "getApplySemigroup",
              "signature": "getApplySemigroup: <R, E, A>(
    S: Semigroup<A>
) => Semigroup<ReaderTaskEither<R, E, A>>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 461,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L461",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L461",
              },
              "type": "<R, E, A>(S: Semigroup<A>) => Semigroup<ReaderTaskEither<R, E, A>>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.getOrElse",
              "kind": "function",
              "name": "getOrElse",
              "signature": "getOrElse: <R, E, A>(
    onLeft: (e: E) => RT.ReaderTask<R, A>
) => (ma: ReaderTaskEither<R, E, A>) => RT.ReaderTask<R, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L157",
              },
              "type": "<R, E, A>(onLeft: (e: E) => RT.ReaderTask<R, A>) => (ma: ReaderTaskEither<R, E, A>) => RT.ReaderTask<R, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`getOrElse\`](#getOrElse).
 *
 * @category destructors
 * @since 2.6.0
 */",
              ],
              "id": "readerTaskEither.getOrElseW",
              "kind": "function",
              "name": "getOrElseW",
              "signature": "getOrElseW: <R, E, B>(
    onLeft: (e: E) => RT.ReaderTask<R, B>
) => <Q, A>(ma: ReaderTaskEither<Q, E, A>) => RT.ReaderTask<Q & R, B | A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 150,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L150",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L150",
              },
              "type": "<R, E, B>(onLeft: (e: E) => RT.ReaderTask<R, B>) => <Q, A>(ma: ReaderTaskEither<Q, E, A>) => RT.ReaderTask<Q & R, B | A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.3.0
 */",
              ],
              "id": "readerTaskEither.getReaderTaskValidation",
              "kind": "function",
              "name": "getReaderTaskValidation",
              "signature": "getReaderTaskValidation: <E>(
    SE: Semigroup<E>
) => Monad3C<URI, E> &
    Bifunctor3<URI> &
    Alt3C<URI, E> &
    MonadTask3C<URI, E> &
    MonadThrow3C<URI, E>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 481,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L481",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L481",
              },
              "type": "<E>(SE: Semigroup<E>) => Monad3C<URI, E> & Bifunctor3<URI> & Alt3C<URI, E> & MonadTask3C<URI, E> & MonadThrow3C<URI, E>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most non-\`Left\` value. If both operands are \`Right\`s then the inner values are
 * concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <R, E, A>(S: Semigroup<A>) => Semigroup<ReaderTaskEither<R, E, A>>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 453,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L453",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L453",
              },
              "type": "<R, E, A>(S: Semigroup<A>) => Semigroup<ReaderTaskEither<R, E, A>>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <R, E = never, A = never>(e: E) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L46",
              },
              "type": "<R, E = never, A = never>(e: E) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.leftIO",
              "kind": "function",
              "name": "leftIO",
              "signature": "leftIO: <R, E = never, A = never>(me: IO<E>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L101",
              },
              "type": "<R, E = never, A = never>(me: IO<E>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.leftReader",
              "kind": "function",
              "name": "leftReader",
              "signature": "leftReader: <R, E = never, A = never>(
    me: R.Reader<R, E>
) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 71,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L71",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L71",
              },
              "type": "<R, E = never, A = never>(me: R.Reader<R, E>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readerTaskEither.leftReaderTask",
              "kind": "function",
              "name": "leftReaderTask",
              "signature": "leftReaderTask: <R, E = never, A = never>(
    me: RT.ReaderTask<R, E>
) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L81",
              },
              "type": "<R, E = never, A = never>(me: RT.ReaderTask<R, E>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.leftTask",
              "kind": "function",
              "name": "leftTask",
              "signature": "leftTask: <R, E = never, A = never>(me: T.Task<E>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L61",
              },
              "type": "<R, E = never, A = never>(me: T.Task<E>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.local",
              "kind": "function",
              "name": "local",
              "signature": "local: <Q, R>(
    f: (f: Q) => R
) => <E, A>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<Q, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L176",
              },
              "type": "<Q, R>(f: (f: Q) => R) => <E, A>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<Q, E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(
    f: (a: A) => B
) => <R, E>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 278,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L278",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L278",
              },
              "type": "<A, B>(f: (a: A) => B) => <R, E>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the second type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(
    f: (e: E) => G
) => <R, A>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, G, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 295,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L295",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L295",
              },
              "type": "<E, G>(f: (e: E) => G) => <R, A>(fa: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, G, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.orElse",
              "kind": "function",
              "name": "orElse",
              "signature": "orElse: <R, E, A, M>(
    onLeft: (e: E) => ReaderTaskEither<R, M, A>
) => (ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, M, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 164,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L164",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L164",
              },
              "type": "<R, E, A, M>(onLeft: (e: E) => ReaderTaskEither<R, M, A>) => (ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, M, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <R, E = never, A = never>(a: A) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L51",
              },
              "type": "<R, E = never, A = never>(a: A) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.rightIO",
              "kind": "function",
              "name": "rightIO",
              "signature": "rightIO: <R, E = never, A = never>(ma: IO<A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L96",
              },
              "type": "<R, E = never, A = never>(ma: IO<A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.rightReader",
              "kind": "function",
              "name": "rightReader",
              "signature": "rightReader: <R, E = never, A = never>(
    ma: R.Reader<R, A>
) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L66",
              },
              "type": "<R, E = never, A = never>(ma: R.Reader<R, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readerTaskEither.rightReaderTask",
              "kind": "function",
              "name": "rightReaderTask",
              "signature": "rightReaderTask: <R, E = never, A = never>(
    ma: RT.ReaderTask<R, A>
) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L76",
              },
              "type": "<R, E = never, A = never>(ma: RT.ReaderTask<R, A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.rightTask",
              "kind": "function",
              "name": "rightTask",
              "signature": "rightTask: <R, E = never, A = never>(ma: T.Task<A>) => ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L56",
              },
              "type": "<R, E = never, A = never>(ma: T.Task<A>) => ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.run",
              "kind": "function",
              "name": "run",
              "signature": "run: <R, E, A>(ma: ReaderTaskEither<R, E, A>, r: R) => Promise<Either<E, A>>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 524,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L524",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L524",
              },
              "type": "<R, E, A>(ma: ReaderTaskEither<R, E, A>, r: R) => Promise<Either<E, A>>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <R, E, A>(
    arr: readonly ReaderTaskEither<R, E, A>[]
) => ReaderTaskEither<R, E, readonly A[]>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 613,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L613",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L613",
              },
              "type": "<R, E, A>(arr: readonly ReaderTaskEither<R, E, A>[]) => ReaderTaskEither<R, E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.sequenceSeqArray",
              "kind": "function",
              "name": "sequenceSeqArray",
              "signature": "sequenceSeqArray: <R, E, A>(
    arr: readonly ReaderTaskEither<R, E, A>[]
) => ReaderTaskEither<R, E, readonly A[]>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 631,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L631",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L631",
              },
              "type": "<R, E, A>(arr: readonly ReaderTaskEither<R, E, A>[]) => ReaderTaskEither<R, E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <R, E, A>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, A, E>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L171",
              },
              "type": "<R, E, A>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, A, E>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <R, E, A, B>(
    f: (a: A) => ReaderTaskEither<R, E, B>
) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 607,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L607",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L607",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderTaskEither<R, E, B>) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <R, E, A, B>(
    f: (index: number, a: A) => ReaderTaskEither<R, E, B>
) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 601,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L601",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L601",
              },
              "type": "<R, E, A, B>(f: (index: number, a: A) => ReaderTaskEither<R, E, B>) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.traverseSeqArray",
              "kind": "function",
              "name": "traverseSeqArray",
              "signature": "traverseSeqArray: <R, E, A, B>(
    f: (a: A) => ReaderTaskEither<R, E, B>
) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 625,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L625",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L625",
              },
              "type": "<R, E, A, B>(f: (a: A) => ReaderTaskEither<R, E, B>) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.traverseSeqArrayWithIndex",
              "kind": "function",
              "name": "traverseSeqArrayWithIndex",
              "signature": "traverseSeqArrayWithIndex: <R, E, A, B>(
    f: (index: number, a: A) => ReaderTaskEither<R, E, B>
) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 619,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L619",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L619",
              },
              "type": "<R, E, A, B>(f: (index: number, a: A) => ReaderTaskEither<R, E, B>) => (arr: readonly A[]) => ReaderTaskEither<R, E, readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.ReaderTaskEither",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "readerTaskEither.ReaderTaskEither.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(r: R): TaskEither<E, A>;",
                    "source": {
                      "filename": "lib/ReaderTaskEither.d.ts",
                      "line": 35,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L35",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L35",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ReaderTaskEither",
              "signature": "interface ReaderTaskEither<R, E, A> {}",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L34",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 440,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L440",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L440",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt3<'ReaderTaskEither'>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 508,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L508",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L508",
              },
              "type": "Alt3<"ReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.ApplicativePar",
              "kind": "variable",
              "name": "ApplicativePar",
              "signature": "const ApplicativePar: Applicative3<'ReaderTaskEither'>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 493,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L493",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L493",
              },
              "type": "Applicative3<"ReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.ApplicativeSeq",
              "kind": "variable",
              "name": "ApplicativeSeq",
              "signature": "const ApplicativeSeq: Applicative3<'ReaderTaskEither'>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 498,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L498",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L498",
              },
              "type": "Applicative3<"ReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor3<'ReaderTaskEither'>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 503,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L503",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L503",
              },
              "type": "Bifunctor3<"ReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: ReaderTaskEither<unknown, never, {}>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 543,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L543",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L543",
              },
              "type": "ReaderTaskEither<unknown, never, {}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.filterOrElse",
              "kind": "variable",
              "name": "filterOrElse",
              "signature": "const filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(
        ma: ReaderTaskEither<R, E, A>
    ) => ReaderTaskEither<R, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        ma: ReaderTaskEither<R, E, A>
    ) => ReaderTaskEither<R, E, A>;
};",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 196,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L196",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L196",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(ma: ReaderTaskEither<R, E, A>) => ReaderTaskEither<R, E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`filterOrElse\`](#filterOrElse).
 *
 * @since 2.9.0
 */",
              ],
              "id": "readerTaskEither.filterOrElseW",
              "kind": "variable",
              "name": "filterOrElseW",
              "signature": "const filterOrElseW: {
    <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <
        R,
        E1
    >(
        ma: ReaderTaskEither<R, E1, A>
    ) => ReaderTaskEither<R, E2 | E1, B>;
    <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <R, E1>(
        ma: ReaderTaskEither<R, E1, A>
    ) => ReaderTaskEither<R, E2 | E1, A>;
};",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 182,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L182",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L182",
              },
              "type": "{ <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <R, E1>(ma: ReaderTaskEither<R, E1, A>) => ReaderTaskEither<R, E2 | E1, B>; <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <R, E1>(ma: ReaderTaskEither<R, E1, A>) => ReaderTaskEither<R, E2 | E1, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadIO
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromIO",
              "kind": "variable",
              "name": "fromIO",
              "signature": "const fromIO: <R, E, A>(fa: IO<A>) => Kind3<M, R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 420,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L420",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L420",
              },
              "type": "<R, E, A>(fa: IO<A>) => Kind3<M, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromPredicate",
              "kind": "variable",
              "name": "fromPredicate",
              "signature": "const fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(
        a: A
    ) => ReaderTaskEither<U, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(
        a: A
    ) => ReaderTaskEither<R, E, A>;
};",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L132",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <U>(a: A) => ReaderTaskEither<U, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(a: A) => ReaderTaskEither<R, E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadTask
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.fromTask",
              "kind": "variable",
              "name": "fromTask",
              "signature": "const fromTask: <R, E, A>(fa: T.Task<A>) => Kind3<M, R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 425,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L425",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L425",
              },
              "type": "<R, E, A>(fa: T.Task<A>) => Kind3<M, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor3<'ReaderTaskEither'>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 488,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L488",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L488",
              },
              "type": "Functor3<"ReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * Equivalent to [\`right\`](#right).
 *
 * @category Applicative
 * @since 2.7.0
 */",
              ],
              "id": "readerTaskEither.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <R, E, A>(a: A) => Kind3<F, R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 346,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L346",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L346",
              },
              "type": "<R, E, A>(a: A) => Kind3<F, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.readerTaskEither",
              "kind": "variable",
              "name": "readerTaskEither",
              "signature": "const readerTaskEither: Monad3<'ReaderTaskEither'> &
    Bifunctor3<'ReaderTaskEither'> &
    Alt3<'ReaderTaskEither'> &
    MonadTask3<'ReaderTaskEither'> &
    MonadThrow3<'ReaderTaskEither'>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 513,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L513",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L513",
              },
              "type": "Monad3<"ReaderTaskEither"> & Bifunctor3<"ReaderTaskEither"> & Alt3<"ReaderTaskEither"> & MonadTask3<"ReaderTaskEither"> & MonadThrow3<"ReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Like \`readerTaskEither\` but \`ap\` is sequential
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.readerTaskEitherSeq",
              "kind": "variable",
              "name": "readerTaskEitherSeq",
              "signature": "const readerTaskEitherSeq: Monad3<'ReaderTaskEither'> &
    Bifunctor3<'ReaderTaskEither'> &
    Alt3<'ReaderTaskEither'> &
    MonadTask3<'ReaderTaskEither'> &
    MonadThrow3<'ReaderTaskEither'>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 520,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L520",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L520",
              },
              "type": "Monad3<"ReaderTaskEither"> & Bifunctor3<"ReaderTaskEither"> & Alt3<"ReaderTaskEither"> & MonadTask3<"ReaderTaskEither"> & MonadThrow3<"ReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadThrow
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.throwError",
              "kind": "variable",
              "name": "throwError",
              "signature": "const throwError: <R, E, A>(e: E) => Kind3<M, R, E, A>;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 430,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L430",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L430",
              },
              "type": "<R, E, A>(e: E) => Kind3<M, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "readerTaskEither.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReaderTaskEither.d.ts",
                "line": 435,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L435",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L435",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "readerTaskEither",
        "kind": "namespace",
        "name": "readerTaskEither",
        "signature": "module 'lib/ReaderTaskEither.d.ts' {}",
        "source": {
          "filename": "lib/ReaderTaskEither.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <A>(that: Lazy<readonly A[]>) => (fa: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 937,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L937",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L937",
              },
              "type": "<A>(that: Lazy<readonly A[]>) => (fa: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "readonlyArray.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <B>(
    that: Lazy<readonly B[]>
) => <A>(fa: readonly A[]) => readonly (B | A)[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 929,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L929",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L929",
              },
              "type": "<B>(that: Lazy<readonly B[]>) => <A>(fa: readonly A[]) => readonly (B | A)[]",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(fa: readonly A[]) => <B>(fab: readonly ((a: A) => B)[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 944,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L944",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L944",
              },
              "type": "<A>(fa: readonly A[]) => <B>(fab: readonly ((a: A) => B)[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(fb: readonly B[]) => <A>(fa: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 953,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L953",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L953",
              },
              "type": "<B>(fb: readonly B[]) => <A>(fa: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readonlyArray.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: readonly B[]
) => (
    fa: readonly A[]
) => readonly { [K in N | keyof A]: K extends keyof A ? A[K] : B }[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1327,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1327",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1327",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: readonly B[]) => (fa: readonly A[]) => readonly { [K in N | keyof A]: K extends keyof A ? A[K] : B; }[]",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(fb: readonly B[]) => <A>(fa: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 962,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L962",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L962",
              },
              "type": "<B>(fb: readonly B[]) => <A>(fa: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readonlyArray.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => readonly B[]
) => (
    fa: readonly A[]
) => readonly { [K in N | keyof A]: K extends keyof A ? A[K] : B }[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1320,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1320",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1320",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => readonly B[]) => (fa: readonly A[]) => readonly { [K in N | keyof A]: K extends keyof A ? A[K] : B; }[]",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readonlyArray.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <A>(fa: readonly A[]) => readonly { [K in N]: A }[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1316,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1316",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1316",
              },
              "type": "<N extends string>(name: N) => <A>(fa: readonly A[]) => readonly { [K in N]: A; }[]",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(f: (a: A) => readonly B[]) => (ma: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 969,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L969",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L969",
              },
              "type": "<A, B>(f: (a: A) => readonly B[]) => (ma: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(
    f: (a: A) => readonly B[]
) => (ma: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 985,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L985",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L985",
              },
              "type": "<A, B>(f: (a: A) => readonly B[]) => (ma: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.chainWithIndex",
              "kind": "function",
              "name": "chainWithIndex",
              "signature": "chainWithIndex: <A, B>(
    f: (i: number, a: A) => readonly B[]
) => (ma: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 973,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L973",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L973",
              },
              "type": "<A, B>(f: (i: number, a: A) => readonly B[]) => (ma: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * A useful recursion pattern for processing an array to produce a new array, often used for "chopping" up the input
 * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a
 * value and the rest of the array.
 *
 * @example
 * import { Eq, eqNumber } from 'fp-ts/Eq'
 * import { chop, spanLeft } from 'fp-ts/ReadonlyArray'
 *
 * const group = <A>(S: Eq<A>): ((as: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>) => {
 *   return chop(as => {
 *     const { init, rest } = spanLeft((a: A) => S.equals(a, as[0]))(as)
 *     return [init, rest]
 *   })
 * }
 * assert.deepStrictEqual(group(eqNumber)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.chop",
              "kind": "function",
              "name": "chop",
              "signature": "chop: <A, B>(
    f: (as: ReadonlyNonEmptyArray<A>) => readonly [B, readonly A[]]
) => (as: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 772,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L772",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L772",
              },
              "type": "<A, B>(f: (as: ReadonlyNonEmptyArray<A>) => readonly [B, readonly A[]]) => (as: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * Splits an array into length-\`n\` pieces. The last piece will be shorter if \`n\` does not evenly divide the length of
 * the array. Note that \`chunksOf(n)([])\` is \`[]\`, not \`[[]]\`. This is intentional, and is consistent with a recursive
 * definition of \`chunksOf\`; it satisfies the property that
 *
 * \`\`\`ts
 * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))
 * \`\`\`
 *
 * whenever \`n\` evenly divides the length of \`xs\`.
 *
 * @example
 * import { chunksOf } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])
 *
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.chunksOf",
              "kind": "function",
              "name": "chunksOf",
              "signature": "chunksOf: (n: number) => <A>(as: readonly A[]) => readonly (readonly A[])[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 805,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L805",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L805",
              },
              "type": "(n: number) => <A>(as: readonly A[]) => readonly (readonly A[])[]",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <A>(fa: readonly O.Option<A>[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1028,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1028",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1028",
              },
              "type": "<A>(fa: readonly O.Option<A>[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Array comprehension
 *
 * \`\`\`
 * [ f(x, y, ...) | x ← xs, y ← ys, ..., g(x, y, ...) ]
 * \`\`\`
 *
 * @example
 * import { comprehension } from 'fp-ts/ReadonlyArray'
 * import { tuple } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(comprehension([[1, 2, 3], ['a', 'b']], tuple, (a, b) => (a + b.length) % 2 === 0), [
 *   [1, 'a'],
 *   [1, 'b'],
 *   [3, 'a'],
 *   [3, 'b']
 * ])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.comprehension",
              "kind": "function",
              "name": "comprehension",
              "signature": "comprehension: {
    <A, B, C, D, R>(
        input: readonly [
            ReadonlyArray<A>,
            ReadonlyArray<B>,
            ReadonlyArray<C>,
            ReadonlyArray<D>
        ],
        f: (a: A, b: B, c: C, d: D) => R,
        g?: (a: A, b: B, c: C, d: D) => boolean
    ): ReadonlyArray<R>;
    <A, B, C, R>(
        input: readonly [readonly A[], readonly B[], readonly C[]],
        f: (a: A, b: B, c: C) => R,
        g?: (a: A, b: B, c: C) => boolean
    ): readonly R[];
    <A, R>(
        input: readonly [readonly A[]],
        f: (a: A) => R,
        g?: (a: A) => boolean
    ): readonly R[];
    <A, B, R>(
        input: readonly [readonly A[], readonly B[]],
        f: (a: A, b: B) => R,
        g?: (a: A, b: B) => boolean
    ): readonly R[];
    <A, R>(
        input: readonly [readonly A[]],
        f: (a: A) => boolean,
        g?: (a: A) => R
    ): readonly R[];
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 827,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L827",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L827",
              },
              "type": "{ <A, B, C, D, R>(input: readonly [ReadonlyArray<A>, ReadonlyArray<B>, ReadonlyArray<C>, ReadonlyArray<D>], f: (a: A, b: B, c: C, d: D) => R, g?: (a: A, b: B, c: C, d: D) => boolean): ReadonlyArray<R>; <A, B, C, R>(input: readonly [readonly A[], readonly B[], readonly C[]], f: (a: A, b: B, c: C) => R, g?: (a: A, b: B, c: C) => boolean): readonly R[]; <A, R>(input: readonly [readonly A[]], f: (a: A) => R, g?: (a: A) => boolean): readonly R[]; <A, B, R>(input: readonly [readonly A[], readonly B[]], f: (a: A, b: B) => R, g?: (a: A, b: B) => boolean): readonly R[]; <A, R>(input: readonly [readonly A[]], f: (a: A) => boolean, g?: (a: A) => R): readonly R[]; }",
            },
            {
              "docs": [
                "/**
 * Attaches an element to the front of an array, creating a new non empty array
 *
 * @example
 * import { cons } from 'fp-ts/ReadonlyArray'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2, 3], cons(0)), [0, 1, 2, 3])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.cons",
              "kind": "function",
              "name": "cons",
              "signature": "cons: {
    <A>(head: A): (tail: ReadonlyArray<A>) => ReadonlyNonEmptyArray<A>;
    <A>(head: A, tail: readonly A[]): ReadonlyNonEmptyArray<A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 246,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L246",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L246",
              },
              "type": "{ <A>(head: A): (tail: ReadonlyArray<A>) => ReadonlyNonEmptyArray<A>; <A>(head: A, tail: readonly A[]): ReadonlyNonEmptyArray<A>; }",
            },
            {
              "docs": [
                "/**
 * Delete the element at the specified index, creating a new array, or returning \`None\` if the index is out of bounds
 *
 * @example
 * import { deleteAt } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))
 * assert.deepStrictEqual(deleteAt(1)([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.deleteAt",
              "kind": "function",
              "name": "deleteAt",
              "signature": "deleteAt: (i: number) => <A>(as: readonly A[]) => O.Option<readonly A[]>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 544,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L544",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L544",
              },
              "type": "(i: number) => <A>(as: readonly A[]) => O.Option<readonly A[]>",
            },
            {
              "docs": [
                "/**
 * Creates an array of array values not included in the other given array using a \`Eq\` for equality
 * comparisons. The order and references of result values are determined by the first array.
 *
 * @example
 * import { difference } from 'fp-ts/ReadonlyArray'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2], difference(eqNumber)([2, 3])), [1])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.difference",
              "kind": "function",
              "name": "difference",
              "signature": "difference: <A>(E: Eq<A>) => {
    (xs: ReadonlyArray<A>): (ys: ReadonlyArray<A>) => ReadonlyArray<A>;
    (xs: ReadonlyArray<A>, ys: ReadonlyArray<A>): ReadonlyArray<A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 905,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L905",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L905",
              },
              "type": "<A>(E: Eq<A>) => { (xs: ReadonlyArray<A>): (ys: ReadonlyArray<A>) => ReadonlyArray<A>; (xs: ReadonlyArray<A>, ys: ReadonlyArray<A>): ReadonlyArray<A>; }",
            },
            {
              "docs": [
                "/**
 * Drop a number of elements from the start of an array, creating a new array
 *
 * @example
 * import { dropLeft } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.dropLeft",
              "kind": "function",
              "name": "dropLeft",
              "signature": "dropLeft: (n: number) => <A>(as: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 384,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L384",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L384",
              },
              "type": "(n: number) => <A>(as: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new array
 *
 * @example
 * import { dropLeftWhile } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(dropLeftWhile((n: number) => n % 2 === 1)([1, 3, 2, 4, 5]), [2, 4, 5])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.dropLeftWhile",
              "kind": "function",
              "name": "dropLeftWhile",
              "signature": "dropLeftWhile: <A>(
    predicate: Predicate<A>
) => (as: ReadonlyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 408,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L408",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L408",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: ReadonlyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Drop a number of elements from the end of an array, creating a new array
 *
 * @example
 * import { dropRight } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(dropRight(2)([1, 2, 3, 4, 5]), [1, 2, 3])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.dropRight",
              "kind": "function",
              "name": "dropRight",
              "signature": "dropRight: (n: number) => <A>(as: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 396,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L396",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L396",
              },
              "type": "(n: number) => <A>(as: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <A>(wa: readonly A[]) => readonly (readonly A[])[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1084,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1084",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1084",
              },
              "type": "<A>(wa: readonly A[]) => readonly (readonly A[])[]",
            },
            {
              "docs": [
                "/**
 * Test if a value is a member of an array. Takes a \`Eq<A>\` as a single
 * argument which returns the function to use to search for a value of type \`A\` in
 * an array of type \`ReadonlyArray<A>\`.
 *
 * @example
 * import { elem } from 'fp-ts/ReadonlyArray'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(2)), true)
 * assert.strictEqual(pipe([1, 2, 3], elem(eqNumber)(0)), false)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): (as: ReadonlyArray<A>) => boolean;
    (a: A, as: ReadonlyArray<A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 704,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L704",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L704",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): (as: ReadonlyArray<A>) => boolean; (a: A, as: ReadonlyArray<A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * Check if a predicate holds true for every array member.
 *
 * @example
 * import { every } from 'fp-ts/ReadonlyArray'
 * import { pipe } from 'fp-ts/function'
 *
 * const isPositive = (n: number): boolean => n > 0
 *
 * assert.deepStrictEqual(pipe([1, 2, 3], every(isPositive)), true)
 * assert.deepStrictEqual(pipe([1, 2, -3], every(isPositive)), false)
 *
 * @since 2.9.0
 */",
              ],
              "id": "readonlyArray.every",
              "kind": "function",
              "name": "every",
              "signature": "every: <A>(predicate: Predicate<A>) => (as: readonly A[]) => boolean;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1293,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1293",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1293",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: readonly A[]) => boolean",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <A, B>(f: (fa: readonly A[]) => B) => (wa: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1077,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1077",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1077",
              },
              "type": "<A, B>(f: (fa: readonly A[]) => B) => (wa: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <A, B>(
    f: (a: A) => O.Option<B>
) => (fa: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1023,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1023",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1023",
              },
              "type": "<A, B>(f: (a: A) => O.Option<B>) => (fa: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.filterMapWithIndex",
              "kind": "function",
              "name": "filterMapWithIndex",
              "signature": "filterMapWithIndex: <A, B>(
    f: (i: number, a: A) => O.Option<B>
) => (fa: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1016,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1016",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1016",
              },
              "type": "<A, B>(f: (i: number, a: A) => O.Option<B>) => (fa: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * Find the first element which satisfies a predicate (or a refinement) function
 *
 * @example
 * import { findFirst } from 'fp-ts/ReadonlyArray'
 * import { some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(findFirst((x: { a: number, b: number }) => x.a === 1)([{ a: 1, b: 1 }, { a: 1, b: 2 }]), some({ a: 1, b: 1 }))
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.findFirst",
              "kind": "function",
              "name": "findFirst",
              "signature": "findFirst: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        as: ReadonlyArray<A>
    ) => Option<B>;
    <A>(predicate: Predicate<A>): (as: readonly A[]) => O.Option<A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 433,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L433",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L433",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: ReadonlyArray<A>) => Option<B>; <A>(predicate: Predicate<A>): (as: readonly A[]) => O.Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Find the first element returned by an option based selector function
 *
 * @example
 * import { findFirstMap } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * interface Person {
 *   name: string
 *   age?: number
 * }
 *
 * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
 *
 * // returns the name of the first person that has an age
 * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.findFirstMap",
              "kind": "function",
              "name": "findFirstMap",
              "signature": "findFirstMap: <A, B>(
    f: (a: A) => Option<B>
) => (as: ReadonlyArray<A>) => Option<B>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 454,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L454",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L454",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (as: ReadonlyArray<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * Find the first index for which a predicate holds
 *
 * @example
 * import { findIndex } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))
 * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.findIndex",
              "kind": "function",
              "name": "findIndex",
              "signature": "findIndex: <A>(
    predicate: Predicate<A>
) => (as: ReadonlyArray<A>) => Option<number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 421,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L421",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L421",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: ReadonlyArray<A>) => Option<number>",
            },
            {
              "docs": [
                "/**
 * Find the last element which satisfies a predicate function
 *
 * @example
 * import { findLast } from 'fp-ts/ReadonlyArray'
 * import { some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(findLast((x: { a: number, b: number }) => x.a === 1)([{ a: 1, b: 1 }, { a: 1, b: 2 }]), some({ a: 1, b: 2 }))
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.findLast",
              "kind": "function",
              "name": "findLast",
              "signature": "findLast: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        as: ReadonlyArray<A>
    ) => Option<B>;
    <A>(predicate: Predicate<A>): (as: readonly A[]) => O.Option<A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 466,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L466",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L466",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: ReadonlyArray<A>) => Option<B>; <A>(predicate: Predicate<A>): (as: readonly A[]) => O.Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Returns the index of the last element of the list which matches the predicate
 *
 * @example
 * import { findLastIndex } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * interface X {
 *   a: number
 *   b: number
 * }
 * const xs: ReadonlyArray<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]
 * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 1)(xs), some(1))
 * assert.deepStrictEqual(findLastIndex((x: { a: number }) => x.a === 4)(xs), none)
 *
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.findLastIndex",
              "kind": "function",
              "name": "findLastIndex",
              "signature": "findLastIndex: <A>(
    predicate: Predicate<A>
) => (as: ReadonlyArray<A>) => Option<number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 506,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L506",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L506",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: ReadonlyArray<A>) => Option<number>",
            },
            {
              "docs": [
                "/**
 * Find the last element returned by an option based selector function
 *
 * @example
 * import { findLastMap } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * interface Person {
 *   name: string
 *   age?: number
 * }
 *
 * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
 *
 * // returns the name of the last person that has an age
 * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.findLastMap",
              "kind": "function",
              "name": "findLastMap",
              "signature": "findLastMap: <A, B>(
    f: (a: A) => Option<B>
) => (as: ReadonlyArray<A>) => Option<B>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 487,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L487",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L487",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (as: ReadonlyArray<A>) => Option<B>",
            },
            {
              "docs": [
                "/**
 * Removes one level of nesting
 *
 * Derivable from \`Monad\`.
 *
 * @example
 * import { flatten } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(flatten([[1], [2], [3]]), [1, 2, 3])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: ReadonlyArray<ReadonlyArray<A>>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L144",
              },
              "type": "<A>(mma: ReadonlyArray<ReadonlyArray<A>>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Break an array into its first element and remaining elements
 *
 * @example
 * import { foldLeft } from 'fp-ts/ReadonlyArray'
 *
 * const len: <A>(as: ReadonlyArray<A>) => number = foldLeft(() => 0, (_, tail) => 1 + len(tail))
 * assert.strictEqual(len([1, 2, 3]), 3)
 *
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.foldLeft",
              "kind": "function",
              "name": "foldLeft",
              "signature": "foldLeft: <A, B>(
    onEmpty: Lazy<B>,
    onCons: (head: A, tail: ReadonlyArray<A>) => B
) => (as: ReadonlyArray<A>) => B;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L157",
              },
              "type": "<A, B>(onEmpty: Lazy<B>, onCons: (head: A, tail: ReadonlyArray<A>) => B) => (as: ReadonlyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: readonly A[]) => M;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1101",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: readonly A[]) => M",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.foldMapWithIndex",
              "kind": "function",
              "name": "foldMapWithIndex",
              "signature": "foldMapWithIndex: <M>(
    M: Monoid<M>
) => <A>(f: (i: number, a: A) => M) => (fa: readonly A[]) => M;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1089,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1089",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1089",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (i: number, a: A) => M) => (fa: readonly A[]) => M",
            },
            {
              "docs": [
                "/**
 * Break an array into its initial elements and the last element
 *
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.foldRight",
              "kind": "function",
              "name": "foldRight",
              "signature": "foldRight: <A, B>(
    onEmpty: Lazy<B>,
    onCons: (init: ReadonlyArray<A>, last: A) => B
) => (as: ReadonlyArray<A>) => B;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 167,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L167",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L167",
              },
              "type": "<A, B>(onEmpty: Lazy<B>, onCons: (init: ReadonlyArray<A>, last: A) => B) => (as: ReadonlyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.fromArray",
              "kind": "function",
              "name": "fromArray",
              "signature": "fromArray: <A>(as: Array<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L33",
              },
              "type": "<A>(as: Array<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Derives an \`Eq\` over the \`ReadonlyArray\` of a given element type from the \`Eq\` of that type. The derived \`Eq\` defines two
 * arrays as equal if all elements of both arrays are compared equal pairwise with the given \`E\`. In case of arrays of
 * different lengths, the result is non equality.
 *
 * @example
 * import { eqString } from 'fp-ts/Eq'
 * import { getEq } from 'fp-ts/ReadonlyArray'
 *
 * const E = getEq(eqString)
 * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)
 * assert.strictEqual(E.equals(['a'], []), false)
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 73,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L73",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L73",
              },
              "type": "<A>(E: Eq<A>) => Eq<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Returns a \`Monoid\` for \`ReadonlyArray<A>\`
 *
 * @example
 * import { getMonoid } from 'fp-ts/ReadonlyArray'
 *
 * const M = getMonoid<number>()
 * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <A = never>() => Monoid<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L56",
              },
              "type": "<A = never>() => Monoid<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Derives an \`Ord\` over the \`ReadonlyArray\` of a given element type from the \`Ord\` of that type. The ordering between two such
 * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in
 * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have
 * the same length, the result is equality.
 *
 * @example
 * import { getOrd } from 'fp-ts/ReadonlyArray'
 * import { ordString } from 'fp-ts/Ord'
 *
 * const O = getOrd(ordString)
 * assert.strictEqual(O.compare(['b'], ['a']), 1)
 * assert.strictEqual(O.compare(['a'], ['a']), 0)
 * assert.strictEqual(O.compare(['a'], ['b']), -1)
 *
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.getOrd",
              "kind": "function",
              "name": "getOrd",
              "signature": "getOrd: <A>(O: Ord<A>) => Ord<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L93",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L93",
              },
              "type": "<A>(O: Ord<A>) => Ord<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 43,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L43",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L43",
              },
              "type": "<A>(S: Show<A>) => Show<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Get the first element in an array, or \`None\` if the array is empty
 *
 * @example
 * import { head } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(head([1, 2, 3]), some(1))
 * assert.deepStrictEqual(head([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.head",
              "kind": "function",
              "name": "head",
              "signature": "head: <A>(as: ReadonlyArray<A>) => Option<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 272,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L272",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L272",
              },
              "type": "<A>(as: ReadonlyArray<A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Get all but the last element of an array, creating a new array, or \`None\` if the array is empty
 *
 * @example
 * import { init } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))
 * assert.deepStrictEqual(init([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.init",
              "kind": "function",
              "name": "init",
              "signature": "init: <A>(as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 311,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L311",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L311",
              },
              "type": "<A>(as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Insert an element at the specified index, creating a new array, or returning \`None\` if the index is out of bounds
 *
 * @example
 * import { insertAt } from 'fp-ts/ReadonlyArray'
 * import { some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <A>(
    i: number,
    a: A
) => (as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 518,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L518",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L518",
              },
              "type": "<A>(i: number, a: A) => (as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Creates an array of unique values that are included in all given arrays using a \`Eq\` for equality
 * comparisons. The order and references of result values are determined by the first array.
 *
 * @example
 * import { intersection } from 'fp-ts/ReadonlyArray'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2], intersection(eqNumber)([2, 3])), [2])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.intersection",
              "kind": "function",
              "name": "intersection",
              "signature": "intersection: <A>(E: Eq<A>) => {
    (xs: ReadonlyArray<A>): (ys: ReadonlyArray<A>) => ReadonlyArray<A>;
    (xs: ReadonlyArray<A>, ys: ReadonlyArray<A>): ReadonlyArray<A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 885,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L885",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L885",
              },
              "type": "<A>(E: Eq<A>) => { (xs: ReadonlyArray<A>): (ys: ReadonlyArray<A>) => ReadonlyArray<A>; (xs: ReadonlyArray<A>, ys: ReadonlyArray<A>): ReadonlyArray<A>; }",
            },
            {
              "docs": [
                "/**
 * Places an element in between members of an array
 *
 * @example
 * import { intersperse } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "readonlyArray.intersperse",
              "kind": "function",
              "name": "intersperse",
              "signature": "intersperse: <A>(e: A) => (as: ReadonlyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 676,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L676",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L676",
              },
              "type": "<A>(e: A) => (as: ReadonlyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Test whether an array is empty
 *
 * @example
 * import { isEmpty } from 'fp-ts/ReadonlyArray'
 *
 * assert.strictEqual(isEmpty([]), true)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.isEmpty",
              "kind": "function",
              "name": "isEmpty",
              "signature": "isEmpty: <A>(as: ReadonlyArray<A>) => boolean;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 205,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L205",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L205",
              },
              "type": "<A>(as: ReadonlyArray<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether an array is non empty narrowing down the type to \`NonEmptyReadonlyArray<A>\`
 *
 * @category guards
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.isNonEmpty",
              "kind": "function",
              "name": "isNonEmpty",
              "signature": "isNonEmpty: <A>(as: ReadonlyArray<A>) => as is ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 212,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L212",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L212",
              },
              "type": "<A>(as: ReadonlyArray<A>) => as is ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Test whether an array contains a particular index
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.isOutOfBound",
              "kind": "function",
              "name": "isOutOfBound",
              "signature": "isOutOfBound: <A>(i: number, as: ReadonlyArray<A>) => boolean;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 218,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L218",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L218",
              },
              "type": "<A>(i: number, as: ReadonlyArray<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * Get the last element in an array, or \`None\` if the array is empty
 *
 * @example
 * import { last } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(last([1, 2, 3]), some(3))
 * assert.deepStrictEqual(last([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.last",
              "kind": "function",
              "name": "last",
              "signature": "last: <A>(as: ReadonlyArray<A>) => Option<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 285,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L285",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L285",
              },
              "type": "<A>(as: ReadonlyArray<A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Extracts from an array of \`Either\` all the \`Left\` elements. All the \`Left\` elements are extracted in order
 *
 * @example
 * import { lefts } from 'fp-ts/ReadonlyArray'
 * import { left, right } from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.lefts",
              "kind": "function",
              "name": "lefts",
              "signature": "lefts: <E, A>(as: ReadonlyArray<Either<E, A>>) => ReadonlyArray<E>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 596,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L596",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L596",
              },
              "type": "<E, A>(as: ReadonlyArray<Either<E, A>>) => ReadonlyArray<E>",
            },
            {
              "docs": [
                "/**
 * This function provides a safe way to read a value at a particular index from an array
 *
 * @example
 * import { lookup } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))
 * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.lookup",
              "kind": "function",
              "name": "lookup",
              "signature": "lookup: {
    (i: number): <A>(as: readonly A[]) => O.Option<A>;
    <A>(i: number, as: readonly A[]): O.Option<A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 232,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L232",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L232",
              },
              "type": "{ (i: number): <A>(as: readonly A[]) => O.Option<A>; <A>(i: number, as: readonly A[]): O.Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Return a list of length \`n\` with element \`i\` initialized with \`f(i)\`
 *
 * @example
 * import { makeBy } from 'fp-ts/ReadonlyArray'
 *
 * const double = (n: number): number => n * 2
 * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.makeBy",
              "kind": "function",
              "name": "makeBy",
              "signature": "makeBy: <A>(n: number, f: (i: number) => A) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L106",
              },
              "type": "<A>(n: number, f: (i: number) => A) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 993,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L993",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L993",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * @category FunctorWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <A, B>(
    f: (i: number, a: A) => B
) => (fa: readonly A[]) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 998,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L998",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L998",
              },
              "type": "<A, B>(f: (i: number, a: A) => B) => (fa: readonly A[]) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * Apply a function to the element at the specified index, creating a new array, or returning \`None\` if the index is out
 * of bounds
 *
 * @example
 * import { modifyAt } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * const double = (x: number): number => x * 2
 * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))
 * assert.deepStrictEqual(modifyAt(1, double)([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <A>(
    i: number,
    f: (a: A) => A
) => (as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 559,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L559",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L559",
              },
              "type": "<A>(i: number, f: (a: A) => A) => (as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (fa: readonly A[]) => Separated<readonly B[], readonly C[]>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1055,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1055",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1055",
              },
              "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: readonly A[]) => Separated<readonly B[], readonly C[]>",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.partitionMapWithIndex",
              "kind": "function",
              "name": "partitionMapWithIndex",
              "signature": "partitionMapWithIndex: <A, B, C>(
    f: (i: number, a: A) => Either<B, C>
) => (fa: readonly A[]) => Separated<readonly B[], readonly C[]>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1062,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1062",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1062",
              },
              "type": "<A, B, C>(f: (i: number, a: A) => Either<B, C>) => (fa: readonly A[]) => Separated<readonly B[], readonly C[]>",
            },
            {
              "docs": [
                "/**
 * Prepend an element to every member of an array
 *
 * @example
 * import { prependToAll } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(prependToAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "readonlyArray.prependToAll",
              "kind": "function",
              "name": "prependToAll",
              "signature": "prependToAll: <A>(e: A) => (xs: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 664,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L664",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L664",
              },
              "type": "<A>(e: A) => (xs: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Create an array containing a range of integers, including both endpoints
 *
 * @example
 * import { range } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.range",
              "kind": "function",
              "name": "range",
              "signature": "range: (start: number, end: number) => ReadonlyArray<number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L118",
              },
              "type": "(start: number, end: number) => ReadonlyArray<number>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: readonly A[]) => B;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1096,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1096",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1096",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: readonly A[]) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: readonly A[]) => B;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1111,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1111",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1111",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: readonly A[]) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.reduceRightWithIndex",
              "kind": "function",
              "name": "reduceRightWithIndex",
              "signature": "reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: number, a: A, b: B) => B
) => (fa: readonly A[]) => B;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1116,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1116",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1116",
              },
              "type": "<A, B>(b: B, f: (i: number, a: A, b: B) => B) => (fa: readonly A[]) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.reduceWithIndex",
              "kind": "function",
              "name": "reduceWithIndex",
              "signature": "reduceWithIndex: <A, B>(
    b: B,
    f: (i: number, b: B, a: A) => B
) => (fa: readonly A[]) => B;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1106",
              },
              "type": "<A, B>(b: B, f: (i: number, b: B, a: A) => B) => (fa: readonly A[]) => B",
            },
            {
              "docs": [
                "/**
 * Create an array containing a value repeated the specified number of times
 *
 * @example
 * import { replicate } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.replicate",
              "kind": "function",
              "name": "replicate",
              "signature": "replicate: <A>(n: number, a: A) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 130,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L130",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L130",
              },
              "type": "<A>(n: number, a: A) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Reverse an array, creating a new array
 *
 * @example
 * import { reverse } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.reverse",
              "kind": "function",
              "name": "reverse",
              "signature": "reverse: <A>(as: ReadonlyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 571,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L571",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L571",
              },
              "type": "<A>(as: ReadonlyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Extracts from an array of \`Either\` all the \`Right\` elements. All the \`Right\` elements are extracted in order
 *
 * @example
 * import { rights } from 'fp-ts/ReadonlyArray'
 * import { right, left } from 'fp-ts/Either'
 *
 * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.rights",
              "kind": "function",
              "name": "rights",
              "signature": "rights: <E, A>(as: ReadonlyArray<Either<E, A>>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 584,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L584",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L584",
              },
              "type": "<E, A>(as: ReadonlyArray<Either<E, A>>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Rotate an array to the right by \`n\` steps
 *
 * @example
 * import { rotate } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.rotate",
              "kind": "function",
              "name": "rotate",
              "signature": "rotate: (n: number) => <A>(as: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 688,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L688",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L688",
              },
              "type": "(n: number) => <A>(as: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Same as \`reduce\` but it carries over the intermediate steps
 *
 * @example
 * import { scanLeft } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.scanLeft",
              "kind": "function",
              "name": "scanLeft",
              "signature": "scanLeft: <A, B>(
    b: B,
    f: (b: B, a: A) => B
) => (as: ReadonlyArray<A>) => ReadonlyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 182,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L182",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L182",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (as: ReadonlyArray<A>) => ReadonlyArray<B>",
            },
            {
              "docs": [
                "/**
 * Fold an array from the right, keeping all intermediate results instead of only the final result
 *
 * @example
 * import { scanRight } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.scanRight",
              "kind": "function",
              "name": "scanRight",
              "signature": "scanRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => (as: ReadonlyArray<A>) => ReadonlyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L194",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (as: ReadonlyArray<A>) => ReadonlyArray<B>",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <A, B>(
    fa: readonly Either<A, B>[]
) => Separated<readonly A[], readonly B[]>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1003,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1003",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1003",
              },
              "type": "<A, B>(fa: readonly Either<A, B>[]) => Separated<readonly A[], readonly B[]>",
            },
            {
              "docs": [
                "/**
 * Append an element to the end of an array, creating a new non empty array
 *
 * @example
 * import { snoc } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(snoc([1, 2, 3], 4), [1, 2, 3, 4])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.snoc",
              "kind": "function",
              "name": "snoc",
              "signature": "snoc: <A>(init: ReadonlyArray<A>, end: A) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 259,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L259",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L259",
              },
              "type": "<A>(init: ReadonlyArray<A>, end: A) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Check if a predicate holds true for any array member.
 *
 * @example
 * import { some } from 'fp-ts/ReadonlyArray'
 * import { pipe } from 'fp-ts/function'
 *
 * const isPositive = (n: number): boolean => n > 0
 *
 * assert.deepStrictEqual(pipe([-1, -2, 3], some(isPositive)), true)
 * assert.deepStrictEqual(pipe([-1, -2, -3], some(isPositive)), false)
 *
 * @since 2.9.0
 */",
              ],
              "id": "readonlyArray.some",
              "kind": "function",
              "name": "some",
              "signature": "some: <A>(predicate: Predicate<A>) => (as: readonly A[]) => boolean;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1308,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1308",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1308",
              },
              "type": "<A>(predicate: Predicate<A>) => (as: readonly A[]) => boolean",
            },
            {
              "docs": [
                "/**
 * Sort the elements of an array in increasing order, creating a new array
 *
 * @example
 * import { sort } from 'fp-ts/ReadonlyArray'
 * import { ordNumber } from 'fp-ts/Ord'
 *
 * assert.deepStrictEqual(sort(ordNumber)([3, 2, 1]), [1, 2, 3])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.sort",
              "kind": "function",
              "name": "sort",
              "signature": "sort: <B>(O: Ord<B>) => <A extends B>(as: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 609,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L609",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L609",
              },
              "type": "<B>(O: Ord<B>) => <A extends B>(as: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Sort the elements of an array in increasing order, where elements are compared using first \`ords[0]\`, then \`ords[1]\`,
 * etc...
 *
 * @example
 * import { sortBy } from 'fp-ts/ReadonlyArray'
 * import { ord, ordString, ordNumber } from 'fp-ts/Ord'
 *
 * interface Person {
 *   name: string
 *   age: number
 * }
 * const byName = ord.contramap(ordString, (p: Person) => p.name)
 * const byAge = ord.contramap(ordNumber, (p: Person) => p.age)
 *
 * const sortByNameByAge = sortBy([byName, byAge])
 *
 * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]
 * assert.deepStrictEqual(sortByNameByAge(persons), [
 *   { name: 'a', age: 1 },
 *   { name: 'b', age: 2 },
 *   { name: 'b', age: 3 },
 *   { name: 'c', age: 2 }
 * ])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.sortBy",
              "kind": "function",
              "name": "sortBy",
              "signature": "sortBy: <B>(
    ords: ReadonlyArray<Ord<B>>
) => <A extends B>(as: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 751,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L751",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L751",
              },
              "type": "<B>(ords: ReadonlyArray<Ord<B>>) => <A extends B>(as: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Split an array into two parts:
 * 1. the longest initial subarray for which all elements satisfy the specified predicate
 * 2. the remaining elements
 *
 * @example
 * import { spanLeft } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(spanLeft((n: number) => n % 2 === 1)([1, 3, 2, 4, 5]), { init: [1, 3], rest: [2, 4, 5] })
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.spanLeft",
              "kind": "function",
              "name": "spanLeft",
              "signature": "spanLeft: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        as: ReadonlyArray<A>
    ) => Spanned<B, A>;
    <A>(predicate: Predicate<A>): (as: readonly A[]) => Spanned<A, A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 371,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L371",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L371",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: ReadonlyArray<A>) => Spanned<B, A>; <A>(predicate: Predicate<A>): (as: readonly A[]) => Spanned<A, A>; }",
            },
            {
              "docs": [
                "/**
 * Splits an array into two pieces, the first piece has \`n\` elements.
 *
 * @example
 * import { splitAt } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.splitAt",
              "kind": "function",
              "name": "splitAt",
              "signature": "splitAt: (
    n: number
) => <A>(as: readonly A[]) => readonly [readonly A[], readonly A[]];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 785,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L785",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L785",
              },
              "type": "(n: number) => <A>(as: readonly A[]) => readonly [readonly A[], readonly A[]]",
            },
            {
              "docs": [
                "/**
 * Get all but the first element of an array, creating a new array, or \`None\` if the array is empty
 *
 * @example
 * import { tail } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))
 * assert.deepStrictEqual(tail([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.tail",
              "kind": "function",
              "name": "tail",
              "signature": "tail: <A>(as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 298,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L298",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L298",
              },
              "type": "<A>(as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Keep only a number of elements from the start of an array, creating a new array.
 * \`n\` must be a natural number
 *
 * @example
 * import { takeLeft } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(takeLeft(2)([1, 2, 3]), [1, 2])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.takeLeft",
              "kind": "function",
              "name": "takeLeft",
              "signature": "takeLeft: (n: number) => <A>(as: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 324,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L324",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L324",
              },
              "type": "(n: number) => <A>(as: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new array
 *
 * @example
 * import { takeLeftWhile } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(takeLeftWhile((n: number) => n % 2 === 0)([2, 4, 3, 6]), [2, 4])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.takeLeftWhile",
              "kind": "function",
              "name": "takeLeftWhile",
              "signature": "takeLeftWhile: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        as: ReadonlyArray<A>
    ) => ReadonlyArray<B>;
    <A>(predicate: Predicate<A>): (as: readonly A[]) => readonly A[];
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 348,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L348",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L348",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (as: ReadonlyArray<A>) => ReadonlyArray<B>; <A>(predicate: Predicate<A>): (as: readonly A[]) => readonly A[]; }",
            },
            {
              "docs": [
                "/**
 * Keep only a number of elements from the end of an array, creating a new array.
 * \`n\` must be a natural number
 *
 * @example
 * import { takeRight } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5])
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.takeRight",
              "kind": "function",
              "name": "takeRight",
              "signature": "takeRight: (n: number) => <A>(as: readonly A[]) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 336,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L336",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L336",
              },
              "type": "(n: number) => <A>(as: readonly A[]) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.toArray",
              "kind": "function",
              "name": "toArray",
              "signature": "toArray: <A>(ras: ReadonlyArray<A>) => Array<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L38",
              },
              "type": "<A>(ras: ReadonlyArray<A>) => Array<A>",
            },
            {
              "docs": [
                "/**
 * @category Unfoldable
 * @since 2.6.6
 */",
              ],
              "id": "readonlyArray.unfold",
              "kind": "function",
              "name": "unfold",
              "signature": "unfold: <A, B>(b: B, f: (b: B) => O.Option<readonly [A, B]>) => readonly A[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1149,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1149",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1149",
              },
              "type": "<A, B>(b: B, f: (b: B) => O.Option<readonly [A, B]>) => readonly A[]",
            },
            {
              "docs": [
                "/**
 * Creates an array of unique values, in order, from all given arrays using a \`Eq\` for equality comparisons
 *
 * @example
 * import { union } from 'fp-ts/ReadonlyArray'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2], union(eqNumber)([2, 3])), [1, 2, 3])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.union",
              "kind": "function",
              "name": "union",
              "signature": "union: <A>(E: Eq<A>) => {
    (xs: ReadonlyArray<A>): (ys: ReadonlyArray<A>) => ReadonlyArray<A>;
    (xs: ReadonlyArray<A>, ys: ReadonlyArray<A>): ReadonlyArray<A>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 865,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L865",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L865",
              },
              "type": "<A>(E: Eq<A>) => { (xs: ReadonlyArray<A>): (ys: ReadonlyArray<A>) => ReadonlyArray<A>; (xs: ReadonlyArray<A>, ys: ReadonlyArray<A>): ReadonlyArray<A>; }",
            },
            {
              "docs": [
                "/**
 * Remove duplicates from an array, keeping the first occurrence of an element.
 *
 * @example
 * import { uniq } from 'fp-ts/ReadonlyArray'
 * import { eqNumber } from 'fp-ts/Eq'
 *
 * assert.deepStrictEqual(uniq(eqNumber)([1, 2, 1]), [1, 2])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.uniq",
              "kind": "function",
              "name": "uniq",
              "signature": "uniq: <A>(E: Eq<A>) => (as: ReadonlyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 722,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L722",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L722",
              },
              "type": "<A>(E: Eq<A>) => (as: ReadonlyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category unsafe
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.unsafeDeleteAt",
              "kind": "function",
              "name": "unsafeDeleteAt",
              "signature": "unsafeDeleteAt: <A>(i: number, as: ReadonlyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1272,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1272",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1272",
              },
              "type": "<A>(i: number, as: ReadonlyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category unsafe
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.unsafeInsertAt",
              "kind": "function",
              "name": "unsafeInsertAt",
              "signature": "unsafeInsertAt: <A>(i: number, a: A, as: ReadonlyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1262",
              },
              "type": "<A>(i: number, a: A, as: ReadonlyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category unsafe
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.unsafeUpdateAt",
              "kind": "function",
              "name": "unsafeUpdateAt",
              "signature": "unsafeUpdateAt: <A>(i: number, a: A, as: ReadonlyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1267,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1267",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1267",
              },
              "type": "<A>(i: number, a: A, as: ReadonlyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * The function is reverse of \`zip\`. Takes an array of pairs and return two corresponding arrays
 *
 * @example
 * import { unzip } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.unzip",
              "kind": "function",
              "name": "unzip",
              "signature": "unzip: <A, B>(
    as: ReadonlyArray<readonly [A, B]>
) => readonly [ReadonlyArray<A>, ReadonlyArray<B>];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 652,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L652",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L652",
              },
              "type": "<A, B>(as: ReadonlyArray<readonly [A, B]>) => readonly [ReadonlyArray<A>, ReadonlyArray<B>]",
            },
            {
              "docs": [
                "/**
 * Change the element at the specified index, creating a new array, or returning \`None\` if the index is out of bounds
 *
 * @example
 * import { updateAt } from 'fp-ts/ReadonlyArray'
 * import { some, none } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))
 * assert.deepStrictEqual(updateAt(1, 1)([]), none)
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <A>(
    i: number,
    a: A
) => (as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 531,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L531",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L531",
              },
              "type": "<A>(i: number, a: A) => (as: ReadonlyArray<A>) => Option<ReadonlyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Takes two arrays and returns an array of corresponding pairs. If one input array is short, excess elements of the
 * longer array are discarded
 *
 * @example
 * import { zip } from 'fp-ts/ReadonlyArray'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe([1, 2, 3], zip(['a', 'b', 'c', 'd'])), [[1, 'a'], [2, 'b'], [3, 'c']])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.zip",
              "kind": "function",
              "name": "zip",
              "signature": "zip: {
    <B>(bs: ReadonlyArray<B>): <A>(as: readonly A[]) => readonly (readonly [A, B])[];
    <A, B>(as: readonly A[], bs: readonly B[]): readonly (readonly [A, B])[];
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 640,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L640",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L640",
              },
              "type": "{ <B>(bs: ReadonlyArray<B>): <A>(as: readonly A[]) => readonly (readonly [A, B])[]; <A, B>(as: readonly A[], bs: readonly B[]): readonly (readonly [A, B])[]; }",
            },
            {
              "docs": [
                "/**
 * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one
 * input array is short, excess elements of the longer array are discarded.
 *
 * @example
 * import { zipWith } from 'fp-ts/ReadonlyArray'
 *
 * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.zipWith",
              "kind": "function",
              "name": "zipWith",
              "signature": "zipWith: <A, B, C>(
    fa: ReadonlyArray<A>,
    fb: ReadonlyArray<B>,
    f: (a: A, b: B) => C
) => ReadonlyArray<C>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 622,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L622",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L622",
              },
              "type": "<A, B, C>(fa: ReadonlyArray<A>, fb: ReadonlyArray<B>, f: (a: A, b: B) => C) => ReadonlyArray<C>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.Spanned",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "readonlyArray.Spanned.init",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "init",
                    "signature": "readonly init: ReadonlyArray<I>;",
                    "source": {
                      "filename": "lib/ReadonlyArray.d.ts",
                      "line": 356,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L356",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L356",
                    },
                    "type": "readonly I[]",
                  },
                  {
                    "docs": [],
                    "id": "readonlyArray.Spanned.rest",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "rest",
                    "signature": "readonly rest: ReadonlyArray<R>;",
                    "source": {
                      "filename": "lib/ReadonlyArray.d.ts",
                      "line": 357,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L357",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L357",
                    },
                    "type": "readonly R[]",
                  },
                ],
              },
              "name": "Spanned",
              "signature": "interface Spanned<I, R> {}",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 355,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L355",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L355",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1159,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1159",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1159",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1194",
              },
              "type": "Alt1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Alternative",
              "kind": "variable",
              "name": "Alternative",
              "signature": "const Alternative: Alternative1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1199,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1199",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1199",
              },
              "type": "Alternative1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1179,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1179",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1179",
              },
              "type": "Applicative1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Compactable",
              "kind": "variable",
              "name": "Compactable",
              "signature": "const Compactable: Compactable1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1209,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1209",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1209",
              },
              "type": "Compactable1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readonlyArray.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: readonly {}[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1312,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1312",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1312",
              },
              "type": "readonly {}[]",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * An empty array
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: readonly never[];",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1278,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1278",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1278",
              },
              "type": "readonly never[]",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Extend",
              "kind": "variable",
              "name": "Extend",
              "signature": "const Extend: Extend1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1204,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1204",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1204",
              },
              "type": "Extend1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.filter",
              "kind": "variable",
              "name": "filter",
              "signature": "const filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: readonly A[]
    ) => readonly B[];
    <A>(predicate: Predicate<A>): (fa: readonly A[]) => readonly A[];
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1008,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1008",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1008",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: readonly A[]) => readonly B[]; <A>(predicate: Predicate<A>): (fa: readonly A[]) => readonly A[]; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Filterable",
              "kind": "variable",
              "name": "Filterable",
              "signature": "const Filterable: Filterable1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1214,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1214",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1214",
              },
              "type": "Filterable1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.FilterableWithIndex",
              "kind": "variable",
              "name": "FilterableWithIndex",
              "signature": "const FilterableWithIndex: FilterableWithIndex1<'ReadonlyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1219,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1219",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1219",
              },
              "type": "FilterableWithIndex1<"ReadonlyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.filterWithIndex",
              "kind": "variable",
              "name": "filterWithIndex",
              "signature": "const filterWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (
        fa: readonly A[]
    ) => readonly B[];
    <A>(predicateWithIndex: PredicateWithIndex<number, A>): (
        fa: readonly A[]
    ) => readonly A[];
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1069,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1069",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1069",
              },
              "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (fa: readonly A[]) => readonly B[]; <A>(predicateWithIndex: PredicateWithIndex<number, A>): (fa: readonly A[]) => readonly A[]; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1224,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1224",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1224",
              },
              "type": "Foldable1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.FoldableWithIndex",
              "kind": "variable",
              "name": "FoldableWithIndex",
              "signature": "const FoldableWithIndex: FoldableWithIndex1<'ReadonlyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1229,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1229",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1229",
              },
              "type": "FoldableWithIndex1<"ReadonlyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1169,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1169",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1169",
              },
              "type": "Functor1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.FunctorWithIndex",
              "kind": "variable",
              "name": "FunctorWithIndex",
              "signature": "const FunctorWithIndex: FunctorWithIndex1<'ReadonlyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1174,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1174",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1174",
              },
              "type": "FunctorWithIndex1<"ReadonlyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1184,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1184",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1184",
              },
              "type": "Monad1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 917,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L917",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L917",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.partition",
              "kind": "variable",
              "name": "partition",
              "signature": "const partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: readonly A[]
    ) => Separated<readonly A[], readonly B[]>;
    <A>(predicate: Predicate<A>): (
        fa: readonly A[]
    ) => Separated<readonly A[], readonly A[]>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1033,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1033",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1033",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: readonly A[]) => Separated<readonly A[], readonly B[]>; <A>(predicate: Predicate<A>): (fa: readonly A[]) => Separated<readonly A[], readonly A[]>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category FilterableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.partitionWithIndex",
              "kind": "variable",
              "name": "partitionWithIndex",
              "signature": "const partitionWithIndex: {
    <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (
        fa: readonly A[]
    ) => Separated<readonly A[], readonly B[]>;
    <A>(predicateWithIndex: PredicateWithIndex<number, A>): (
        fa: readonly A[]
    ) => Separated<readonly A[], readonly A[]>;
};",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1043,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1043",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1043",
              },
              "type": "{ <A, B extends A>(refinementWithIndex: RefinementWithIndex<number, A, B>): (fa: readonly A[]) => Separated<readonly A[], readonly B[]>; <A>(predicateWithIndex: PredicateWithIndex<number, A>): (fa: readonly A[]) => Separated<readonly A[], readonly A[]>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.readonlyArray",
              "kind": "variable",
              "name": "readonlyArray",
              "signature": "const readonlyArray: FunctorWithIndex1<'ReadonlyArray', number> &
    Monad1<'ReadonlyArray'> &
    Unfoldable1<'ReadonlyArray'> &
    Alternative1<'ReadonlyArray'> &
    Extend1<'ReadonlyArray'> &
    FilterableWithIndex1<'ReadonlyArray', number> &
    FoldableWithIndex1<'ReadonlyArray', number> &
    TraversableWithIndex1<'ReadonlyArray', number> &
    Witherable1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1249,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1249",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1249",
              },
              "type": "FunctorWithIndex1<"ReadonlyArray", number> & Monad1<"ReadonlyArray"> & Unfoldable1<"ReadonlyArray"> & Alternative1<"ReadonlyArray"> & Extend1<"ReadonlyArray"> & FilterableWithIndex1<"ReadonlyArray", number> & FoldableWithIndex1<"ReadonlyArray", number> & TraversableWithIndex1<"ReadonlyArray", number> & Witherable1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * **for optimized and stack safe version check the data types \`sequenceArray\` function**
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "readonlyArray.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1128",
              },
              "type": "Sequence1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1234,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1234",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1234",
              },
              "type": "Traversable1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.TraversableWithIndex",
              "kind": "variable",
              "name": "TraversableWithIndex",
              "signature": "const TraversableWithIndex: TraversableWithIndex1<'ReadonlyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1239,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1239",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1239",
              },
              "type": "TraversableWithIndex1<"ReadonlyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * **for optimized and stack safe version check the data types \`traverseArray\` function**
 * @category Traversable
 * @since 2.6.3
 */",
              ],
              "id": "readonlyArray.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1122,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1122",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1122",
              },
              "type": "PipeableTraverse1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * **for optimized and stack safe version check the data types \`traverseArrayWithIndex\` function**
 * @category TraversableWithIndex
 * @since 2.6.3
 */",
              ],
              "id": "readonlyArray.traverseWithIndex",
              "kind": "variable",
              "name": "traverseWithIndex",
              "signature": "const traverseWithIndex: PipeableTraverseWithIndex1<'ReadonlyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1134,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1134",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1134",
              },
              "type": "PipeableTraverseWithIndex1<"ReadonlyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Unfoldable",
              "kind": "variable",
              "name": "Unfoldable",
              "signature": "const Unfoldable: Unfoldable1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1189,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1189",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1189",
              },
              "type": "Unfoldable1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyArray.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1154,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1154",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1154",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "readonlyArray.wilt",
              "kind": "variable",
              "name": "wilt",
              "signature": "const wilt: PipeableWilt1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1144",
              },
              "type": "PipeableWilt1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "readonlyArray.wither",
              "kind": "variable",
              "name": "wither",
              "signature": "const wither: PipeableWither1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1139,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1139",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1139",
              },
              "type": "PipeableWither1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.Witherable",
              "kind": "variable",
              "name": "Witherable",
              "signature": "const Witherable: Witherable1<'ReadonlyArray'>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 1244,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1244",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1244",
              },
              "type": "Witherable1<"ReadonlyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Alternative
 * @since 2.7.0
 */",
              ],
              "id": "readonlyArray.zero",
              "kind": "variable",
              "name": "zero",
              "signature": "const zero: <A>() => Kind<F, A>;",
              "source": {
                "filename": "lib/ReadonlyArray.d.ts",
                "line": 922,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L922",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L922",
              },
              "type": "<A>() => Kind<F, A>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.5.0
 */",
        ],
        "id": "readonlyArray",
        "kind": "namespace",
        "name": "readonlyArray",
        "signature": "module 'lib/ReadonlyArray.d.ts' {}",
        "source": {
          "filename": "lib/ReadonlyArray.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.collect",
              "kind": "function",
              "name": "collect",
              "signature": "collect: <K>(
    O: Ord<K>
) => <A, B>(f: (k: K, a: A) => B) => (m: ReadonlyMap<K, A>) => readonly B[];",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L84",
              },
              "type": "<K>(O: Ord<K>) => <A, B>(f: (k: K, a: A) => B) => (m: ReadonlyMap<K, A>) => readonly B[]",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <K, A>(fa: ReadonlyMap<K, O.Option<A>>) => ReadonlyMap<K, A>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 227,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L227",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L227",
              },
              "type": "<K, A>(fa: ReadonlyMap<K, O.Option<A>>) => ReadonlyMap<K, A>",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.deleteAt",
              "kind": "function",
              "name": "deleteAt",
              "signature": "deleteAt: <K>(
    E: Eq<K>
) => (k: K) => <A>(m: ReadonlyMap<K, A>) => ReadonlyMap<K, A>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 121,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L121",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L121",
              },
              "type": "<K>(E: Eq<K>) => (k: K) => <A>(m: ReadonlyMap<K, A>) => ReadonlyMap<K, A>",
            },
            {
              "docs": [
                "/**
 * Test whether or not a value is a member of a map
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): <K>(m: ReadonlyMap<K, A>) => boolean;
    <K>(a: A, m: ReadonlyMap<K, A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L63",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): <K>(m: ReadonlyMap<K, A>) => boolean; <K>(a: A, m: ReadonlyMap<K, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <A, B>(
    f: (a: A) => O.Option<B>
) => <K>(fa: ReadonlyMap<K, A>) => ReadonlyMap<K, B>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 240,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L240",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L240",
              },
              "type": "<A, B>(f: (a: A) => O.Option<B>) => <K>(fa: ReadonlyMap<K, A>) => ReadonlyMap<K, B>",
            },
            {
              "docs": [
                "/**
 * Create a map from a foldable collection of key/value pairs, using the
 * specified \`Magma\` to combine values for duplicate keys.
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.fromFoldable",
              "kind": "function",
              "name": "fromFoldable",
              "signature": "fromFoldable: {
    <F extends URIS3, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable3<F>): <R, E>(
        fka: Kind3<F, R, E, readonly [K, A]>
    ) => ReadonlyMap<K, A>;
    <F extends URIS2, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable2<F>): <E>(
        fka: Kind2<F, E, readonly [K, A]>
    ) => ReadonlyMap<K, A>;
    <F extends URIS, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable1<F>): (
        fka: Kind<F, readonly [K, A]>
    ) => ReadonlyMap<K, A>;
    <F, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable<F>): (
        fka: HKT<F, readonly [K, A]>
    ) => ReadonlyMap<K, A>;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L203",
              },
              "type": "{ <F extends URIS3, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable3<F>): <R, E>(fka: Kind3<F, R, E, readonly [K, A]>) => ReadonlyMap<K, A>; <F extends URIS2, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable2<F>): <E>(fka: Kind2<F, E, readonly [K, A]>) => ReadonlyMap<K, A>; <F extends URIS, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable1<F>): (fka: Kind<F, readonly [K, A]>) => ReadonlyMap<K, A>; <F, K, A>(E: Eq<K>, M: Magma<A>, F: Foldable<F>): (fka: HKT<F, readonly [K, A]>) => ReadonlyMap<K, A>; }",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.fromMap",
              "kind": "function",
              "name": "fromMap",
              "signature": "fromMap: <K, A>(m: Map<K, A>) => ReadonlyMap<K, A>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L24",
              },
              "type": "<K, A>(m: Map<K, A>) => ReadonlyMap<K, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <K, A>(SK: Eq<K>, SA: Eq<A>) => Eq<ReadonlyMap<K, A>>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 181,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L181",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L181",
              },
              "type": "<K, A>(SK: Eq<K>, SA: Eq<A>) => Eq<ReadonlyMap<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.getFilterableWithIndex",
              "kind": "function",
              "name": "getFilterableWithIndex",
              "signature": "getFilterableWithIndex: <K = never>() => FilterableWithIndex2C<URI, K, K>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 297,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L297",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L297",
              },
              "type": "<K = never>() => FilterableWithIndex2C<URI, K, K>",
            },
            {
              "docs": [
                "/**
 * Gets \`Monoid\` instance for Maps given \`Semigroup\` instance for their values
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <K, A>(SK: Eq<K>, SA: Semigroup<A>) => Monoid<ReadonlyMap<K, A>>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 188,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L188",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L188",
              },
              "type": "<K, A>(SK: Eq<K>, SA: Semigroup<A>) => Monoid<ReadonlyMap<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <K, A>(SK: Show<K>, SA: Show<A>) => Show<ReadonlyMap<K, A>>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L34",
              },
              "type": "<K, A>(SK: Show<K>, SA: Show<A>) => Show<ReadonlyMap<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.getWitherable",
              "kind": "function",
              "name": "getWitherable",
              "signature": "getWitherable: <K>(
    O: Ord<K>
) => Witherable2C<URI, K> & TraversableWithIndex2C<URI, K, K>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 302,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L302",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L302",
              },
              "type": "<K>(O: Ord<K>) => Witherable2C<URI, K> & TraversableWithIndex2C<URI, K, K>",
            },
            {
              "docs": [
                "/**
 * Insert or replace a key/value pair in a map
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <K>(
    E: Eq<K>
) => <A>(k: K, a: A) => (m: ReadonlyMap<K, A>) => ReadonlyMap<K, A>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 114,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L114",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L114",
              },
              "type": "<K>(E: Eq<K>) => <A>(k: K, a: A) => (m: ReadonlyMap<K, A>) => ReadonlyMap<K, A>",
            },
            {
              "docs": [
                "/**
 * Test whether or not a map is empty
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.isEmpty",
              "kind": "function",
              "name": "isEmpty",
              "signature": "isEmpty: <K, A>(d: ReadonlyMap<K, A>) => boolean;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L46",
              },
              "type": "<K, A>(d: ReadonlyMap<K, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether or not one \`Map\` contains all of the keys and values contained in another \`Map\`
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.isSubmap",
              "kind": "function",
              "name": "isSubmap",
              "signature": "isSubmap: <K, A>(
    SK: Eq<K>,
    SA: Eq<A>
) => {
    (that: ReadonlyMap<K, A>): (me: ReadonlyMap<K, A>) => boolean;
    (me: ReadonlyMap<K, A>, that: ReadonlyMap<K, A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 166,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L166",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L166",
              },
              "type": "<K, A>(SK: Eq<K>, SA: Eq<A>) => { (that: ReadonlyMap<K, A>): (me: ReadonlyMap<K, A>) => boolean; (me: ReadonlyMap<K, A>, that: ReadonlyMap<K, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * Get a sorted array of the keys contained in a map
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.keys",
              "kind": "function",
              "name": "keys",
              "signature": "keys: <K>(O: Ord<K>) => <A>(m: ReadonlyMap<K, A>) => ReadonlyArray<K>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 74,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L74",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L74",
              },
              "type": "<K>(O: Ord<K>) => <A>(m: ReadonlyMap<K, A>) => ReadonlyArray<K>",
            },
            {
              "docs": [
                "/**
 * Lookup the value for a key in a \`Map\`.
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.lookup",
              "kind": "function",
              "name": "lookup",
              "signature": "lookup: <K>(E: Eq<K>) => {
    (k: K): <A>(m: ReadonlyMap<K, A>) => O.Option<A>;
    <A>(k: K, m: ReadonlyMap<K, A>): O.Option<A>;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 155,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L155",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L155",
              },
              "type": "<K>(E: Eq<K>) => { (k: K): <A>(m: ReadonlyMap<K, A>) => O.Option<A>; <A>(k: K, m: ReadonlyMap<K, A>): O.Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Lookup the value for a key in a \`Map\`.
 * If the result is a \`Some\`, the existing key is also returned.
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.lookupWithKey",
              "kind": "function",
              "name": "lookupWithKey",
              "signature": "lookupWithKey: <K>(E: Eq<K>) => {
    (k: K): <A>(m: ReadonlyMap<K, A>) => O.Option<readonly [K, A]>;
    <A>(k: K, m: ReadonlyMap<K, A>): O.Option<readonly [K, A]>;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L144",
              },
              "type": "<K>(E: Eq<K>) => { (k: K): <A>(m: ReadonlyMap<K, A>) => O.Option<readonly [K, A]>; <A>(k: K, m: ReadonlyMap<K, A>): O.Option<readonly [K, A]>; }",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <K>(fa: ReadonlyMap<K, A>) => ReadonlyMap<K, B>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 248,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L248",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L248",
              },
              "type": "<A, B>(f: (a: A) => B) => <K>(fa: ReadonlyMap<K, A>) => ReadonlyMap<K, B>",
            },
            {
              "docs": [
                "/**
 * @category FunctorWithIndex
 * @since 2.7.1
 */",
              ],
              "id": "readonlyMap.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <K, A, B>(
    f: (k: K, a: A) => B
) => (fa: ReadonlyMap<K, A>) => ReadonlyMap<K, B>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 253,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L253",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L253",
              },
              "type": "<K, A, B>(f: (k: K, a: A) => B) => (fa: ReadonlyMap<K, A>) => ReadonlyMap<K, B>",
            },
            {
              "docs": [
                "/**
 * Test whether or not a key exists in a map
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.member",
              "kind": "function",
              "name": "member",
              "signature": "member: <K>(E: Eq<K>) => {
    (k: K): <A>(m: ReadonlyMap<K, A>) => boolean;
    <A>(k: K, m: ReadonlyMap<K, A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L52",
              },
              "type": "<K>(E: Eq<K>) => { (k: K): <A>(m: ReadonlyMap<K, A>) => boolean; <A>(k: K, m: ReadonlyMap<K, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <K>(
    E: Eq<K>
) => <A>(
    k: K,
    f: (a: A) => A
) => (m: ReadonlyMap<K, A>) => O.Option<ReadonlyMap<K, A>>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 129,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L129",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L129",
              },
              "type": "<K>(E: Eq<K>) => <A>(k: K, f: (a: A) => A) => (m: ReadonlyMap<K, A>) => O.Option<ReadonlyMap<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => <K>(fa: ReadonlyMap<K, A>) => Separated<ReadonlyMap<K, B>, ReadonlyMap<K, C>>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 268,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L268",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L268",
              },
              "type": "<A, B, C>(f: (a: A) => Either<B, C>) => <K>(fa: ReadonlyMap<K, A>) => Separated<ReadonlyMap<K, B>, ReadonlyMap<K, C>>",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map, returning the value as well as the subsequent map
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.pop",
              "kind": "function",
              "name": "pop",
              "signature": "pop: <K>(
    E: Eq<K>
) => (
    k: K
) => <A>(m: ReadonlyMap<K, A>) => O.Option<readonly [A, ReadonlyMap<K, A>]>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 137,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L137",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L137",
              },
              "type": "<K>(E: Eq<K>) => (k: K) => <A>(m: ReadonlyMap<K, A>) => O.Option<readonly [A, ReadonlyMap<K, A>]>",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <K, A, B>(
    fa: ReadonlyMap<K, Either<A, B>>
) => Separated<ReadonlyMap<K, A>, ReadonlyMap<K, B>>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 275,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L275",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L275",
              },
              "type": "<K, A, B>(fa: ReadonlyMap<K, Either<A, B>>) => Separated<ReadonlyMap<K, A>, ReadonlyMap<K, B>>",
            },
            {
              "docs": [
                "/**
 * Create a map with one key/value pair
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.singleton",
              "kind": "function",
              "name": "singleton",
              "signature": "singleton: <K, A>(k: K, a: A) => ReadonlyMap<K, A>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 195,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L195",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L195",
              },
              "type": "<K, A>(k: K, a: A) => ReadonlyMap<K, A>",
            },
            {
              "docs": [
                "/**
 * Calculate the number of key/value pairs in a map
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.size",
              "kind": "function",
              "name": "size",
              "signature": "size: <K, A>(d: ReadonlyMap<K, A>) => number;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L40",
              },
              "type": "<K, A>(d: ReadonlyMap<K, A>) => number",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.toMap",
              "kind": "function",
              "name": "toMap",
              "signature": "toMap: <K, A>(m: ReadonlyMap<K, A>) => Map<K, A>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 29,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L29",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L29",
              },
              "type": "<K, A>(m: ReadonlyMap<K, A>) => Map<K, A>",
            },
            {
              "docs": [
                "/**
 * Get a sorted of the key/value pairs contained in a map
 *
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.toReadonlyArray",
              "kind": "function",
              "name": "toReadonlyArray",
              "signature": "toReadonlyArray: <K>(
    O: Ord<K>
) => <A>(m: ReadonlyMap<K, A>) => readonly (readonly [K, A])[];",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L93",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L93",
              },
              "type": "<K>(O: Ord<K>) => <A>(m: ReadonlyMap<K, A>) => readonly (readonly [K, A])[]",
            },
            {
              "docs": [
                "/**
 * Unfolds a map into a list of key/value pairs
 *
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.toUnfoldable",
              "kind": "function",
              "name": "toUnfoldable",
              "signature": "toUnfoldable: {
    <K, F extends URIS>(ord: Ord<K>, U: Unfoldable1<F>): <A>(
        d: ReadonlyMap<K, A>
    ) => Kind<F, readonly [K, A]>;
    <K, F>(ord: Ord<K>, U: Unfoldable<F>): <A>(
        d: ReadonlyMap<K, A>
    ) => HKT<F, readonly [K, A]>;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L100",
              },
              "type": "{ <K, F extends URIS>(ord: Ord<K>, U: Unfoldable1<F>): <A>(d: ReadonlyMap<K, A>) => Kind<F, readonly [K, A]>; <K, F>(ord: Ord<K>, U: Unfoldable<F>): <A>(d: ReadonlyMap<K, A>) => HKT<F, readonly [K, A]>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <K>(
    E: Eq<K>
) => <A>(k: K, a: A) => (m: ReadonlyMap<K, A>) => O.Option<ReadonlyMap<K, A>>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 125,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L125",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L125",
              },
              "type": "<K>(E: Eq<K>) => <A>(k: K, a: A) => (m: ReadonlyMap<K, A>) => O.Option<ReadonlyMap<K, A>>",
            },
            {
              "docs": [
                "/**
 * Get a sorted array of the values contained in a map
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.values",
              "kind": "function",
              "name": "values",
              "signature": "values: <A>(O: Ord<A>) => <K>(m: ReadonlyMap<K, A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 80,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L80",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L80",
              },
              "type": "<A>(O: Ord<A>) => <K>(m: ReadonlyMap<K, A>) => ReadonlyArray<A>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 287,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L287",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L287",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyMap.Compactable",
              "kind": "variable",
              "name": "Compactable",
              "signature": "const Compactable: Compactable2<'ReadonlyMap'>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 312,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L312",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L312",
              },
              "type": "Compactable2<"ReadonlyMap">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: ReadonlyMap<never, never>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L176",
              },
              "type": "ReadonlyMap<never, never>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.filter",
              "kind": "variable",
              "name": "filter",
              "signature": "const filter: {
    <A, B extends A>(refinement: Refinement<A, B>): <K>(
        fa: ReadonlyMap<K, A>
    ) => ReadonlyMap<K, B>;
    <A>(predicate: Predicate<A>): <K>(fa: ReadonlyMap<K, A>) => ReadonlyMap<K, A>;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 232,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L232",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L232",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <K>(fa: ReadonlyMap<K, A>) => ReadonlyMap<K, B>; <A>(predicate: Predicate<A>): <K>(fa: ReadonlyMap<K, A>) => ReadonlyMap<K, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyMap.Filterable",
              "kind": "variable",
              "name": "Filterable",
              "signature": "const Filterable: Filterable2<'ReadonlyMap'>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 317,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L317",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L317",
              },
              "type": "Filterable2<"ReadonlyMap">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyMap.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'ReadonlyMap'>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 307,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L307",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L307",
              },
              "type": "Functor2<"ReadonlyMap">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.partition",
              "kind": "variable",
              "name": "partition",
              "signature": "const partition: {
    <A, B extends A>(refinement: Refinement<A, B>): <K>(
        fa: ReadonlyMap<K, A>
    ) => Separated<ReadonlyMap<K, A>, ReadonlyMap<K, B>>;
    <A>(predicate: Predicate<A>): <K>(
        fa: ReadonlyMap<K, A>
    ) => Separated<ReadonlyMap<K, A>, ReadonlyMap<K, A>>;
};",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 258,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L258",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L258",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): <K>(fa: ReadonlyMap<K, A>) => Separated<ReadonlyMap<K, A>, ReadonlyMap<K, B>>; <A>(predicate: Predicate<A>): <K>(fa: ReadonlyMap<K, A>) => Separated<ReadonlyMap<K, A>, ReadonlyMap<K, A>>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.readonlyMap",
              "kind": "variable",
              "name": "readonlyMap",
              "signature": "const readonlyMap: Filterable2<'ReadonlyMap'>;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 322,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L322",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L322",
              },
              "type": "Filterable2<"ReadonlyMap">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyMap.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReadonlyMap.d.ts",
                "line": 282,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L282",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L282",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @category constructors
 * @since 2.5.0
 */",
        ],
        "id": "readonlyMap",
        "kind": "namespace",
        "name": "readonlyMap",
        "signature": "module 'lib/ReadonlyMap.d.ts' {}",
        "source": {
          "filename": "lib/ReadonlyMap.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.6.2
 */",
              ],
              "id": "readonlyNonEmptyArray.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <A>(
    that: Lazy<ReadonlyNonEmptyArray<A>>
) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 343,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L343",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L343",
              },
              "type": "<A>(that: Lazy<ReadonlyNonEmptyArray<A>>) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "readonlyNonEmptyArray.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <B>(
    that: Lazy<ReadonlyNonEmptyArray<B>>
) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B | A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 333,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L333",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L333",
              },
              "type": "<B>(that: Lazy<ReadonlyNonEmptyArray<B>>) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B | A>",
            },
            {
              "docs": [
                "/**
 * @category Apply
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(
    fa: ReadonlyNonEmptyArray<A>
) => <B>(fab: ReadonlyNonEmptyArray<(a: A) => B>) => ReadonlyNonEmptyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 350,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L350",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L350",
              },
              "type": "<A>(fa: ReadonlyNonEmptyArray<A>) => <B>(fab: ReadonlyNonEmptyArray<(a: A) => B>) => ReadonlyNonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(
    fb: ReadonlyNonEmptyArray<B>
) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 361,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L361",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L361",
              },
              "type": "<B>(fb: ReadonlyNonEmptyArray<B>) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readonlyNonEmptyArray.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: ReadonlyNonEmptyArray<B>
) => (
    fa: ReadonlyNonEmptyArray<A>
) => ReadonlyNonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 569,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L569",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L569",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: ReadonlyNonEmptyArray<B>) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(
    fb: ReadonlyNonEmptyArray<B>
) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 372,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L372",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L372",
              },
              "type": "<B>(fb: ReadonlyNonEmptyArray<B>) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readonlyNonEmptyArray.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => ReadonlyNonEmptyArray<B>
) => (
    fa: ReadonlyNonEmptyArray<A>
) => ReadonlyNonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 562,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L562",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L562",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => ReadonlyNonEmptyArray<B>) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "readonlyNonEmptyArray.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<{ [K in N]: A }>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 556,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L556",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L556",
              },
              "type": "<N extends string>(name: N) => <A>(fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<{ [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(
    f: (a: A) => ReadonlyNonEmptyArray<B>
) => (ma: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 381,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L381",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L381",
              },
              "type": "<A, B>(f: (a: A) => ReadonlyNonEmptyArray<B>) => (ma: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(
    f: (a: A) => ReadonlyNonEmptyArray<B>
) => (ma: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 393,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L393",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L393",
              },
              "type": "<A, B>(f: (a: A) => ReadonlyNonEmptyArray<B>) => (ma: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.concat",
              "kind": "function",
              "name": "concat",
              "signature": "concat: {
    <A>(
        fx: ReadonlyArray<A>,
        fy: ReadonlyNonEmptyArray<A>
    ): ReadonlyNonEmptyArray<A>;
    <A>(fx: ReadonlyNonEmptyArray<A>, fy: readonly A[]): ReadonlyNonEmptyArray<A>;
};",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L262",
              },
              "type": "{ <A>(fx: ReadonlyArray<A>, fy: ReadonlyNonEmptyArray<A>): ReadonlyNonEmptyArray<A>; <A>(fx: ReadonlyNonEmptyArray<A>, fy: readonly A[]): ReadonlyNonEmptyArray<A>; }",
            },
            {
              "docs": [
                "/**
 * Append an element to the front of an array, creating a new non empty array
 *
 * @example
 * import { cons } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(cons(1, [2, 3, 4]), [1, 2, 3, 4])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.cons",
              "kind": "function",
              "name": "cons",
              "signature": "cons: <A>(head: A, tail: readonly A[]) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L41",
              },
              "type": "<A>(head: A, tail: readonly A[]) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <A>(
    ma: ReadonlyNonEmptyArray<A>
) => ReadonlyNonEmptyArray<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 402,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L402",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L402",
              },
              "type": "<A>(ma: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <A, B>(
    f: (fa: ReadonlyNonEmptyArray<A>) => B
) => (ma: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 407,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L407",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L407",
              },
              "type": "<A, B>(f: (fa: ReadonlyNonEmptyArray<A>) => B) => (ma: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.filter",
              "kind": "function",
              "name": "filter",
              "signature": "filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        nea: ReadonlyNonEmptyArray<A>
    ) => Option<ReadonlyNonEmptyArray<A>>;
    <A>(predicate: Predicate<A>): (
        nea: ReadonlyNonEmptyArray<A>
    ) => Option<ReadonlyNonEmptyArray<A>>;
};",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 239,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L239",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L239",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>; <A>(predicate: Predicate<A>): (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.filterWithIndex",
              "kind": "function",
              "name": "filterWithIndex",
              "signature": "filterWithIndex: <A>(
    predicate: (i: number, a: A) => boolean
) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 248,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L248",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L248",
              },
              "type": "<A>(predicate: (i: number, a: A) => boolean) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(
    mma: ReadonlyNonEmptyArray<ReadonlyNonEmptyArray<A>>
) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 416,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L416",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L416",
              },
              "type": "<A>(mma: ReadonlyNonEmptyArray<ReadonlyNonEmptyArray<A>>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <A>(S: Semigroup<A>) => (fa: ReadonlyNonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 267,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L267",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L267",
              },
              "type": "<A>(S: Semigroup<A>) => (fa: ReadonlyNonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <S>(
    S: Semigroup<S>
) => <A>(f: (a: A) => S) => (fa: ReadonlyNonEmptyArray<A>) => S;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 326,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L326",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L326",
              },
              "type": "<S>(S: Semigroup<S>) => <A>(f: (a: A) => S) => (fa: ReadonlyNonEmptyArray<A>) => S",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.foldMapWithIndex",
              "kind": "function",
              "name": "foldMapWithIndex",
              "signature": "foldMapWithIndex: <S>(
    S: Semigroup<S>
) => <A>(f: (i: number, a: A) => S) => (fa: ReadonlyNonEmptyArray<A>) => S;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 319,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L319",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L319",
              },
              "type": "<S>(S: Semigroup<S>) => <A>(f: (i: number, a: A) => S) => (fa: ReadonlyNonEmptyArray<A>) => S",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.fromArray",
              "kind": "function",
              "name": "fromArray",
              "signature": "fromArray: <A>(as: Array<A>) => Option<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 65,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L65",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L65",
              },
              "type": "<A>(as: Array<A>) => Option<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Builds a \`ReadonlyNonEmptyArray\` from an array returning \`none\` if \`as\` is an empty array
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.fromReadonlyArray",
              "kind": "function",
              "name": "fromReadonlyArray",
              "signature": "fromReadonlyArray: <A>(as: ReadonlyArray<A>) => Option<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L60",
              },
              "type": "<A>(as: ReadonlyArray<A>) => Option<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @example
 * import { getEq, cons } from 'fp-ts/ReadonlyNonEmptyArray'
 * import { eqNumber } from 'fp-ts/Eq'
 *
 * const E = getEq(eqNumber)
 * assert.strictEqual(E.equals(cons(1, [2]), [1, 2]), true)
 * assert.strictEqual(E.equals(cons(1, [2]), [1, 3]), false)
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 135,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L135",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L135",
              },
              "type": "<A>(E: Eq<A>) => Eq<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Builds a \`Semigroup\` instance for \`ReadonlyNonEmptyArray\`
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <A = never>() => Semigroup<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 122,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L122",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L122",
              },
              "type": "<A = never>() => Semigroup<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 94,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L94",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L94",
              },
              "type": "<A>(S: Show<A>) => Show<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Group equal, consecutive elements of an array into non empty arrays.
 *
 * @example
 * import { cons, group } from 'fp-ts/ReadonlyNonEmptyArray'
 * import { ordNumber } from 'fp-ts/Ord'
 *
 * assert.deepStrictEqual(group(ordNumber)([1, 2, 1, 1]), [
 *   cons(1, []),
 *   cons(2, []),
 *   cons(1, [1])
 * ])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.group",
              "kind": "function",
              "name": "group",
              "signature": "group: <B>(E: Eq<B>) => {
    <A extends B>(as: ReadonlyNonEmptyArray<A>): ReadonlyNonEmptyArray<
        ReadonlyNonEmptyArray<A>
    >;
    <A extends B>(as: readonly A[]): readonly ReadonlyNonEmptyArray<A>[];
};",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 152,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L152",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L152",
              },
              "type": "<B>(E: Eq<B>) => { <A extends B>(as: ReadonlyNonEmptyArray<A>): ReadonlyNonEmptyArray<ReadonlyNonEmptyArray<A>>; <A extends B>(as: readonly A[]): readonly ReadonlyNonEmptyArray<A>[]; }",
            },
            {
              "docs": [
                "/**
 * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a \`string\`-returning
 * function on each element, and grouping the results according to values returned
 *
 * @example
 * import { cons, groupBy } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['foo', 'bar', 'foobar']), {
 *   '3': cons('foo', ['bar']),
 *   '6': cons('foobar', [])
 * })
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.groupBy",
              "kind": "function",
              "name": "groupBy",
              "signature": "groupBy: <A>(
    f: (a: A) => string
) => (as: ReadonlyArray<A>) => ReadonlyRecord<string, ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 191,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L191",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L191",
              },
              "type": "<A>(f: (a: A) => string) => (as: ReadonlyArray<A>) => ReadonlyRecord<string, ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Sort and then group the elements of an array into non empty arrays.
 *
 * @example
 * import { cons, groupSort } from 'fp-ts/ReadonlyNonEmptyArray'
 * import { ordNumber } from 'fp-ts/Ord'
 *
 * assert.deepStrictEqual(groupSort(ordNumber)([1, 2, 1, 1]), [cons(1, [1, 1]), cons(2, [])])
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.groupSort",
              "kind": "function",
              "name": "groupSort",
              "signature": "groupSort: <B>(O: Ord<B>) => {
    <A extends B>(as: ReadonlyNonEmptyArray<A>): ReadonlyNonEmptyArray<
        ReadonlyNonEmptyArray<A>
    >;
    <A extends B>(as: readonly A[]): readonly ReadonlyNonEmptyArray<A>[];
};",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 170,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L170",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L170",
              },
              "type": "<B>(O: Ord<B>) => { <A extends B>(as: ReadonlyNonEmptyArray<A>): ReadonlyNonEmptyArray<ReadonlyNonEmptyArray<A>>; <A extends B>(as: readonly A[]): readonly ReadonlyNonEmptyArray<A>[]; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.head",
              "kind": "function",
              "name": "head",
              "signature": "head: <A>(nea: ReadonlyNonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 98,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L98",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L98",
              },
              "type": "<A>(nea: ReadonlyNonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * Get all but the last element of a non empty array, creating a new array.
 *
 * @example
 * import { init } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])
 * assert.deepStrictEqual(init([1]), [])
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.init",
              "kind": "function",
              "name": "init",
              "signature": "init: <A>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 209,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L209",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L209",
              },
              "type": "<A>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <A>(
    i: number,
    a: A
) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 218,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L218",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L218",
              },
              "type": "<A>(i: number, a: A) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Places an element in between members of an array
 *
 * @example
 * import { cons, intersperse } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(intersperse(9)(cons(1, [2, 3, 4])), cons(1, [9, 2, 9, 3, 9, 4]))
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "readonlyNonEmptyArray.intersperse",
              "kind": "function",
              "name": "intersperse",
              "signature": "intersperse: <A>(
    e: A
) => (as: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 314,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L314",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L314",
              },
              "type": "<A>(e: A) => (as: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.last",
              "kind": "function",
              "name": "last",
              "signature": "last: <A>(nea: ReadonlyNonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 197,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L197",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L197",
              },
              "type": "<A>(nea: ReadonlyNonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(
    f: (a: A) => B
) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 424,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L424",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L424",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @category FunctorWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <A, B>(
    f: (i: number, a: A) => B
) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 429,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L429",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L429",
              },
              "type": "<A, B>(f: (i: number, a: A) => B) => (fa: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.max",
              "kind": "function",
              "name": "max",
              "signature": "max: <A>(ord: Ord<A>) => (nea: ReadonlyNonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L115",
              },
              "type": "<A>(ord: Ord<A>) => (nea: ReadonlyNonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.min",
              "kind": "function",
              "name": "min",
              "signature": "min: <A>(ord: Ord<A>) => (nea: ReadonlyNonEmptyArray<A>) => A;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 111,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L111",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L111",
              },
              "type": "<A>(ord: Ord<A>) => (nea: ReadonlyNonEmptyArray<A>) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <A>(
    i: number,
    f: (a: A) => A
) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 232,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L232",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L232",
              },
              "type": "<A>(i: number, f: (a: A) => A) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * Prepend an element to every member of an array
 *
 * @example
 * import { cons, prependToAll } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(prependToAll(9)(cons(1, [2, 3, 4])), cons(9, [1, 9, 2, 9, 3, 9, 4]))
 *
 * @category combinators
 * @since 2.9.0
 */",
              ],
              "id": "readonlyNonEmptyArray.prependToAll",
              "kind": "function",
              "name": "prependToAll",
              "signature": "prependToAll: <A>(
    e: A
) => (xs: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 302,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L302",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L302",
              },
              "type": "<A>(e: A) => (xs: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(
    b: B,
    f: (b: B, a: A) => B
) => (fa: ReadonlyNonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 436,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L436",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L436",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: ReadonlyNonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => (fa: ReadonlyNonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 449,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L449",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L449",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: ReadonlyNonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.reduceRightWithIndex",
              "kind": "function",
              "name": "reduceRightWithIndex",
              "signature": "reduceRightWithIndex: <A, B>(
    b: B,
    f: (i: number, a: A, b: B) => B
) => (fa: ReadonlyNonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 454,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L454",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L454",
              },
              "type": "<A, B>(b: B, f: (i: number, a: A, b: B) => B) => (fa: ReadonlyNonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category FoldableWithIndex
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.reduceWithIndex",
              "kind": "function",
              "name": "reduceWithIndex",
              "signature": "reduceWithIndex: <A, B>(
    b: B,
    f: (i: number, b: B, a: A) => B
) => (fa: ReadonlyNonEmptyArray<A>) => B;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 441,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L441",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L441",
              },
              "type": "<A, B>(b: B, f: (i: number, b: B, a: A) => B) => (fa: ReadonlyNonEmptyArray<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.reverse",
              "kind": "function",
              "name": "reverse",
              "signature": "reverse: <A>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 107,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L107",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L107",
              },
              "type": "<A>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * Append an element to the end of an array, creating a new non empty array
 *
 * @example
 * import { snoc } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(snoc([1, 2, 3], 4), [1, 2, 3, 4])
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.snoc",
              "kind": "function",
              "name": "snoc",
              "signature": "snoc: <A>(init: readonly A[], end: A) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L53",
              },
              "type": "<A>(init: readonly A[], end: A) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.sort",
              "kind": "function",
              "name": "sort",
              "signature": "sort: <B>(
    O: Ord<B>
) => <A extends B>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 214,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L214",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L214",
              },
              "type": "<B>(O: Ord<B>) => <A extends B>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.tail",
              "kind": "function",
              "name": "tail",
              "signature": "tail: <A>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 102,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L102",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L102",
              },
              "type": "<A>(nea: ReadonlyNonEmptyArray<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * Produces a couple of the first element of the array, and a new array of the remaining elements, if any
 *
 * @example
 * import { cons, uncons } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(uncons(cons(1, [2, 3, 4])), [1, [2, 3, 4]])
 *
 * @category destructors
 * @since 2.9.0
 */",
              ],
              "id": "readonlyNonEmptyArray.uncons",
              "kind": "function",
              "name": "uncons",
              "signature": "uncons: <A>(nea: ReadonlyNonEmptyArray<A>) => readonly [A, ReadonlyArray<A>];",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 77,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L77",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L77",
              },
              "type": "<A>(nea: ReadonlyNonEmptyArray<A>) => readonly [A, ReadonlyArray<A>]",
            },
            {
              "docs": [
                "/**
 * Produces a couple of a copy of the array without its last element, and that last element
 *
 * @example
 * import { snoc, unsnoc } from 'fp-ts/ReadonlyNonEmptyArray'
 *
 * assert.deepStrictEqual(unsnoc(snoc([1, 2, 3], 4)), [[1, 2, 3], 4])
 *
 * @category destructors
 * @since 2.9.0
 */",
              ],
              "id": "readonlyNonEmptyArray.unsnoc",
              "kind": "function",
              "name": "unsnoc",
              "signature": "unsnoc: <A>(nea: ReadonlyNonEmptyArray<A>) => readonly [ReadonlyArray<A>, A];",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 89,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L89",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L89",
              },
              "type": "<A>(nea: ReadonlyNonEmptyArray<A>) => readonly [ReadonlyArray<A>, A]",
            },
            {
              "docs": [
                "/**
 * @since 2.5.1
 */",
              ],
              "id": "readonlyNonEmptyArray.unzip",
              "kind": "function",
              "name": "unzip",
              "signature": "unzip: <A, B>(
    as: ReadonlyNonEmptyArray<readonly [A, B]>
) => readonly [ReadonlyNonEmptyArray<A>, ReadonlyNonEmptyArray<B>];",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 288,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L288",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L288",
              },
              "type": "<A, B>(as: ReadonlyNonEmptyArray<readonly [A, B]>) => readonly [ReadonlyNonEmptyArray<A>, ReadonlyNonEmptyArray<B>]",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <A>(
    i: number,
    a: A
) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 225,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L225",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L225",
              },
              "type": "<A>(i: number, a: A) => (nea: ReadonlyNonEmptyArray<A>) => Option<ReadonlyNonEmptyArray<A>>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.1
 */",
              ],
              "id": "readonlyNonEmptyArray.zipWith",
              "kind": "function",
              "name": "zipWith",
              "signature": "zipWith: <A, B, C>(
    fa: ReadonlyNonEmptyArray<A>,
    fb: ReadonlyNonEmptyArray<B>,
    f: (a: A, b: B) => C
) => ReadonlyNonEmptyArray<C>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 272,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L272",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L272",
              },
              "type": "<A, B, C>(fa: ReadonlyNonEmptyArray<A>, fb: ReadonlyNonEmptyArray<B>, f: (a: A, b: B) => C) => ReadonlyNonEmptyArray<C>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.ReadonlyNonEmptyArray",
              "kind": "typeAlias",
              "name": "ReadonlyNonEmptyArray",
              "signature": "type ReadonlyNonEmptyArray<A> = ReadonlyArray<A> & {
    readonly 0: A;
};",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L27",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 483,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L483",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L483",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 533,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L533",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L533",
              },
              "type": "Alt1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 503,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L503",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L503",
              },
              "type": "Applicative1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Comonad",
              "kind": "variable",
              "name": "Comonad",
              "signature": "const Comonad: Comonad1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 538,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L538",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L538",
              },
              "type": "Comonad1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: readonly {}[] & { readonly 0: {} };",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 552,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L552",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L552",
              },
              "type": "readonly {}[] & { readonly 0: {}; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "readonlyNonEmptyArray.extract",
              "kind": "variable",
              "name": "extract",
              "signature": "const extract: <A>(wa: Kind<W, A>) => A;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 473,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L473",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L473",
              },
              "type": "<A>(wa: Kind<W, A>) => A",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 513,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L513",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L513",
              },
              "type": "Foldable1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.FoldableWithIndex",
              "kind": "variable",
              "name": "FoldableWithIndex",
              "signature": "const FoldableWithIndex: FoldableWithIndex1<'ReadonlyNonEmptyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 518,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L518",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L518",
              },
              "type": "FoldableWithIndex1<"ReadonlyNonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 493,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L493",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L493",
              },
              "type": "Functor1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.FunctorWithIndex",
              "kind": "variable",
              "name": "FunctorWithIndex",
              "signature": "const FunctorWithIndex: FunctorWithIndex1<'ReadonlyNonEmptyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 498,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L498",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L498",
              },
              "type": "FunctorWithIndex1<"ReadonlyNonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 508,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L508",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L508",
              },
              "type": "Monad1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 257,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L257",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L257",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.readonlyNonEmptyArray",
              "kind": "variable",
              "name": "readonlyNonEmptyArray",
              "signature": "const readonlyNonEmptyArray: Monad1<'ReadonlyNonEmptyArray'> &
    Comonad1<'ReadonlyNonEmptyArray'> &
    TraversableWithIndex1<'ReadonlyNonEmptyArray', number> &
    FunctorWithIndex1<'ReadonlyNonEmptyArray', number> &
    FoldableWithIndex1<'ReadonlyNonEmptyArray', number> &
    Alt1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 543,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L543",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L543",
              },
              "type": "Monad1<"ReadonlyNonEmptyArray"> & Comonad1<"ReadonlyNonEmptyArray"> & TraversableWithIndex1<"ReadonlyNonEmptyArray", number> & FunctorWithIndex1<"ReadonlyNonEmptyArray", number> & FoldableWithIndex1<"ReadonlyNonEmptyArray", number> & Alt1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "readonlyNonEmptyArray.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 465,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L465",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L465",
              },
              "type": "Sequence1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 523,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L523",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L523",
              },
              "type": "Traversable1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyNonEmptyArray.TraversableWithIndex",
              "kind": "variable",
              "name": "TraversableWithIndex",
              "signature": "const TraversableWithIndex: TraversableWithIndex1<'ReadonlyNonEmptyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 528,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L528",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L528",
              },
              "type": "TraversableWithIndex1<"ReadonlyNonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "readonlyNonEmptyArray.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse1<'ReadonlyNonEmptyArray'>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 461,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L461",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L461",
              },
              "type": "PipeableTraverse1<"ReadonlyNonEmptyArray">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "readonlyNonEmptyArray.traverseWithIndex",
              "kind": "variable",
              "name": "traverseWithIndex",
              "signature": "const traverseWithIndex: PipeableTraverseWithIndex1<'ReadonlyNonEmptyArray', number>;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 469,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L469",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L469",
              },
              "type": "PipeableTraverseWithIndex1<"ReadonlyNonEmptyArray", number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyNonEmptyArray.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 478,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L478",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L478",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.1
 */",
              ],
              "id": "readonlyNonEmptyArray.zip",
              "kind": "variable",
              "name": "zip",
              "signature": "const zip: {
    <B>(bs: ReadonlyNonEmptyArray<B>): <A>(
        as: ReadonlyNonEmptyArray<A>
    ) => ReadonlyNonEmptyArray<readonly [A, B]>;
    <A, B>(
        as: ReadonlyNonEmptyArray<A>,
        bs: ReadonlyNonEmptyArray<B>
    ): ReadonlyNonEmptyArray<readonly [A, B]>;
};",
              "source": {
                "filename": "lib/ReadonlyNonEmptyArray.d.ts",
                "line": 281,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L281",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L281",
              },
              "type": "{ <B>(bs: ReadonlyNonEmptyArray<B>): <A>(as: ReadonlyNonEmptyArray<A>) => ReadonlyNonEmptyArray<readonly [A, B]>; <A, B>(as: ReadonlyNonEmptyArray<A>, bs: ReadonlyNonEmptyArray<B>): ReadonlyNonEmptyArray<readonly [A, B]>; }",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * Data structure which represents non-empty arrays
 *
 * @since 2.5.0
 */",
        ],
        "id": "readonlyNonEmptyArray",
        "kind": "namespace",
        "name": "readonlyNonEmptyArray",
        "signature": "module 'lib/ReadonlyNonEmptyArray.d.ts' {}",
        "source": {
          "filename": "lib/ReadonlyNonEmptyArray.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Map a record into an array
 *
 * @example
 * import {collect} from 'fp-ts/ReadonlyRecord'
 *
 * const x: { a: string, b: boolean } = { a: 'foo', b: false }
 * assert.deepStrictEqual(
 *   collect((key, val) => ({key: key, value: val}))(x),
 *   [{key: 'a', value: 'foo'}, {key: 'b', value: false}]
 * )
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.collect",
              "kind": "function",
              "name": "collect",
              "signature": "collect: <K extends string, A, B>(
    f: (k: K, a: A) => B
) => (r: ReadonlyRecord<K, A>) => ReadonlyArray<B>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 75,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L75",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L75",
              },
              "type": "<K extends string, A, B>(f: (k: K, a: A) => B) => (r: ReadonlyRecord<K, A>) => ReadonlyArray<B>",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <A>(
    fa: Readonly<Record<string, Option<A>>>
) => Readonly<Record<string, A>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 493,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L493",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L493",
              },
              "type": "<A>(fa: Readonly<Record<string, Option<A>>>) => Readonly<Record<string, A>>",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.deleteAt",
              "kind": "function",
              "name": "deleteAt",
              "signature": "deleteAt: <K extends string>(
    k: K
) => <KS extends string, A>(
    r: Readonly<Record<KS, A>>
) => Readonly<Record<string extends K ? string : Exclude<KS, K>, A>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L115",
              },
              "type": "<K extends string>(k: K) => <KS extends string, A>(r: Readonly<Record<KS, A>>) => Readonly<Record<string extends K ? string : Exclude<KS, K>, A>>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): (fa: ReadonlyRecord<string, A>) => boolean;
    (a: A, fa: ReadonlyRecord<string, A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 434,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L434",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L434",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): (fa: ReadonlyRecord<string, A>) => boolean; (a: A, fa: ReadonlyRecord<string, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.every",
              "kind": "function",
              "name": "every",
              "signature": "every: <A>(predicate: Predicate<A>) => (r: ReadonlyRecord<string, A>) => boolean;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 426,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L426",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L426",
              },
              "type": "<A>(predicate: Predicate<A>) => (r: ReadonlyRecord<string, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <A, B>(
    f: (a: A) => Option<B>
) => (fa: Readonly<Record<string, A>>) => Readonly<Record<string, B>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 452,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L452",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L452",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (fa: Readonly<Record<string, A>>) => Readonly<Record<string, B>>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.filterMapWithIndex",
              "kind": "function",
              "name": "filterMapWithIndex",
              "signature": "filterMapWithIndex: <K extends string, A, B>(
    f: (key: K, a: A) => Option<B>
) => (fa: ReadonlyRecord<K, A>) => ReadonlyRecord<string, B>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 336,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L336",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L336",
              },
              "type": "<K extends string, A, B>(f: (key: K, a: A) => Option<B>) => (fa: ReadonlyRecord<K, A>) => ReadonlyRecord<string, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.filterWithIndex",
              "kind": "function",
              "name": "filterWithIndex",
              "signature": "filterWithIndex: {
    <K extends string, A, B extends A>(
        refinementWithIndex: RefinementWithIndex<K, A, B>
    ): (fa: ReadonlyRecord<K, A>) => ReadonlyRecord<string, B>;
    <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (
        fa: Readonly<Record<K, A>>
    ) => Readonly<Record<string, A>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 342,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L342",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L342",
              },
              "type": "{ <K extends string, A, B extends A>(refinementWithIndex: RefinementWithIndex<K, A, B>): (fa: ReadonlyRecord<K, A>) => ReadonlyRecord<string, B>; <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (fa: Readonly<Record<K, A>>) => Readonly<Record<string, A>>; }",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => (fa: Readonly<Record<string, A>>) => M;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 483,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L483",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L483",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Readonly<Record<string, A>>) => M",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.foldMapWithIndex",
              "kind": "function",
              "name": "foldMapWithIndex",
              "signature": "foldMapWithIndex: <M>(
    M: Monoid<M>
) => <K extends string, A>(
    f: (k: K, a: A) => M
) => (fa: Readonly<Record<K, A>>) => M;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 209,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L209",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L209",
              },
              "type": "<M>(M: Monoid<M>) => <K extends string, A>(f: (k: K, a: A) => M) => (fa: Readonly<Record<K, A>>) => M",
            },
            {
              "docs": [
                "/**
 * Create a record from a foldable collection of key/value pairs, using the
 * specified \`Magma\` to combine values for duplicate keys.
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.fromFoldable",
              "kind": "function",
              "name": "fromFoldable",
              "signature": "fromFoldable: {
    <F extends URIS3, A>(M: Magma<A>, F: Foldable3<F>): <K extends string, R, E>(
        fka: Kind3<F, R, E, readonly [K, A]>
    ) => Readonly<Record<K, A>>;
    <F extends URIS2, A>(M: Magma<A>, F: Foldable2<F>): <K extends string, E>(
        fka: Kind2<F, E, readonly [K, A]>
    ) => Readonly<Record<K, A>>;
    <F extends URIS, A>(M: Magma<A>, F: Foldable1<F>): <K extends string>(
        fka: Kind<F, readonly [K, A]>
    ) => Readonly<Record<K, A>>;
    <F, A>(M: Magma<A>, F: FoldableHKT<F>): <K extends string>(
        fka: HKT<F, readonly [K, A]>
    ) => Readonly<Record<K, A>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 354,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L354",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L354",
              },
              "type": "{ <F extends URIS3, A>(M: Magma<A>, F: Foldable3<F>): <K extends string, R, E>(fka: Kind3<F, R, E, readonly [K, A]>) => Readonly<Record<K, A>>; <F extends URIS2, A>(M: Magma<A>, F: Foldable2<F>): <K extends string, E>(fka: Kind2<F, E, readonly [K, A]>) => Readonly<Record<K, A>>; <F extends URIS, A>(M: Magma<A>, F: Foldable1<F>): <K extends string>(fka: Kind<F, readonly [K, A]>) => Readonly<Record<K, A>>; <F, A>(M: Magma<A>, F: FoldableHKT<F>): <K extends string>(fka: HKT<F, readonly [K, A]>) => Readonly<Record<K, A>>; }",
            },
            {
              "docs": [
                "/**
 * Create a record from a foldable collection using the specified functions to
 *
 * - map to key/value pairs
 * - combine values for duplicate keys.
 *
 * @example
 * import { getLastSemigroup } from 'fp-ts/Semigroup'
 * import { readonlyArray, zip } from 'fp-ts/ReadonlyArray'
 * import { identity } from 'fp-ts/function'
 * import { ReadonlyRecord, fromFoldableMap } from 'fp-ts/ReadonlyRecord'
 *
 * // like lodash \`zipObject\` or ramda \`zipObj\`
 * export const zipObject = <K extends string, A>(keys: ReadonlyArray<K>, values: ReadonlyArray<A>): ReadonlyRecord<K, A> =>
 *   fromFoldableMap(getLastSemigroup<A>(), readonlyArray)(zip(keys, values), identity)
 *
 * assert.deepStrictEqual(zipObject(['a', 'b'], [1, 2, 3]), { a: 1, b: 2 })
 *
 * // build a record from a field
 * interface User {
 *   id: string
 *   name: string
 * }
 *
 * const users: ReadonlyArray<User> = [
 *   { id: 'id1', name: 'name1' },
 *   { id: 'id2', name: 'name2' },
 *   { id: 'id1', name: 'name3' }
 * ]
 *
 * assert.deepStrictEqual(fromFoldableMap(getLastSemigroup<User>(), readonlyArray)(users, user => [user.id, user]), {
 *   id1: { id: 'id1', name: 'name3' },
 *   id2: { id: 'id2', name: 'name2' }
 * })
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.fromFoldableMap",
              "kind": "function",
              "name": "fromFoldableMap",
              "signature": "fromFoldableMap: {
    <F extends URIS3, B>(M: Magma<B>, F: Foldable3<F>): <R, E, A, K extends string>(
        fa: Kind3<F, R, E, A>,
        f: (a: A) => readonly [K, B]
    ) => Readonly<Record<K, B>>;
    <F extends URIS2, B>(M: Magma<B>, F: Foldable2<F>): <E, A, K extends string>(
        fa: Kind2<F, E, A>,
        f: (a: A) => readonly [K, B]
    ) => Readonly<Record<K, B>>;
    <F extends URIS, B>(M: Magma<B>, F: Foldable1<F>): <A, K extends string>(
        fa: Kind<F, A>,
        f: (a: A) => readonly [K, B]
    ) => Readonly<Record<K, B>>;
    <F, B>(M: Magma<B>, F: FoldableHKT<F>): <A, K extends string>(
        fa: HKT<F, A>,
        f: (a: A) => readonly [K, B]
    ) => Readonly<Record<K, B>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 407,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L407",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L407",
              },
              "type": "{ <F extends URIS3, B>(M: Magma<B>, F: Foldable3<F>): <R, E, A, K extends string>(fa: Kind3<F, R, E, A>, f: (a: A) => readonly [K, B]) => Readonly<Record<K, B>>; <F extends URIS2, B>(M: Magma<B>, F: Foldable2<F>): <E, A, K extends string>(fa: Kind2<F, E, A>, f: (a: A) => readonly [K, B]) => Readonly<Record<K, B>>; <F extends URIS, B>(M: Magma<B>, F: Foldable1<F>): <A, K extends string>(fa: Kind<F, A>, f: (a: A) => readonly [K, B]) => Readonly<Record<K, B>>; <F, B>(M: Magma<B>, F: FoldableHKT<F>): <A, K extends string>(fa: HKT<F, A>, f: (a: A) => readonly [K, B]) => Readonly<Record<K, B>>; }",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.fromRecord",
              "kind": "function",
              "name": "fromRecord",
              "signature": "fromRecord: <K extends string, A>(r: Record<K, A>) => ReadonlyRecord<K, A>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L34",
              },
              "type": "<K extends string, A>(r: Record<K, A>) => ReadonlyRecord<K, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <K extends string, A>(E: Eq<A>) => Eq<ReadonlyRecord<K, A>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L157",
              },
              "type": "<K extends string, A>(E: Eq<A>) => Eq<ReadonlyRecord<K, A>>",
            },
            {
              "docs": [
                "/**
 * Returns a \`Monoid\` instance for records given a \`Semigroup\` instance for their values
 *
 * @example
 * import { semigroupSum } from 'fp-ts/Semigroup'
 * import { getMonoid } from 'fp-ts/ReadonlyRecord'
 *
 * const M = getMonoid(semigroupSum)
 * assert.deepStrictEqual(M.concat({ foo: 123 }, { foo: 456 }), { foo: 579 })
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <K extends string, A>(
    S: Semigroup<A>
) => Monoid<ReadonlyRecord<K, A>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L171",
              },
              "type": "<K extends string, A>(S: Semigroup<A>) => Monoid<ReadonlyRecord<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<ReadonlyRecord<string, A>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 44,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L44",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L44",
              },
              "type": "<A>(S: Show<A>) => Show<ReadonlyRecord<string, A>>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.hasOwnProperty",
              "kind": "function",
              "name": "hasOwnProperty",
              "signature": "hasOwnProperty: <K extends string>(
    k: string,
    r: ReadonlyRecord<K, unknown>
) => k is K;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 108,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L108",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L108",
              },
              "type": "<K extends string>(k: string, r: ReadonlyRecord<K, unknown>) => k is K",
            },
            {
              "docs": [
                "/**
 * Insert or replace a key/value pair in a record
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <K extends string, A>(
    k: K,
    a: A
) => <KS extends string>(r: Readonly<Record<KS, A>>) => Readonly<Record<K | KS, A>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L101",
              },
              "type": "<K extends string, A>(k: K, a: A) => <KS extends string>(r: Readonly<Record<KS, A>>) => Readonly<Record<K | KS, A>>",
            },
            {
              "docs": [
                "/**
 * Test whether a record is empty
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.isEmpty",
              "kind": "function",
              "name": "isEmpty",
              "signature": "isEmpty: (r: ReadonlyRecord<string, unknown>) => boolean;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L56",
              },
              "type": "(r: ReadonlyRecord<string, unknown>) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether one record contains all of the keys and values contained in another record
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.isSubrecord",
              "kind": "function",
              "name": "isSubrecord",
              "signature": "isSubrecord: <A>(E: Eq<A>) => {
    (that: ReadonlyRecord<string, A>): (me: ReadonlyRecord<string, A>) => boolean;
    (me: ReadonlyRecord<string, A>, that: ReadonlyRecord<string, A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 147,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L147",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L147",
              },
              "type": "<A>(E: Eq<A>) => { (that: ReadonlyRecord<string, A>): (me: ReadonlyRecord<string, A>) => boolean; (me: ReadonlyRecord<string, A>, that: ReadonlyRecord<string, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.keys",
              "kind": "function",
              "name": "keys",
              "signature": "keys: <K extends string>(r: ReadonlyRecord<K, unknown>) => ReadonlyArray<K>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L60",
              },
              "type": "<K extends string>(r: ReadonlyRecord<K, unknown>) => ReadonlyArray<K>",
            },
            {
              "docs": [
                "/**
 * Lookup the value for a key in a record
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.lookup",
              "kind": "function",
              "name": "lookup",
              "signature": "lookup: {
    (k: string): <A>(r: Readonly<Record<string, A>>) => Option<A>;
    <A>(k: string, r: Readonly<Record<string, A>>): Option<A>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 177,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L177",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L177",
              },
              "type": "{ (k: string): <A>(r: Readonly<Record<string, A>>) => Option<A>; <A>(k: string, r: Readonly<Record<string, A>>): Option<A>; }",
            },
            {
              "docs": [
                "/**
 * Map a record passing the values to the iterating function
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(
    f: (a: A) => B
) => <K extends string>(fa: Readonly<Record<K, A>>) => Readonly<Record<K, B>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 198,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L198",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L198",
              },
              "type": "<A, B>(f: (a: A) => B) => <K extends string>(fa: Readonly<Record<K, A>>) => Readonly<Record<K, B>>",
            },
            {
              "docs": [
                "/**
 * Map a record passing the keys to the iterating function
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <K extends string, A, B>(
    f: (k: K, a: A) => B
) => (fa: ReadonlyRecord<K, A>) => ReadonlyRecord<K, B>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 189,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L189",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L189",
              },
              "type": "<K extends string, A, B>(f: (k: K, a: A) => B) => (fa: ReadonlyRecord<K, A>) => ReadonlyRecord<K, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <A>(
    k: string,
    f: (a: A) => A
) => <K extends string>(r: Readonly<Record<K, A>>) => Option<Readonly<Record<K, A>>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L128",
              },
              "type": "<A>(k: string, f: (a: A) => A) => <K extends string>(r: Readonly<Record<K, A>>) => Option<Readonly<Record<K, A>>>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (
    fa: Readonly<Record<string, A>>
) => Separated<Readonly<Record<string, B>>, Readonly<Record<string, C>>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 471,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L471",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L471",
              },
              "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: Readonly<Record<string, A>>) => Separated<Readonly<Record<string, B>>, Readonly<Record<string, C>>>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.partitionMapWithIndex",
              "kind": "function",
              "name": "partitionMapWithIndex",
              "signature": "partitionMapWithIndex: <K extends string, A, B, C>(
    f: (key: K, a: A) => Either<B, C>
) => (
    fa: ReadonlyRecord<K, A>
) => Separated<ReadonlyRecord<string, B>, ReadonlyRecord<string, C>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 320,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L320",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L320",
              },
              "type": "<K extends string, A, B, C>(f: (key: K, a: A) => Either<B, C>) => (fa: ReadonlyRecord<K, A>) => Separated<ReadonlyRecord<string, B>, ReadonlyRecord<string, C>>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.partitionWithIndex",
              "kind": "function",
              "name": "partitionWithIndex",
              "signature": "partitionWithIndex: {
    <K extends string, A, B extends A>(
        refinementWithIndex: RefinementWithIndex<K, A, B>
    ): (
        fa: ReadonlyRecord<K, A>
    ) => Separated<ReadonlyRecord<string, A>, ReadonlyRecord<string, B>>;
    <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (
        fa: Readonly<Record<K, A>>
    ) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, A>>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 326,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L326",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L326",
              },
              "type": "{ <K extends string, A, B extends A>(refinementWithIndex: RefinementWithIndex<K, A, B>): (fa: ReadonlyRecord<K, A>) => Separated<ReadonlyRecord<string, A>, ReadonlyRecord<string, B>>; <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (fa: Readonly<Record<K, A>>) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, A>>>; }",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map, returning the value as well as the subsequent map
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.pop",
              "kind": "function",
              "name": "pop",
              "signature": "pop: <K extends string>(
    k: K
) => <KS extends string, A>(
    r: Readonly<Record<KS, A>>
) => Option<
    readonly [A, Readonly<Record<string extends K ? string : Exclude<KS, K>, A>>]
>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 137,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L137",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L137",
              },
              "type": "<K extends string>(k: K) => <KS extends string, A>(r: Readonly<Record<KS, A>>) => Option<readonly [A, Readonly<Record<string extends K ? string : Exclude<KS, K>, A>>]>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(
    b: B,
    f: (b: B, a: A) => B
) => (fa: Readonly<Record<string, A>>) => B;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 478,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L478",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L478",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: Readonly<Record<string, A>>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(
    b: B,
    f: (a: A, b: B) => B
) => (fa: Readonly<Record<string, A>>) => B;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 488,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L488",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L488",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: Readonly<Record<string, A>>) => B",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.reduceRightWithIndex",
              "kind": "function",
              "name": "reduceRightWithIndex",
              "signature": "reduceRightWithIndex: <K extends string, A, B>(
    b: B,
    f: (k: K, a: A, b: B) => B
) => (fa: ReadonlyRecord<K, A>) => B;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 215,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L215",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L215",
              },
              "type": "<K extends string, A, B>(b: B, f: (k: K, a: A, b: B) => B) => (fa: ReadonlyRecord<K, A>) => B",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.reduceWithIndex",
              "kind": "function",
              "name": "reduceWithIndex",
              "signature": "reduceWithIndex: <K extends string, A, B>(
    b: B,
    f: (k: K, b: B, a: A) => B
) => (fa: ReadonlyRecord<K, A>) => B;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 202,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L202",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L202",
              },
              "type": "<K extends string, A, B>(b: B, f: (k: K, b: B, a: A) => B) => (fa: ReadonlyRecord<K, A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <A, B>(
    fa: Readonly<Record<string, Either<A, B>>>
) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, B>>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 498,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L498",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L498",
              },
              "type": "<A, B>(fa: Readonly<Record<string, Either<A, B>>>) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, B>>>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.sequence",
              "kind": "function",
              "name": "sequence",
              "signature": "sequence: {
    <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A>(
        ta: Readonly<Record<K, Kind3<F, R, E, A>>>
    ) => Kind3<F, R, E, Readonly<Record<K, A>>>;
    <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A>(
        ta: Readonly<Record<K, Kind3<F, R, E, A>>>
    ) => Kind3<F, R, E, Readonly<Record<K, A>>>;
    <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A>(
        ta: Readonly<Record<K, Kind2<F, E, A>>>
    ) => Kind2<F, E, Readonly<Record<K, A>>>;
    <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A>(
        ta: Readonly<Record<K, Kind2<F, E, A>>>
    ) => Kind2<F, E, Readonly<Record<K, A>>>;
    <F extends URIS>(F: Applicative1<F>): <K extends string, A>(
        ta: Readonly<Record<K, Kind<F, A>>>
    ) => Kind<F, Readonly<Record<K, A>>>;
    <F>(F: Applicative<F>): <K extends string, A>(
        ta: Readonly<Record<K, HKT<F, A>>>
    ) => HKT<F, Readonly<Record<K, A>>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 289,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L289",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L289",
              },
              "type": "{ <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A>(ta: Readonly<Record<K, Kind3<F, R, E, A>>>) => Kind3<F, R, E, Readonly<Record<K, A>>>; <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A>(ta: Readonly<Record<K, Kind3<F, R, E, A>>>) => Kind3<F, R, E, Readonly<Record<K, A>>>; <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A>(ta: Readonly<Record<K, Kind2<F, E, A>>>) => Kind2<F, E, Readonly<Record<K, A>>>; <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A>(ta: Readonly<Record<K, Kind2<F, E, A>>>) => Kind2<F, E, Readonly<Record<K, A>>>; <F extends URIS>(F: Applicative1<F>): <K extends string, A>(ta: Readonly<Record<K, Kind<F, A>>>) => Kind<F, Readonly<Record<K, A>>>; <F>(F: Applicative<F>): <K extends string, A>(ta: Readonly<Record<K, HKT<F, A>>>) => HKT<F, Readonly<Record<K, A>>>; }",
            },
            {
              "docs": [
                "/**
 * Create a record with one key/value pair
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.singleton",
              "kind": "function",
              "name": "singleton",
              "signature": "singleton: <K extends string, A>(k: K, a: A) => ReadonlyRecord<K, A>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 225,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L225",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L225",
              },
              "type": "<K extends string, A>(k: K, a: A) => ReadonlyRecord<K, A>",
            },
            {
              "docs": [
                "/**
 * Calculate the number of key/value pairs in a record
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.size",
              "kind": "function",
              "name": "size",
              "signature": "size: (r: ReadonlyRecord<string, unknown>) => number;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L50",
              },
              "type": "(r: ReadonlyRecord<string, unknown>) => number",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.some",
              "kind": "function",
              "name": "some",
              "signature": "some: <A>(
    predicate: (a: A) => boolean
) => (r: ReadonlyRecord<string, A>) => boolean;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 430,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L430",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L430",
              },
              "type": "<A>(predicate: (a: A) => boolean) => (r: ReadonlyRecord<string, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.toReadonlyArray",
              "kind": "function",
              "name": "toReadonlyArray",
              "signature": "toReadonlyArray: <K extends string, A>(
    r: Readonly<Record<K, A>>
) => readonly (readonly [K, A])[];",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L82",
              },
              "type": "<K extends string, A>(r: Readonly<Record<K, A>>) => readonly (readonly [K, A])[]",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.toRecord",
              "kind": "function",
              "name": "toRecord",
              "signature": "toRecord: <K extends string, A>(r: ReadonlyRecord<K, A>) => Record<K, A>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 39,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L39",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L39",
              },
              "type": "<K extends string, A>(r: ReadonlyRecord<K, A>) => Record<K, A>",
            },
            {
              "docs": [
                "/**
 * Unfolds a record into a list of key/value pairs
 *
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.toUnfoldable",
              "kind": "function",
              "name": "toUnfoldable",
              "signature": "toUnfoldable: {
    <F extends URIS>(U: Unfoldable1<F>): <K extends string, A>(
        r: Readonly<Record<K, A>>
    ) => Kind<F, readonly [K, A]>;
    <F>(U: Unfoldable<F>): <K extends string, A>(
        r: Readonly<Record<K, A>>
    ) => HKT<F, readonly [K, A]>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 89,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L89",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L89",
              },
              "type": "{ <F extends URIS>(U: Unfoldable1<F>): <K extends string, A>(r: Readonly<Record<K, A>>) => Kind<F, readonly [K, A]>; <F>(U: Unfoldable<F>): <K extends string, A>(r: Readonly<Record<K, A>>) => HKT<F, readonly [K, A]>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.traverse",
              "kind": "function",
              "name": "traverse",
              "signature": "traverse: {
    <F extends URIS3>(F: Applicative3<F>): <R, E, A, B>(
        f: (a: A) => Kind3<F, R, E, B>
    ) => <K extends string>(
        ta: Readonly<Record<K, A>>
    ) => Kind3<F, R, E, Readonly<Record<K, B>>>;
    <F extends URIS3, E>(F: Applicative3C<F, E>): <R, A, B>(
        f: (a: A) => Kind3<F, R, E, B>
    ) => <K extends string>(
        ta: Readonly<Record<K, A>>
    ) => Kind3<F, R, E, Readonly<Record<K, B>>>;
    <F extends URIS2>(F: Applicative2<F>): <E, A, B>(
        f: (a: A) => Kind2<F, E, B>
    ) => <K extends string>(
        ta: Readonly<Record<K, A>>
    ) => Kind2<F, E, Readonly<Record<K, B>>>;
    <F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
        f: (a: A) => Kind2<F, E, B>
    ) => <K extends string>(
        ta: Readonly<Record<K, A>>
    ) => Kind2<F, E, Readonly<Record<K, B>>>;
    <F extends URIS>(F: Applicative1<F>): <A, B>(
        f: (a: A) => Kind<F, B>
    ) => <K extends string>(
        ta: Readonly<Record<K, A>>
    ) => Kind<F, Readonly<Record<K, B>>>;
    <F>(F: Applicative<F>): <A, B>(
        f: (a: A) => HKT<F, B>
    ) => <K extends string>(
        ta: Readonly<Record<K, A>>
    ) => HKT<F, Readonly<Record<K, B>>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 260,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L260",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L260",
              },
              "type": "{ <F extends URIS3>(F: Applicative3<F>): <R, E, A, B>(f: (a: A) => Kind3<F, R, E, B>) => <K extends string>(ta: Readonly<Record<K, A>>) => Kind3<F, R, E, Readonly<Record<K, B>>>; <F extends URIS3, E>(F: Applicative3C<F, E>): <R, A, B>(f: (a: A) => Kind3<F, R, E, B>) => <K extends string>(ta: Readonly<Record<K, A>>) => Kind3<F, R, E, Readonly<Record<K, B>>>; <F extends URIS2>(F: Applicative2<F>): <E, A, B>(f: (a: A) => Kind2<F, E, B>) => <K extends string>(ta: Readonly<Record<K, A>>) => Kind2<F, E, Readonly<Record<K, B>>>; <F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(f: (a: A) => Kind2<F, E, B>) => <K extends string>(ta: Readonly<Record<K, A>>) => Kind2<F, E, Readonly<Record<K, B>>>; <F extends URIS>(F: Applicative1<F>): <A, B>(f: (a: A) => Kind<F, B>) => <K extends string>(ta: Readonly<Record<K, A>>) => Kind<F, Readonly<Record<K, B>>>; <F>(F: Applicative<F>): <A, B>(f: (a: A) => HKT<F, B>) => <K extends string>(ta: Readonly<Record<K, A>>) => HKT<F, Readonly<Record<K, B>>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.traverseWithIndex",
              "kind": "function",
              "name": "traverseWithIndex",
              "signature": "traverseWithIndex: {
    <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A, B>(
        f: (k: K, a: A) => Kind3<F, R, E, B>
    ) => (ta: Readonly<Record<K, A>>) => Kind3<F, R, E, Readonly<Record<K, B>>>;
    <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A, B>(
        f: (k: K, a: A) => Kind3<F, R, E, B>
    ) => (ta: Readonly<Record<K, A>>) => Kind3<F, R, E, Readonly<Record<K, B>>>;
    <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A, B>(
        f: (k: K, a: A) => Kind2<F, E, B>
    ) => (ta: Readonly<Record<K, A>>) => Kind2<F, E, Readonly<Record<K, B>>>;
    <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A, B>(
        f: (k: K, a: A) => Kind2<F, E, B>
    ) => (ta: Readonly<Record<K, A>>) => Kind2<F, E, Readonly<Record<K, B>>>;
    <F extends URIS>(F: Applicative1<F>): <K extends string, A, B>(
        f: (k: K, a: A) => Kind<F, B>
    ) => (ta: Readonly<Record<K, A>>) => Kind<F, Readonly<Record<K, B>>>;
    <F>(F: Applicative<F>): <K extends string, A, B>(
        f: (k: K, a: A) => HKT<F, B>
    ) => (ta: Readonly<Record<K, A>>) => HKT<F, Readonly<Record<K, B>>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 229,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L229",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L229",
              },
              "type": "{ <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A, B>(f: (k: K, a: A) => Kind3<F, R, E, B>) => (ta: Readonly<Record<K, A>>) => Kind3<F, R, E, Readonly<Record<K, B>>>; <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A, B>(f: (k: K, a: A) => Kind3<F, R, E, B>) => (ta: Readonly<Record<K, A>>) => Kind3<F, R, E, Readonly<Record<K, B>>>; <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A, B>(f: (k: K, a: A) => Kind2<F, E, B>) => (ta: Readonly<Record<K, A>>) => Kind2<F, E, Readonly<Record<K, B>>>; <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A, B>(f: (k: K, a: A) => Kind2<F, E, B>) => (ta: Readonly<Record<K, A>>) => Kind2<F, E, Readonly<Record<K, B>>>; <F extends URIS>(F: Applicative1<F>): <K extends string, A, B>(f: (k: K, a: A) => Kind<F, B>) => (ta: Readonly<Record<K, A>>) => Kind<F, Readonly<Record<K, B>>>; <F>(F: Applicative<F>): <K extends string, A, B>(f: (k: K, a: A) => HKT<F, B>) => (ta: Readonly<Record<K, A>>) => HKT<F, Readonly<Record<K, B>>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <A>(
    k: string,
    a: A
) => <K extends string>(r: Readonly<Record<K, A>>) => Option<Readonly<Record<K, A>>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 121,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L121",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L121",
              },
              "type": "<A>(k: string, a: A) => <K extends string>(r: Readonly<Record<K, A>>) => Option<Readonly<Record<K, A>>>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.ReadonlyRecord",
              "kind": "typeAlias",
              "name": "ReadonlyRecord",
              "signature": "type ReadonlyRecord<K extends string, T> = Readonly<Record<K, T>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 29,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L29",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L29",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 510,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L510",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L510",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.Compactable",
              "kind": "variable",
              "name": "Compactable",
              "signature": "const Compactable: Compactable1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 540,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L540",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L540",
              },
              "type": "Compactable1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: Readonly<Record<string, never>>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 182,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L182",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L182",
              },
              "type": "Readonly<Record<string, never>>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.filter",
              "kind": "variable",
              "name": "filter",
              "signature": "const filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Readonly<Record<string, A>>
    ) => Readonly<Record<string, B>>;
    <A>(predicate: Predicate<A>): (
        fa: Readonly<Record<string, A>>
    ) => Readonly<Record<string, A>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 444,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L444",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L444",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Readonly<Record<string, A>>) => Readonly<Record<string, B>>; <A>(predicate: Predicate<A>): (fa: Readonly<Record<string, A>>) => Readonly<Record<string, A>>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.Filterable",
              "kind": "variable",
              "name": "Filterable",
              "signature": "const Filterable: Filterable1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 545,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L545",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L545",
              },
              "type": "Filterable1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.FilterableWithIndex",
              "kind": "variable",
              "name": "FilterableWithIndex",
              "signature": "const FilterableWithIndex: FilterableWithIndex1<'ReadonlyRecord', string>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 550,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L550",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L550",
              },
              "type": "FilterableWithIndex1<"ReadonlyRecord", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 530,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L530",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L530",
              },
              "type": "Foldable1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.FoldableWithIndex",
              "kind": "variable",
              "name": "FoldableWithIndex",
              "signature": "const FoldableWithIndex: FoldableWithIndex1<'ReadonlyRecord', string>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 535,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L535",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L535",
              },
              "type": "FoldableWithIndex1<"ReadonlyRecord", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 520,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L520",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L520",
              },
              "type": "Functor1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.FunctorWithIndex",
              "kind": "variable",
              "name": "FunctorWithIndex",
              "signature": "const FunctorWithIndex: FunctorWithIndex1<'ReadonlyRecord', string>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 525,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L525",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L525",
              },
              "type": "FunctorWithIndex1<"ReadonlyRecord", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.partition",
              "kind": "variable",
              "name": "partition",
              "signature": "const partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Readonly<Record<string, A>>
    ) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, B>>>;
    <A>(predicate: Predicate<A>): (
        fa: Readonly<Record<string, A>>
    ) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, A>>>;
};",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 459,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L459",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L459",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Readonly<Record<string, A>>) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, B>>>; <A>(predicate: Predicate<A>): (fa: Readonly<Record<string, A>>) => Separated<Readonly<Record<string, A>>, Readonly<Record<string, A>>>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.readonlyRecord",
              "kind": "variable",
              "name": "readonlyRecord",
              "signature": "const readonlyRecord: FunctorWithIndex1<'ReadonlyRecord', string> &
    FoldableWithIndex1<'ReadonlyRecord', string> &
    FilterableWithIndex1<'ReadonlyRecord', string> &
    TraversableWithIndex1<'ReadonlyRecord', string> &
    Witherable1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 570,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L570",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L570",
              },
              "type": "FunctorWithIndex1<"ReadonlyRecord", string> & FoldableWithIndex1<"ReadonlyRecord", string> & FilterableWithIndex1<"ReadonlyRecord", string> & TraversableWithIndex1<"ReadonlyRecord", string> & Witherable1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 555,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L555",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L555",
              },
              "type": "Traversable1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.TraversableWithIndex",
              "kind": "variable",
              "name": "TraversableWithIndex",
              "signature": "const TraversableWithIndex: TraversableWithIndex1<'ReadonlyRecord', string>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 560,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L560",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L560",
              },
              "type": "TraversableWithIndex1<"ReadonlyRecord", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyRecord.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 505,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L505",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L505",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "readonlyRecord.wilt",
              "kind": "variable",
              "name": "wilt",
              "signature": "const wilt: PipeableWilt1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 316,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L316",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L316",
              },
              "type": "PipeableWilt1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "readonlyRecord.wither",
              "kind": "variable",
              "name": "wither",
              "signature": "const wither: PipeableWither1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 311,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L311",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L311",
              },
              "type": "PipeableWither1<"ReadonlyRecord">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyRecord.Witherable",
              "kind": "variable",
              "name": "Witherable",
              "signature": "const Witherable: Witherable1<'ReadonlyRecord'>;",
              "source": {
                "filename": "lib/ReadonlyRecord.d.ts",
                "line": 565,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L565",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L565",
              },
              "type": "Witherable1<"ReadonlyRecord">",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.5.0
 */",
        ],
        "id": "readonlyRecord",
        "kind": "namespace",
        "name": "readonlyRecord",
        "signature": "module 'lib/ReadonlyRecord.d.ts' {}",
        "source": {
          "filename": "lib/ReadonlyRecord.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <B>(
    E: Eq<B>
) => <A>(f: (x: A) => ReadonlySet<B>) => (set: ReadonlySet<A>) => ReadonlySet<B>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L61",
              },
              "type": "<B>(E: Eq<B>) => <A>(f: (x: A) => ReadonlySet<B>) => (set: ReadonlySet<A>) => ReadonlySet<B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <A>(E: Eq<A>) => (fa: ReadonlySet<Option<A>>) => ReadonlySet<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 199,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L199",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L199",
              },
              "type": "<A>(E: Eq<A>) => (fa: ReadonlySet<Option<A>>) => ReadonlySet<A>",
            },
            {
              "docs": [
                "/**
 * Form the set difference (\`x\` - \`y\`)
 *
 * @example
 * import { difference } from 'fp-ts/ReadonlySet'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe(new Set([1, 2]), difference(eqNumber)(new Set([1, 3]))), new Set([2]))
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.difference",
              "kind": "function",
              "name": "difference",
              "signature": "difference: <A>(E: Eq<A>) => {
    (that: ReadonlySet<A>): (me: ReadonlySet<A>) => ReadonlySet<A>;
    (me: ReadonlySet<A>, that: ReadonlySet<A>): ReadonlySet<A>;
};",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 143,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L143",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L143",
              },
              "type": "<A>(E: Eq<A>) => { (that: ReadonlySet<A>): (me: ReadonlySet<A>) => ReadonlySet<A>; (me: ReadonlySet<A>, that: ReadonlySet<A>): ReadonlySet<A>; }",
            },
            {
              "docs": [
                "/**
 * Test if a value is a member of a set
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): (set: ReadonlySet<A>) => boolean;
    (a: A, set: ReadonlySet<A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L93",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L93",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): (set: ReadonlySet<A>) => boolean; (a: A, set: ReadonlySet<A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.every",
              "kind": "function",
              "name": "every",
              "signature": "every: <A>(predicate: Predicate<A>) => (set: ReadonlySet<A>) => boolean;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L56",
              },
              "type": "<A>(predicate: Predicate<A>) => (set: ReadonlySet<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.filter",
              "kind": "function",
              "name": "filter",
              "signature": "filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        set: ReadonlySet<A>
    ) => ReadonlySet<B>;
    <A>(predicate: Predicate<A>): (set: ReadonlySet<A>) => ReadonlySet<A>;
};",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 77,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L77",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L77",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (set: ReadonlySet<A>) => ReadonlySet<B>; <A>(predicate: Predicate<A>): (set: ReadonlySet<A>) => ReadonlySet<A>; }",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <B>(
    E: Eq<B>
) => <A>(f: (a: A) => Option<B>) => (fa: ReadonlySet<A>) => ReadonlySet<B>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 211,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L211",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L211",
              },
              "type": "<B>(E: Eq<B>) => <A>(f: (a: A) => Option<B>) => (fa: ReadonlySet<A>) => ReadonlySet<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <A, M>(
    O: Ord<A>,
    M: Monoid<M>
) => (f: (a: A) => M) => (fa: ReadonlySet<A>) => M;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 166,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L166",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L166",
              },
              "type": "<A, M>(O: Ord<A>, M: Monoid<M>) => (f: (a: A) => M) => (fa: ReadonlySet<A>) => M",
            },
            {
              "docs": [
                "/**
 * Create a set from an array
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.fromArray",
              "kind": "function",
              "name": "fromArray",
              "signature": "fromArray: <A>(E: Eq<A>) => (as: ReadonlyArray<A>) => ReadonlySet<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L194",
              },
              "type": "<A>(E: Eq<A>) => (as: ReadonlyArray<A>) => ReadonlySet<A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.fromSet",
              "kind": "function",
              "name": "fromSet",
              "signature": "fromSet: <A>(s: Set<A>) => ReadonlySet<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L17",
              },
              "type": "<A>(s: Set<A>) => ReadonlySet<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<ReadonlySet<A>>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L41",
              },
              "type": "<A>(E: Eq<A>) => Eq<ReadonlySet<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.getIntersectionSemigroup",
              "kind": "function",
              "name": "getIntersectionSemigroup",
              "signature": "getIntersectionSemigroup: <A>(E: Eq<A>) => Semigroup<ReadonlySet<A>>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L158",
              },
              "type": "<A>(E: Eq<A>) => Semigroup<ReadonlySet<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<ReadonlySet<A>>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L27",
              },
              "type": "<A>(S: Show<A>) => Show<ReadonlySet<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.getUnionMonoid",
              "kind": "function",
              "name": "getUnionMonoid",
              "signature": "getUnionMonoid: <A>(E: Eq<A>) => Monoid<ReadonlySet<A>>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L153",
              },
              "type": "<A>(E: Eq<A>) => Monoid<ReadonlySet<A>>",
            },
            {
              "docs": [
                "/**
 * Insert a value into a set
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.insert",
              "kind": "function",
              "name": "insert",
              "signature": "insert: <A>(E: Eq<A>) => (a: A) => (set: ReadonlySet<A>) => ReadonlySet<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 180,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L180",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L180",
              },
              "type": "<A>(E: Eq<A>) => (a: A) => (set: ReadonlySet<A>) => ReadonlySet<A>",
            },
            {
              "docs": [
                "/**
 * The set of elements which are in both the first and second set
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.intersection",
              "kind": "function",
              "name": "intersection",
              "signature": "intersection: <A>(E: Eq<A>) => {
    (that: ReadonlySet<A>): (me: ReadonlySet<A>) => ReadonlySet<A>;
    (me: ReadonlySet<A>, that: ReadonlySet<A>): ReadonlySet<A>;
};",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 117,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L117",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L117",
              },
              "type": "<A>(E: Eq<A>) => { (that: ReadonlySet<A>): (me: ReadonlySet<A>) => ReadonlySet<A>; (me: ReadonlySet<A>, that: ReadonlySet<A>): ReadonlySet<A>; }",
            },
            {
              "docs": [
                "/**
 * \`true\` if and only if every element in the first set is an element of the second set
 *
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.isSubset",
              "kind": "function",
              "name": "isSubset",
              "signature": "isSubset: <A>(E: Eq<A>) => {
    (that: ReadonlySet<A>): (me: ReadonlySet<A>) => boolean;
    (me: ReadonlySet<A>, that: ReadonlySet<A>): boolean;
};",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 67,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L67",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L67",
              },
              "type": "<A>(E: Eq<A>) => { (that: ReadonlySet<A>): (me: ReadonlySet<A>) => boolean; (me: ReadonlySet<A>, that: ReadonlySet<A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * Projects a Set through a function
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <B>(
    E: Eq<B>
) => <A>(f: (x: A) => B) => (set: ReadonlySet<A>) => ReadonlySet<B>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L52",
              },
              "type": "<B>(E: Eq<B>) => <A>(f: (x: A) => B) => (set: ReadonlySet<A>) => ReadonlySet<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.partition",
              "kind": "function",
              "name": "partition",
              "signature": "partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        set: ReadonlySet<A>
    ) => Separated<ReadonlySet<A>, ReadonlySet<B>>;
    <A>(predicate: Predicate<A>): (
        set: ReadonlySet<A>
    ) => Separated<ReadonlySet<A>, ReadonlySet<A>>;
};",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L82",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (set: ReadonlySet<A>) => Separated<ReadonlySet<A>, ReadonlySet<B>>; <A>(predicate: Predicate<A>): (set: ReadonlySet<A>) => Separated<ReadonlySet<A>, ReadonlySet<A>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <B, C>(
    EB: Eq<B>,
    EC: Eq<C>
) => <A>(
    f: (a: A) => Either<B, C>
) => (set: ReadonlySet<A>) => Separated<ReadonlySet<B>, ReadonlySet<C>>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 126,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L126",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L126",
              },
              "type": "<B, C>(EB: Eq<B>, EC: Eq<C>) => <A>(f: (a: A) => Either<B, C>) => (set: ReadonlySet<A>) => Separated<ReadonlySet<B>, ReadonlySet<C>>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A>(
    O: Ord<A>
) => <B>(b: B, f: (b: B, a: A) => B) => (fa: ReadonlySet<A>) => B;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 162,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L162",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L162",
              },
              "type": "<A>(O: Ord<A>) => <B>(b: B, f: (b: B, a: A) => B) => (fa: ReadonlySet<A>) => B",
            },
            {
              "docs": [
                "/**
 * Delete a value from a set
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.remove",
              "kind": "function",
              "name": "remove",
              "signature": "remove: <A>(E: Eq<A>) => (a: A) => (set: ReadonlySet<A>) => ReadonlySet<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 187,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L187",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L187",
              },
              "type": "<A>(E: Eq<A>) => (a: A) => (set: ReadonlySet<A>) => ReadonlySet<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <E, A>(
    EE: Eq<E>,
    EA: Eq<A>
) => (fa: ReadonlySet<Either<E, A>>) => Separated<ReadonlySet<E>, ReadonlySet<A>>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L203",
              },
              "type": "<E, A>(EE: Eq<E>, EA: Eq<A>) => (fa: ReadonlySet<Either<E, A>>) => Separated<ReadonlySet<E>, ReadonlySet<A>>",
            },
            {
              "docs": [
                "/**
 * Create a set with one element
 *
 * @category constructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.singleton",
              "kind": "function",
              "name": "singleton",
              "signature": "singleton: <A>(a: A) => ReadonlySet<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 173,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L173",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L173",
              },
              "type": "<A>(a: A) => ReadonlySet<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.some",
              "kind": "function",
              "name": "some",
              "signature": "some: <A>(predicate: Predicate<A>) => (set: ReadonlySet<A>) => boolean;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L45",
              },
              "type": "<A>(predicate: Predicate<A>) => (set: ReadonlySet<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.toReadonlyArray",
              "kind": "function",
              "name": "toReadonlyArray",
              "signature": "toReadonlyArray: <A>(O: Ord<A>) => (set: ReadonlySet<A>) => ReadonlyArray<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L36",
              },
              "type": "<A>(O: Ord<A>) => (set: ReadonlySet<A>) => ReadonlyArray<A>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.toSet",
              "kind": "function",
              "name": "toSet",
              "signature": "toSet: <A>(s: ReadonlySet<A>) => Set<A>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 22,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L22",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L22",
              },
              "type": "<A>(s: ReadonlySet<A>) => Set<A>",
            },
            {
              "docs": [
                "/**
 * Form the union of two sets
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.union",
              "kind": "function",
              "name": "union",
              "signature": "union: <A>(E: Eq<A>) => {
    (that: ReadonlySet<A>): (me: ReadonlySet<A>) => ReadonlySet<A>;
    (me: ReadonlySet<A>, that: ReadonlySet<A>): ReadonlySet<A>;
};",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 105,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L105",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L105",
              },
              "type": "<A>(E: Eq<A>) => { (that: ReadonlySet<A>): (me: ReadonlySet<A>) => ReadonlySet<A>; (me: ReadonlySet<A>, that: ReadonlySet<A>): ReadonlySet<A>; }",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * @since 2.5.0
 */",
              ],
              "id": "readonlySet.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: ReadonlySet<never>;",
              "source": {
                "filename": "lib/ReadonlySet.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L31",
              },
              "type": "ReadonlySet<never>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.5.0
 */",
        ],
        "id": "readonlySet",
        "kind": "namespace",
        "name": "readonlySet",
        "signature": "module 'lib/ReadonlySet.d.ts' {}",
        "source": {
          "filename": "lib/ReadonlySet.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: readonly [A, E]) => readonly [B, G];",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L63",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: readonly [A, E]) => readonly [B, G]",
            },
            {
              "docs": [
                "/**
 * @category Semigroupoid
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.compose",
              "kind": "function",
              "name": "compose",
              "signature": "compose: <A, B>(
    ab: readonly [B, A]
) => <C>(bc: readonly [C, B]) => readonly [C, A];",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 75,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L75",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L75",
              },
              "type": "<A, B>(ab: readonly [B, A]) => <C>(bc: readonly [C, B]) => readonly [C, A]",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <E, A>(wa: readonly [A, E]) => readonly [readonly [A, E], E];",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 92,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L92",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L92",
              },
              "type": "<E, A>(wa: readonly [A, E]) => readonly [readonly [A, E], E]",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <E, A, B>(
    f: (wa: readonly [A, E]) => B
) => (wa: readonly [A, E]) => readonly [B, E];",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 80,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L80",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L80",
              },
              "type": "<E, A, B>(f: (wa: readonly [A, E]) => B) => (wa: readonly [A, E]) => readonly [B, E]",
            },
            {
              "docs": [
                "/**
 * @category Extract
 * @since 2.6.2
 */",
              ],
              "id": "readonlyTuple.extract",
              "kind": "function",
              "name": "extract",
              "signature": "extract: <E, A>(wa: readonly [A, E]) => A;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 85,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L85",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L85",
              },
              "type": "<E, A>(wa: readonly [A, E]) => A",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => <E>(fa: readonly [A, E]) => M;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L110",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: readonly [A, E]) => M",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.fst",
              "kind": "function",
              "name": "fst",
              "signature": "fst: <A, E>(ea: readonly [A, E]) => A;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 21,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L21",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L21",
              },
              "type": "<A, E>(ea: readonly [A, E]) => A",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.getApplicative",
              "kind": "function",
              "name": "getApplicative",
              "signature": "getApplicative: <M>(M: Monoid<M>) => Applicative2C<URI, M>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L41",
              },
              "type": "<M>(M: Monoid<M>) => Applicative2C<URI, M>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.getApply",
              "kind": "function",
              "name": "getApply",
              "signature": "getApply: <S>(S: Semigroup<S>) => Apply2C<URI, S>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L36",
              },
              "type": "<S>(S: Semigroup<S>) => Apply2C<URI, S>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.getChain",
              "kind": "function",
              "name": "getChain",
              "signature": "getChain: <S>(S: Semigroup<S>) => Chain2C<URI, S>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L46",
              },
              "type": "<S>(S: Semigroup<S>) => Chain2C<URI, S>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.getChainRec",
              "kind": "function",
              "name": "getChainRec",
              "signature": "getChainRec: <M>(M: Monoid<M>) => ChainRec2C<URI, M>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L56",
              },
              "type": "<M>(M: Monoid<M>) => ChainRec2C<URI, M>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.getMonad",
              "kind": "function",
              "name": "getMonad",
              "signature": "getMonad: <M>(M: Monoid<M>) => Monad2C<URI, M>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L51",
              },
              "type": "<M>(M: Monoid<M>) => Monad2C<URI, M>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: readonly [A, E]) => readonly [B, E];",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L100",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: readonly [A, E]) => readonly [B, E]",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: readonly [A, E]) => readonly [A, G];",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 70,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L70",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L70",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: readonly [A, E]) => readonly [A, G]",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: readonly [A, E]) => B;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 105,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L105",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L105",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: readonly [A, E]) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: readonly [A, E]) => B;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L115",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: readonly [A, E]) => B",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.snd",
              "kind": "function",
              "name": "snd",
              "signature": "snd: <A, E>(ea: readonly [A, E]) => E;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L26",
              },
              "type": "<A, E>(ea: readonly [A, E]) => E",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <A, E>(ea: readonly [A, E]) => readonly [E, A];",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L31",
              },
              "type": "<A, E>(ea: readonly [A, E]) => readonly [E, A]",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 133,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L133",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L133",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyTuple.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L148",
              },
              "type": "Bifunctor2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyTuple.Comonad",
              "kind": "variable",
              "name": "Comonad",
              "signature": "const Comonad: Comonad2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L158",
              },
              "type": "Comonad2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyTuple.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 163,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L163",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L163",
              },
              "type": "Foldable2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyTuple.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 143,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L143",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L143",
              },
              "type": "Functor2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.readonlyTuple",
              "kind": "variable",
              "name": "readonlyTuple",
              "signature": "const readonlyTuple: Semigroupoid2<'ReadonlyTuple'> &
    Bifunctor2<'ReadonlyTuple'> &
    Comonad2<'ReadonlyTuple'> &
    Foldable2<'ReadonlyTuple'> &
    Traversable2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 173,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L173",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L173",
              },
              "type": "Semigroupoid2<"ReadonlyTuple"> & Bifunctor2<"ReadonlyTuple"> & Comonad2<"ReadonlyTuple"> & Foldable2<"ReadonlyTuple"> & Traversable2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyTuple.Semigroupoid",
              "kind": "variable",
              "name": "Semigroupoid",
              "signature": "const Semigroupoid: Semigroupoid2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L153",
              },
              "type": "Semigroupoid2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "readonlyTuple.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L123",
              },
              "type": "Sequence2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "readonlyTuple.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 168,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L168",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L168",
              },
              "type": "Traversable2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "readonlyTuple.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse2<'ReadonlyTuple'>;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 119,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L119",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L119",
              },
              "type": "PipeableTraverse2<"ReadonlyTuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "readonlyTuple.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/ReadonlyTuple.d.ts",
                "line": 128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L128",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.5.0
 */",
        ],
        "id": "readonlyTuple",
        "kind": "namespace",
        "name": "readonlyTuple",
        "signature": "module 'lib/ReadonlyTuple.d.ts' {}",
        "source": {
          "filename": "lib/ReadonlyTuple.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Map a record into an array
 *
 * @example
 * import {collect} from 'fp-ts/Record'
 *
 * const x: { a: string, b: boolean } = { a: 'foo', b: false }
 * assert.deepStrictEqual(
 *   collect((key, val) => ({key: key, value: val}))(x),
 *   [{key: 'a', value: 'foo'}, {key: 'b', value: false}]
 * )
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.collect",
              "kind": "function",
              "name": "collect",
              "signature": "collect: <K extends string, A, B>(
    f: (k: K, a: A) => B
) => (r: Record<K, A>) => B[];",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 59,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L59",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L59",
              },
              "type": "<K extends string, A, B>(f: (k: K, a: A) => B) => (r: Record<K, A>) => B[]",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "record.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <A>(fa: Record<string, Option<A>>) => Record<string, A>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 440,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L440",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L440",
              },
              "type": "<A>(fa: Record<string, Option<A>>) => Record<string, A>",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.deleteAt",
              "kind": "function",
              "name": "deleteAt",
              "signature": "deleteAt: <K extends string>(
    k: K
) => <KS extends string, A>(
    r: Record<KS, A>
) => Record<string extends K ? string : Exclude<KS, K>, A>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L91",
              },
              "type": "<K extends string>(k: K) => <KS extends string, A>(r: Record<KS, A>) => Record<string extends K ? string : Exclude<KS, K>, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): (fa: Record<string, A>) => boolean;
    (a: A, fa: Record<string, A>): boolean;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 385,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L385",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L385",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): (fa: Record<string, A>) => boolean; (a: A, fa: Record<string, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.every",
              "kind": "function",
              "name": "every",
              "signature": "every: <A>(predicate: Predicate<A>) => (r: Record<string, A>) => boolean;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 377,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L377",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L377",
              },
              "type": "<A>(predicate: Predicate<A>) => (r: Record<string, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "record.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <A, B>(
    f: (a: A) => Option<B>
) => (fa: Record<string, A>) => Record<string, B>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 403,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L403",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L403",
              },
              "type": "<A, B>(f: (a: A) => Option<B>) => (fa: Record<string, A>) => Record<string, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.filterMapWithIndex",
              "kind": "function",
              "name": "filterMapWithIndex",
              "signature": "filterMapWithIndex: <K extends string, A, B>(
    f: (key: K, a: A) => Option<B>
) => (fa: Record<K, A>) => Record<string, B>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 287,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L287",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L287",
              },
              "type": "<K extends string, A, B>(f: (key: K, a: A) => Option<B>) => (fa: Record<K, A>) => Record<string, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.filterWithIndex",
              "kind": "function",
              "name": "filterWithIndex",
              "signature": "filterWithIndex: {
    <K extends string, A, B extends A>(
        refinementWithIndex: RefinementWithIndex<K, A, B>
    ): (fa: Record<K, A>) => Record<string, B>;
    <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (
        fa: Record<K, A>
    ) => Record<string, A>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 293,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L293",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L293",
              },
              "type": "{ <K extends string, A, B extends A>(refinementWithIndex: RefinementWithIndex<K, A, B>): (fa: Record<K, A>) => Record<string, B>; <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (fa: Record<K, A>) => Record<string, A>; }",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "record.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(
    M: Monoid<M>
) => <A>(f: (a: A) => M) => (fa: Record<string, A>) => M;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 408,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L408",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L408",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Record<string, A>) => M",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.foldMapWithIndex",
              "kind": "function",
              "name": "foldMapWithIndex",
              "signature": "foldMapWithIndex: <M>(
    M: Monoid<M>
) => <K extends string, A>(f: (k: K, a: A) => M) => (fa: Record<K, A>) => M;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L176",
              },
              "type": "<M>(M: Monoid<M>) => <K extends string, A>(f: (k: K, a: A) => M) => (fa: Record<K, A>) => M",
            },
            {
              "docs": [
                "/**
 * Create a record from a foldable collection of key/value pairs, using the
 * specified \`Magma\` to combine values for duplicate keys.
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.fromFoldable",
              "kind": "function",
              "name": "fromFoldable",
              "signature": "fromFoldable: {
    <F extends URIS3, A>(M: Magma<A>, F: Foldable3<F>): <K extends string, R, E>(
        fka: Kind3<F, R, E, [K, A]>
    ) => Record<K, A>;
    <F extends URIS2, A>(M: Magma<A>, F: Foldable2<F>): <K extends string, E>(
        fka: Kind2<F, E, [K, A]>
    ) => Record<K, A>;
    <F extends URIS, A>(M: Magma<A>, F: Foldable1<F>): <K extends string>(
        fka: Kind<F, [K, A]>
    ) => Record<K, A>;
    <F, A>(M: Magma<A>, F: FoldableHKT<F>): <K extends string>(
        fka: HKT<F, [K, A]>
    ) => Record<K, A>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 305,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L305",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L305",
              },
              "type": "{ <F extends URIS3, A>(M: Magma<A>, F: Foldable3<F>): <K extends string, R, E>(fka: Kind3<F, R, E, [K, A]>) => Record<K, A>; <F extends URIS2, A>(M: Magma<A>, F: Foldable2<F>): <K extends string, E>(fka: Kind2<F, E, [K, A]>) => Record<K, A>; <F extends URIS, A>(M: Magma<A>, F: Foldable1<F>): <K extends string>(fka: Kind<F, [K, A]>) => Record<K, A>; <F, A>(M: Magma<A>, F: FoldableHKT<F>): <K extends string>(fka: HKT<F, [K, A]>) => Record<K, A>; }",
            },
            {
              "docs": [
                "/**
 * Create a record from a foldable collection using the specified functions to
 *
 * - map to key/value pairs
 * - combine values for duplicate keys.
 *
 * @example
 * import { getLastSemigroup } from 'fp-ts/Semigroup'
 * import { array, zip } from 'fp-ts/Array'
 * import { identity } from 'fp-ts/function'
 * import { fromFoldableMap } from 'fp-ts/Record'
 *
 * // like lodash \`zipObject\` or ramda \`zipObj\`
 * export const zipObject = <K extends string, A>(keys: Array<K>, values: Array<A>): Record<K, A> =>
 *   fromFoldableMap(getLastSemigroup<A>(), array)(zip(keys, values), identity)
 *
 * assert.deepStrictEqual(zipObject(['a', 'b'], [1, 2, 3]), { a: 1, b: 2 })
 *
 * // build a record from a field
 * interface User {
 *   id: string
 *   name: string
 * }
 *
 * const users: Array<User> = [
 *   { id: 'id1', name: 'name1' },
 *   { id: 'id2', name: 'name2' },
 *   { id: 'id1', name: 'name3' }
 * ]
 *
 * assert.deepStrictEqual(fromFoldableMap(getLastSemigroup<User>(), array)(users, user => [user.id, user]), {
 *   id1: { id: 'id1', name: 'name3' },
 *   id2: { id: 'id2', name: 'name2' }
 * })
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.fromFoldableMap",
              "kind": "function",
              "name": "fromFoldableMap",
              "signature": "fromFoldableMap: {
    <F extends URIS3, B>(M: Magma<B>, F: Foldable3<F>): <R, E, A, K extends string>(
        fa: Kind3<F, R, E, A>,
        f: (a: A) => [K, B]
    ) => Record<K, B>;
    <F extends URIS2, B>(M: Magma<B>, F: Foldable2<F>): <E, A, K extends string>(
        fa: Kind2<F, E, A>,
        f: (a: A) => [K, B]
    ) => Record<K, B>;
    <F extends URIS, B>(M: Magma<B>, F: Foldable1<F>): <A, K extends string>(
        fa: Kind<F, A>,
        f: (a: A) => [K, B]
    ) => Record<K, B>;
    <F, B>(M: Magma<B>, F: FoldableHKT<F>): <A, K extends string>(
        fa: HKT<F, A>,
        f: (a: A) => [K, B]
    ) => Record<K, B>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 358,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L358",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L358",
              },
              "type": "{ <F extends URIS3, B>(M: Magma<B>, F: Foldable3<F>): <R, E, A, K extends string>(fa: Kind3<F, R, E, A>, f: (a: A) => [K, B]) => Record<K, B>; <F extends URIS2, B>(M: Magma<B>, F: Foldable2<F>): <E, A, K extends string>(fa: Kind2<F, E, A>, f: (a: A) => [K, B]) => Record<K, B>; <F extends URIS, B>(M: Magma<B>, F: Foldable1<F>): <A, K extends string>(fa: Kind<F, A>, f: (a: A) => [K, B]) => Record<K, B>; <F, B>(M: Magma<B>, F: FoldableHKT<F>): <A, K extends string>(fa: HKT<F, A>, f: (a: A) => [K, B]) => Record<K, B>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <K extends string, A>(E: Eq<A>) => Eq<Record<K, A>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 127,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L127",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L127",
              },
              "type": "<K extends string, A>(E: Eq<A>) => Eq<Record<K, A>>",
            },
            {
              "docs": [
                "/**
 * Returns a \`Monoid\` instance for records given a \`Semigroup\` instance for their values
 *
 * @example
 * import { semigroupSum } from 'fp-ts/Semigroup'
 * import { getMonoid } from 'fp-ts/Record'
 *
 * const M = getMonoid(semigroupSum)
 * assert.deepStrictEqual(M.concat({ foo: 123 }, { foo: 456 }), { foo: 579 })
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <K extends string, A>(S: Semigroup<A>) => Monoid<Record<K, A>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 140,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L140",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L140",
              },
              "type": "<K extends string, A>(S: Semigroup<A>) => Monoid<Record<K, A>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<Record<string, A>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L28",
              },
              "type": "<A>(S: Show<A>) => Show<Record<string, A>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.hasOwnProperty",
              "kind": "function",
              "name": "hasOwnProperty",
              "signature": "hasOwnProperty: <K extends string>(k: string, r: Record<K, unknown>) => k is K;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 85,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L85",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L85",
              },
              "type": "<K extends string>(k: string, r: Record<K, unknown>) => k is K",
            },
            {
              "docs": [
                "/**
 * Insert or replace a key/value pair in a record
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.insertAt",
              "kind": "function",
              "name": "insertAt",
              "signature": "insertAt: <K extends string, A>(
    k: K,
    a: A
) => <KS extends string>(r: Record<KS, A>) => Record<K | KS, A>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 78,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L78",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L78",
              },
              "type": "<K extends string, A>(k: K, a: A) => <KS extends string>(r: Record<KS, A>) => Record<K | KS, A>",
            },
            {
              "docs": [
                "/**
 * Test whether a record is empty
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.isEmpty",
              "kind": "function",
              "name": "isEmpty",
              "signature": "isEmpty: (r: Record<string, unknown>) => boolean;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L40",
              },
              "type": "(r: Record<string, unknown>) => boolean",
            },
            {
              "docs": [
                "/**
 * Test whether one record contains all of the keys and values contained in another record
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.isSubrecord",
              "kind": "function",
              "name": "isSubrecord",
              "signature": "isSubrecord: <A>(E: Eq<A>) => {
    (that: Record<string, A>): (me: Record<string, A>) => boolean;
    (me: Record<string, A>, that: Record<string, A>): boolean;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 118,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L118",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L118",
              },
              "type": "<A>(E: Eq<A>) => { (that: Record<string, A>): (me: Record<string, A>) => boolean; (me: Record<string, A>, that: Record<string, A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.keys",
              "kind": "function",
              "name": "keys",
              "signature": "keys: <K extends string>(r: Record<K, unknown>) => K[];",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 44,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L44",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L44",
              },
              "type": "<K extends string>(r: Record<K, unknown>) => K[]",
            },
            {
              "docs": [
                "/**
 * Map a record passing the values to the iterating function
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(
    f: (a: A) => B
) => <K extends string>(fa: Record<K, A>) => Record<K, B>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 165,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L165",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L165",
              },
              "type": "<A, B>(f: (a: A) => B) => <K extends string>(fa: Record<K, A>) => Record<K, B>",
            },
            {
              "docs": [
                "/**
 * Map a record passing the keys to the iterating function
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.mapWithIndex",
              "kind": "function",
              "name": "mapWithIndex",
              "signature": "mapWithIndex: <K extends string, A, B>(
    f: (k: K, a: A) => B
) => (fa: Record<K, A>) => Record<K, B>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 159,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L159",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L159",
              },
              "type": "<K extends string, A, B>(f: (k: K, a: A) => B) => (fa: Record<K, A>) => Record<K, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.modifyAt",
              "kind": "function",
              "name": "modifyAt",
              "signature": "modifyAt: <A>(
    k: string,
    f: (a: A) => A
) => <K extends string>(r: Record<K, A>) => Option<Record<K, A>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L101",
              },
              "type": "<A>(k: string, f: (a: A) => A) => <K extends string>(r: Record<K, A>) => Option<Record<K, A>>",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "record.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <A, B, C>(
    f: (a: A) => Either<B, C>
) => (fa: Record<string, A>) => Separated<Record<string, B>, Record<string, C>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 423,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L423",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L423",
              },
              "type": "<A, B, C>(f: (a: A) => Either<B, C>) => (fa: Record<string, A>) => Separated<Record<string, B>, Record<string, C>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.partitionMapWithIndex",
              "kind": "function",
              "name": "partitionMapWithIndex",
              "signature": "partitionMapWithIndex: <K extends string, A, B, C>(
    f: (key: K, a: A) => Either<B, C>
) => (fa: Record<K, A>) => Separated<Record<string, B>, Record<string, C>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 272,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L272",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L272",
              },
              "type": "<K extends string, A, B, C>(f: (key: K, a: A) => Either<B, C>) => (fa: Record<K, A>) => Separated<Record<string, B>, Record<string, C>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.partitionWithIndex",
              "kind": "function",
              "name": "partitionWithIndex",
              "signature": "partitionWithIndex: {
    <K extends string, A, B extends A>(
        refinementWithIndex: RefinementWithIndex<K, A, B>
    ): (fa: Record<K, A>) => Separated<Record<string, A>, Record<string, B>>;
    <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (
        fa: Record<K, A>
    ) => Separated<Record<string, A>, Record<string, A>>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 278,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L278",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L278",
              },
              "type": "{ <K extends string, A, B extends A>(refinementWithIndex: RefinementWithIndex<K, A, B>): (fa: Record<K, A>) => Separated<Record<string, A>, Record<string, B>>; <K extends string, A>(predicateWithIndex: PredicateWithIndex<K, A>): (fa: Record<K, A>) => Separated<Record<string, A>, Record<string, A>>; }",
            },
            {
              "docs": [
                "/**
 * Delete a key and value from a map, returning the value as well as the subsequent map
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.pop",
              "kind": "function",
              "name": "pop",
              "signature": "pop: <K extends string>(
    k: K
) => <KS extends string, A>(
    r: Record<KS, A>
) => Option<[A, Record<string extends K ? string : Exclude<KS, K>, A>]>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L110",
              },
              "type": "<K extends string>(k: K) => <KS extends string, A>(r: Record<KS, A>) => Option<[A, Record<string extends K ? string : Exclude<KS, K>, A>]>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "record.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: Record<string, A>) => B;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 430,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L430",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L430",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: Record<string, A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "record.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: Record<string, A>) => B;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 435,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L435",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L435",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: Record<string, A>) => B",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.reduceRightWithIndex",
              "kind": "function",
              "name": "reduceRightWithIndex",
              "signature": "reduceRightWithIndex: <K extends string, A, B>(
    b: B,
    f: (k: K, a: A, b: B) => B
) => (fa: Record<K, A>) => B;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 182,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L182",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L182",
              },
              "type": "<K extends string, A, B>(b: B, f: (k: K, a: A, b: B) => B) => (fa: Record<K, A>) => B",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.reduceWithIndex",
              "kind": "function",
              "name": "reduceWithIndex",
              "signature": "reduceWithIndex: <K extends string, A, B>(
    b: B,
    f: (k: K, b: B, a: A) => B
) => (fa: Record<K, A>) => B;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 169,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L169",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L169",
              },
              "type": "<K extends string, A, B>(b: B, f: (k: K, b: B, a: A) => B) => (fa: Record<K, A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Compactable
 * @since 2.0.0
 */",
              ],
              "id": "record.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <A, B>(
    fa: Record<string, Either<A, B>>
) => Separated<Record<string, A>, Record<string, B>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 445,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L445",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L445",
              },
              "type": "<A, B>(fa: Record<string, Either<A, B>>) => Separated<Record<string, A>, Record<string, B>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.sequence",
              "kind": "function",
              "name": "sequence",
              "signature": "sequence: {
    <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A>(
        ta: Record<K, Kind3<F, R, E, A>>
    ) => Kind3<F, R, E, Record<K, A>>;
    <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A>(
        ta: Record<K, Kind3<F, R, E, A>>
    ) => Kind3<F, R, E, Record<K, A>>;
    <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A>(
        ta: Record<K, Kind2<F, E, A>>
    ) => Kind2<F, E, Record<K, A>>;
    <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A>(
        ta: Record<K, Kind2<F, E, A>>
    ) => Kind2<F, E, Record<K, A>>;
    <F extends URIS>(F: Applicative1<F>): <K extends string, A>(
        ta: Record<K, Kind<F, A>>
    ) => Kind<F, Record<K, A>>;
    <F>(F: Applicative<F>): <K extends string, A>(
        ta: Record<K, HKT<F, A>>
    ) => HKT<F, Record<K, A>>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 241,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L241",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L241",
              },
              "type": "{ <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A>(ta: Record<K, Kind3<F, R, E, A>>) => Kind3<F, R, E, Record<K, A>>; <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A>(ta: Record<K, Kind3<F, R, E, A>>) => Kind3<F, R, E, Record<K, A>>; <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A>(ta: Record<K, Kind2<F, E, A>>) => Kind2<F, E, Record<K, A>>; <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A>(ta: Record<K, Kind2<F, E, A>>) => Kind2<F, E, Record<K, A>>; <F extends URIS>(F: Applicative1<F>): <K extends string, A>(ta: Record<K, Kind<F, A>>) => Kind<F, Record<K, A>>; <F>(F: Applicative<F>): <K extends string, A>(ta: Record<K, HKT<F, A>>) => HKT<F, Record<K, A>>; }",
            },
            {
              "docs": [
                "/**
 * Create a record with one key/value pair
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.singleton",
              "kind": "function",
              "name": "singleton",
              "signature": "singleton: <K extends string, A>(k: K, a: A) => Record<K, A>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 191,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L191",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L191",
              },
              "type": "<K extends string, A>(k: K, a: A) => Record<K, A>",
            },
            {
              "docs": [
                "/**
 * Calculate the number of key/value pairs in a record
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.size",
              "kind": "function",
              "name": "size",
              "signature": "size: (r: Record<string, unknown>) => number;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L34",
              },
              "type": "(r: Record<string, unknown>) => number",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.some",
              "kind": "function",
              "name": "some",
              "signature": "some: <A>(predicate: (a: A) => boolean) => (r: Record<string, A>) => boolean;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 381,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L381",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L381",
              },
              "type": "<A>(predicate: (a: A) => boolean) => (r: Record<string, A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.toArray",
              "kind": "function",
              "name": "toArray",
              "signature": "toArray: <K extends string, A>(r: Record<K, A>) => [K, A][];",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L63",
              },
              "type": "<K extends string, A>(r: Record<K, A>) => [K, A][]",
            },
            {
              "docs": [
                "/**
 * Unfolds a record into a list of key/value pairs
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.toUnfoldable",
              "kind": "function",
              "name": "toUnfoldable",
              "signature": "toUnfoldable: {
    <F extends URIS>(U: Unfoldable1<F>): <K extends string, A>(
        r: Record<K, A>
    ) => Kind<F, [K, A]>;
    <F>(U: Unfoldable<F>): <K extends string, A>(r: Record<K, A>) => HKT<F, [K, A]>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 69,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L69",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L69",
              },
              "type": "{ <F extends URIS>(U: Unfoldable1<F>): <K extends string, A>(r: Record<K, A>) => Kind<F, [K, A]>; <F>(U: Unfoldable<F>): <K extends string, A>(r: Record<K, A>) => HKT<F, [K, A]>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.traverse",
              "kind": "function",
              "name": "traverse",
              "signature": "traverse: {
    <F extends URIS3>(F: Applicative3<F>): <R, E, A, B>(
        f: (a: A) => Kind3<F, R, E, B>
    ) => <K extends string>(ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>;
    <F extends URIS3, E>(F: Applicative3C<F, E>): <R, A, B>(
        f: (a: A) => Kind3<F, R, E, B>
    ) => <K extends string>(ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>;
    <F extends URIS2>(F: Applicative2<F>): <E, A, B>(
        f: (a: A) => Kind2<F, E, B>
    ) => <K extends string>(ta: Record<K, A>) => Kind2<F, E, Record<K, B>>;
    <F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
        f: (a: A) => Kind2<F, E, B>
    ) => <K extends string>(ta: Record<K, A>) => Kind2<F, E, Record<K, B>>;
    <F extends URIS>(F: Applicative1<F>): <A, B>(
        f: (a: A) => Kind<F, B>
    ) => <K extends string>(ta: Record<K, A>) => Kind<F, Record<K, B>>;
    <F>(F: Applicative<F>): <A, B>(
        f: (a: A) => HKT<F, B>
    ) => <K extends string>(ta: Record<K, A>) => HKT<F, Record<K, B>>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 220,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L220",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L220",
              },
              "type": "{ <F extends URIS3>(F: Applicative3<F>): <R, E, A, B>(f: (a: A) => Kind3<F, R, E, B>) => <K extends string>(ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>; <F extends URIS3, E>(F: Applicative3C<F, E>): <R, A, B>(f: (a: A) => Kind3<F, R, E, B>) => <K extends string>(ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>; <F extends URIS2>(F: Applicative2<F>): <E, A, B>(f: (a: A) => Kind2<F, E, B>) => <K extends string>(ta: Record<K, A>) => Kind2<F, E, Record<K, B>>; <F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(f: (a: A) => Kind2<F, E, B>) => <K extends string>(ta: Record<K, A>) => Kind2<F, E, Record<K, B>>; <F extends URIS>(F: Applicative1<F>): <A, B>(f: (a: A) => Kind<F, B>) => <K extends string>(ta: Record<K, A>) => Kind<F, Record<K, B>>; <F>(F: Applicative<F>): <A, B>(f: (a: A) => HKT<F, B>) => <K extends string>(ta: Record<K, A>) => HKT<F, Record<K, B>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.traverseWithIndex",
              "kind": "function",
              "name": "traverseWithIndex",
              "signature": "traverseWithIndex: {
    <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A, B>(
        f: (k: K, a: A) => Kind3<F, R, E, B>
    ) => (ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>;
    <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A, B>(
        f: (k: K, a: A) => Kind3<F, R, E, B>
    ) => (ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>;
    <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A, B>(
        f: (k: K, a: A) => Kind2<F, E, B>
    ) => (ta: Record<K, A>) => Kind2<F, E, Record<K, B>>;
    <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A, B>(
        f: (k: K, a: A) => Kind2<F, E, B>
    ) => (ta: Record<K, A>) => Kind2<F, E, Record<K, B>>;
    <F extends URIS>(F: Applicative1<F>): <K extends string, A, B>(
        f: (k: K, a: A) => Kind<F, B>
    ) => (ta: Record<K, A>) => Kind<F, Record<K, B>>;
    <F>(F: Applicative<F>): <K extends string, A, B>(
        f: (k: K, a: A) => HKT<F, B>
    ) => (ta: Record<K, A>) => HKT<F, Record<K, B>>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 195,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L195",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L195",
              },
              "type": "{ <F extends URIS3>(F: Applicative3<F>): <K extends string, R, E, A, B>(f: (k: K, a: A) => Kind3<F, R, E, B>) => (ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>; <F extends URIS3, E>(F: Applicative3C<F, E>): <K extends string, R, A, B>(f: (k: K, a: A) => Kind3<F, R, E, B>) => (ta: Record<K, A>) => Kind3<F, R, E, Record<K, B>>; <F extends URIS2>(F: Applicative2<F>): <K extends string, E, A, B>(f: (k: K, a: A) => Kind2<F, E, B>) => (ta: Record<K, A>) => Kind2<F, E, Record<K, B>>; <F extends URIS2, E>(F: Applicative2C<F, E>): <K extends string, A, B>(f: (k: K, a: A) => Kind2<F, E, B>) => (ta: Record<K, A>) => Kind2<F, E, Record<K, B>>; <F extends URIS>(F: Applicative1<F>): <K extends string, A, B>(f: (k: K, a: A) => Kind<F, B>) => (ta: Record<K, A>) => Kind<F, Record<K, B>>; <F>(F: Applicative<F>): <K extends string, A, B>(f: (k: K, a: A) => HKT<F, B>) => (ta: Record<K, A>) => HKT<F, Record<K, B>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.updateAt",
              "kind": "function",
              "name": "updateAt",
              "signature": "updateAt: <A>(
    k: string,
    a: A
) => <K extends string>(r: Record<K, A>) => Option<Record<K, A>>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 97,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L97",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L97",
              },
              "type": "<A>(k: string, a: A) => <K extends string>(r: Record<K, A>) => Option<Record<K, A>>",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "record.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 457,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L457",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L457",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.Compactable",
              "kind": "variable",
              "name": "Compactable",
              "signature": "const Compactable: Compactable1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 487,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L487",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L487",
              },
              "type": "Compactable1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "record.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: Record<string, never>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L153",
              },
              "type": "Record<string, never>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "record.filter",
              "kind": "variable",
              "name": "filter",
              "signature": "const filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Record<string, A>
    ) => Record<string, B>;
    <A>(predicate: Predicate<A>): (fa: Record<string, A>) => Record<string, A>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 395,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L395",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L395",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Record<string, A>) => Record<string, B>; <A>(predicate: Predicate<A>): (fa: Record<string, A>) => Record<string, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.Filterable",
              "kind": "variable",
              "name": "Filterable",
              "signature": "const Filterable: Filterable1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 492,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L492",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L492",
              },
              "type": "Filterable1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.FilterableWithIndex",
              "kind": "variable",
              "name": "FilterableWithIndex",
              "signature": "const FilterableWithIndex: FilterableWithIndex1<'Record', string>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 497,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L497",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L497",
              },
              "type": "FilterableWithIndex1<"Record", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 477,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L477",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L477",
              },
              "type": "Foldable1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.FoldableWithIndex",
              "kind": "variable",
              "name": "FoldableWithIndex",
              "signature": "const FoldableWithIndex: FoldableWithIndex1<'Record', string>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 482,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L482",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L482",
              },
              "type": "FoldableWithIndex1<"Record", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 467,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L467",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L467",
              },
              "type": "Functor1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.FunctorWithIndex",
              "kind": "variable",
              "name": "FunctorWithIndex",
              "signature": "const FunctorWithIndex: FunctorWithIndex1<'Record', string>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 472,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L472",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L472",
              },
              "type": "FunctorWithIndex1<"Record", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Lookup the value for a key in a record
 *
 * @since 2.0.0
 */",
              ],
              "id": "record.lookup",
              "kind": "variable",
              "name": "lookup",
              "signature": "const lookup: {
    (k: string): <A>(r: Record<string, A>) => Option<A>;
    <A>(k: string, r: Record<string, A>): Option<A>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 146,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L146",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L146",
              },
              "type": "{ (k: string): <A>(r: Record<string, A>) => Option<A>; <A>(k: string, r: Record<string, A>): Option<A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Filterable
 * @since 2.0.0
 */",
              ],
              "id": "record.partition",
              "kind": "variable",
              "name": "partition",
              "signature": "const partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        fa: Record<string, A>
    ) => Separated<Record<string, A>, Record<string, B>>;
    <A>(predicate: Predicate<A>): (
        fa: Record<string, A>
    ) => Separated<Record<string, A>, Record<string, A>>;
};",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 413,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L413",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L413",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (fa: Record<string, A>) => Separated<Record<string, A>, Record<string, B>>; <A>(predicate: Predicate<A>): (fa: Record<string, A>) => Separated<Record<string, A>, Record<string, A>>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "record.record",
              "kind": "variable",
              "name": "record",
              "signature": "const record: FunctorWithIndex1<'Record', string> &
    FoldableWithIndex1<'Record', string> &
    FilterableWithIndex1<'Record', string> &
    TraversableWithIndex1<'Record', string> &
    Witherable1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 517,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L517",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L517",
              },
              "type": "FunctorWithIndex1<"Record", string> & FoldableWithIndex1<"Record", string> & FilterableWithIndex1<"Record", string> & TraversableWithIndex1<"Record", string> & Witherable1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 502,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L502",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L502",
              },
              "type": "Traversable1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.TraversableWithIndex",
              "kind": "variable",
              "name": "TraversableWithIndex",
              "signature": "const TraversableWithIndex: TraversableWithIndex1<'Record', string>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 507,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L507",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L507",
              },
              "type": "TraversableWithIndex1<"Record", string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "record.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 452,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L452",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L452",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "record.wilt",
              "kind": "variable",
              "name": "wilt",
              "signature": "const wilt: PipeableWilt1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 268,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L268",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L268",
              },
              "type": "PipeableWilt1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category Witherable
 * @since 2.6.5
 */",
              ],
              "id": "record.wither",
              "kind": "variable",
              "name": "wither",
              "signature": "const wither: PipeableWither1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 263,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L263",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L263",
              },
              "type": "PipeableWither1<"Record">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "record.Witherable",
              "kind": "variable",
              "name": "Witherable",
              "signature": "const Witherable: Witherable1<'Record'>;",
              "source": {
                "filename": "lib/Record.d.ts",
                "line": 512,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L512",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L512",
              },
              "type": "Witherable1<"Record">",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "record",
        "kind": "namespace",
        "name": "record",
        "signature": "module 'lib/Record.d.ts' {}",
        "source": {
          "filename": "lib/Record.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ring.getFunctionRing",
              "kind": "function",
              "name": "getFunctionRing",
              "signature": "getFunctionRing: <A, B>(ring: Ring<B>) => Ring<(a: A) => B>;",
              "source": {
                "filename": "lib/Ring.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ring.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ring.d.ts#L24",
              },
              "type": "<A, B>(ring: Ring<B>) => Ring<(a: A) => B>",
            },
            {
              "docs": [
                "/**
 * Given a tuple of \`Ring\`s returns a \`Ring\` for the tuple
 *
 * @example
 * import { getTupleRing } from 'fp-ts/Ring'
 * import { fieldNumber } from 'fp-ts/Field'
 *
 * const R = getTupleRing(fieldNumber, fieldNumber, fieldNumber)
 * assert.deepStrictEqual(R.add([1, 2, 3], [4, 5, 6]), [5, 7, 9])
 * assert.deepStrictEqual(R.mul([1, 2, 3], [4, 5, 6]), [4, 10, 18])
 * assert.deepStrictEqual(R.one, [1, 1, 1])
 * assert.deepStrictEqual(R.sub([1, 2, 3], [4, 5, 6]), [-3, -3, -3])
 * assert.deepStrictEqual(R.zero, [0, 0, 0])
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "ring.getTupleRing",
              "kind": "function",
              "name": "getTupleRing",
              "signature": "getTupleRing: <T extends readonly Ring<any>[]>(
    ...rings: T
) => Ring<{ [K in keyof T]: T[K] extends Ring<infer A> ? A : never }>;",
              "source": {
                "filename": "lib/Ring.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ring.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ring.d.ts#L48",
              },
              "type": "<T extends readonly Ring<any>[]>(...rings: T) => Ring<{ [K in keyof T]: T[K] extends Ring<infer A> ? A : never; }>",
            },
            {
              "docs": [
                "/**
 * \`negate x\` can be used as a shorthand for \`zero - x\`
 *
 * @since 2.0.0
 */",
              ],
              "id": "ring.negate",
              "kind": "function",
              "name": "negate",
              "signature": "negate: <A>(ring: Ring<A>) => (a: A) => A;",
              "source": {
                "filename": "lib/Ring.d.ts",
                "line": 30,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ring.d.ts#L30",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ring.d.ts#L30",
              },
              "type": "<A>(ring: Ring<A>) => (a: A) => A",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "ring.Ring",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "ring.Ring.sub",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sub",
                    "signature": "readonly sub: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/Ring.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ring.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ring.d.ts#L18",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                ],
              },
              "name": "Ring",
              "signature": "interface Ring<A> extends Semiring<A> {}",
              "source": {
                "filename": "lib/Ring.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ring.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ring.d.ts#L17",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Ring\` class is for types that support addition, multiplication, and subtraction operations.
 *
 * Instances must satisfy the following law in addition to the \`Semiring\` laws:
 *
 * - Additive inverse: \`a - a <-> (zero - a) + a <-> zero\`
 *
 * Adapted from https://github.com/purescript/purescript-prelude/blob/master/src/Data/Ring.purs
 *
 * @since 2.0.0
 */",
        ],
        "id": "ring",
        "kind": "namespace",
        "name": "ring",
        "signature": "module 'lib/Ring.d.ts' {}",
        "source": {
          "filename": "lib/Ring.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ring.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ring.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Given a sequence of \`as\`, concat them and return the total.
 *
 * If \`as\` is empty, return the provided \`startWith\` value.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * const sum = S.fold(S.semigroupSum)(0)
 *
 * assert.deepStrictEqual(sum([1, 2, 3]), 6)
 * assert.deepStrictEqual(sum([]), 0)
 *
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <A>(S: Semigroup<A>) => {
    (startWith: A): (as: ReadonlyArray<A>) => A;
    (startWith: A, as: ReadonlyArray<A>): A;
};",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L24",
              },
              "type": "<A>(S: Semigroup<A>) => { (startWith: A): (as: ReadonlyArray<A>) => A; (startWith: A, as: ReadonlyArray<A>): A; }",
            },
            {
              "docs": [
                "/**
 * The dual of a \`Semigroup\`, obtained by swapping the arguments of \`concat\`.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.getDualSemigroup(S.semigroupString).concat('a', 'b'), 'ba')
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getDualSemigroup",
              "kind": "function",
              "name": "getDualSemigroup",
              "signature": "getDualSemigroup: <A>(S: Semigroup<A>) => Semigroup<A>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 87,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L87",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L87",
              },
              "type": "<A>(S: Semigroup<A>) => Semigroup<A>",
            },
            {
              "docs": [
                "/**
 * Always return the first argument.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.getFirstSemigroup<number>().concat(1, 2), 1)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getFirstSemigroup",
              "kind": "function",
              "name": "getFirstSemigroup",
              "signature": "getFirstSemigroup: <A = never>() => Semigroup<A>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L41",
              },
              "type": "<A = never>() => Semigroup<A>",
            },
            {
              "docs": [
                "/**
 * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.
 *
 * @example
 * import { Predicate } from 'fp-ts/function'
 * import * as S from 'fp-ts/Semigroup'
 *
 * const f: Predicate<number> = (n) => n <= 2
 * const g: Predicate<number> = (n) => n >= 0
 *
 * const S1 = S.getFunctionSemigroup(S.semigroupAll)<number>()
 *
 * assert.deepStrictEqual(S1.concat(f, g)(1), true)
 * assert.deepStrictEqual(S1.concat(f, g)(3), false)
 *
 * const S2 = S.getFunctionSemigroup(S.semigroupAny)<number>()
 *
 * assert.deepStrictEqual(S2.concat(f, g)(1), true)
 * assert.deepStrictEqual(S2.concat(f, g)(3), true)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getFunctionSemigroup",
              "kind": "function",
              "name": "getFunctionSemigroup",
              "signature": "getFunctionSemigroup: <S>(
    S: Semigroup<S>
) => <A = never>() => Semigroup<(a: A) => S>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 111,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L111",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L111",
              },
              "type": "<S>(S: Semigroup<S>) => <A = never>() => Semigroup<(a: A) => S>",
            },
            {
              "docs": [
                "/**
 * You can glue items between and stay associative.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * const S1 = S.getIntercalateSemigroup(' ')(S.semigroupString)
 *
 * assert.strictEqual(S1.concat('a', 'b'), 'a b')
 * assert.strictEqual(S1.concat(S1.concat('a', 'b'), 'c'), S1.concat('a', S1.concat('b', 'c')))
 *
 * @category instances
 * @since 2.5.0
 */",
              ],
              "id": "semigroup.getIntercalateSemigroup",
              "kind": "function",
              "name": "getIntercalateSemigroup",
              "signature": "getIntercalateSemigroup: <A>(a: A) => (S: Semigroup<A>) => Semigroup<A>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 268,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L268",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L268",
              },
              "type": "<A>(a: A) => (S: Semigroup<A>) => Semigroup<A>",
            },
            {
              "docs": [
                "/**
 * Get a semigroup where \`concat\` will return the maximum, based on the provided order.
 *
 * @example
 * import * as O from 'fp-ts/Ord'
 * import * as S from 'fp-ts/Semigroup'
 *
 * const S1 = S.getJoinSemigroup(O.ordNumber)
 *
 * assert.deepStrictEqual(S1.concat(1, 2), 2)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getJoinSemigroup",
              "kind": "function",
              "name": "getJoinSemigroup",
              "signature": "getJoinSemigroup: <A>(O: Ord<A>) => Semigroup<A>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 167,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L167",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L167",
              },
              "type": "<A>(O: Ord<A>) => Semigroup<A>",
            },
            {
              "docs": [
                "/**
 * Always return the last argument.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.getLastSemigroup<number>().concat(1, 2), 2)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getLastSemigroup",
              "kind": "function",
              "name": "getLastSemigroup",
              "signature": "getLastSemigroup: <A = never>() => Semigroup<A>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L53",
              },
              "type": "<A = never>() => Semigroup<A>",
            },
            {
              "docs": [
                "/**
 * Get a semigroup where \`concat\` will return the minimum, based on the provided order.
 *
 * @example
 * import * as O from 'fp-ts/Ord'
 * import * as S from 'fp-ts/Semigroup'
 *
 * const S1 = S.getMeetSemigroup(O.ordNumber)
 *
 * assert.deepStrictEqual(S1.concat(1, 2), 1)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getMeetSemigroup",
              "kind": "function",
              "name": "getMeetSemigroup",
              "signature": "getMeetSemigroup: <A>(O: Ord<A>) => Semigroup<A>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 152,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L152",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L152",
              },
              "type": "<A>(O: Ord<A>) => Semigroup<A>",
            },
            {
              "docs": [
                "/**
 * Return a semigroup for objects, preserving their type.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * interface Person {
 *   name: string
 *   age: number
 * }
 *
 * const S1 = S.getObjectSemigroup<Person>()
 * assert.deepStrictEqual(S1.concat({ name: 'name', age: 23 }, { name: 'name', age: 24 }), { name: 'name', age: 24 })
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getObjectSemigroup",
              "kind": "function",
              "name": "getObjectSemigroup",
              "signature": "getObjectSemigroup: <A extends object = never>() => Semigroup<A>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 185,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L185",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L185",
              },
              "type": "<A extends object = never>() => Semigroup<A>",
            },
            {
              "docs": [
                "/**
 * Given a struct of semigroups returns a semigroup for the struct.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * interface Point {
 *   readonly x: number
 *   readonly y: number
 * }
 *
 * const semigroupPoint = S.getStructSemigroup<Point>({
 *   x: S.semigroupSum,
 *   y: S.semigroupSum
 * })
 *
 * assert.deepStrictEqual(semigroupPoint.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getStructSemigroup",
              "kind": "function",
              "name": "getStructSemigroup",
              "signature": "getStructSemigroup: <O extends Readonly<Record<string, any>>>(semigroups: {
    [K in keyof O]: Semigroup<O[K]>;
}) => Semigroup<O>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 133,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L133",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L133",
              },
              "type": "<O extends Readonly<Record<string, any>>>(semigroups: { [K in keyof O]: Semigroup<O[K]>; }) => Semigroup<O>",
            },
            {
              "docs": [
                "/**
 * Given a tuple of semigroups returns a semigroup for the tuple.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * const S1 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum)
 * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])
 *
 * const S2 = S.getTupleSemigroup(S.semigroupString, S.semigroupSum, S.semigroupAll)
 * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.getTupleSemigroup",
              "kind": "function",
              "name": "getTupleSemigroup",
              "signature": "getTupleSemigroup: <T extends readonly Semigroup<any>[]>(
    ...semigroups: T
) => Semigroup<{ [K in keyof T]: T[K] extends Semigroup<infer A> ? A : never }>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 69,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L69",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L69",
              },
              "type": "<T extends readonly Semigroup<any>[]>(...semigroups: T) => Semigroup<{ [K in keyof T]: T[K] extends Semigroup<infer A> ? A : never; }>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.Semigroup",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Semigroup",
              "signature": "interface Semigroup<A> extends Magma<A> {}",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 8,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L8",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L8",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * \`boolean\` semigroup under conjunction.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.semigroupAll.concat(true, true), true)
 * assert.deepStrictEqual(S.semigroupAll.concat(true, false), false)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.semigroupAll",
              "kind": "variable",
              "name": "semigroupAll",
              "signature": "const semigroupAll: Semigroup<boolean>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 198,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L198",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L198",
              },
              "type": "Semigroup<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`boolean\` semigroup under disjunction.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.semigroupAny.concat(true, true), true)
 * assert.deepStrictEqual(S.semigroupAny.concat(true, false), true)
 * assert.deepStrictEqual(S.semigroupAny.concat(false, false), false)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.semigroupAny",
              "kind": "variable",
              "name": "semigroupAny",
              "signature": "const semigroupAny: Semigroup<boolean>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 212,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L212",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L212",
              },
              "type": "Semigroup<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`number\` semigroup under multiplication.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.semigroupProduct.concat(2, 3), 6)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.semigroupProduct",
              "kind": "variable",
              "name": "semigroupProduct",
              "signature": "const semigroupProduct: Semigroup<number>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 236,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L236",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L236",
              },
              "type": "Semigroup<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`string\` semigroup under concatenation.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.semigroupString.concat('a', 'b'), 'ab')
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.semigroupString",
              "kind": "variable",
              "name": "semigroupString",
              "signature": "const semigroupString: Semigroup<string>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 248,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L248",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L248",
              },
              "type": "Semigroup<string>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * \`number\` semigroup under addition.
 *
 * @example
 * import * as S from 'fp-ts/Semigroup'
 *
 * assert.deepStrictEqual(S.semigroupSum.concat(2, 3), 5)
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.semigroupSum",
              "kind": "variable",
              "name": "semigroupSum",
              "signature": "const semigroupSum: Semigroup<number>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 224,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L224",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L224",
              },
              "type": "Semigroup<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semigroup.semigroupVoid",
              "kind": "variable",
              "name": "semigroupVoid",
              "signature": "const semigroupVoid: Semigroup<void>;",
              "source": {
                "filename": "lib/Semigroup.d.ts",
                "line": 253,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L253",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L253",
              },
              "type": "Semigroup<void>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @category type classes
 * @since 2.0.0
 */",
        ],
        "id": "semigroup",
        "kind": "namespace",
        "name": "semigroup",
        "signature": "module 'lib/Semigroup.d.ts' {}",
        "source": {
          "filename": "lib/Semigroup.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "semigroupoid.Semigroupoid",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <A, B, C>(
    bc: HKT2<F, B, C>,
    ab: HKT2<F, A, B>
) => HKT2<F, A, C>;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 11,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L11",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L11",
                    },
                    "type": "<A, B, C>(bc: HKT2<F, B, C>, ab: HKT2<F, A, B>) => HKT2<F, A, C>",
                  },
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 10,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L10",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L10",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Semigroupoid",
              "signature": "interface Semigroupoid<F> {}",
              "source": {
                "filename": "lib/Semigroupoid.d.ts",
                "line": 9,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L9",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L9",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "semigroupoid.Semigroupoid2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid2.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <A, B, C>(
    ab: Kind2<F, B, C>,
    la: Kind2<F, A, B>
) => Kind2<F, A, C>;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L19",
                    },
                    "type": "<A, B, C>(ab: Kind2<F, B, C>, la: Kind2<F, A, B>) => Kind2<F, A, C>",
                  },
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L18",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Semigroupoid2",
              "signature": "interface Semigroupoid2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Semigroupoid.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "semigroupoid.Semigroupoid2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid2C.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <B, C>(
    ab: Kind2<F, B, C>,
    la: Kind2<F, A, B>
) => Kind2<F, A, C>;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L28",
                    },
                    "type": "<B, C>(ab: Kind2<F, B, C>, la: Kind2<F, A, B>) => Kind2<F, A, C>",
                  },
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L26",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Semigroupoid2C",
              "signature": "interface Semigroupoid2C<F extends URIS2, A> {}",
              "source": {
                "filename": "lib/Semigroupoid.d.ts",
                "line": 25,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L25",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L25",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "semigroupoid.Semigroupoid3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid3.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <R, A, B, C>(
    ab: Kind3<F, R, B, C>,
    la: Kind3<F, R, A, B>
) => Kind3<F, R, A, C>;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 36,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L36",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L36",
                    },
                    "type": "<R, A, B, C>(ab: Kind3<F, R, B, C>, la: Kind3<F, R, A, B>) => Kind3<F, R, A, C>",
                  },
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 35,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L35",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L35",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Semigroupoid3",
              "signature": "interface Semigroupoid3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Semigroupoid.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L34",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.2.0
 */",
              ],
              "id": "semigroupoid.Semigroupoid3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid3C.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <R, B, C>(
    ab: Kind3<F, R, B, C>,
    la: Kind3<F, R, A, B>
) => Kind3<F, R, A, C>;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 45,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L45",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L45",
                    },
                    "type": "<R, B, C>(ab: Kind3<F, R, B, C>, la: Kind3<F, R, A, B>) => Kind3<F, R, A, C>",
                  },
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid3C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L43",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Semigroupoid3C",
              "signature": "interface Semigroupoid3C<F extends URIS3, A> {}",
              "source": {
                "filename": "lib/Semigroupoid.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L42",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "semigroupoid.Semigroupoid4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid4.compose",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "compose",
                    "signature": "readonly compose: <S, R, A, B, C>(
    ab: Kind4<F, S, R, B, C>,
    la: Kind4<F, S, R, A, B>
) => Kind4<F, S, R, A, C>;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L53",
                    },
                    "type": "<S, R, A, B, C>(ab: Kind4<F, S, R, B, C>, la: Kind4<F, S, R, A, B>) => Kind4<F, S, R, A, C>",
                  },
                  {
                    "docs": [],
                    "id": "semigroupoid.Semigroupoid4.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Semigroupoid.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L52",
                    },
                    "type": "URIS4",
                  },
                ],
              },
              "name": "Semigroupoid4",
              "signature": "interface Semigroupoid4<F extends URIS4> {}",
              "source": {
                "filename": "lib/Semigroupoid.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L51",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "semigroupoid",
        "kind": "namespace",
        "name": "semigroupoid",
        "signature": "module 'lib/Semigroupoid.d.ts' {}",
        "source": {
          "filename": "lib/Semigroupoid.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "semiring.getFunctionSemiring",
              "kind": "function",
              "name": "getFunctionSemiring",
              "signature": "getFunctionSemiring: <A, B>(S: Semiring<B>) => Semiring<(a: A) => B>;",
              "source": {
                "filename": "lib/Semiring.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts#L38",
              },
              "type": "<A, B>(S: Semiring<B>) => Semiring<(a: A) => B>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "semiring.Semiring",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "semiring.Semiring.add",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "add",
                    "signature": "readonly add: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/Semiring.d.ts",
                      "line": 29,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts#L29",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts#L29",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                  {
                    "docs": [],
                    "id": "semiring.Semiring.mul",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mul",
                    "signature": "readonly mul: (x: A, y: A) => A;",
                    "source": {
                      "filename": "lib/Semiring.d.ts",
                      "line": 31,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts#L31",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts#L31",
                    },
                    "type": "(x: A, y: A) => A",
                  },
                  {
                    "docs": [],
                    "id": "semiring.Semiring.one",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "one",
                    "signature": "readonly one: A;",
                    "source": {
                      "filename": "lib/Semiring.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts#L32",
                    },
                    "type": "{}",
                  },
                  {
                    "docs": [],
                    "id": "semiring.Semiring.zero",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "zero",
                    "signature": "readonly zero: A;",
                    "source": {
                      "filename": "lib/Semiring.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts#L30",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Semiring",
              "signature": "interface Semiring<A> {}",
              "source": {
                "filename": "lib/Semiring.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts#L28",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Semiring\` class is for types that support an addition and multiplication operation.
 *
 * Instances must satisfy the following laws:
 *
 * - Commutative monoid under addition:
 *   - Associativity: \`(a + b) + c <-> a + (b + c)\`
 *   - Identity: \`zero + a = a + zero <-> a\`
 *   - Commutative: \`a + b <-> b + a\`
 * - Monoid under multiplication:
 *   - Associativity: \`(a * b) * c <-> a * (b * c)\`
 *   - Identity: \`one * a <-> a * one <-> a\`
 * - Multiplication distributes over addition:
 *   - Left distributivity: \`a * (b + c) <-> (a * b) + (a * c)\`
 *   - Right distributivity: \`(a + b) * c <-> (a * c) + (b * c)\`
 * - Annihilation: \`zero * a <-> a * zero <-> zero\`
 *
 * **Note:** The \`number\` type is not fully law abiding members of this class hierarchy due to the potential
 * for arithmetic overflows, and the presence of \`NaN\` and \`Infinity\` values. The behaviour is
 * unspecified in these cases.
 *
 * @since 2.0.0
 */",
        ],
        "id": "semiring",
        "kind": "namespace",
        "name": "semiring",
        "signature": "module 'lib/Semiring.d.ts' {}",
        "source": {
          "filename": "lib/Semiring.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <B>(E: Eq<B>) => <A>(f: (x: A) => Set<B>) => (set: Set<A>) => Set<B>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 54,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L54",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L54",
              },
              "type": "<B>(E: Eq<B>) => <A>(f: (x: A) => Set<B>) => (set: Set<A>) => Set<B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.compact",
              "kind": "function",
              "name": "compact",
              "signature": "compact: <A>(E: Eq<A>) => (fa: Set<Option<A>>) => Set<A>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 199,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L199",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L199",
              },
              "type": "<A>(E: Eq<A>) => (fa: Set<Option<A>>) => Set<A>",
            },
            {
              "docs": [
                "/**
 * Form the set difference (\`x\` - \`y\`)
 *
 * @example
 * import { difference } from 'fp-ts/Set'
 * import { eqNumber } from 'fp-ts/Eq'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe(new Set([1, 2]), difference(eqNumber)(new Set([1, 3]))), new Set([2]))
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.difference",
              "kind": "function",
              "name": "difference",
              "signature": "difference: <A>(E: Eq<A>) => {
    (that: Set<A>): (me: Set<A>) => Set<A>;
    (me: Set<A>, that: Set<A>): Set<A>;
};",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 134,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L134",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L134",
              },
              "type": "<A>(E: Eq<A>) => { (that: Set<A>): (me: Set<A>) => Set<A>; (me: Set<A>, that: Set<A>): Set<A>; }",
            },
            {
              "docs": [
                "/**
 * Test if a value is a member of a set
 *
 * @since 2.0.0
 */",
              ],
              "id": "set.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => {
    (a: A): (set: Set<A>) => boolean;
    (a: A, set: Set<A>): boolean;
};",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L84",
              },
              "type": "<A>(E: Eq<A>) => { (a: A): (set: Set<A>) => boolean; (a: A, set: Set<A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.every",
              "kind": "function",
              "name": "every",
              "signature": "every: <A>(predicate: Predicate<A>) => (set: Set<A>) => boolean;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L47",
              },
              "type": "<A>(predicate: Predicate<A>) => (set: Set<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.filter",
              "kind": "function",
              "name": "filter",
              "signature": "filter: {
    <A, B extends A>(refinement: Refinement<A, B>): (set: Set<A>) => Set<B>;
    <A>(predicate: Predicate<A>): (set: Set<A>) => Set<A>;
};",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 70,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L70",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L70",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (set: Set<A>) => Set<B>; <A>(predicate: Predicate<A>): (set: Set<A>) => Set<A>; }",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.filterMap",
              "kind": "function",
              "name": "filterMap",
              "signature": "filterMap: <B>(
    E: Eq<B>
) => <A>(f: (a: A) => Option<B>) => (fa: Set<A>) => Set<B>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 208,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L208",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L208",
              },
              "type": "<B>(E: Eq<B>) => <A>(f: (a: A) => Option<B>) => (fa: Set<A>) => Set<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <A, M>(
    O: Ord<A>,
    M: Monoid<M>
) => (f: (a: A) => M) => (fa: Set<A>) => M;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L157",
              },
              "type": "<A, M>(O: Ord<A>, M: Monoid<M>) => (f: (a: A) => M) => (fa: Set<A>) => M",
            },
            {
              "docs": [
                "/**
 * Create a set from an array
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "set.fromArray",
              "kind": "function",
              "name": "fromArray",
              "signature": "fromArray: <A>(E: Eq<A>) => (as: A[]) => Set<A>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L194",
              },
              "type": "<A>(E: Eq<A>) => (as: A[]) => Set<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "set.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<Set<A>>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L31",
              },
              "type": "<A>(E: Eq<A>) => Eq<Set<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "set.getIntersectionSemigroup",
              "kind": "function",
              "name": "getIntersectionSemigroup",
              "signature": "getIntersectionSemigroup: <A>(E: Eq<A>) => Semigroup<Set<A>>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 149,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L149",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L149",
              },
              "type": "<A>(E: Eq<A>) => Semigroup<Set<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "set.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<Set<A>>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L17",
              },
              "type": "<A>(S: Show<A>) => Show<Set<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "set.getUnionMonoid",
              "kind": "function",
              "name": "getUnionMonoid",
              "signature": "getUnionMonoid: <A>(E: Eq<A>) => Monoid<Set<A>>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L144",
              },
              "type": "<A>(E: Eq<A>) => Monoid<Set<A>>",
            },
            {
              "docs": [
                "/**
 * Insert a value into a set
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.insert",
              "kind": "function",
              "name": "insert",
              "signature": "insert: <A>(E: Eq<A>) => (a: A) => (set: Set<A>) => Set<A>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L171",
              },
              "type": "<A>(E: Eq<A>) => (a: A) => (set: Set<A>) => Set<A>",
            },
            {
              "docs": [
                "/**
 * The set of elements which are in both the first and second set
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.intersection",
              "kind": "function",
              "name": "intersection",
              "signature": "intersection: <A>(E: Eq<A>) => {
    (that: Set<A>): (me: Set<A>) => Set<A>;
    (me: Set<A>, that: Set<A>): Set<A>;
};",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 108,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L108",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L108",
              },
              "type": "<A>(E: Eq<A>) => { (that: Set<A>): (me: Set<A>) => Set<A>; (me: Set<A>, that: Set<A>): Set<A>; }",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <B>(E: Eq<B>) => <A>(f: (x: A) => B) => (set: Set<A>) => Set<B>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 43,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L43",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L43",
              },
              "type": "<B>(E: Eq<B>) => <A>(f: (x: A) => B) => (set: Set<A>) => Set<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.partition",
              "kind": "function",
              "name": "partition",
              "signature": "partition: {
    <A, B extends A>(refinement: Refinement<A, B>): (
        set: Set<A>
    ) => Separated<Set<A>, Set<B>>;
    <A>(predicate: Predicate<A>): (set: Set<A>) => Separated<Set<A>, Set<A>>;
};",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 75,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L75",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L75",
              },
              "type": "{ <A, B extends A>(refinement: Refinement<A, B>): (set: Set<A>) => Separated<Set<A>, Set<B>>; <A>(predicate: Predicate<A>): (set: Set<A>) => Separated<Set<A>, Set<A>>; }",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.partitionMap",
              "kind": "function",
              "name": "partitionMap",
              "signature": "partitionMap: <B, C>(
    EB: Eq<B>,
    EC: Eq<C>
) => <A>(f: (a: A) => Either<B, C>) => (set: Set<A>) => Separated<Set<B>, Set<C>>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 117,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L117",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L117",
              },
              "type": "<B, C>(EB: Eq<B>, EC: Eq<C>) => <A>(f: (a: A) => Either<B, C>) => (set: Set<A>) => Separated<Set<B>, Set<C>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A>(O: Ord<A>) => <B>(b: B, f: (b: B, a: A) => B) => (fa: Set<A>) => B;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L153",
              },
              "type": "<A>(O: Ord<A>) => <B>(b: B, f: (b: B, a: A) => B) => (fa: Set<A>) => B",
            },
            {
              "docs": [
                "/**
 * Delete a value from a set
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.remove",
              "kind": "function",
              "name": "remove",
              "signature": "remove: <A>(E: Eq<A>) => (a: A) => (set: Set<A>) => Set<A>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L178",
              },
              "type": "<A>(E: Eq<A>) => (a: A) => (set: Set<A>) => Set<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.separate",
              "kind": "function",
              "name": "separate",
              "signature": "separate: <E, A>(
    EE: Eq<E>,
    EA: Eq<A>
) => (fa: Set<Either<E, A>>) => Separated<Set<E>, Set<A>>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L203",
              },
              "type": "<E, A>(EE: Eq<E>, EA: Eq<A>) => (fa: Set<Either<E, A>>) => Separated<Set<E>, Set<A>>",
            },
            {
              "docs": [
                "/**
 * Create a set with one element
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "set.singleton",
              "kind": "function",
              "name": "singleton",
              "signature": "singleton: <A>(a: A) => Set<A>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 164,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L164",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L164",
              },
              "type": "<A>(a: A) => Set<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.some",
              "kind": "function",
              "name": "some",
              "signature": "some: <A>(predicate: Predicate<A>) => (set: Set<A>) => boolean;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 35,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L35",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L35",
              },
              "type": "<A>(predicate: Predicate<A>) => (set: Set<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * \`true\` if and only if every element in the first set is an element of the second set
 *
 * @since 2.0.0
 */",
              ],
              "id": "set.subset",
              "kind": "function",
              "name": "subset",
              "signature": "subset: <A>(E: Eq<A>) => {
    (that: Set<A>): (me: Set<A>) => boolean;
    (me: Set<A>, that: Set<A>): boolean;
};",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L60",
              },
              "type": "<A>(E: Eq<A>) => { (that: Set<A>): (me: Set<A>) => boolean; (me: Set<A>, that: Set<A>): boolean; }",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "set.toArray",
              "kind": "function",
              "name": "toArray",
              "signature": "toArray: <A>(O: Ord<A>) => (set: Set<A>) => A[];",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L26",
              },
              "type": "<A>(O: Ord<A>) => (set: Set<A>) => A[]",
            },
            {
              "docs": [
                "/**
 * Checks an element is a member of a set;
 * If yes, removes the value from the set
 * If no, inserts the value to the set
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "set.toggle",
              "kind": "function",
              "name": "toggle",
              "signature": "toggle: <A>(E: Eq<A>) => (a: A) => (set: Set<A>) => Set<A>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 187,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L187",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L187",
              },
              "type": "<A>(E: Eq<A>) => (a: A) => (set: Set<A>) => Set<A>",
            },
            {
              "docs": [
                "/**
 * Form the union of two sets
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "set.union",
              "kind": "function",
              "name": "union",
              "signature": "union: <A>(E: Eq<A>) => {
    (that: Set<A>): (me: Set<A>) => Set<A>;
    (me: Set<A>, that: Set<A>): Set<A>;
};",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L96",
              },
              "type": "<A>(E: Eq<A>) => { (that: Set<A>): (me: Set<A>) => Set<A>; (me: Set<A>, that: Set<A>): Set<A>; }",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "set.empty",
              "kind": "variable",
              "name": "empty",
              "signature": "const empty: Set<never>;",
              "source": {
                "filename": "lib/Set.d.ts",
                "line": 21,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L21",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L21",
              },
              "type": "Set<never>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "set",
        "kind": "namespace",
        "name": "set",
        "signature": "module 'lib/Set.d.ts' {}",
        "source": {
          "filename": "lib/Set.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "show.getStructShow",
              "kind": "function",
              "name": "getStructShow",
              "signature": "getStructShow: <O extends Readonly<Record<string, any>>>(shows: {
    [K in keyof O]: Show<O[K]>;
}) => Show<O>;",
              "source": {
                "filename": "lib/Show.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L38",
              },
              "type": "<O extends Readonly<Record<string, any>>>(shows: { [K in keyof O]: Show<O[K]>; }) => Show<O>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "show.getTupleShow",
              "kind": "function",
              "name": "getTupleShow",
              "signature": "getTupleShow: <T extends readonly Show<any>[]>(
    ...shows: T
) => Show<{ [K in keyof T]: T[K] extends Show<infer A> ? A : never }>;",
              "source": {
                "filename": "lib/Show.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L47",
              },
              "type": "<T extends readonly Show<any>[]>(...shows: T) => Show<{ [K in keyof T]: T[K] extends Show<infer A> ? A : never; }>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * The \`Show\` type class represents those types which can be converted into
 * a human-readable \`string\` representation.
 *
 * While not required, it is recommended that for any expression \`x\`, the
 * string \`show(x)\` be executable TypeScript code which evaluates to the same
 * value as the expression \`x\`.
 *
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "show.Show",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "show.Show.show",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "show",
                    "signature": "readonly show: (a: A) => string;",
                    "source": {
                      "filename": "lib/Show.d.ts",
                      "line": 17,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L17",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L17",
                    },
                    "type": "(a: A) => string",
                  },
                ],
              },
              "name": "Show",
              "signature": "interface Show<A> {}",
              "source": {
                "filename": "lib/Show.d.ts",
                "line": 16,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L16",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L16",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "show.showBoolean",
              "kind": "variable",
              "name": "showBoolean",
              "signature": "const showBoolean: Show<boolean>;",
              "source": {
                "filename": "lib/Show.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L33",
              },
              "type": "Show<boolean>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "show.showNumber",
              "kind": "variable",
              "name": "showNumber",
              "signature": "const showNumber: Show<number>;",
              "source": {
                "filename": "lib/Show.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L28",
              },
              "type": "Show<number>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "show.showString",
              "kind": "variable",
              "name": "showString",
              "signature": "const showString: Show<string>;",
              "source": {
                "filename": "lib/Show.d.ts",
                "line": 23,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L23",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L23",
              },
              "type": "Show<string>",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "show",
        "kind": "namespace",
        "name": "show",
        "signature": "module 'lib/Show.d.ts' {}",
        "source": {
          "filename": "lib/Show.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "state.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <E, A>(fa: State<E, A>) => <B>(fab: State<E, (a: A) => B>) => State<E, B>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L53",
              },
              "type": "<E, A>(fa: State<E, A>) => <B>(fab: State<E, (a: A) => B>) => State<E, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "state.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <E, B>(fb: State<E, B>) => <A>(fa: State<E, A>) => State<E, A>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 62,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L62",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L62",
              },
              "type": "<E, B>(fb: State<E, B>) => <A>(fa: State<E, A>) => State<E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "state.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, S, B>(
    name: Exclude<N, keyof A>,
    fb: State<S, B>
) => (
    fa: State<S, A>
) => State<S, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L178",
              },
              "type": "<A, N extends string, S, B>(name: Exclude<N, keyof A>, fb: State<S, B>) => (fa: State<S, A>) => State<S, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "state.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <E, B>(fb: State<E, B>) => <A>(fa: State<E, A>) => State<E, B>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 71,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L71",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L71",
              },
              "type": "<E, B>(fb: State<E, B>) => <A>(fa: State<E, A>) => State<E, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "state.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, S, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => State<S, B>
) => (
    fa: State<S, A>
) => State<S, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L171",
              },
              "type": "<N extends string, A, S, B>(name: Exclude<N, keyof A>, f: (a: A) => State<S, B>) => (fa: State<S, A>) => State<S, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "state.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <S, A>(fa: State<S, A>) => State<S, { [K in N]: A }>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 167,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L167",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L167",
              },
              "type": "<N extends string>(name: N) => <S, A>(fa: State<S, A>) => State<S, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "state.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <E, A, B>(f: (a: A) => State<E, B>) => (ma: State<E, A>) => State<E, B>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 85,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L85",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L85",
              },
              "type": "<E, A, B>(f: (a: A) => State<E, B>) => (ma: State<E, A>) => State<E, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "state.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <E, A, B>(
    f: (a: A) => State<E, B>
) => (ma: State<E, A>) => State<E, A>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 95,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L95",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L95",
              },
              "type": "<E, A, B>(f: (a: A) => State<E, B>) => (ma: State<E, A>) => State<E, A>",
            },
            {
              "docs": [
                "/**
 * Use \`evaluate\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "state.evalState",
              "kind": "function",
              "name": "evalState",
              "signature": "evalState: <S, A>(ma: State<S, A>, s: S) => A;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L144",
              },
              "type": "<S, A>(ma: State<S, A>, s: S) => A",
            },
            {
              "docs": [
                "/**
 * Run a computation in the \`State\` monad, discarding the final state
 *
 * @since 2.8.0
 */",
              ],
              "id": "state.evaluate",
              "kind": "function",
              "name": "evaluate",
              "signature": "evaluate: <S>(s: S) => <A>(ma: State<S, A>) => A;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L157",
              },
              "type": "<S>(s: S) => <A>(ma: State<S, A>) => A",
            },
            {
              "docs": [
                "/**
 * Use \`execute\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "state.execState",
              "kind": "function",
              "name": "execState",
              "signature": "execState: <S, A>(ma: State<S, A>, s: S) => S;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 151,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L151",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L151",
              },
              "type": "<S, A>(ma: State<S, A>, s: S) => S",
            },
            {
              "docs": [
                "/**
 * Run a computation in the \`State\` monad discarding the result
 *
 * @since 2.8.0
 */",
              ],
              "id": "state.execute",
              "kind": "function",
              "name": "execute",
              "signature": "execute: <S>(s: S) => <A>(ma: State<S, A>) => S;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 163,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L163",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L163",
              },
              "type": "<S>(s: S) => <A>(ma: State<S, A>) => S",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "state.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <E, A>(mma: State<E, State<E, A>>) => State<E, A>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 102,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L102",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L102",
              },
              "type": "<E, A>(mma: State<E, State<E, A>>) => State<E, A>",
            },
            {
              "docs": [
                "/**
 * Get the current state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "state.get",
              "kind": "function",
              "name": "get",
              "signature": "get: <S>() => State<S, S>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L17",
              },
              "type": "<S>() => State<S, S>",
            },
            {
              "docs": [
                "/**
 * Get a value which depends on the current state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "state.gets",
              "kind": "function",
              "name": "gets",
              "signature": "gets: <S, A>(f: (s: S) => A) => State<S, A>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 38,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L38",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L38",
              },
              "type": "<S, A>(f: (s: S) => A) => State<S, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "state.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: State<E, A>) => State<E, B>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L46",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: State<E, A>) => State<E, B>",
            },
            {
              "docs": [
                "/**
 * Modify the state by applying a function to the current state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "state.modify",
              "kind": "function",
              "name": "modify",
              "signature": "modify: <S>(f: (s: S) => S) => State<S, void>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L31",
              },
              "type": "<S>(f: (s: S) => S) => State<S, void>",
            },
            {
              "docs": [
                "/**
 * Set the state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "state.put",
              "kind": "function",
              "name": "put",
              "signature": "put: <S>(s: S) => State<S, void>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L24",
              },
              "type": "<S>(s: S) => State<S, void>",
            },
            {
              "docs": [
                "/**
 * This function has the same behavior of \`A.sequence(S.State)\` but it's stack safe and optimized
 *
 * @example
 * import * as RA from 'fp-ts/ReadonlyArray'
 * import { sequenceArray, State } from 'fp-ts/State'
 * import { pipe, tuple } from 'fp-ts/function'
 *
 * const add = (n: number): State<number, number> => (s: number) => tuple(n, n + s)
 * const arr = RA.range(0, 100)
 *
 * assert.deepStrictEqual(pipe(arr, RA.map(add), sequenceArray)(0), [arr, arr.reduce((p, c) => p + c, 0)])
 *
 * @since 2.9.0
 */",
              ],
              "id": "state.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <S, A>(arr: readonly State<S, A>[]) => State<S, readonly A[]>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 221,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L221",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L221",
              },
              "type": "<S, A>(arr: readonly State<S, A>[]) => State<S, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * This function has the same behavior of \`A.traverse(S.State)\` but it's stack safe and optimized
 *
 * @example
 * import * as RA from 'fp-ts/ReadonlyArray'
 * import { traverseArray, State } from 'fp-ts/State'
 * import { pipe, tuple } from 'fp-ts/function'
 *
 * const add = (n: number): State<number, number> => (s: number) => tuple(n, n + s)
 * const arr = RA.range(0, 100)
 *
 * assert.deepStrictEqual(pipe(arr, traverseArray(add))(0), [arr, arr.reduce((p, c) => p + c, 0)])
 *
 * @since 2.9.0
 */",
              ],
              "id": "state.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <A, S, B>(
    f: (a: A) => State<S, B>
) => (arr: readonly A[]) => State<S, readonly B[]>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 203,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L203",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L203",
              },
              "type": "<A, S, B>(f: (a: A) => State<S, B>) => (arr: readonly A[]) => State<S, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "state.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <A, S, B>(
    f: (index: number, a: A) => State<S, B>
) => (arr: readonly A[]) => State<S, readonly B[]>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 185,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L185",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L185",
              },
              "type": "<A, S, B>(f: (index: number, a: A) => State<S, B>) => (arr: readonly A[]) => State<S, readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "state.State",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "state.State.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(s: S): [A, S];",
                    "source": {
                      "filename": "lib/State.d.ts",
                      "line": 9,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L9",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L9",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "State",
              "signature": "interface State<S, A> {}",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 8,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L8",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L8",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "state.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 112,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L112",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L112",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "state.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative2<'State'>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 127,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L127",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L127",
              },
              "type": "Applicative2<"State">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "state.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'State'>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 122,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L122",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L122",
              },
              "type": "Functor2<"State">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "state.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad2<'State'>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L132",
              },
              "type": "Monad2<"State">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "state.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <E, A>(a: A) => Kind2<F, E, A>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 78,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L78",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L78",
              },
              "type": "<E, A>(a: A) => Kind2<F, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "state.state",
              "kind": "variable",
              "name": "state",
              "signature": "const state: Monad2<'State'>;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 137,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L137",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L137",
              },
              "type": "Monad2<"State">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "state.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/State.d.ts",
                "line": 107,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L107",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L107",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @category model
 * @since 2.0.0
 */",
        ],
        "id": "state",
        "kind": "namespace",
        "name": "state",
        "signature": "module 'lib/State.d.ts' {}",
        "source": {
          "filename": "lib/State.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * @category Alt
 * @since 2.6.2
 */",
              ],
              "id": "stateReaderTaskEither.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <S, R, E, A>(
    that: Lazy<StateReaderTaskEither<S, R, E, A>>
) => (fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 419,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L419",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L419",
              },
              "type": "<S, R, E, A>(that: Lazy<StateReaderTaskEither<S, R, E, A>>) => (fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "stateReaderTaskEither.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <S, R2, E2, B>(
    that: () => StateReaderTaskEither<S, R2, E2, B>
) => <R1, E1, A>(
    fa: StateReaderTaskEither<S, R1, E1, A>
) => StateReaderTaskEither<S, R1 & R2, E2 | E1, B | A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 409,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L409",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L409",
              },
              "type": "<S, R2, E2, B>(that: () => StateReaderTaskEither<S, R2, E2, B>) => <R1, E1, A>(fa: StateReaderTaskEither<S, R1, E1, A>) => StateReaderTaskEither<S, R1 & R2, E2 | E1, B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <S, R, E, A>(
    fa: StateReaderTaskEither<S, R, E, A>
) => <B>(
    fab: StateReaderTaskEither<S, R, E, (a: A) => B>
) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 321,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L321",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L321",
              },
              "type": "<S, R, E, A>(fa: StateReaderTaskEither<S, R, E, A>) => <B>(fab: StateReaderTaskEither<S, R, E, (a: A) => B>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <S, R, E, B>(
    fb: StateReaderTaskEither<S, R, E, B>
) => <A>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 332,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L332",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L332",
              },
              "type": "<S, R, E, B>(fb: StateReaderTaskEither<S, R, E, B>) => <A>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, S, R, E, B>(
    name: Exclude<N, keyof A>,
    fb: StateReaderTaskEither<S, R, E, B>
) => (
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<
    S,
    R,
    E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 564,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L564",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L564",
              },
              "type": "<A, N extends string, S, R, E, B>(name: Exclude<N, keyof A>, fb: StateReaderTaskEither<S, R, E, B>) => (fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <S, R, E, B>(
    fb: StateReaderTaskEither<S, R, E, B>
) => <A>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 343,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L343",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L343",
              },
              "type": "<S, R, E, B>(fb: StateReaderTaskEither<S, R, E, B>) => <A>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, S, Q, D, B>(
    name: Exclude<N, keyof A>,
    fb: StateReaderTaskEither<S, Q, D, B>
) => <R, E>(
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<
    S,
    Q & R,
    D | E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 555,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L555",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L555",
              },
              "type": "<A, N extends string, S, Q, D, B>(name: Exclude<N, keyof A>, fb: StateReaderTaskEither<S, Q, D, B>) => <R, E>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, Q & R, D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <S, Q, D, A>(
    fa: StateReaderTaskEither<S, Q, D, A>
) => <R, E, B>(
    fab: StateReaderTaskEither<S, R, E, (a: A) => B>
) => StateReaderTaskEither<S, Q & R, D | E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 312,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L312",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L312",
              },
              "type": "<S, Q, D, A>(fa: StateReaderTaskEither<S, Q, D, A>) => <R, E, B>(fab: StateReaderTaskEither<S, R, E, (a: A) => B>) => StateReaderTaskEither<S, Q & R, D | E, B>",
            },
            {
              "docs": [
                "/**
 * Map a pair of functions over the two last type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.6.2
 */",
              ],
              "id": "stateReaderTaskEither.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => <S, R>(
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<S, R, G, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 293,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L293",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L293",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => <S, R>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, G, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, S, R, E, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => StateReaderTaskEither<S, R, E, B>
) => (
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<
    S,
    R,
    E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 539,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L539",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L539",
              },
              "type": "<N extends string, A, S, R, E, B>(name: Exclude<N, keyof A>, f: (a: A) => StateReaderTaskEither<S, R, E, B>) => (fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <S, R, E, A>(
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<S, R, E, { [K in N]: A }>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 524,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L524",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L524",
              },
              "type": "<N extends string>(name: N) => <S, R, E, A>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, S, Q, D, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => StateReaderTaskEither<S, Q, D, B>
) => <R, E>(
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<
    S,
    Q & R,
    D | E,
    { [K in N | keyof A]: K extends keyof A ? A[K] : B }
>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 530,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L530",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L530",
              },
              "type": "<N extends string, A, S, Q, D, B>(name: Exclude<N, keyof A>, f: (a: A) => StateReaderTaskEither<S, Q, D, B>) => <R, E>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, Q & R, D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <S, R, E, A, B>(
    f: (a: A) => StateReaderTaskEither<S, R, E, B>
) => (ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 368,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L368",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L368",
              },
              "type": "<S, R, E, A, B>(f: (a: A) => StateReaderTaskEither<S, R, E, B>) => (ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.chainEitherK",
              "kind": "function",
              "name": "chainEitherK",
              "signature": "chainEitherK: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <S, R>(
    ma: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 178,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L178",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L178",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <S, R>(ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainEitherK\`](#chainEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "stateReaderTaskEither.chainEitherKW",
              "kind": "function",
              "name": "chainEitherKW",
              "signature": "chainEitherKW: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <S, R, D>(
    ma: StateReaderTaskEither<S, R, D, A>
) => StateReaderTaskEither<S, R, E | D, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 171,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L171",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L171",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <S, R, D>(ma: StateReaderTaskEither<S, R, D, A>) => StateReaderTaskEither<S, R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <S, R, E, A, B>(
    f: (a: A) => StateReaderTaskEither<S, R, E, B>
) => (ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 391,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L391",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L391",
              },
              "type": "<S, R, E, A, B>(f: (a: A) => StateReaderTaskEither<S, R, E, B>) => (ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainFirst\`](#chainFirst).
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.chainFirstW",
              "kind": "function",
              "name": "chainFirstW",
              "signature": "chainFirstW: <S, R, D, A, B>(
    f: (a: A) => StateReaderTaskEither<S, R, D, B>
) => <Q, E>(
    ma: StateReaderTaskEither<S, Q, E, A>
) => StateReaderTaskEither<S, Q & R, D | E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 379,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L379",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L379",
              },
              "type": "<S, R, D, A, B>(f: (a: A) => StateReaderTaskEither<S, R, D, B>) => <Q, E>(ma: StateReaderTaskEither<S, Q, E, A>) => StateReaderTaskEither<S, Q & R, D | E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.chainIOEitherK",
              "kind": "function",
              "name": "chainIOEitherK",
              "signature": "chainIOEitherK: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => <S, R>(
    ma: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 201,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L201",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L201",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => <S, R>(ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainIOEitherK\`](#chainIOEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "stateReaderTaskEither.chainIOEitherKW",
              "kind": "function",
              "name": "chainIOEitherKW",
              "signature": "chainIOEitherKW: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => <S, R, D>(
    ma: StateReaderTaskEither<S, R, D, A>
) => StateReaderTaskEither<S, R, E | D, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L194",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => <S, R, D>(ma: StateReaderTaskEither<S, R, D, A>) => StateReaderTaskEither<S, R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.chainReaderTaskEitherK",
              "kind": "function",
              "name": "chainReaderTaskEitherK",
              "signature": "chainReaderTaskEitherK: <R, E, A, B>(
    f: (a: A) => RTE.ReaderTaskEither<R, E, B>
) => <S>(ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 247,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L247",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L247",
              },
              "type": "<R, E, A, B>(f: (a: A) => RTE.ReaderTaskEither<R, E, B>) => <S>(ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainReaderTaskEitherK\`](#chainReaderTaskEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "stateReaderTaskEither.chainReaderTaskEitherKW",
              "kind": "function",
              "name": "chainReaderTaskEitherKW",
              "signature": "chainReaderTaskEitherKW: <R, E, A, B>(
    f: (a: A) => RTE.ReaderTaskEither<R, E, B>
) => <S, D>(
    ma: StateReaderTaskEither<S, R, D, A>
) => StateReaderTaskEither<S, R, E | D, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 240,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L240",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L240",
              },
              "type": "<R, E, A, B>(f: (a: A) => RTE.ReaderTaskEither<R, E, B>) => <S, D>(ma: StateReaderTaskEither<S, R, D, A>) => StateReaderTaskEither<S, R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.chainTaskEitherK",
              "kind": "function",
              "name": "chainTaskEitherK",
              "signature": "chainTaskEitherK: <E, A, B>(
    f: (a: A) => TaskEither<E, B>
) => <S, R>(
    ma: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 224,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L224",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L224",
              },
              "type": "<E, A, B>(f: (a: A) => TaskEither<E, B>) => <S, R>(ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainTaskEitherK\`](#chainTaskEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "stateReaderTaskEither.chainTaskEitherKW",
              "kind": "function",
              "name": "chainTaskEitherKW",
              "signature": "chainTaskEitherKW: <E, A, B>(
    f: (a: A) => TaskEither<E, B>
) => <S, R, D>(
    ma: StateReaderTaskEither<S, R, D, A>
) => StateReaderTaskEither<S, R, E | D, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 217,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L217",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L217",
              },
              "type": "<E, A, B>(f: (a: A) => TaskEither<E, B>) => <S, R, D>(ma: StateReaderTaskEither<S, R, D, A>) => StateReaderTaskEither<S, R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */",
              ],
              "id": "stateReaderTaskEither.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <S, R, E, A, B>(
    f: (a: A) => StateReaderTaskEither<S, R, E, B>
) => <Q, D>(
    ma: StateReaderTaskEither<S, Q, D, A>
) => StateReaderTaskEither<S, Q & R, E | D, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 359,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L359",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L359",
              },
              "type": "<S, R, E, A, B>(f: (a: A) => StateReaderTaskEither<S, R, E, B>) => <Q, D>(ma: StateReaderTaskEither<S, Q, D, A>) => StateReaderTaskEither<S, Q & R, E | D, B>",
            },
            {
              "docs": [
                "/**
 * Use \`evaluate\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "stateReaderTaskEither.evalState",
              "kind": "function",
              "name": "evalState",
              "signature": "evalState: <S, R, E, A>(
    ma: StateReaderTaskEither<S, R, E, A>,
    s: S
) => RTE.ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 497,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L497",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L497",
              },
              "type": "<S, R, E, A>(ma: StateReaderTaskEither<S, R, E, A>, s: S) => RTE.ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Run a computation in the \`StateReaderTaskEither\` monad, discarding the final state
 *
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.evaluate",
              "kind": "function",
              "name": "evaluate",
              "signature": "evaluate: <S>(
    s: S
) => <R, E, A>(
    ma: StateReaderTaskEither<S, R, E, A>
) => RTE.ReaderTaskEither<R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 510,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L510",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L510",
              },
              "type": "<S>(s: S) => <R, E, A>(ma: StateReaderTaskEither<S, R, E, A>) => RTE.ReaderTaskEither<R, E, A>",
            },
            {
              "docs": [
                "/**
 * Use \`execute\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "stateReaderTaskEither.execState",
              "kind": "function",
              "name": "execState",
              "signature": "execState: <S, R, E, A>(
    ma: StateReaderTaskEither<S, R, E, A>,
    s: S
) => RTE.ReaderTaskEither<R, E, S>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 504,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L504",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L504",
              },
              "type": "<S, R, E, A>(ma: StateReaderTaskEither<S, R, E, A>, s: S) => RTE.ReaderTaskEither<R, E, S>",
            },
            {
              "docs": [
                "/**
 * Run a computation in the \`StateReaderTaskEither\` monad discarding the result
 *
 * @since 2.8.0
 */",
              ],
              "id": "stateReaderTaskEither.execute",
              "kind": "function",
              "name": "execute",
              "signature": "execute: <S>(
    s: S
) => <R, E, A>(
    ma: StateReaderTaskEither<S, R, E, A>
) => RTE.ReaderTaskEither<R, E, S>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 518,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L518",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L518",
              },
              "type": "<S>(s: S) => <R, E, A>(ma: StateReaderTaskEither<S, R, E, A>) => RTE.ReaderTaskEither<R, E, S>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <S, R, E, A>(
    mma: StateReaderTaskEither<S, R, E, StateReaderTaskEither<S, R, E, A>>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 400,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L400",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L400",
              },
              "type": "<S, R, E, A>(mma: StateReaderTaskEither<S, R, E, StateReaderTaskEither<S, R, E, A>>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.fromEither",
              "kind": "function",
              "name": "fromEither",
              "signature": "fromEither: <S, R, E, A>(
    ma: E.Either<E, A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 138,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L138",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L138",
              },
              "type": "<S, R, E, A>(ma: E.Either<E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.fromEitherK",
              "kind": "function",
              "name": "fromEitherK",
              "signature": "fromEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => Either<E, B>
) => <S, R>(...a: A) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 162,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L162",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L162",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => Either<E, B>) => <S, R>(...a: A) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.fromIOEither",
              "kind": "function",
              "name": "fromIOEither",
              "signature": "fromIOEither: <S, R, E, A>(
    ma: IOEither<E, A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 71,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L71",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L71",
              },
              "type": "<S, R, E, A>(ma: IOEither<E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.fromIOEitherK",
              "kind": "function",
              "name": "fromIOEitherK",
              "signature": "fromIOEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => IOEither<E, B>
) => <S, R>(...a: A) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 185,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L185",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L185",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => IOEither<E, B>) => <S, R>(...a: A) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.fromOption",
              "kind": "function",
              "name": "fromOption",
              "signature": "fromOption: <E>(
    onNone: Lazy<E>
) => <S, R, A>(ma: Option<A>) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 145,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L145",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L145",
              },
              "type": "<E>(onNone: Lazy<E>) => <S, R, A>(ma: Option<A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.fromReaderEither",
              "kind": "function",
              "name": "fromReaderEither",
              "signature": "fromReaderEither: <S, R, E, A>(
    ma: ReaderEither<R, E, A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L76",
              },
              "type": "<S, R, E, A>(ma: ReaderEither<R, E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.fromReaderTaskEither",
              "kind": "function",
              "name": "fromReaderTaskEither",
              "signature": "fromReaderTaskEither: <S, R, E, A>(
    ma: RTE.ReaderTaskEither<R, E, A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L101",
              },
              "type": "<S, R, E, A>(ma: RTE.ReaderTaskEither<R, E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.fromReaderTaskEitherK",
              "kind": "function",
              "name": "fromReaderTaskEitherK",
              "signature": "fromReaderTaskEitherK: <R, E, A extends readonly unknown[], B>(
    f: (...a: A) => ReaderTaskEither<R, E, B>
) => <S>(...a: A) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 231,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L231",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L231",
              },
              "type": "<R, E, A extends readonly unknown[], B>(f: (...a: A) => ReaderTaskEither<R, E, B>) => <S>(...a: A) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.fromTaskEither",
              "kind": "function",
              "name": "fromTaskEither",
              "signature": "fromTaskEither: <S, R, E, A>(
    ma: TaskEither<E, A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L56",
              },
              "type": "<S, R, E, A>(ma: TaskEither<E, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "stateReaderTaskEither.fromTaskEitherK",
              "kind": "function",
              "name": "fromTaskEitherK",
              "signature": "fromTaskEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => TaskEither<E, B>
) => <S, R>(...a: A) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 208,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L208",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L208",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => TaskEither<E, B>) => <S, R>(...a: A) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Get the current state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.get",
              "kind": "function",
              "name": "get",
              "signature": "get: <S, R, E = never>() => StateReaderTaskEither<S, R, E, S>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L110",
              },
              "type": "<S, R, E = never>() => StateReaderTaskEither<S, R, E, S>",
            },
            {
              "docs": [
                "/**
 * Get a value which depends on the current state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.gets",
              "kind": "function",
              "name": "gets",
              "signature": "gets: <S, R, E = never, A = never>(
    f: (s: S) => A
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 131,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L131",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L131",
              },
              "type": "<S, R, E = never, A = never>(f: (s: S) => A) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <S, R, E = never, A = never>(e: E) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L36",
              },
              "type": "<S, R, E = never, A = never>(e: E) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.leftIO",
              "kind": "function",
              "name": "leftIO",
              "signature": "leftIO: <S, R, E = never, A = never>(
    me: IO<E>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L86",
              },
              "type": "<S, R, E = never, A = never>(me: IO<E>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.leftReader",
              "kind": "function",
              "name": "leftReader",
              "signature": "leftReader: <S, R, E = never, A = never>(
    me: Reader<R, E>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L66",
              },
              "type": "<S, R, E = never, A = never>(me: Reader<R, E>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.leftState",
              "kind": "function",
              "name": "leftState",
              "signature": "leftState: <S, R, E = never, A = never>(
    me: State<S, E>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L96",
              },
              "type": "<S, R, E = never, A = never>(me: State<S, E>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.leftTask",
              "kind": "function",
              "name": "leftTask",
              "signature": "leftTask: <S, R, E = never, A = never>(
    me: Task<E>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L51",
              },
              "type": "<S, R, E = never, A = never>(me: Task<E>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(
    f: (a: A) => B
) => <S, R, E>(
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<S, R, E, B>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 284,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L284",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L284",
              },
              "type": "<A, B>(f: (a: A) => B) => <S, R, E>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the third type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.6.2
 */",
              ],
              "id": "stateReaderTaskEither.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(
    f: (e: E) => G
) => <S, R, A>(
    fa: StateReaderTaskEither<S, R, E, A>
) => StateReaderTaskEither<S, R, G, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 303,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L303",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L303",
              },
              "type": "<E, G>(f: (e: E) => G) => <S, R, A>(fa: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, G, A>",
            },
            {
              "docs": [
                "/**
 * Modify the state by applying a function to the current state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.modify",
              "kind": "function",
              "name": "modify",
              "signature": "modify: <S, R, E = never>(
    f: (s: S) => S
) => StateReaderTaskEither<S, R, E, void>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 124,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L124",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L124",
              },
              "type": "<S, R, E = never>(f: (s: S) => S) => StateReaderTaskEither<S, R, E, void>",
            },
            {
              "docs": [
                "/**
 * Set the state
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.put",
              "kind": "function",
              "name": "put",
              "signature": "put: <S, R, E = never>(s: S) => StateReaderTaskEither<S, R, E, void>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 117,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L117",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L117",
              },
              "type": "<S, R, E = never>(s: S) => StateReaderTaskEither<S, R, E, void>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <S, R, E = never, A = never>(a: A) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L41",
              },
              "type": "<S, R, E = never, A = never>(a: A) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.rightIO",
              "kind": "function",
              "name": "rightIO",
              "signature": "rightIO: <S, R, E = never, A = never>(
    ma: IO<A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L81",
              },
              "type": "<S, R, E = never, A = never>(ma: IO<A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.rightReader",
              "kind": "function",
              "name": "rightReader",
              "signature": "rightReader: <S, R, E = never, A = never>(
    ma: Reader<R, A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L61",
              },
              "type": "<S, R, E = never, A = never>(ma: Reader<R, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.rightState",
              "kind": "function",
              "name": "rightState",
              "signature": "rightState: <S, R, E = never, A = never>(
    ma: State<S, A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L91",
              },
              "type": "<S, R, E = never, A = never>(ma: State<S, A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.rightTask",
              "kind": "function",
              "name": "rightTask",
              "signature": "rightTask: <S, R, E = never, A = never>(
    ma: Task<A>
) => StateReaderTaskEither<S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L46",
              },
              "type": "<S, R, E = never, A = never>(ma: Task<A>) => StateReaderTaskEither<S, R, E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.run",
              "kind": "function",
              "name": "run",
              "signature": "run: <S, R, E, A>(
    ma: StateReaderTaskEither<S, R, E, A>,
    s: S,
    r: R
) => Promise<Either<E, [A, S]>>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 490,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L490",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L490",
              },
              "type": "<S, R, E, A>(ma: StateReaderTaskEither<S, R, E, A>, s: S, r: R) => Promise<Either<E, [A, S]>>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "stateReaderTaskEither.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <S, R, E, A>(
    arr: readonly StateReaderTaskEither<S, R, E, A>[]
) => StateReaderTaskEither<S, R, E, readonly A[]>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 592,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L592",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L592",
              },
              "type": "<S, R, E, A>(arr: readonly StateReaderTaskEither<S, R, E, A>[]) => StateReaderTaskEither<S, R, E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "stateReaderTaskEither.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <S, R, E, A, B>(
    f: (a: A) => StateReaderTaskEither<S, R, E, B>
) => (arr: readonly A[]) => StateReaderTaskEither<S, R, E, readonly B[]>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 586,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L586",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L586",
              },
              "type": "<S, R, E, A, B>(f: (a: A) => StateReaderTaskEither<S, R, E, B>) => (arr: readonly A[]) => StateReaderTaskEither<S, R, E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "stateReaderTaskEither.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <S, R, E, A, B>(
    f: (index: number, a: A) => StateReaderTaskEither<S, R, E, B>
) => (arr: readonly A[]) => StateReaderTaskEither<S, R, E, readonly B[]>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 580,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L580",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L580",
              },
              "type": "<S, R, E, A, B>(f: (index: number, a: A) => StateReaderTaskEither<S, R, E, B>) => (arr: readonly A[]) => StateReaderTaskEither<S, R, E, readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.StateReaderTaskEither",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "stateReaderTaskEither.StateReaderTaskEither.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(s: S): ReaderTaskEither<R, E, [A, S]>;",
                    "source": {
                      "filename": "lib/StateReaderTaskEither.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L30",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "StateReaderTaskEither",
              "signature": "interface StateReaderTaskEither<S, R, E, A> {}",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 29,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L29",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L29",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 446,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L446",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L446",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt4<'StateReaderTaskEither'>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 471,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L471",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L471",
              },
              "type": "Alt4<"StateReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative4<'StateReaderTaskEither'>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 461,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L461",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L461",
              },
              "type": "Applicative4<"StateReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor4<'StateReaderTaskEither'>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 466,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L466",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L466",
              },
              "type": "Bifunctor4<"StateReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category combinators
 * @since 2.4.4
 */",
              ],
              "id": "stateReaderTaskEither.filterOrElse",
              "kind": "variable",
              "name": "filterOrElse",
              "signature": "const filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <S, R>(
        ma: StateReaderTaskEither<S, R, E, A>
    ) => StateReaderTaskEither<S, R, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(
        ma: StateReaderTaskEither<S, R, E, A>
    ) => StateReaderTaskEither<S, R, E, A>;
};",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 269,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L269",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L269",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <S, R>(ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(ma: StateReaderTaskEither<S, R, E, A>) => StateReaderTaskEither<S, R, E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`filterOrElse\`](#filterOrElse).
 *
 * @since 2.9.0
 */",
              ],
              "id": "stateReaderTaskEither.filterOrElseW",
              "kind": "variable",
              "name": "filterOrElseW",
              "signature": "const filterOrElseW: {
    <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <
        S,
        R,
        E1
    >(
        ma: StateReaderTaskEither<S, R, E1, A>
    ) => StateReaderTaskEither<S, R, E2 | E1, B>;
    <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <S, R, E1>(
        ma: StateReaderTaskEither<S, R, E1, A>
    ) => StateReaderTaskEither<S, R, E2 | E1, A>;
};",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 255,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L255",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L255",
              },
              "type": "{ <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <S, R, E1>(ma: StateReaderTaskEither<S, R, E1, A>) => StateReaderTaskEither<S, R, E2 | E1, B>; <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <S, R, E1>(ma: StateReaderTaskEither<S, R, E1, A>) => StateReaderTaskEither<S, R, E2 | E1, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadIO
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.fromIO",
              "kind": "variable",
              "name": "fromIO",
              "signature": "const fromIO: <S, R, E, A>(fa: IO<A>) => Kind4<M, S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 426,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L426",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L426",
              },
              "type": "<S, R, E, A>(fa: IO<A>) => Kind4<M, S, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.4.4
 */",
              ],
              "id": "stateReaderTaskEither.fromPredicate",
              "kind": "variable",
              "name": "fromPredicate",
              "signature": "const fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <S, R>(
        a: A
    ) => StateReaderTaskEither<S, R, E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(
        a: A
    ) => StateReaderTaskEither<S, R, E, A>;
};",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 152,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L152",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L152",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <S, R>(a: A) => StateReaderTaskEither<S, R, E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <S, R>(a: A) => StateReaderTaskEither<S, R, E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadTask
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.fromTask",
              "kind": "variable",
              "name": "fromTask",
              "signature": "const fromTask: <S, R, E, A>(fa: Task<A>) => Kind4<M, S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 431,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L431",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L431",
              },
              "type": "<S, R, E, A>(fa: Task<A>) => Kind4<M, S, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor4<'StateReaderTaskEither'>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 456,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L456",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L456",
              },
              "type": "Functor4<"StateReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <S, R, E, A>(a: A) => Kind4<F, S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 352,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L352",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L352",
              },
              "type": "<S, R, E, A>(a: A) => Kind4<F, S, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.stateReaderTaskEither",
              "kind": "variable",
              "name": "stateReaderTaskEither",
              "signature": "const stateReaderTaskEither: Monad4<'StateReaderTaskEither'> &
    Bifunctor4<'StateReaderTaskEither'> &
    Alt4<'StateReaderTaskEither'> &
    MonadTask4<'StateReaderTaskEither'> &
    MonadThrow4<'StateReaderTaskEither'>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 476,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L476",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L476",
              },
              "type": "Monad4<"StateReaderTaskEither"> & Bifunctor4<"StateReaderTaskEither"> & Alt4<"StateReaderTaskEither"> & MonadTask4<"StateReaderTaskEither"> & MonadThrow4<"StateReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "stateReaderTaskEither.stateReaderTaskEitherSeq",
              "kind": "variable",
              "name": "stateReaderTaskEitherSeq",
              "signature": "const stateReaderTaskEitherSeq: Monad4<'StateReaderTaskEither'> &
    Bifunctor4<'StateReaderTaskEither'> &
    Alt4<'StateReaderTaskEither'> &
    MonadTask4<'StateReaderTaskEither'> &
    MonadThrow4<'StateReaderTaskEither'>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 486,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L486",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L486",
              },
              "type": "Monad4<"StateReaderTaskEither"> & Bifunctor4<"StateReaderTaskEither"> & Alt4<"StateReaderTaskEither"> & MonadTask4<"StateReaderTaskEither"> & MonadThrow4<"StateReaderTaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadThrow
 * @since 2.7.0
 */",
              ],
              "id": "stateReaderTaskEither.throwError",
              "kind": "variable",
              "name": "throwError",
              "signature": "const throwError: <S, R, E, A>(e: E) => Kind4<M, S, R, E, A>;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 436,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L436",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L436",
              },
              "type": "<S, R, E, A>(e: E) => Kind4<M, S, R, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "stateReaderTaskEither.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/StateReaderTaskEither.d.ts",
                "line": 441,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L441",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L441",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "stateReaderTaskEither",
        "kind": "namespace",
        "name": "stateReaderTaskEither",
        "signature": "module 'lib/StateReaderTaskEither.d.ts' {}",
        "source": {
          "filename": "lib/StateReaderTaskEither.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "stateT.getStateM",
              "kind": "function",
              "name": "getStateM",
              "signature": "getStateM: {
    <M extends URIS3>(M: Monad3<M>): StateM3<M>;
    <M extends URIS3, E>(M: Monad3C<M, E>): StateM3C<M, E>;
    <M extends URIS2>(M: Monad2<M>): StateM2<M>;
    <M extends URIS2, E>(M: Monad2C<M, E>): StateM2C<M, E>;
    <M extends URIS>(M: Monad1<M>): StateM1<M>;
    <M>(M: Monad<M>): StateM<M>;
};",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L148",
              },
              "type": "{ <M extends URIS3>(M: Monad3<M>): StateM3<M>; <M extends URIS3, E>(M: Monad3C<M, E>): StateM3C<M, E>; <M extends URIS2>(M: Monad2<M>): StateM2<M>; <M extends URIS2, E>(M: Monad2C<M, E>): StateM2C<M, E>; <M extends URIS>(M: Monad1<M>): StateM1<M>; <M>(M: Monad<M>): StateM<M>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateM",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "stateT.StateM.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, A, B>(
    fab: StateT<M, S, (a: A) => B>,
    fa: StateT<M, S, A>
) => StateT<M, S, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L20",
                    },
                    "type": "<S, A, B>(fab: StateT<M, S, (a: A) => B>, fa: StateT<M, S, A>) => StateT<M, S, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, A, B>(
    fa: StateT<M, S, A>,
    f: (a: A) => StateT<M, S, B>
) => StateT<M, S, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L21",
                    },
                    "type": "<S, A, B>(fa: StateT<M, S, A>, f: (a: A) => StateT<M, S, B>) => StateT<M, S, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.evalState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalState",
                    "signature": "readonly evalState: <S, A>(ma: StateT<M, S, A>, s: S) => HKT<M, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L28",
                    },
                    "type": "<S, A>(ma: StateT<M, S, A>, s: S) => HKT<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.execState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execState",
                    "signature": "readonly execState: <S, A>(ma: StateT<M, S, A>, s: S) => HKT<M, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 29,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L29",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L29",
                    },
                    "type": "<S, A>(ma: StateT<M, S, A>, s: S) => HKT<M, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <S, A>(ma: HKT<M, A>) => StateT<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L27",
                    },
                    "type": "<S, A>(ma: HKT<M, A>) => StateT<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.fromState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromState",
                    "signature": "readonly fromState: <S, A>(fa: State<S, A>) => StateT<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L26",
                    },
                    "type": "<S, A>(fa: State<S, A>) => StateT<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.get",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "get",
                    "signature": "readonly get: <S>() => StateT<M, S, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L22",
                    },
                    "type": "<S>() => StateT<M, S, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.gets",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "gets",
                    "signature": "readonly gets: <S, A>(f: (s: S) => A) => StateT<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L25",
                    },
                    "type": "<S, A>(f: (s: S) => A) => StateT<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <S, A, B>(fa: StateT<M, S, A>, f: (a: A) => B) => StateT<M, S, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L18",
                    },
                    "type": "<S, A, B>(fa: StateT<M, S, A>, f: (a: A) => B) => StateT<M, S, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.modify",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "modify",
                    "signature": "readonly modify: <S>(f: (s: S) => S) => StateT<M, S, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 24,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L24",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L24",
                    },
                    "type": "<S>(f: (s: S) => S) => StateT<M, S, void>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <S, A>(a: A) => StateT<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L19",
                    },
                    "type": "<S, A>(a: A) => StateT<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM.put",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "put",
                    "signature": "readonly put: <S>(s: S) => StateT<M, S, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 23,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L23",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L23",
                    },
                    "type": "<S>(s: S) => StateT<M, S, void>",
                  },
                ],
              },
              "name": "StateM",
              "signature": "interface StateM<M> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateM1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "stateT.StateM1.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, A, B>(
    fab: StateT1<M, S, (a: A) => B>,
    fa: StateT1<M, S, A>
) => StateT1<M, S, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L44",
                    },
                    "type": "<S, A, B>(fab: StateT1<M, S, (a: A) => B>, fa: StateT1<M, S, A>) => StateT1<M, S, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, A, B>(
    fa: StateT1<M, S, A>,
    f: (a: A) => StateT1<M, S, B>
) => StateT1<M, S, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 45,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L45",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L45",
                    },
                    "type": "<S, A, B>(fa: StateT1<M, S, A>, f: (a: A) => StateT1<M, S, B>) => StateT1<M, S, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.evalState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalState",
                    "signature": "readonly evalState: <S, A>(ma: StateT1<M, S, A>, s: S) => Kind<M, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L52",
                    },
                    "type": "<S, A>(ma: StateT1<M, S, A>, s: S) => Kind<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.execState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execState",
                    "signature": "readonly execState: <S, A>(ma: StateT1<M, S, A>, s: S) => Kind<M, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L53",
                    },
                    "type": "<S, A>(ma: StateT1<M, S, A>, s: S) => Kind<M, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <S, A>(ma: Kind<M, A>) => StateT1<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 51,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L51",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L51",
                    },
                    "type": "<S, A>(ma: Kind<M, A>) => StateT1<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.fromState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromState",
                    "signature": "readonly fromState: <S, A>(fa: State<S, A>) => StateT1<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 50,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L50",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L50",
                    },
                    "type": "<S, A>(fa: State<S, A>) => StateT1<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.get",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "get",
                    "signature": "readonly get: <S>() => StateT1<M, S, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L46",
                    },
                    "type": "<S>() => StateT1<M, S, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.gets",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "gets",
                    "signature": "readonly gets: <S, A>(f: (s: S) => A) => StateT1<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L49",
                    },
                    "type": "<S, A>(f: (s: S) => A) => StateT1<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <S, A, B>(
    fa: StateT1<M, S, A>,
    f: (a: A) => B
) => StateT1<M, S, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L42",
                    },
                    "type": "<S, A, B>(fa: StateT1<M, S, A>, f: (a: A) => B) => StateT1<M, S, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.modify",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "modify",
                    "signature": "readonly modify: <S>(f: (s: S) => S) => StateT1<M, S, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L48",
                    },
                    "type": "<S>(f: (s: S) => S) => StateT1<M, S, void>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <S, A>(a: A) => StateT1<M, S, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L43",
                    },
                    "type": "<S, A>(a: A) => StateT1<M, S, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM1.put",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "put",
                    "signature": "readonly put: <S>(s: S) => StateT1<M, S, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L47",
                    },
                    "type": "<S>(s: S) => StateT1<M, S, void>",
                  },
                ],
              },
              "name": "StateM1",
              "signature": "interface StateM1<M extends URIS> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L41",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateM2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "stateT.StateM2.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, E, A, B>(
    fab: StateT2<M, S, E, (a: A) => B>,
    fa: StateT2<M, S, E, A>
) => StateT2<M, S, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 68,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L68",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L68",
                    },
                    "type": "<S, E, A, B>(fab: StateT2<M, S, E, (a: A) => B>, fa: StateT2<M, S, E, A>) => StateT2<M, S, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, E, A, B>(
    fa: StateT2<M, S, E, A>,
    f: (a: A) => StateT2<M, S, E, B>
) => StateT2<M, S, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 69,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L69",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L69",
                    },
                    "type": "<S, E, A, B>(fa: StateT2<M, S, E, A>, f: (a: A) => StateT2<M, S, E, B>) => StateT2<M, S, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.evalState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalState",
                    "signature": "readonly evalState: <S, E, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 76,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L76",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L76",
                    },
                    "type": "<S, E, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.execState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execState",
                    "signature": "readonly execState: <S, E, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L77",
                    },
                    "type": "<S, E, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <S, E, A>(ma: Kind2<M, E, A>) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 75,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L75",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L75",
                    },
                    "type": "<S, E, A>(ma: Kind2<M, E, A>) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.fromState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromState",
                    "signature": "readonly fromState: <S, E, A>(fa: State<S, A>) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 74,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L74",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L74",
                    },
                    "type": "<S, E, A>(fa: State<S, A>) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.get",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "get",
                    "signature": "readonly get: <E, S>() => StateT2<M, S, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 70,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L70",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L70",
                    },
                    "type": "<E, S>() => StateT2<M, S, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.gets",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "gets",
                    "signature": "readonly gets: <S, E, A>(f: (s: S) => A) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 73,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L73",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L73",
                    },
                    "type": "<S, E, A>(f: (s: S) => A) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <S, E, A, B>(
    fa: StateT2<M, S, E, A>,
    f: (a: A) => B
) => StateT2<M, S, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L66",
                    },
                    "type": "<S, E, A, B>(fa: StateT2<M, S, E, A>, f: (a: A) => B) => StateT2<M, S, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.modify",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "modify",
                    "signature": "readonly modify: <E, S>(f: (s: S) => S) => StateT2<M, S, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 72,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L72",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L72",
                    },
                    "type": "<E, S>(f: (s: S) => S) => StateT2<M, S, E, void>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <S, E, A>(a: A) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 67,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L67",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L67",
                    },
                    "type": "<S, E, A>(a: A) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2.put",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "put",
                    "signature": "readonly put: <E, S>(s: S) => StateT2<M, S, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 71,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L71",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L71",
                    },
                    "type": "<E, S>(s: S) => StateT2<M, S, E, void>",
                  },
                ],
              },
              "name": "StateM2",
              "signature": "interface StateM2<M extends URIS2> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 65,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L65",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L65",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.5.4
 */",
              ],
              "id": "stateT.StateM2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, A, B>(
    fab: StateT2<M, S, E, (a: A) => B>,
    fa: StateT2<M, S, E, A>
) => StateT2<M, S, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 85,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L85",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L85",
                    },
                    "type": "<S, A, B>(fab: StateT2<M, S, E, (a: A) => B>, fa: StateT2<M, S, E, A>) => StateT2<M, S, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, A, B>(
    fa: StateT2<M, S, E, A>,
    f: (a: A) => StateT2<M, S, E, B>
) => StateT2<M, S, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 86,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L86",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L86",
                    },
                    "type": "<S, A, B>(fa: StateT2<M, S, E, A>, f: (a: A) => StateT2<M, S, E, B>) => StateT2<M, S, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.evalState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalState",
                    "signature": "readonly evalState: <S, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 93,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L93",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L93",
                    },
                    "type": "<S, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.execState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execState",
                    "signature": "readonly execState: <S, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 94,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L94",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L94",
                    },
                    "type": "<S, A>(ma: StateT2<M, S, E, A>, s: S) => Kind2<M, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <S, A>(ma: Kind2<M, E, A>) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L92",
                    },
                    "type": "<S, A>(ma: Kind2<M, E, A>) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.fromState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromState",
                    "signature": "readonly fromState: <S, A>(fa: State<S, A>) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 91,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L91",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L91",
                    },
                    "type": "<S, A>(fa: State<S, A>) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.get",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "get",
                    "signature": "readonly get: <S>() => StateT2<M, S, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 87,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L87",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L87",
                    },
                    "type": "<S>() => StateT2<M, S, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.gets",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "gets",
                    "signature": "readonly gets: <S, A>(f: (s: S) => A) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 90,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L90",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L90",
                    },
                    "type": "<S, A>(f: (s: S) => A) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <S, A, B>(
    fa: StateT2<M, S, E, A>,
    f: (a: A) => B
) => StateT2<M, S, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 83,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L83",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L83",
                    },
                    "type": "<S, A, B>(fa: StateT2<M, S, E, A>, f: (a: A) => B) => StateT2<M, S, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.modify",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "modify",
                    "signature": "readonly modify: <S>(f: (s: S) => S) => StateT2<M, S, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 89,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L89",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L89",
                    },
                    "type": "<S>(f: (s: S) => S) => StateT2<M, S, E, void>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <S, A>(a: A) => StateT2<M, S, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 84,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L84",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L84",
                    },
                    "type": "<S, A>(a: A) => StateT2<M, S, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM2C.put",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "put",
                    "signature": "readonly put: <S>(s: S) => StateT2<M, S, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 88,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L88",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L88",
                    },
                    "type": "<S>(s: S) => StateT2<M, S, E, void>",
                  },
                ],
              },
              "name": "StateM2C",
              "signature": "interface StateM2C<M extends URIS2, E> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L82",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateM3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "stateT.StateM3.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, R, E, A, B>(
    fab: StateT3<M, S, R, E, (a: A) => B>,
    fa: StateT3<M, S, R, E, A>
) => StateT3<M, S, R, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 108,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L108",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L108",
                    },
                    "type": "<S, R, E, A, B>(fab: StateT3<M, S, R, E, (a: A) => B>, fa: StateT3<M, S, R, E, A>) => StateT3<M, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, R, E, A, B>(
    fa: StateT3<M, S, R, E, A>,
    f: (a: A) => StateT3<M, S, R, E, B>
) => StateT3<M, S, R, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 112,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L112",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L112",
                    },
                    "type": "<S, R, E, A, B>(fa: StateT3<M, S, R, E, A>, f: (a: A) => StateT3<M, S, R, E, B>) => StateT3<M, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.evalState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalState",
                    "signature": "readonly evalState: <S, R, E, A>(
    ma: StateT3<M, S, R, E, A>,
    s: S
) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 122,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L122",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L122",
                    },
                    "type": "<S, R, E, A>(ma: StateT3<M, S, R, E, A>, s: S) => Kind3<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.execState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execState",
                    "signature": "readonly execState: <S, R, E, A>(
    ma: StateT3<M, S, R, E, A>,
    s: S
) => Kind3<M, R, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 123,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L123",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L123",
                    },
                    "type": "<S, R, E, A>(ma: StateT3<M, S, R, E, A>, s: S) => Kind3<M, R, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <S, R, E, A>(ma: Kind3<M, R, E, A>) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 121,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L121",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L121",
                    },
                    "type": "<S, R, E, A>(ma: Kind3<M, R, E, A>) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.fromState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromState",
                    "signature": "readonly fromState: <S, R, E, A>(fa: State<S, A>) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 120,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L120",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L120",
                    },
                    "type": "<S, R, E, A>(fa: State<S, A>) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.get",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "get",
                    "signature": "readonly get: <R, E, S>() => StateT3<M, S, R, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 116,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L116",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L116",
                    },
                    "type": "<R, E, S>() => StateT3<M, S, R, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.gets",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "gets",
                    "signature": "readonly gets: <S, R, E, A>(f: (s: S) => A) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 119,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L119",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L119",
                    },
                    "type": "<S, R, E, A>(f: (s: S) => A) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <S, R, E, A, B>(
    fa: StateT3<M, S, R, E, A>,
    f: (a: A) => B
) => StateT3<M, S, R, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 106,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L106",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L106",
                    },
                    "type": "<S, R, E, A, B>(fa: StateT3<M, S, R, E, A>, f: (a: A) => B) => StateT3<M, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.modify",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "modify",
                    "signature": "readonly modify: <R, E, S>(f: (s: S) => S) => StateT3<M, S, R, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 118,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L118",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L118",
                    },
                    "type": "<R, E, S>(f: (s: S) => S) => StateT3<M, S, R, E, void>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <S, R, E, A>(a: A) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 107,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L107",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L107",
                    },
                    "type": "<S, R, E, A>(a: A) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3.put",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "put",
                    "signature": "readonly put: <R, E, S>(s: S) => StateT3<M, S, R, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 117,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L117",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L117",
                    },
                    "type": "<R, E, S>(s: S) => StateT3<M, S, R, E, void>",
                  },
                ],
              },
              "name": "StateM3",
              "signature": "interface StateM3<M extends URIS3> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 105,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L105",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L105",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.5.4
 */",
              ],
              "id": "stateT.StateM3C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.ap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "ap",
                    "signature": "readonly ap: <S, R, A, B>(
    fab: StateT3<M, S, R, E, (a: A) => B>,
    fa: StateT3<M, S, R, E, A>
) => StateT3<M, S, R, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 131,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L131",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L131",
                    },
                    "type": "<S, R, A, B>(fab: StateT3<M, S, R, E, (a: A) => B>, fa: StateT3<M, S, R, E, A>) => StateT3<M, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <S, R, A, B>(
    fa: StateT3<M, S, R, E, A>,
    f: (a: A) => StateT3<M, S, R, E, B>
) => StateT3<M, S, R, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 132,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L132",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L132",
                    },
                    "type": "<S, R, A, B>(fa: StateT3<M, S, R, E, A>, f: (a: A) => StateT3<M, S, R, E, B>) => StateT3<M, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.evalState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalState",
                    "signature": "readonly evalState: <S, R, A>(
    ma: StateT3<M, S, R, E, A>,
    s: S
) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 142,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L142",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L142",
                    },
                    "type": "<S, R, A>(ma: StateT3<M, S, R, E, A>, s: S) => Kind3<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.execState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execState",
                    "signature": "readonly execState: <S, R, A>(
    ma: StateT3<M, S, R, E, A>,
    s: S
) => Kind3<M, R, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 143,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L143",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L143",
                    },
                    "type": "<S, R, A>(ma: StateT3<M, S, R, E, A>, s: S) => Kind3<M, R, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.fromM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromM",
                    "signature": "readonly fromM: <S, R, A>(ma: Kind3<M, R, E, A>) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 141,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L141",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L141",
                    },
                    "type": "<S, R, A>(ma: Kind3<M, R, E, A>) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.fromState",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fromState",
                    "signature": "readonly fromState: <S, R, A>(fa: State<S, A>) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 140,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L140",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L140",
                    },
                    "type": "<S, R, A>(fa: State<S, A>) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.get",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "get",
                    "signature": "readonly get: <R, S>() => StateT3<M, S, R, E, S>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 136,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L136",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L136",
                    },
                    "type": "<R, S>() => StateT3<M, S, R, E, S>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.gets",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "gets",
                    "signature": "readonly gets: <S, R, A>(f: (s: S) => A) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 139,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L139",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L139",
                    },
                    "type": "<S, R, A>(f: (s: S) => A) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <S, R, A, B>(
    fa: StateT3<M, S, R, E, A>,
    f: (a: A) => B
) => StateT3<M, S, R, E, B>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 129,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L129",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L129",
                    },
                    "type": "<S, R, A, B>(fa: StateT3<M, S, R, E, A>, f: (a: A) => B) => StateT3<M, S, R, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.modify",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "modify",
                    "signature": "readonly modify: <R, S>(f: (s: S) => S) => StateT3<M, S, R, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 138,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L138",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L138",
                    },
                    "type": "<R, S>(f: (s: S) => S) => StateT3<M, S, R, E, void>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.of",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "of",
                    "signature": "readonly of: <S, R, A>(a: A) => StateT3<M, S, R, E, A>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 130,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L130",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L130",
                    },
                    "type": "<S, R, A>(a: A) => StateT3<M, S, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "stateT.StateM3C.put",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "put",
                    "signature": "readonly put: <R, S>(s: S) => StateT3<M, S, R, E, void>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 137,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L137",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L137",
                    },
                    "type": "<R, S>(s: S) => StateT3<M, S, R, E, void>",
                  },
                ],
              },
              "name": "StateM3C",
              "signature": "interface StateM3C<M extends URIS3, E> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L128",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateT",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "stateT.StateT.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(s: S): HKT<M, [A, S]>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L12",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "StateT",
              "signature": "interface StateT<M, S, A> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L11",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateT1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "stateT.StateT1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(s: S): Kind<M, [A, S]>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 36,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L36",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L36",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "StateT1",
              "signature": "interface StateT1<M extends URIS, S, A> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 35,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L35",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L35",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateT2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "stateT.StateT2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(s: S): Kind2<M, E, [A, S]>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 60,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L60",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L60",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "StateT2",
              "signature": "interface StateT2<M extends URIS2, S, E, A> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 59,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L59",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L59",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "stateT.StateT3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "stateT.StateT3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(s: S): Kind3<M, R, E, [A, S]>;",
                    "source": {
                      "filename": "lib/StateT.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L100",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "StateT3",
              "signature": "interface StateT3<M extends URIS3, S, R, E, A> {}",
              "source": {
                "filename": "lib/StateT.d.ts",
                "line": 99,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L99",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L99",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "stateT",
        "kind": "namespace",
        "name": "stateT",
        "signature": "module 'lib/StateT.d.ts' {}",
        "source": {
          "filename": "lib/StateT.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "store.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <E, A>(wa: Store<E, A>) => Store<E, Store<E, A>>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 73,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L73",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L73",
              },
              "type": "<E, A>(wa: Store<E, A>) => Store<E, Store<E, A>>",
            },
            {
              "docs": [
                "/**
 * Extract a collection of values from positions which depend on the current position
 *
 * @since 2.0.0
 */",
              ],
              "id": "store.experiment",
              "kind": "function",
              "name": "experiment",
              "signature": "experiment: {
    <F extends URIS3>(F: Functor3<F>): <R, E, S>(
        f: (s: S) => Kind3<F, R, E, S>
    ) => <A>(wa: Store<S, A>) => Kind3<F, R, E, A>;
    <F extends URIS3, E>(F: Functor3C<F, E>): <R, S>(
        f: (s: S) => Kind3<F, R, E, S>
    ) => <A>(wa: Store<S, A>) => Kind3<F, R, E, A>;
    <F extends URIS2>(F: Functor2<F>): <E, S>(
        f: (s: S) => Kind2<F, E, S>
    ) => <A>(wa: Store<S, A>) => Kind2<F, E, A>;
    <F extends URIS2, E>(F: Functor2C<F, E>): <S>(
        f: (s: S) => Kind2<F, E, S>
    ) => <A>(wa: Store<S, A>) => Kind2<F, E, A>;
    <F extends URIS>(F: Functor1<F>): <S>(
        f: (s: S) => Kind<F, S>
    ) => <A>(wa: Store<S, A>) => Kind<F, A>;
    <F>(F: FunctorHKT<F>): <S>(
        f: (s: S) => HKT<F, S>
    ) => <A>(wa: Store<S, A>) => HKT<F, A>;
};",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 39,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L39",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L39",
              },
              "type": "{ <F extends URIS3>(F: Functor3<F>): <R, E, S>(f: (s: S) => Kind3<F, R, E, S>) => <A>(wa: Store<S, A>) => Kind3<F, R, E, A>; <F extends URIS3, E>(F: Functor3C<F, E>): <R, S>(f: (s: S) => Kind3<F, R, E, S>) => <A>(wa: Store<S, A>) => Kind3<F, R, E, A>; <F extends URIS2>(F: Functor2<F>): <E, S>(f: (s: S) => Kind2<F, E, S>) => <A>(wa: Store<S, A>) => Kind2<F, E, A>; <F extends URIS2, E>(F: Functor2C<F, E>): <S>(f: (s: S) => Kind2<F, E, S>) => <A>(wa: Store<S, A>) => Kind2<F, E, A>; <F extends URIS>(F: Functor1<F>): <S>(f: (s: S) => Kind<F, S>) => <A>(wa: Store<S, A>) => Kind<F, A>; <F>(F: FunctorHKT<F>): <S>(f: (s: S) => HKT<F, S>) => <A>(wa: Store<S, A>) => HKT<F, A>; }",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "store.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <E, A, B>(f: (wa: Store<E, A>) => B) => (wa: Store<E, A>) => Store<E, B>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L61",
              },
              "type": "<E, A, B>(f: (wa: Store<E, A>) => B) => (wa: Store<E, A>) => Store<E, B>",
            },
            {
              "docs": [
                "/**
 * @category Extract
 * @since 2.6.2
 */",
              ],
              "id": "store.extract",
              "kind": "function",
              "name": "extract",
              "signature": "extract: <E, A>(wa: Store<E, A>) => A;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L66",
              },
              "type": "<E, A>(wa: Store<E, A>) => A",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "store.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: Store<E, A>) => Store<E, B>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L81",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: Store<E, A>) => Store<E, B>",
            },
            {
              "docs": [
                "/**
 * Extract a value from a position which depends on the current position
 *
 * @since 2.0.0
 */",
              ],
              "id": "store.peeks",
              "kind": "function",
              "name": "peeks",
              "signature": "peeks: <S>(f: Endomorphism<S>) => <A>(wa: Store<S, A>) => A;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L33",
              },
              "type": "<S>(f: Endomorphism<S>) => <A>(wa: Store<S, A>) => A",
            },
            {
              "docs": [
                "/**
 * Reposition the focus at the specified position
 *
 * @since 2.0.0
 */",
              ],
              "id": "store.seek",
              "kind": "function",
              "name": "seek",
              "signature": "seek: <S>(s: S) => <A>(wa: Store<S, A>) => Store<S, A>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 21,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L21",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L21",
              },
              "type": "<S>(s: S) => <A>(wa: Store<S, A>) => Store<S, A>",
            },
            {
              "docs": [
                "/**
 * Reposition the focus at the specified position, which depends on the current position
 *
 * @since 2.0.0
 */",
              ],
              "id": "store.seeks",
              "kind": "function",
              "name": "seeks",
              "signature": "seeks: <S>(f: Endomorphism<S>) => <A>(wa: Store<S, A>) => Store<S, A>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L27",
              },
              "type": "<S>(f: Endomorphism<S>) => <A>(wa: Store<S, A>) => Store<S, A>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "store.Store",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "store.Store.peek",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "peek",
                    "signature": "readonly peek: (s: S) => A;",
                    "source": {
                      "filename": "lib/Store.d.ts",
                      "line": 13,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L13",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L13",
                    },
                    "type": "(s: S) => A",
                  },
                  {
                    "docs": [],
                    "id": "store.Store.pos",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "pos",
                    "signature": "readonly pos: S;",
                    "source": {
                      "filename": "lib/Store.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L14",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Store",
              "signature": "interface Store<S, A> {}",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 12,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L12",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L12",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "store.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L91",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "store.Comonad",
              "kind": "variable",
              "name": "Comonad",
              "signature": "const Comonad: Comonad2<'Store'>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 106,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L106",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L106",
              },
              "type": "Comonad2<"Store">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "store.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Store'>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L101",
              },
              "type": "Functor2<"Store">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "store.store",
              "kind": "variable",
              "name": "store",
              "signature": "const store: Comonad2<'Store'>;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 111,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L111",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L111",
              },
              "type": "Comonad2<"Store">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "store.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Store.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L86",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "store",
        "kind": "namespace",
        "name": "store",
        "signature": "module 'lib/Store.d.ts' {}",
        "source": {
          "filename": "lib/Store.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Compose a value which introduces a tuple from two values, each introducing one side of the tuple.
 *
 * This combinator is useful when assembling values from smaller components, because it provides a way to support two
 * different types of output.
 *
 * Specializing \`(&&&)\` to function application would look like this:
 *
 * \`\`\`purescript
 * (&&&) :: forall a b c. (a -> b) -> (a -> c) -> (a -> (Tuple b c))
 * \`\`\`
 *
 * We take two functions, \`f\` and \`g\`, with the same parameter type and we transform them into a single function which
 * takes one parameter and returns a tuple of the results of running \`f\` and \`g\` on the parameter, respectively.  This
 * allows us to run two parallel computations on the same input and return both results in a tuple.
 *
 * @since 2.0.0
 */",
              ],
              "id": "strong.fanout",
              "kind": "function",
              "name": "fanout",
              "signature": "fanout: {
    <F extends URIS4>(F: Category4<F> & Strong4<F>): <S, R, A, B, C>(
        pab: Kind4<F, S, R, A, B>,
        pac: Kind4<F, S, R, A, C>
    ) => Kind4<F, S, R, A, [B, C]>;
    <F extends URIS3>(F: Category3<F> & Strong3<F>): <R, A, B, C>(
        pab: Kind3<F, R, A, B>,
        pac: Kind3<F, R, A, C>
    ) => Kind3<F, R, A, [B, C]>;
    <F extends URIS2>(F: Category2<F> & Strong2<F>): <A, B, C>(
        pab: Kind2<F, A, B>,
        pac: Kind2<F, A, C>
    ) => Kind2<F, A, [B, C]>;
    <F>(F: Category<F> & Strong<F>): <A, B, C>(
        pab: HKT2<F, A, B>,
        pac: HKT2<F, A, C>
    ) => HKT2<F, A, [B, C]>;
};",
              "source": {
                "filename": "lib/Strong.d.ts",
                "line": 109,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L109",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L109",
              },
              "type": "{ <F extends URIS4>(F: Category4<F> & Strong4<F>): <S, R, A, B, C>(pab: Kind4<F, S, R, A, B>, pac: Kind4<F, S, R, A, C>) => Kind4<F, S, R, A, [B, C]>; <F extends URIS3>(F: Category3<F> & Strong3<F>): <R, A, B, C>(pab: Kind3<F, R, A, B>, pac: Kind3<F, R, A, C>) => Kind3<F, R, A, [B, C]>; <F extends URIS2>(F: Category2<F> & Strong2<F>): <A, B, C>(pab: Kind2<F, A, B>, pac: Kind2<F, A, C>) => Kind2<F, A, [B, C]>; <F>(F: Category<F> & Strong<F>): <A, B, C>(pab: HKT2<F, A, B>, pac: HKT2<F, A, C>) => HKT2<F, A, [B, C]>; }",
            },
            {
              "docs": [
                "/**
 * Compose a value acting on a tuple from two values, each acting on one of the components of the tuple.
 *
 * Specializing \`(***)\` to function application would look like this:
 *
 * \`\`\`purescript
 * (***) :: forall a b c d. (a -> b) -> (c -> d) -> (Tuple a c) -> (Tuple b d)
 * \`\`\`
 *
 * We take two functions, \`f\` and \`g\`, and we transform them into a single function which takes a tuple and maps \`f\`
 * over the first element and \`g\` over the second.  Just like \`bi-map\` would do for the \`bi-functor\` instance of tuple.
 *
 * @since 2.0.0
 */",
              ],
              "id": "strong.splitStrong",
              "kind": "function",
              "name": "splitStrong",
              "signature": "splitStrong: {
    <F extends URIS4>(F: Category4<F> & Strong4<F>): <S, R, A, B, C, D>(
        pab: Kind4<F, S, R, A, B>,
        pcd: Kind4<F, S, R, C, D>
    ) => Kind4<F, S, R, [A, C], [B, D]>;
    <F extends URIS3>(F: Category3<F> & Strong3<F>): <R, A, B, C, D>(
        pab: Kind3<F, R, A, B>,
        pcd: Kind3<F, R, C, D>
    ) => Kind3<F, R, [A, C], [B, D]>;
    <F extends URIS2>(F: Category2<F> & Strong2<F>): <A, B, C, D>(
        pab: Kind2<F, A, B>,
        pcd: Kind2<F, C, D>
    ) => Kind2<F, [A, C], [B, D]>;
    <F>(F: Category<F> & Strong<F>): <A, B, C, D>(
        pab: HKT2<F, A, B>,
        pcd: HKT2<F, C, D>
    ) => HKT2<F, [A, C], [B, D]>;
};",
              "source": {
                "filename": "lib/Strong.d.ts",
                "line": 79,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L79",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L79",
              },
              "type": "{ <F extends URIS4>(F: Category4<F> & Strong4<F>): <S, R, A, B, C, D>(pab: Kind4<F, S, R, A, B>, pcd: Kind4<F, S, R, C, D>) => Kind4<F, S, R, [A, C], [B, D]>; <F extends URIS3>(F: Category3<F> & Strong3<F>): <R, A, B, C, D>(pab: Kind3<F, R, A, B>, pcd: Kind3<F, R, C, D>) => Kind3<F, R, [A, C], [B, D]>; <F extends URIS2>(F: Category2<F> & Strong2<F>): <A, B, C, D>(pab: Kind2<F, A, B>, pcd: Kind2<F, C, D>) => Kind2<F, [A, C], [B, D]>; <F>(F: Category<F> & Strong<F>): <A, B, C, D>(pab: HKT2<F, A, B>, pcd: HKT2<F, C, D>) => HKT2<F, [A, C], [B, D]>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "strong.Strong",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "strong.Strong.first",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "first",
                    "signature": "readonly first: <A, B, C>(pab: HKT2<F, A, B>) => HKT2<F, [A, C], [B, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 38,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L38",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L38",
                    },
                    "type": "<A, B, C>(pab: HKT2<F, A, B>) => HKT2<F, [A, C], [B, C]>",
                  },
                  {
                    "docs": [],
                    "id": "strong.Strong.second",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "second",
                    "signature": "readonly second: <A, B, C>(pab: HKT2<F, B, C>) => HKT2<F, [A, B], [A, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L39",
                    },
                    "type": "<A, B, C>(pab: HKT2<F, B, C>) => HKT2<F, [A, B], [A, C]>",
                  },
                ],
              },
              "name": "Strong",
              "signature": "interface Strong<F> extends Profunctor<F> {}",
              "source": {
                "filename": "lib/Strong.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L37",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "strong.Strong2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "strong.Strong2.first",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "first",
                    "signature": "readonly first: <A, B, C>(pab: Kind2<F, A, B>) => Kind2<F, [A, C], [B, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L46",
                    },
                    "type": "<A, B, C>(pab: Kind2<F, A, B>) => Kind2<F, [A, C], [B, C]>",
                  },
                  {
                    "docs": [],
                    "id": "strong.Strong2.second",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "second",
                    "signature": "readonly second: <A, B, C>(pab: Kind2<F, B, C>) => Kind2<F, [A, B], [A, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L47",
                    },
                    "type": "<A, B, C>(pab: Kind2<F, B, C>) => Kind2<F, [A, B], [A, C]>",
                  },
                ],
              },
              "name": "Strong2",
              "signature": "interface Strong2<F extends URIS2> extends Profunctor2<F> {}",
              "source": {
                "filename": "lib/Strong.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L45",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "strong.Strong3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "strong.Strong3.first",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "first",
                    "signature": "readonly first: <R, A, B, C>(
    pab: Kind3<F, R, A, B>
) => Kind3<F, R, [A, C], [B, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L54",
                    },
                    "type": "<R, A, B, C>(pab: Kind3<F, R, A, B>) => Kind3<F, R, [A, C], [B, C]>",
                  },
                  {
                    "docs": [],
                    "id": "strong.Strong3.second",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "second",
                    "signature": "readonly second: <R, A, B, C>(
    pab: Kind3<F, R, B, C>
) => Kind3<F, R, [A, B], [A, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L55",
                    },
                    "type": "<R, A, B, C>(pab: Kind3<F, R, B, C>) => Kind3<F, R, [A, B], [A, C]>",
                  },
                ],
              },
              "name": "Strong3",
              "signature": "interface Strong3<F extends URIS3> extends Profunctor3<F> {}",
              "source": {
                "filename": "lib/Strong.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L53",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "strong.Strong4",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "strong.Strong4.first",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "first",
                    "signature": "readonly first: <S, R, A, B, C>(
    pab: Kind4<F, S, R, A, B>
) => Kind4<F, S, R, [A, C], [B, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 62,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L62",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L62",
                    },
                    "type": "<S, R, A, B, C>(pab: Kind4<F, S, R, A, B>) => Kind4<F, S, R, [A, C], [B, C]>",
                  },
                  {
                    "docs": [],
                    "id": "strong.Strong4.second",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "second",
                    "signature": "readonly second: <S, R, A, B, C>(
    pab: Kind4<F, S, R, B, C>
) => Kind4<F, S, R, [A, B], [A, C]>;",
                    "source": {
                      "filename": "lib/Strong.d.ts",
                      "line": 63,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L63",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L63",
                    },
                    "type": "<S, R, A, B, C>(pab: Kind4<F, S, R, B, C>) => Kind4<F, S, R, [A, B], [A, C]>",
                  },
                ],
              },
              "name": "Strong4",
              "signature": "interface Strong4<F extends URIS4> extends Profunctor4<F> {}",
              "source": {
                "filename": "lib/Strong.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L61",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * The \`Strong\` class extends \`Profunctor\` with combinators for working with product types.
 *
 * \`first\` and \`second\` lift values in a \`Profunctor\` to act on the first and second components of a tuple,
 * respectively.
 *
 * Another way to think about Strong is to piggyback on the intuition of
 * inputs and outputs.  Rewriting the type signature in this light then yields:
 *
 * \`\`\`purescript
 * first ::  forall input output a. p input output -> p (Tuple input a) (Tuple output a)
 * second :: forall input output a. p input output -> p (Tuple a input) (Tuple a output)
 * \`\`\`
 *
 * If we specialize the profunctor p to the function arrow, we get the following type
 * signatures, which may look a bit more familiar:
 *
 * \`\`\`purescript
 * first ::  forall input output a. (input -> output) -> (Tuple input a) -> (Tuple output a)
 * second :: forall input output a. (input -> output) -> (Tuple a input) -> (Tuple a output)
 * \`\`\`
 *
 * So, when the \`profunctor\` is \`Function\` application, \`first\` essentially applies your function
 * to the first element of a tuple, and \`second\` applies it to the second element (same as \`map\` would do).
 *
 * Adapted from https://github.com/purescript/purescript-profunctor/blob/master/src/Data/Profunctor/Strong.purs
 *
 * @since 2.0.0
 */",
        ],
        "id": "strong",
        "kind": "namespace",
        "name": "strong",
        "signature": "module 'lib/Strong.d.ts' {}",
        "source": {
          "filename": "lib/Strong.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "task.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(fa: Task<A>) => <B>(fab: Task<(a: A) => B>) => Task<B>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 83,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L83",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L83",
              },
              "type": "<A>(fa: Task<A>) => <B>(fab: Task<(a: A) => B>) => Task<B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "task.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(fb: Task<B>) => <A>(fa: Task<A>) => Task<A>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 92,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L92",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L92",
              },
              "type": "<B>(fb: Task<B>) => <A>(fa: Task<A>) => Task<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "task.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: Task<B>
) => (fa: Task<A>) => Task<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 252,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L252",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L252",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: Task<B>) => (fa: Task<A>) => Task<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "task.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(fb: Task<B>) => <A>(fa: Task<A>) => Task<B>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L101",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L101",
              },
              "type": "<B>(fb: Task<B>) => <A>(fa: Task<A>) => Task<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "task.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => Task<B>
) => (fa: Task<A>) => Task<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 245,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L245",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L245",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => Task<B>) => (fa: Task<A>) => Task<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "task.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(name: N) => <A>(fa: Task<A>) => Task<{ [K in N]: A }>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 241,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L241",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L241",
              },
              "type": "<N extends string>(name: N) => <A>(fa: Task<A>) => Task<{ [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "task.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(f: (a: A) => Task<B>) => (ma: Task<A>) => Task<B>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L115",
              },
              "type": "<A, B>(f: (a: A) => Task<B>) => (ma: Task<A>) => Task<B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "task.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(f: (a: A) => Task<B>) => (ma: Task<A>) => Task<A>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 125,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L125",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L125",
              },
              "type": "<A, B>(f: (a: A) => Task<B>) => (ma: Task<A>) => Task<A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "task.chainIOK",
              "kind": "function",
              "name": "chainIOK",
              "signature": "chainIOK: <A, B>(f: (a: A) => IO<B>) => (ma: Task<A>) => Task<B>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 68,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L68",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L68",
              },
              "type": "<A, B>(f: (a: A) => IO<B>) => (ma: Task<A>) => Task<B>",
            },
            {
              "docs": [
                "/**
 * Creates a task that will complete after a time delay
 *
 * @example
 * import { sequenceT } from 'fp-ts/Apply'
 * import * as T from 'fp-ts/Task'
 *
 * async function test() {
 *   const log: Array<string> = []
 *   const append = (message: string): T.Task<void> =>
 *     T.fromIO(() => {
 *       log.push(message)
 *     })
 *   const fa = append('a')
 *   const fb = append('b')
 *   const fc = T.delay(10)(append('c'))
 *   const fd = append('d')
 *   await sequenceT(T.task)(fa, fb, fc, fd)()
 *   assert.deepStrictEqual(log, ['a', 'b', 'd', 'c'])
 * }
 *
 * test()
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "task.delay",
              "kind": "function",
              "name": "delay",
              "signature": "delay: (millis: number) => <A>(ma: Task<A>) => Task<A>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 58,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L58",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L58",
              },
              "type": "(millis: number) => <A>(ma: Task<A>) => Task<A>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "task.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: Task<Task<A>>) => Task<A>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L132",
              },
              "type": "<A>(mma: Task<Task<A>>) => Task<A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "task.fromIO",
              "kind": "function",
              "name": "fromIO",
              "signature": "fromIO: <A>(ma: IO<A>) => Task<A>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L31",
              },
              "type": "<A>(ma: IO<A>) => Task<A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "task.fromIOK",
              "kind": "function",
              "name": "fromIOK",
              "signature": "fromIOK: <A extends readonly unknown[], B>(
    f: (...a: A) => IO<B>
) => (...a: A) => Task<B>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L63",
              },
              "type": "<A extends readonly unknown[], B>(f: (...a: A) => IO<B>) => (...a: A) => Task<B>",
            },
            {
              "docs": [
                "/**
 * Lift a monoid into 'Task', the inner values are concatenated using the provided \`Monoid\`.
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "task.getMonoid",
              "kind": "function",
              "name": "getMonoid",
              "signature": "getMonoid: <A>(M: Monoid<A>) => Monoid<Task<A>>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 179,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L179",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L179",
              },
              "type": "<A>(M: Monoid<A>) => Monoid<Task<A>>",
            },
            {
              "docs": [
                "/**
 * Monoid returning the first completed task.
 *
 * Note: uses \`Promise.race\` internally.
 *
 * @example
 * import * as T from 'fp-ts/Task'
 *
 * async function test() {
 *   const S = T.getRaceMonoid<string>()
 *   const fa = T.delay(20)(T.of('a'))
 *   const fb = T.delay(10)(T.of('b'))
 *   assert.deepStrictEqual(await S.concat(fa, fb)(), 'b')
 * }
 *
 * test()
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "task.getRaceMonoid",
              "kind": "function",
              "name": "getRaceMonoid",
              "signature": "getRaceMonoid: <A = never>() => Monoid<Task<A>>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 200,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L200",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L200",
              },
              "type": "<A = never>() => Monoid<Task<A>>",
            },
            {
              "docs": [
                "/**
 * Lift a semigroup into 'Task', the inner values are concatenated using the provided \`Semigroup\`.
 *
 * @example
 * import * as T from 'fp-ts/Task'
 * import { semigroupString } from 'fp-ts/Semigroup'
 *
 * async function test() {
 *   const S = T.getSemigroup(semigroupString)
 *   const fa = T.of('a')
 *   const fb = T.of('b')
 *   assert.deepStrictEqual(await S.concat(fa, fb)(), 'ab')
 * }
 *
 * test()
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "task.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <A>(S: Semigroup<A>) => Semigroup<Task<A>>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 172,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L172",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L172",
              },
              "type": "<A>(S: Semigroup<A>) => Semigroup<Task<A>>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "task.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: Task<A>) => Task<B>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L76",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: Task<A>) => Task<B>",
            },
            {
              "docs": [
                "/**
 * this function works like \`Promise.all\` it will get an array of tasks and return a task of array.
 *
 * this function have the same behavior of \`A.sequence(T.task)\` but it's stack safe.
 *
 * > **This function run all task in parallel for sequential use \`sequenceSeqArray\` **
 *
 * @example
 * import * as RA from 'fp-ts/ReadonlyArray'
 * import { pipe } from 'fp-ts/function'
 * import { of, sequenceArray } from 'fp-ts/Task'
 *
 * async function test() {
 *   const arr = RA.range(1, 10)
 *   assert.deepStrictEqual(await pipe(arr, RA.map(of), sequenceArray)(), arr)
 * }
 *
 * test()
 *
 * @since 2.9.0
 */",
              ],
              "id": "task.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <A>(arr: readonly Task<A>[]) => Task<readonly A[]>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 304,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L304",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L304",
              },
              "type": "<A>(arr: readonly Task<A>[]) => Task<readonly A[]>",
            },
            {
              "docs": [
                "/**
 * run tasks in array sequential and give a task of array
 *
 * this function have the same behavior of \`A.sequence(T.taskSeq)\` but it's stack safe.
 *
 * > **This function run all task sequentially for parallel use \`sequenceArray\` **
 *
 * @since 2.9.0
 */",
              ],
              "id": "task.sequenceSeqArray",
              "kind": "function",
              "name": "sequenceSeqArray",
              "signature": "sequenceSeqArray: <A>(arr: readonly Task<A>[]) => Task<readonly A[]>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 331,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L331",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L331",
              },
              "type": "<A>(arr: readonly Task<A>[]) => Task<readonly A[]>",
            },
            {
              "docs": [
                "/**
 * this function map array to task using provided function and transform it to a task of array.
 *
 * this function have the same behavior of \`A.traverse(T.task)\` but it's stack safe.
 *
 * > **This function run all task in parallel for sequential use \`traverseSeqArray\` **
 *
 * @example
 * import { range } from 'fp-ts/ReadonlyArray'
 * import { pipe } from 'fp-ts/function'
 * import { of, traverseArray } from 'fp-ts/Task'
 * async function test() {
 *   const arr = range(0, 10)
 *   assert.deepStrictEqual(await pipe(arr, traverseArray(of))(), arr)
 * }
 *
 * test()
 *
 * @since 2.9.0
 */",
              ],
              "id": "task.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <A, B>(
    f: (a: A) => Task<B>
) => (arr: readonly A[]) => Task<readonly B[]>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 282,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L282",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L282",
              },
              "type": "<A, B>(f: (a: A) => Task<B>) => (arr: readonly A[]) => Task<readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "task.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <A, B>(
    f: (index: number, a: A) => Task<B>
) => (arr: readonly A[]) => Task<readonly B[]>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 259,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L259",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L259",
              },
              "type": "<A, B>(f: (index: number, a: A) => Task<B>) => (arr: readonly A[]) => Task<readonly B[]>",
            },
            {
              "docs": [
                "/**
 * runs an action for every element in array then run task sequential, and accumulates the results in the array.
 *
 * this function have the same behavior of \`A.traverse(T.taskSeq)\` but it's stack safe.
 *
 * > **This function run all task sequentially for parallel use \`traverseArray\` **
 *
 *
 * @since 2.9.0
 */",
              ],
              "id": "task.traverseSeqArray",
              "kind": "function",
              "name": "traverseSeqArray",
              "signature": "traverseSeqArray: <A, B>(
    f: (a: A) => Task<B>
) => (arr: readonly A[]) => Task<readonly B[]>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 321,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L321",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L321",
              },
              "type": "<A, B>(f: (a: A) => Task<B>) => (arr: readonly A[]) => Task<readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "task.traverseSeqArrayWithIndex",
              "kind": "function",
              "name": "traverseSeqArrayWithIndex",
              "signature": "traverseSeqArrayWithIndex: <A, B>(
    f: (index: number, a: A) => Task<B>
) => (arr: readonly A[]) => Task<readonly B[]>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 308,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L308",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L308",
              },
              "type": "<A, B>(f: (index: number, a: A) => Task<B>) => (arr: readonly A[]) => Task<readonly B[]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "task.Task",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "task.Task.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): Promise<A>;",
                    "source": {
                      "filename": "lib/Task.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L25",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Task",
              "signature": "interface Task<A> {}",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L24",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "task.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 147,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L147",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L147",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "task.ApplicativePar",
              "kind": "variable",
              "name": "ApplicativePar",
              "signature": "const ApplicativePar: Applicative1<'Task'>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 210,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L210",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L210",
              },
              "type": "Applicative1<"Task">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "task.ApplicativeSeq",
              "kind": "variable",
              "name": "ApplicativeSeq",
              "signature": "const ApplicativeSeq: Applicative1<'Task'>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 215,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L215",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L215",
              },
              "type": "Applicative1<"Task">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "task.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: Task<{}>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 237,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L237",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L237",
              },
              "type": "Task<{}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadTask
 * @since 2.7.0
 */",
              ],
              "id": "task.fromTask",
              "kind": "variable",
              "name": "fromTask",
              "signature": "const fromTask: <A>(fa: Task<A>) => Kind<M, A>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 137,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L137",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L137",
              },
              "type": "<A>(fa: Task<A>) => Kind<M, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "task.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'Task'>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 205,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L205",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L205",
              },
              "type": "Functor1<"Task">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * A \`Task\` that never completes.
 *
 * @since 2.0.0
 */",
              ],
              "id": "task.never",
              "kind": "variable",
              "name": "never",
              "signature": "const never: Task<never>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 233,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L233",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L233",
              },
              "type": "Task<never>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "task.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 108,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L108",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L108",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "task.task",
              "kind": "variable",
              "name": "task",
              "signature": "const task: Monad1<'Task'> & MonadTask1<'Task'>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 220,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L220",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L220",
              },
              "type": "Monad1<"Task"> & MonadTask1<"Task">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Like \`task\` but \`ap\` is sequential
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "task.taskSeq",
              "kind": "variable",
              "name": "taskSeq",
              "signature": "const taskSeq: Monad1<'Task'> & MonadTask1<'Task'>;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 227,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L227",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L227",
              },
              "type": "Monad1<"Task"> & MonadTask1<"Task">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "task.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Task.d.ts",
                "line": 142,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L142",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L142",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * \`\`\`ts
 * interface Task<A> {
 *   (): Promise<A>
 * }
 * \`\`\`
 *
 * \`Task<A>\` represents an asynchronous computation that yields a value of type \`A\` and **never fails**.
 * If you want to represent an asynchronous computation that may fail, please see \`TaskEither\`.
 *
 * @since 2.0.0
 */",
        ],
        "id": "task",
        "kind": "namespace",
        "name": "task",
        "signature": "module 'lib/Task.d.ts' {}",
        "source": {
          "filename": "lib/Task.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Identifies an associative operation on a type constructor. It is similar to \`Semigroup\`, except that it applies to
 * types of kind \`* -> *\`.
 *
 * In case of \`TaskEither\` returns \`fa\` if is a \`Right\` or the value returned by \`that\` otherwise.
 *
 * See also [orElse](#orElse).
 *
 * @example
 * import * as E from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 * import * as TE from 'fp-ts/TaskEither'
 *
 * async function test() {
 *   assert.deepStrictEqual(
 *     await pipe(
 *       TE.right(1),
 *       TE.alt(() => TE.right(2))
 *     )(),
 *     E.right(1)
 *   )
 *   assert.deepStrictEqual(
 *     await pipe(
 *       TE.left('a'),
 *       TE.alt(() => TE.right(2))
 *     )(),
 *     E.right(2)
 *   )
 *   assert.deepStrictEqual(
 *     await pipe(
 *       TE.left('a'),
 *       TE.alt(() => TE.left('b'))
 *     )(),
 *     E.left('b')
 *   )
 * }
 *
 * test()
 *
 * @category Alt
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.alt",
              "kind": "function",
              "name": "alt",
              "signature": "alt: <E, A>(
    that: Lazy<TaskEither<E, A>>
) => (fa: TaskEither<E, A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 388,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L388",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L388",
              },
              "type": "<E, A>(that: Lazy<TaskEither<E, A>>) => (fa: TaskEither<E, A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`alt\`](#alt).
 *
 * @category Alt
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.altW",
              "kind": "function",
              "name": "altW",
              "signature": "altW: <E2, B>(
    that: Lazy<TaskEither<E2, B>>
) => <E1, A>(fa: TaskEither<E1, A>) => TaskEither<E2 | E1, B | A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 343,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L343",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L343",
              },
              "type": "<E2, B>(that: Lazy<TaskEither<E2, B>>) => <E1, A>(fa: TaskEither<E1, A>) => TaskEither<E2 | E1, B | A>",
            },
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <E, A>(
    fa: TaskEither<E, A>
) => <B>(fab: TaskEither<E, (a: A) => B>) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 274,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L274",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L274",
              },
              "type": "<E, A>(fa: TaskEither<E, A>) => <B>(fab: TaskEither<E, (a: A) => B>) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <E, B>(
    fb: TaskEither<E, B>
) => <A>(fa: TaskEither<E, A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 283,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L283",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L283",
              },
              "type": "<E, B>(fb: TaskEither<E, B>) => <A>(fa: TaskEither<E, A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "taskEither.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, E, B>(
    name: Exclude<N, keyof A>,
    fb: TaskEither<E, B>
) => (
    fa: TaskEither<E, A>
) => TaskEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 607,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L607",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L607",
              },
              "type": "<A, N extends string, E, B>(name: Exclude<N, keyof A>, fb: TaskEither<E, B>) => (fa: TaskEither<E, A>) => TaskEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <E, B>(
    fb: TaskEither<E, B>
) => <A>(fa: TaskEither<E, A>) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 292,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L292",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L292",
              },
              "type": "<E, B>(fb: TaskEither<E, B>) => <A>(fa: TaskEither<E, A>) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "taskEither.apSW",
              "kind": "function",
              "name": "apSW",
              "signature": "apSW: <A, N extends string, D, B>(
    name: Exclude<N, keyof A>,
    fb: TaskEither<D, B>
) => <E>(
    fa: TaskEither<E, A>
) => TaskEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 600,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L600",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L600",
              },
              "type": "<A, N extends string, D, B>(name: Exclude<N, keyof A>, fb: TaskEither<D, B>) => <E>(fa: TaskEither<E, A>) => TaskEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`ap\`](#ap).
 *
 * @category Apply
 * @since 2.8.0
 */",
              ],
              "id": "taskEither.apW",
              "kind": "function",
              "name": "apW",
              "signature": "apW: <D, A>(
    fa: TaskEither<D, A>
) => <E, B>(fab: TaskEither<E, (a: A) => B>) => TaskEither<D | E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 265,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L265",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L265",
              },
              "type": "<D, A>(fa: TaskEither<D, A>) => <E, B>(fab: TaskEither<E, (a: A) => B>) => TaskEither<D | E, B>",
            },
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: TaskEither<E, A>) => TaskEither<G, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 251,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L251",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L251",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: TaskEither<E, A>) => TaskEither<G, B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "taskEither.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, E, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => TaskEither<E, B>
) => (
    fa: TaskEither<E, A>
) => TaskEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 586,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L586",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L586",
              },
              "type": "<N extends string, A, E, B>(name: Exclude<N, keyof A>, f: (a: A) => TaskEither<E, B>) => (fa: TaskEither<E, A>) => TaskEither<E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "taskEither.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(
    name: N
) => <E, A>(fa: TaskEither<E, A>) => TaskEither<E, { [K in N]: A }>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 573,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L573",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L573",
              },
              "type": "<N extends string>(name: N) => <E, A>(fa: TaskEither<E, A>) => TaskEither<E, { [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "taskEither.bindW",
              "kind": "function",
              "name": "bindW",
              "signature": "bindW: <N extends string, A, D, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => TaskEither<D, B>
) => <E>(
    fa: TaskEither<E, A>
) => TaskEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 579,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L579",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L579",
              },
              "type": "<N extends string, A, D, B>(name: Exclude<N, keyof A>, f: (a: A) => TaskEither<D, B>) => <E>(fa: TaskEither<E, A>) => TaskEither<D | E, { [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Make sure that a resource is cleaned up in the event of an exception (\\*). The release action is called regardless of
 * whether the body action throws (\\*) or returns.
 *
 * (\\*) i.e. returns a \`Left\`
 *
 * Derivable from \`MonadThrow\`.
 *
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.bracket",
              "kind": "function",
              "name": "bracket",
              "signature": "bracket: <E, A, B>(
    acquire: TaskEither<E, A>,
    use: (a: A) => TaskEither<E, B>,
    release: (a: A, e: E.Either<E, B>) => TaskEither<E, void>
) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 561,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L561",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L561",
              },
              "type": "<E, A, B>(acquire: TaskEither<E, A>, use: (a: A) => TaskEither<E, B>, release: (a: A, e: E.Either<E, B>) => TaskEither<E, void>) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <E, A, B>(
    f: (a: A) => TaskEither<E, B>
) => (ma: TaskEither<E, A>) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 308,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L308",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L308",
              },
              "type": "<E, A, B>(f: (a: A) => TaskEither<E, B>) => (ma: TaskEither<E, A>) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "taskEither.chainEitherK",
              "kind": "function",
              "name": "chainEitherK",
              "signature": "chainEitherK: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => (ma: TaskEither<E, A>) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 220,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L220",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L220",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => (ma: TaskEither<E, A>) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainEitherK\`](#chainEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "taskEither.chainEitherKW",
              "kind": "function",
              "name": "chainEitherKW",
              "signature": "chainEitherKW: <E, A, B>(
    f: (a: A) => E.Either<E, B>
) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 213,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L213",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L213",
              },
              "type": "<E, A, B>(f: (a: A) => E.Either<E, B>) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <E, A, B>(
    f: (a: A) => TaskEither<E, B>
) => (ma: TaskEither<E, A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 329,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L329",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L329",
              },
              "type": "<E, A, B>(f: (a: A) => TaskEither<E, B>) => (ma: TaskEither<E, A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainFirst\`](#chainFirst).
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.8.0
 */",
              ],
              "id": "taskEither.chainFirstW",
              "kind": "function",
              "name": "chainFirstW",
              "signature": "chainFirstW: <E, A, B>(
    f: (a: A) => TaskEither<E, B>
) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 317,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L317",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L317",
              },
              "type": "<E, A, B>(f: (a: A) => TaskEither<E, B>) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "taskEither.chainIOEitherK",
              "kind": "function",
              "name": "chainIOEitherK",
              "signature": "chainIOEitherK: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => (ma: TaskEither<E, A>) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 234,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L234",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L234",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => (ma: TaskEither<E, A>) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chainIOEitherK\`](#chainIOEitherK).
 *
 * @category combinators
 * @since 2.6.1
 */",
              ],
              "id": "taskEither.chainIOEitherKW",
              "kind": "function",
              "name": "chainIOEitherKW",
              "signature": "chainIOEitherKW: <E, A, B>(
    f: (a: A) => IOEither<E, B>
) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 227,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L227",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L227",
              },
              "type": "<E, A, B>(f: (a: A) => IOEither<E, B>) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, B>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`chain\`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */",
              ],
              "id": "taskEither.chainW",
              "kind": "function",
              "name": "chainW",
              "signature": "chainW: <E, A, B>(
    f: (a: A) => TaskEither<E, B>
) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 299,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L299",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L299",
              },
              "type": "<E, A, B>(f: (a: A) => TaskEither<E, B>) => <D>(ma: TaskEither<D, A>) => TaskEither<E | D, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <E, A>(mma: TaskEither<E, TaskEither<E, A>>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 336,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L336",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L336",
              },
              "type": "<E, A>(mma: TaskEither<E, TaskEither<E, A>>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <E, A, B>(
    onLeft: (e: E) => T.Task<B>,
    onRight: (a: A) => T.Task<B>
) => (ma: TaskEither<E, A>) => T.Task<B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 119,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L119",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L119",
              },
              "type": "<E, A, B>(onLeft: (e: E) => T.Task<B>, onRight: (a: A) => T.Task<B>) => (ma: TaskEither<E, A>) => T.Task<B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.fromEither",
              "kind": "function",
              "name": "fromEither",
              "signature": "fromEither: <E, A>(ma: E.Either<E, A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 77,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L77",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L77",
              },
              "type": "<E, A>(ma: E.Either<E, A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "taskEither.fromEitherK",
              "kind": "function",
              "name": "fromEitherK",
              "signature": "fromEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => Either<E, B>
) => (...a: A) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 197,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L197",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L197",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => Either<E, B>) => (...a: A) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.fromIOEither",
              "kind": "function",
              "name": "fromIOEither",
              "signature": "fromIOEither: <E, A>(fa: IOEither<E, A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 70,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L70",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L70",
              },
              "type": "<E, A>(fa: IOEither<E, A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "taskEither.fromIOEitherK",
              "kind": "function",
              "name": "fromIOEitherK",
              "signature": "fromIOEitherK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => IOEither<E, B>
) => (...a: A) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 204,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L204",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L204",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => IOEither<E, B>) => (...a: A) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.fromOption",
              "kind": "function",
              "name": "fromOption",
              "signature": "fromOption: <E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 84,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L84",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L84",
              },
              "type": "<E>(onNone: Lazy<E>) => <A>(ma: Option<A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.getAltTaskValidation",
              "kind": "function",
              "name": "getAltTaskValidation",
              "signature": "getAltTaskValidation: <E>(SE: Semigroup<E>) => Alt2C<URI, E>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 458,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L458",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L458",
              },
              "type": "<E>(SE: Semigroup<E>) => Alt2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.getApplicativeTaskValidation",
              "kind": "function",
              "name": "getApplicativeTaskValidation",
              "signature": "getApplicativeTaskValidation: <E>(
    A: Apply1<T.URI>,
    SE: Semigroup<E>
) => Applicative2C<URI, E>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 453,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L453",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L453",
              },
              "type": "<E>(A: Apply1<T.URI>, SE: Semigroup<E>) => Applicative2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.getApplyMonoid",
              "kind": "function",
              "name": "getApplyMonoid",
              "signature": "getApplyMonoid: <E, A>(M: Monoid<A>) => Monoid<TaskEither<E, A>>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 448,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L448",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L448",
              },
              "type": "<E, A>(M: Monoid<A>) => Monoid<TaskEither<E, A>>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most \`Left\` value. If both operands are \`Right\`s then the inner values
 * are concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.getApplySemigroup",
              "kind": "function",
              "name": "getApplySemigroup",
              "signature": "getApplySemigroup: <E, A>(S: Semigroup<A>) => Semigroup<TaskEither<E, A>>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 443,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L443",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L443",
              },
              "type": "<E, A>(S: Semigroup<A>) => Semigroup<TaskEither<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.1.0
 */",
              ],
              "id": "taskEither.getFilterable",
              "kind": "function",
              "name": "getFilterable",
              "signature": "getFilterable: <E>(M: Monoid<E>) => Filterable2C<URI, E>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 470,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L470",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L470",
              },
              "type": "<E>(M: Monoid<E>) => Filterable2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.getOrElse",
              "kind": "function",
              "name": "getOrElse",
              "signature": "getOrElse: <E, A>(
    onLeft: (e: E) => T.Task<A>
) => (ma: TaskEither<E, A>) => T.Task<A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 134,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L134",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L134",
              },
              "type": "<E, A>(onLeft: (e: E) => T.Task<A>) => (ma: TaskEither<E, A>) => T.Task<A>",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`getOrElse\`](#getOrElse).
 *
 * @category destructors
 * @since 2.6.0
 */",
              ],
              "id": "taskEither.getOrElseW",
              "kind": "function",
              "name": "getOrElseW",
              "signature": "getOrElseW: <E, B>(
    onLeft: (e: E) => T.Task<B>
) => <A>(ma: TaskEither<E, A>) => T.Task<B | A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 129,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L129",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L129",
              },
              "type": "<E, B>(onLeft: (e: E) => T.Task<B>) => <A>(ma: TaskEither<E, A>) => T.Task<B | A>",
            },
            {
              "docs": [
                "/**
 * Semigroup returning the left-most non-\`Left\` value. If both operands are \`Right\`s then the inner values are
 * concatenated using the provided \`Semigroup\`
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <E, A>(S: Semigroup<A>) => Semigroup<TaskEither<E, A>>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 435,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L435",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L435",
              },
              "type": "<E, A>(S: Semigroup<A>) => Semigroup<TaskEither<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.getTaskValidation",
              "kind": "function",
              "name": "getTaskValidation",
              "signature": "getTaskValidation: <E>(
    SE: Semigroup<E>
) => Monad2C<URI, E> &
    Bifunctor2<URI> &
    Alt2C<URI, E> &
    MonadTask2C<URI, E> &
    MonadThrow2C<URI, E>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 463,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L463",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L463",
              },
              "type": "<E>(SE: Semigroup<E>) => Monad2C<URI, E> & Bifunctor2<URI> & Alt2C<URI, E> & MonadTask2C<URI, E> & MonadThrow2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <E = never, A = never>(e: E) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L40",
              },
              "type": "<E = never, A = never>(e: E) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.leftIO",
              "kind": "function",
              "name": "leftIO",
              "signature": "leftIO: <E = never, A = never>(me: IO<E>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 65,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L65",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L65",
              },
              "type": "<E = never, A = never>(me: IO<E>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.leftTask",
              "kind": "function",
              "name": "leftTask",
              "signature": "leftTask: <E = never, A = never>(me: T.Task<E>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L55",
              },
              "type": "<E = never, A = never>(me: T.Task<E>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: TaskEither<E, A>) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 244,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L244",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L244",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: TaskEither<E, A>) => TaskEither<E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: TaskEither<E, A>) => TaskEither<G, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 258,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L258",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L258",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: TaskEither<E, A>) => TaskEither<G, A>",
            },
            {
              "docs": [
                "/**
 * Returns \`ma\` if is a \`Right\` or the value returned by \`onLeft\` otherwise.
 *
 * See also [alt](#alt).
 *
 * @example
 * import * as E from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 * import * as TE from 'fp-ts/TaskEither'
 *
 * async function test() {
 *   const errorHandler = TE.orElse((error: string) => TE.right(\`recovering from \${error}...\`))
 *   assert.deepStrictEqual(await pipe(TE.right('ok'), errorHandler)(), E.right('ok'))
 *   assert.deepStrictEqual(await pipe(TE.left('ko'), errorHandler)(), E.right('recovering from ko...'))
 * }
 *
 * test()
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.orElse",
              "kind": "function",
              "name": "orElse",
              "signature": "orElse: <E, A, M>(
    onLeft: (e: E) => TaskEither<M, A>
) => (ma: TaskEither<E, A>) => TaskEither<M, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 156,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L156",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L156",
              },
              "type": "<E, A, M>(onLeft: (e: E) => TaskEither<M, A>) => (ma: TaskEither<E, A>) => TaskEither<M, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <E = never, A = never>(a: A) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L45",
              },
              "type": "<E = never, A = never>(a: A) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.rightIO",
              "kind": "function",
              "name": "rightIO",
              "signature": "rightIO: <E = never, A = never>(ma: IO<A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L60",
              },
              "type": "<E = never, A = never>(ma: IO<A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.rightTask",
              "kind": "function",
              "name": "rightTask",
              "signature": "rightTask: <E = never, A = never>(ma: T.Task<A>) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L50",
              },
              "type": "<E = never, A = never>(ma: T.Task<A>) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * this function have the same behavior of \`A.sequence(TE.taskEither)\` but it's stack safe and perform better
 *
 * *this function run all tasks in parallel and does not bail out, for sequential version use \`sequenceSeqArray\`*
 *
 * @example
 *
 * import * as TE from 'fp-ts/TaskEither'
 * import * as A from 'fp-ts/Array'
 * import { right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 *
 * const PostRepo = {
 *  findById : (id: number) => TE.of({id, title: ''})
 * }
 *
 * const findAllPosts = (ids:number[]) => pipe(ids, A.map(PostRepo.findById), TE.sequenceArray)
 *
 * async function test() {
 *   const ids = A.range(0, 10)
 *
 *   assert.deepStrictEqual(
 *     await findAllPosts(ids)(),
 *     right(
 *       pipe(
 *         ids,
 *         A.map((id) => ({ id, title: ''}))
 *       )
 *     )
 *   )
 * }
 *
 * test()
 *
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.sequenceArray",
              "kind": "function",
              "name": "sequenceArray",
              "signature": "sequenceArray: <A, E>(
    arr: readonly TaskEither<E, A>[]
) => TaskEither<E, readonly A[]>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 699,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L699",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L699",
              },
              "type": "<A, E>(arr: readonly TaskEither<E, A>[]) => TaskEither<E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * this function have the same behavior of \`A.sequence(TE.taskEitherSeq)\` but it's stack safe and perform better
 *
 * *this function run all tasks in sequential order and bails out on left side of either, for parallel version use \`sequenceArray\`*
 *
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.sequenceSeqArray",
              "kind": "function",
              "name": "sequenceSeqArray",
              "signature": "sequenceSeqArray: <A, E>(
    arr: readonly TaskEither<E, A>[]
) => TaskEither<E, readonly A[]>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 723,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L723",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L723",
              },
              "type": "<A, E>(arr: readonly TaskEither<E, A>[]) => TaskEither<E, readonly A[]>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <E, A>(ma: TaskEither<E, A>) => TaskEither<A, E>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 161,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L161",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L161",
              },
              "type": "<E, A>(ma: TaskEither<E, A>) => TaskEither<A, E>",
            },
            {
              "docs": [
                "/**
 * Convert a node style callback function to one returning a \`TaskEither\`
 *
 * **Note**. If the function \`f\` admits multiple overloadings, \`taskify\` will pick last one. If you want a different
 * behaviour, add an explicit type annotation
 *
 * \`\`\`ts
 * // readFile admits multiple overloadings
 *
 * // const readFile: (a: string) => TaskEither<NodeJS.ErrnoException, Buffer>
 * const readFile = taskify(fs.readFile)
 *
 * const readFile2: (filename: string, encoding: string) => TaskEither<NodeJS.ErrnoException, Buffer> = taskify(
 *   fs.readFile
 * )
 * \`\`\`
 *
 * @example
 * import { taskify } from 'fp-ts/TaskEither'
 * import * as fs from 'fs'
 *
 * // const stat: (a: string | Buffer) => TaskEither<NodeJS.ErrnoException, fs.Stats>
 * const stat = taskify(fs.stat)
 * assert.strictEqual(stat.length, 0)
 *
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.taskify",
              "kind": "function",
              "name": "taskify",
              "signature": "taskify: {
    <L, R>(
        f: (cb: (e: L | null | undefined, r?: R) => void) => void
    ): () => TaskEither<L, R>;
    <A, L, R>(f: (a: A, cb: (e: L, r?: R) => void) => void): (
        a: A
    ) => TaskEither<L, R>;
    <A, B, L, R>(f: (a: A, b: B, cb: (e: L, r?: R) => void) => void): (
        a: A,
        b: B
    ) => TaskEither<L, R>;
    <A, B, C, L, R>(f: (a: A, b: B, c: C, cb: (e: L, r?: R) => void) => void): (
        a: A,
        b: B,
        c: C
    ) => TaskEither<L, R>;
    <A, B, C, D, L, R>(
        f: (a: A, b: B, c: C, d: D, cb: (e: L, r?: R) => void) => void
    ): (a: A, b: B, c: C, d: D) => TaskEither<L, R>;
    <A, B, C, D, E, L, R>(
        f: (a: A, b: B, c: C, d: D, e: E, cb: (e: L, r?: R) => void) => void
    ): (a: A, b: B, c: C, d: D, e: E) => TaskEither<L, R>;
};",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 535,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L535",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L535",
              },
              "type": "{ <L, R>(f: (cb: (e: L | null | undefined, r?: R) => void) => void): () => TaskEither<L, R>; <A, L, R>(f: (a: A, cb: (e: L, r?: R) => void) => void): (a: A) => TaskEither<L, R>; <A, B, L, R>(f: (a: A, b: B, cb: (e: L, r?: R) => void) => void): (a: A, b: B) => TaskEither<L, R>; <A, B, C, L, R>(f: (a: A, b: B, c: C, cb: (e: L, r?: R) => void) => void): (a: A, b: B, c: C) => TaskEither<L, R>; <A, B, C, D, L, R>(f: (a: A, b: B, c: C, d: D, cb: (e: L, r?: R) => void) => void): (a: A, b: B, c: C, d: D) => TaskEither<L, R>; <A, B, C, D, E, L, R>(f: (a: A, b: B, c: C, d: D, e: E, cb: (e: L, r?: R) => void) => void): (a: A, b: B, c: C, d: D, e: E) => TaskEither<L, R>; }",
            },
            {
              "docs": [
                "/**
 * this function have the same behavior of \`A.traverse(TE.taskEither)\` but it's stack safe and perform better
 *
 * *this function run all tasks in parallel and does not bail out, for sequential version use \`traverseSeqArray\`*
 *
 * @example
 *
 * import * as TE from 'fp-ts/TaskEither'
 * import * as A from 'fp-ts/Array'
 * import { right } from 'fp-ts/Either'
 * import { pipe } from 'fp-ts/function'
 *
 * const PostRepo = {
 *  findById : (id: number) => TE.of({id, title: ''})
 * }
 *
 * const findAllPosts = (ids:number[]) => pipe(ids, TE.traverseArray(PostRepo.findById))
 *
 * async function test() {
 *   const ids = A.range(0, 10)
 *
 *   assert.deepStrictEqual(
 *     await findAllPosts(ids)(),
 *     right(
 *       pipe(
 *         ids,
 *         A.map((id) => ({ id, title: ''}))
 *       )
 *     )
 *   )
 * }
 *
 * test()
 *
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.traverseArray",
              "kind": "function",
              "name": "traverseArray",
              "signature": "traverseArray: <A, B, E>(
    f: (a: A) => TaskEither<E, B>
) => (arr: readonly A[]) => TaskEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 660,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L660",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L660",
              },
              "type": "<A, B, E>(f: (a: A) => TaskEither<E, B>) => (arr: readonly A[]) => TaskEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.traverseArrayWithIndex",
              "kind": "function",
              "name": "traverseArrayWithIndex",
              "signature": "traverseArrayWithIndex: <A, B, E>(
    f: (index: number, a: A) => TaskEither<E, B>
) => (arr: readonly A[]) => TaskEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 621,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L621",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L621",
              },
              "type": "<A, B, E>(f: (index: number, a: A) => TaskEither<E, B>) => (arr: readonly A[]) => TaskEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * this function have the same behavior of \`A.traverse(TE.taskEitherSeq)\` but it's stack safe and perform better
 *
 * *this function run all tasks in sequential order and bails out on left side of either, for parallel version use \`traverseArray\`*
 *
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.traverseSeqArray",
              "kind": "function",
              "name": "traverseSeqArray",
              "signature": "traverseSeqArray: <A, B, E>(
    f: (a: A) => TaskEither<E, B>
) => (arr: readonly A[]) => TaskEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 713,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L713",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L713",
              },
              "type": "<A, B, E>(f: (a: A) => TaskEither<E, B>) => (arr: readonly A[]) => TaskEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.traverseSeqArrayWithIndex",
              "kind": "function",
              "name": "traverseSeqArrayWithIndex",
              "signature": "traverseSeqArrayWithIndex: <A, B, E>(
    f: (index: number, a: A) => TaskEither<E, B>
) => (arr: readonly A[]) => TaskEither<E, readonly B[]>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 703,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L703",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L703",
              },
              "type": "<A, B, E>(f: (index: number, a: A) => TaskEither<E, B>) => (arr: readonly A[]) => TaskEither<E, readonly B[]>",
            },
            {
              "docs": [
                "/**
 * Transforms a \`Promise\` that may reject to a \`Promise\` that never rejects and returns an \`Either\` instead.
 *
 * Note: \`f\` should never \`throw\` errors, they are not caught.
 *
 * @example
 * import { left, right } from 'fp-ts/Either'
 * import { tryCatch } from 'fp-ts/TaskEither'
 *
 * tryCatch(() => Promise.resolve(1), String)().then(result => {
 *   assert.deepStrictEqual(result, right(1))
 * })
 * tryCatch(() => Promise.reject('error'), String)().then(result => {
 *   assert.deepStrictEqual(result, left('error'))
 * })
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.tryCatch",
              "kind": "function",
              "name": "tryCatch",
              "signature": "tryCatch: <E, A>(
    f: Lazy<Promise<A>>,
    onRejected: (reason: unknown) => E
) => TaskEither<E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 114,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L114",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L114",
              },
              "type": "<E, A>(f: Lazy<Promise<A>>, onRejected: (reason: unknown) => E) => TaskEither<E, A>",
            },
            {
              "docs": [
                "/**
 * Converts a function returning a \`Promise\` to one returning a \`TaskEither\`.
 *
 * @category combinators
 * @since 2.5.0
 */",
              ],
              "id": "taskEither.tryCatchK",
              "kind": "function",
              "name": "tryCatchK",
              "signature": "tryCatchK: <E, A extends readonly unknown[], B>(
    f: (...a: A) => Promise<B>,
    onRejected: (reason: unknown) => E
) => (...a: A) => TaskEither<E, B>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 189,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L189",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L189",
              },
              "type": "<E, A extends readonly unknown[], B>(f: (...a: A) => Promise<B>, onRejected: (reason: unknown) => E) => (...a: A) => TaskEither<E, B>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.TaskEither",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TaskEither",
              "signature": "interface TaskEither<E, A> extends Task<Either<E, A>> {}",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 35,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L35",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L35",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 422,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L422",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L422",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.Alt",
              "kind": "variable",
              "name": "Alt",
              "signature": "const Alt: Alt2<'TaskEither'>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 495,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L495",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L495",
              },
              "type": "Alt2<"TaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.ApplicativePar",
              "kind": "variable",
              "name": "ApplicativePar",
              "signature": "const ApplicativePar: Applicative2<'TaskEither'>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 480,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L480",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L480",
              },
              "type": "Applicative2<"TaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.ApplicativeSeq",
              "kind": "variable",
              "name": "ApplicativeSeq",
              "signature": "const ApplicativeSeq: Applicative2<'TaskEither'>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 485,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L485",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L485",
              },
              "type": "Applicative2<"TaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor2<'TaskEither'>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 490,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L490",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L490",
              },
              "type": "Bifunctor2<"TaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: TaskEither<never, {}>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 569,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L569",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L569",
              },
              "type": "TaskEither<never, {}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.filterOrElse",
              "kind": "variable",
              "name": "filterOrElse",
              "signature": "const filterOrElse: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        ma: TaskEither<E, A>
    ) => TaskEither<E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        ma: TaskEither<E, A>
    ) => TaskEither<E, A>;
};",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 179,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L179",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L179",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (ma: TaskEither<E, A>) => TaskEither<E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (ma: TaskEither<E, A>) => TaskEither<E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Less strict version of [\`filterOrElse\`](#filterOrElse).
 *
 * @since 2.9.0
 */",
              ],
              "id": "taskEither.filterOrElseW",
              "kind": "variable",
              "name": "filterOrElseW",
              "signature": "const filterOrElseW: {
    <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <E1>(
        ma: TaskEither<E1, A>
    ) => TaskEither<E2 | E1, B>;
    <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <E1>(
        ma: TaskEither<E1, A>
    ) => TaskEither<E2 | E1, A>;
};",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 167,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L167",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L167",
              },
              "type": "{ <A, B extends A, E2>(refinement: Refinement<A, B>, onFalse: (a: A) => E2): <E1>(ma: TaskEither<E1, A>) => TaskEither<E2 | E1, B>; <A, E2>(predicate: Predicate<A>, onFalse: (a: A) => E2): <E1>(ma: TaskEither<E1, A>) => TaskEither<E2 | E1, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadIO
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.fromIO",
              "kind": "variable",
              "name": "fromIO",
              "signature": "const fromIO: <E, A>(fa: IO<A>) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 402,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L402",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L402",
              },
              "type": "<E, A>(fa: IO<A>) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Derivable from \`MonadThrow\`.
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.fromPredicate",
              "kind": "variable",
              "name": "fromPredicate",
              "signature": "const fromPredicate: {
    <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (
        a: A
    ) => TaskEither<E, B>;
    <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (
        a: A
    ) => TaskEither<E, A>;
};",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 91,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L91",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L91",
              },
              "type": "{ <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): (a: A) => TaskEither<E, B>; <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): (a: A) => TaskEither<E, A>; }",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadTask
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.fromTask",
              "kind": "variable",
              "name": "fromTask",
              "signature": "const fromTask: <E, A>(fa: T.Task<A>) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 407,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L407",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L407",
              },
              "type": "<E, A>(fa: T.Task<A>) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'TaskEither'>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 475,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L475",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L475",
              },
              "type": "Functor2<"TaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * Equivalent to [\`right\`](#right).
 *
 * @category Applicative
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <E, A>(a: A) => Kind2<F, E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 397,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L397",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L397",
              },
              "type": "<E, A>(a: A) => Kind2<F, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.taskEither",
              "kind": "variable",
              "name": "taskEither",
              "signature": "const taskEither: Monad2<'TaskEither'> &
    Bifunctor2<'TaskEither'> &
    Alt2<'TaskEither'> &
    MonadTask2<'TaskEither'> &
    MonadThrow2<'TaskEither'>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 500,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L500",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L500",
              },
              "type": "Monad2<"TaskEither"> & Bifunctor2<"TaskEither"> & Alt2<"TaskEither"> & MonadTask2<"TaskEither"> & MonadThrow2<"TaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Like \`TaskEither\` but \`ap\` is sequential
 *
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.taskEitherSeq",
              "kind": "variable",
              "name": "taskEitherSeq",
              "signature": "const taskEitherSeq: Monad2<'TaskEither'> &
    Bifunctor2<'TaskEither'> &
    Alt2<'TaskEither'> &
    MonadTask2<'TaskEither'> &
    MonadThrow2<'TaskEither'>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 507,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L507",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L507",
              },
              "type": "Monad2<"TaskEither"> & Bifunctor2<"TaskEither"> & Alt2<"TaskEither"> & MonadTask2<"TaskEither"> & MonadThrow2<"TaskEither">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadTask
 * @since 2.7.0
 */",
              ],
              "id": "taskEither.throwError",
              "kind": "variable",
              "name": "throwError",
              "signature": "const throwError: <E, A>(e: E) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 412,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L412",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L412",
              },
              "type": "<E, A>(e: E) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "taskEither.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/TaskEither.d.ts",
                "line": 417,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L417",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L417",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * \`\`\`ts
 * interface TaskEither<E, A> extends Task<Either<E, A>> {}
 * \`\`\`
 *
 * \`TaskEither<E, A>\` represents an asynchronous computation that either yields a value of type \`A\` or fails yielding an
 * error of type \`E\`. If you want to represent an asynchronous computation that never fails, please see \`Task\`.
 *
 * @since 2.0.0
 */",
        ],
        "id": "taskEither",
        "kind": "namespace",
        "name": "taskEither",
        "signature": "module 'lib/TaskEither.d.ts' {}",
        "source": {
          "filename": "lib/TaskEither.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: TaskThese<E, A>) => TaskThese<G, B>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 96,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L96",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L96",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: TaskThese<E, A>) => TaskThese<G, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.both",
              "kind": "function",
              "name": "both",
              "signature": "both: <E, A>(e: E, a: A) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L37",
              },
              "type": "<E, A>(e: E, a: A) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <E, B, A>(
    onLeft: (e: E) => T.Task<B>,
    onRight: (a: A) => T.Task<B>,
    onBoth: (e: E, a: A) => T.Task<B>
) => (fa: TaskThese<E, A>) => T.Task<B>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 67,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L67",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L67",
              },
              "type": "<E, B, A>(onLeft: (e: E) => T.Task<B>, onRight: (a: A) => T.Task<B>, onBoth: (e: E, a: A) => T.Task<B>) => (fa: TaskThese<E, A>) => T.Task<B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.fromIOEither",
              "kind": "function",
              "name": "fromIOEither",
              "signature": "fromIOEither: <E, A>(fa: IOEither<E, A>) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 62,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L62",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L62",
              },
              "type": "<E, A>(fa: IOEither<E, A>) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskThese.getApplicative",
              "kind": "function",
              "name": "getApplicative",
              "signature": "getApplicative: <E>(A: Apply1<T.URI>, SE: Semigroup<E>) => Applicative2C<URI, E>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 147,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L147",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L147",
              },
              "type": "<E>(A: Apply1<T.URI>, SE: Semigroup<E>) => Applicative2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.getMonad",
              "kind": "function",
              "name": "getMonad",
              "signature": "getMonad: <E>(SE: Semigroup<E>) => Monad2C<URI, E> & MonadTask2C<URI, E>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 152,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L152",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L152",
              },
              "type": "<E>(SE: Semigroup<E>) => Monad2C<URI, E> & MonadTask2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <E, A>(
    SE: Semigroup<E>,
    SA: Semigroup<A>
) => Semigroup<TaskThese<E, A>>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 142,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L142",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L142",
              },
              "type": "<E, A>(SE: Semigroup<E>, SA: Semigroup<A>) => Semigroup<TaskThese<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <E = never, A = never>(e: E) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L27",
              },
              "type": "<E = never, A = never>(e: E) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.leftIO",
              "kind": "function",
              "name": "leftIO",
              "signature": "leftIO: <E = never, A = never>(me: IO<E>) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 57,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L57",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L57",
              },
              "type": "<E = never, A = never>(me: IO<E>) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.leftTask",
              "kind": "function",
              "name": "leftTask",
              "signature": "leftTask: <E = never, A = never>(me: T.Task<E>) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L47",
              },
              "type": "<E = never, A = never>(me: T.Task<E>) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: TaskThese<E, A>) => TaskThese<E, B>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 89,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L89",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L89",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: TaskThese<E, A>) => TaskThese<E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: TaskThese<E, A>) => TaskThese<G, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 103,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L103",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L103",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: TaskThese<E, A>) => TaskThese<G, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <E = never, A = never>(a: A) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 32,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L32",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L32",
              },
              "type": "<E = never, A = never>(a: A) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.rightIO",
              "kind": "function",
              "name": "rightIO",
              "signature": "rightIO: <E = never, A = never>(ma: IO<A>) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 52,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L52",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L52",
              },
              "type": "<E = never, A = never>(ma: IO<A>) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.rightTask",
              "kind": "function",
              "name": "rightTask",
              "signature": "rightTask: <E = never, A = never>(ma: T.Task<A>) => TaskThese<E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L42",
              },
              "type": "<E = never, A = never>(ma: T.Task<A>) => TaskThese<E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <E, A>(fa: TaskThese<E, A>) => TaskThese<A, E>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L81",
              },
              "type": "<E, A>(fa: TaskThese<E, A>) => TaskThese<A, E>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.toTuple",
              "kind": "function",
              "name": "toTuple",
              "signature": "toTuple: <E, A>(e: E, a: A) => (fa: TaskThese<E, A>) => T.Task<[E, A]>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L76",
              },
              "type": "<E, A>(e: E, a: A) => (fa: TaskThese<E, A>) => T.Task<[E, A]>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.TaskThese",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TaskThese",
              "signature": "interface TaskThese<E, A> extends Task<These<E, A>> {}",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 22,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L22",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L22",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L132",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskThese.bifunctorTaskThese",
              "kind": "variable",
              "name": "bifunctorTaskThese",
              "signature": "const bifunctorTaskThese: Bifunctor2<'TaskThese'>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 162,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L162",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L162",
              },
              "type": "Bifunctor2<"TaskThese">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadIO
 * @since 2.7.0
 */",
              ],
              "id": "taskThese.fromIO",
              "kind": "variable",
              "name": "fromIO",
              "signature": "const fromIO: <E, A>(fa: IO<A>) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 117,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L117",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L117",
              },
              "type": "<E, A>(fa: IO<A>) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category MonadIO
 * @since 2.7.0
 */",
              ],
              "id": "taskThese.fromTask",
              "kind": "variable",
              "name": "fromTask",
              "signature": "const fromTask: <E, A>(fa: T.Task<A>) => Kind2<M, E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 122,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L122",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L122",
              },
              "type": "<E, A>(fa: T.Task<A>) => Kind2<M, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "taskThese.functorTaskThese",
              "kind": "variable",
              "name": "functorTaskThese",
              "signature": "const functorTaskThese: Functor2<'TaskThese'>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 157,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L157",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L157",
              },
              "type": "Functor2<"TaskThese">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * Equivalent to [\`right\`](#right).
 *
 * @category Applicative
 * @since 2.7.0
 */",
              ],
              "id": "taskThese.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <E, A>(a: A) => Kind2<F, E, A>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 112,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L112",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L112",
              },
              "type": "<E, A>(a: A) => Kind2<F, E, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.taskThese",
              "kind": "variable",
              "name": "taskThese",
              "signature": "const taskThese: Functor2<'TaskThese'> & Bifunctor2<'TaskThese'>;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 167,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L167",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L167",
              },
              "type": "Functor2<"TaskThese"> & Bifunctor2<"TaskThese">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.4.0
 */",
              ],
              "id": "taskThese.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/TaskThese.d.ts",
                "line": 127,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L127",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L127",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.4.0
 */",
        ],
        "id": "taskThese",
        "kind": "namespace",
        "name": "taskThese",
        "signature": "module 'lib/TaskThese.d.ts' {}",
        "source": {
          "filename": "lib/TaskThese.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "these.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(
    f: (e: E) => G,
    g: (a: A) => B
) => (fa: These<E, A>) => These<G, B>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 242,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L242",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L242",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: These<E, A>) => These<G, B>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "these.both",
              "kind": "function",
              "name": "both",
              "signature": "both: <E, A>(left: E, right: A) => These<E, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L63",
              },
              "type": "<E, A>(left: E, right: A) => These<E, A>",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "these.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <E, A, B>(
    onLeft: (e: E) => B,
    onRight: (a: A) => B,
    onBoth: (e: E, a: A) => B
) => (fa: These<E, A>) => B;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 68,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L68",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L68",
              },
              "type": "<E, A, B>(onLeft: (e: E) => B, onRight: (a: A) => B, onBoth: (e: E, a: A) => B) => (fa: These<E, A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "these.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: These<E, A>) => M;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 267,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L267",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L267",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: These<E, A>) => M",
            },
            {
              "docs": [
                "/**
 * Takes a pair of \`Option\`s and attempts to create a \`These\` from them
 *
 * @example
 * import { fromOptions, left, right, both } from 'fp-ts/These'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(fromOptions(none, none), none)
 * assert.deepStrictEqual(fromOptions(some('a'), none), some(left('a')))
 * assert.deepStrictEqual(fromOptions(none, some(1)), some(right(1)))
 * assert.deepStrictEqual(fromOptions(some('a'), some(1)), some(both('a', 1)))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "these.fromOptions",
              "kind": "function",
              "name": "fromOptions",
              "signature": "fromOptions: <E, A>(fe: Option<E>, fa: Option<A>) => Option<These<E, A>>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 235,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L235",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L235",
              },
              "type": "<E, A>(fe: Option<E>, fa: Option<A>) => Option<These<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "these.getApplicative",
              "kind": "function",
              "name": "getApplicative",
              "signature": "getApplicative: <E>(SE: Semigroup<E>) => Applicative2C<URI, E>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 97,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L97",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L97",
              },
              "type": "<E>(SE: Semigroup<E>) => Applicative2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "these.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <E, A>(EE: Eq<E>, EA: Eq<A>) => Eq<These<E, A>>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 87,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L87",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L87",
              },
              "type": "<E, A>(EE: Eq<E>, EA: Eq<A>) => Eq<These<E, A>>",
            },
            {
              "docs": [
                "/**
 * Returns an \`E\` value if possible
 *
 * @example
 * import { getLeft, left, right, both } from 'fp-ts/These'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(getLeft(left('a')), some('a'))
 * assert.deepStrictEqual(getLeft(right(1)), none)
 * assert.deepStrictEqual(getLeft(both('a', 1)), some('a'))
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "these.getLeft",
              "kind": "function",
              "name": "getLeft",
              "signature": "getLeft: <E, A>(fa: These<E, A>) => Option<E>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 129,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L129",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L129",
              },
              "type": "<E, A>(fa: These<E, A>) => Option<E>",
            },
            {
              "docs": [
                "/**
 * Returns the \`E\` value if and only if the value is constructed with \`Left\`
 *
 * @example
 * import { getLeftOnly, left, right, both } from 'fp-ts/These'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(getLeftOnly(left('a')), some('a'))
 * assert.deepStrictEqual(getLeftOnly(right(1)), none)
 * assert.deepStrictEqual(getLeftOnly(both('a', 1)), none)
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "these.getLeftOnly",
              "kind": "function",
              "name": "getLeftOnly",
              "signature": "getLeftOnly: <E, A>(fa: These<E, A>) => Option<E>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 204,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L204",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L204",
              },
              "type": "<E, A>(fa: These<E, A>) => Option<E>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "these.getMonad",
              "kind": "function",
              "name": "getMonad",
              "signature": "getMonad: <E>(SE: Semigroup<E>) => Monad2C<URI, E> & MonadThrow2C<URI, E>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 102,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L102",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L102",
              },
              "type": "<E>(SE: Semigroup<E>) => Monad2C<URI, E> & MonadThrow2C<URI, E>",
            },
            {
              "docs": [
                "/**
 * Returns an \`A\` value if possible
 *
 * @example
 * import { getRight, left, right, both } from 'fp-ts/These'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(getRight(left('a')), none)
 * assert.deepStrictEqual(getRight(right(1)), some(1))
 * assert.deepStrictEqual(getRight(both('a', 1)), some(1))
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "these.getRight",
              "kind": "function",
              "name": "getRight",
              "signature": "getRight: <E, A>(fa: These<E, A>) => Option<A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 144,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L144",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L144",
              },
              "type": "<E, A>(fa: These<E, A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * Returns the \`A\` value if and only if the value is constructed with \`Right\`
 *
 * @example
 * import { getRightOnly, left, right, both } from 'fp-ts/These'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(getRightOnly(left('a')), none)
 * assert.deepStrictEqual(getRightOnly(right(1)), some(1))
 * assert.deepStrictEqual(getRightOnly(both('a', 1)), none)
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "these.getRightOnly",
              "kind": "function",
              "name": "getRightOnly",
              "signature": "getRightOnly: <E, A>(fa: These<E, A>) => Option<A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 219,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L219",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L219",
              },
              "type": "<E, A>(fa: These<E, A>) => Option<A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "these.getSemigroup",
              "kind": "function",
              "name": "getSemigroup",
              "signature": "getSemigroup: <E, A>(
    SE: Semigroup<E>,
    SA: Semigroup<A>
) => Semigroup<These<E, A>>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 92,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L92",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L92",
              },
              "type": "<E, A>(SE: Semigroup<E>, SA: Semigroup<A>) => Semigroup<These<E, A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "these.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <E, A>(SE: Show<E>, SA: Show<A>) => Show<These<E, A>>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L82",
              },
              "type": "<E, A>(SE: Show<E>, SA: Show<A>) => Show<These<E, A>>",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the these is an instance of \`Both\`, \`false\` otherwise
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "these.isBoth",
              "kind": "function",
              "name": "isBoth",
              "signature": "isBoth: <E, A>(fa: These<E, A>) => fa is Both<E, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 165,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L165",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L165",
              },
              "type": "<E, A>(fa: These<E, A>) => fa is Both<E, A>",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the these is an instance of \`Left\`, \`false\` otherwise
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "these.isLeft",
              "kind": "function",
              "name": "isLeft",
              "signature": "isLeft: <E, A>(fa: These<E, A>) => fa is Left<E>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 151,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L151",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L151",
              },
              "type": "<E, A>(fa: These<E, A>) => fa is Left<E>",
            },
            {
              "docs": [
                "/**
 * Returns \`true\` if the these is an instance of \`Right\`, \`false\` otherwise
 *
 * @category guards
 * @since 2.0.0
 */",
              ],
              "id": "these.isRight",
              "kind": "function",
              "name": "isRight",
              "signature": "isRight: <E, A>(fa: These<E, A>) => fa is Right<A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L158",
              },
              "type": "<E, A>(fa: These<E, A>) => fa is Right<A>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "these.left",
              "kind": "function",
              "name": "left",
              "signature": "left: <E = never, A = never>(left: E) => These<E, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L53",
              },
              "type": "<E = never, A = never>(left: E) => These<E, A>",
            },
            {
              "docs": [
                "/**
 * @example
 * import { leftOrBoth, left, both } from 'fp-ts/These'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(leftOrBoth('a')(none), left('a'))
 * assert.deepStrictEqual(leftOrBoth('a')(some(1)), both('a', 1))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "these.leftOrBoth",
              "kind": "function",
              "name": "leftOrBoth",
              "signature": "leftOrBoth: <E>(e: E) => <A>(ma: Option<A>) => These<E, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 177,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L177",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L177",
              },
              "type": "<E>(e: E) => <A>(ma: Option<A>) => These<E, A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "these.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: These<E, A>) => These<E, B>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 257,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L257",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L257",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: These<E, A>) => These<E, B>",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "these.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: These<E, A>) => These<G, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 249,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L249",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L249",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: These<E, A>) => These<G, A>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "these.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: These<E, A>) => B;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L262",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: These<E, A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "these.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: These<E, A>) => B;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 272,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L272",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L272",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: These<E, A>) => B",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "these.right",
              "kind": "function",
              "name": "right",
              "signature": "right: <E = never, A = never>(right: A) => These<E, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 58,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L58",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L58",
              },
              "type": "<E = never, A = never>(right: A) => These<E, A>",
            },
            {
              "docs": [
                "/**
 * @example
 * import { rightOrBoth, right, both } from 'fp-ts/These'
 * import { none, some } from 'fp-ts/Option'
 *
 * assert.deepStrictEqual(rightOrBoth(1)(none), right(1))
 * assert.deepStrictEqual(rightOrBoth(1)(some('a')), both('a', 1))
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "these.rightOrBoth",
              "kind": "function",
              "name": "rightOrBoth",
              "signature": "rightOrBoth: <A>(a: A) => <E>(me: Option<E>) => These<E, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 189,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L189",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L189",
              },
              "type": "<A>(a: A) => <E>(me: Option<E>) => These<E, A>",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.4.0
 */",
              ],
              "id": "these.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <E, A>(fa: These<E, A>) => These<A, E>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 77,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L77",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L77",
              },
              "type": "<E, A>(fa: These<E, A>) => These<A, E>",
            },
            {
              "docs": [
                "/**
 * @example
 * import { toTuple, left, right, both } from 'fp-ts/These'
 *
 * assert.deepStrictEqual(toTuple('a', 1)(left('b')), ['b', 1])
 * assert.deepStrictEqual(toTuple('a', 1)(right(2)), ['a', 2])
 * assert.deepStrictEqual(toTuple('a', 1)(both('b', 2)), ['b', 2])
 *
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "these.toTuple",
              "kind": "function",
              "name": "toTuple",
              "signature": "toTuple: <E, A>(e: E, a: A) => (fa: These<E, A>) => [E, A];",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 114,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L114",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L114",
              },
              "type": "<E, A>(e: E, a: A) => (fa: These<E, A>) => [E, A]",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "these.Both",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "these.Both.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: E;",
                    "source": {
                      "filename": "lib/These.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L41",
                    },
                    "type": "{}",
                  },
                  {
                    "docs": [],
                    "id": "these.Both.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: A;",
                    "source": {
                      "filename": "lib/These.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L42",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Both",
              "signature": "interface Both<E, A> {}",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 39,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L39",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L39",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "these.These",
              "kind": "typeAlias",
              "name": "These",
              "signature": "type These<E, A> = Either<E, A> | Both<E, A>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L48",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "these.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 290,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L290",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L290",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "these.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor2<'These'>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 305,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L305",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L305",
              },
              "type": "Bifunctor2<"These">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "these.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable2<'These'>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 310,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L310",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L310",
              },
              "type": "Foldable2<"These">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "these.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'These'>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 300,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L300",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L300",
              },
              "type": "Functor2<"These">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "these.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence2<'These'>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 280,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L280",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L280",
              },
              "type": "Sequence2<"These">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "these.these",
              "kind": "variable",
              "name": "these",
              "signature": "const these: Functor2<'These'> &
    Bifunctor2<'These'> &
    Foldable2<'These'> &
    Traversable2<'These'>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 320,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L320",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L320",
              },
              "type": "Functor2<"These"> & Bifunctor2<"These"> & Foldable2<"These"> & Traversable2<"These">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "these.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable2<'These'>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 315,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L315",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L315",
              },
              "type": "Traversable2<"These">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "these.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse2<'These'>;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 276,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L276",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L276",
              },
              "type": "PipeableTraverse2<"These">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "these.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/These.d.ts",
                "line": 285,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L285",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L285",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * A data structure providing "inclusive-or" as opposed to \`Either\`'s "exclusive-or".
 *
 * If you interpret \`Either<E, A>\` as suggesting the computation may either fail or succeed (exclusively), then
 * \`These<E, A>\` may fail, succeed, or do both at the same time.
 *
 * There are a few ways to interpret the both case:
 *
 * - You can think of a computation that has a non-fatal error.
 * - You can think of a computation that went as far as it could before erroring.
 * - You can think of a computation that keeps track of errors as it completes.
 *
 * Another way you can think of \`These<E, A>\` is saying that we want to handle \`E\` kind of data, \`A\` kind of data, or
 * both \`E\` and \`A\` kind of data at the same time. This is particularly useful when it comes to displaying UI's.
 *
 * (description adapted from https://package.elm-lang.org/packages/joneshf/elm-these)
 *
 * Adapted from https://github.com/purescript-contrib/purescript-these
 *
 * @since 2.0.0
 */",
        ],
        "id": "these",
        "kind": "namespace",
        "name": "these",
        "signature": "module 'lib/These.d.ts' {}",
        "source": {
          "filename": "lib/These.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "theseT.getTheseM",
              "kind": "function",
              "name": "getTheseM",
              "signature": "getTheseM: {
    <M extends URIS2>(M: Monad2<M>): TheseM2<M>;
    <M extends URIS>(M: Monad1<M>): TheseM1<M>;
    <M>(M: Monad<M>): TheseM<M>;
};",
              "source": {
                "filename": "lib/TheseT.d.ts",
                "line": 116,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L116",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L116",
              },
              "type": "{ <M extends URIS2>(M: Monad2<M>): TheseM2<M>; <M extends URIS>(M: Monad1<M>): TheseM1<M>; <M>(M: Monad<M>): TheseM<M>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "theseT.TheseM",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "theseT.TheseM.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, A, N, B>(
    fa: TheseT<M, E, A>,
    f: (e: E) => N,
    g: (a: A) => B
) => TheseT<M, N, B>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L18",
                    },
                    "type": "<E, A, N, B>(fa: TheseT<M, E, A>, f: (e: E) => N, g: (a: A) => B) => TheseT<M, N, B>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.both",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "both",
                    "signature": "readonly both: <E, A>(e: E, a: A) => TheseT<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 31,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L31",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L31",
                    },
                    "type": "<E, A>(e: E, a: A) => TheseT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <E, A, R>(
    fa: TheseT<M, E, A>,
    onLeft: (e: E) => HKT<M, R>,
    onRight: (a: A) => HKT<M, R>,
    onBoth: (e: E, a: A) => HKT<M, R>
) => HKT<M, R>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L20",
                    },
                    "type": "<E, A, R>(fa: TheseT<M, E, A>, onLeft: (e: E) => HKT<M, R>, onRight: (a: A) => HKT<M, R>, onBoth: (e: E, a: A) => HKT<M, R>) => HKT<M, R>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <E>(S: Semigroup<E>) => {
    readonly _E: E;
    readonly map: <A, B>(ma: TheseT<M, E, A>, f: (a: A) => B) => TheseT<M, E, B>;
    readonly of: <A>(a: A) => TheseT<M, E, A>;
    readonly ap: <A, B>(
        mab: TheseT<M, E, (a: A) => B>,
        ma: TheseT<M, E, A>
    ) => TheseT<M, E, B>;
    readonly chain: <A, B>(
        ma: TheseT<M, E, A>,
        f: (a: A) => TheseT<M, E, B>
    ) => TheseT<M, E, B>;
};",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 33,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L33",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L33",
                    },
                    "type": "<E>(S: Semigroup<E>) => { readonly _E: E; readonly map: <A, B>(ma: TheseT<M, E, A>, f: (a: A) => B) => TheseT<M, E, B>; readonly of: <A>(a: A) => TheseT<M, E, A>; readonly ap: <A, B>(mab: TheseT<M, E, (a: A) => B>, ma: TheseT<M, E, A>) => TheseT<M, E, B>; readonly chain: <A, B>(ma: TheseT<M, E, A>, f: (a: A) => TheseT<M, E, B>) => TheseT<M, E, B>; }",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <E, A>(e: E) => TheseT<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 29,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L29",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L29",
                    },
                    "type": "<E, A>(e: E) => TheseT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.leftM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "leftM",
                    "signature": "readonly leftM: <E, A>(me: HKT<M, E>) => TheseT<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 28,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L28",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L28",
                    },
                    "type": "<E, A>(me: HKT<M, E>) => TheseT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, A, B>(fa: TheseT<M, E, A>, f: (a: A) => B) => TheseT<M, E, B>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 17,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L17",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L17",
                    },
                    "type": "<E, A, B>(fa: TheseT<M, E, A>, f: (a: A) => B) => TheseT<M, E, B>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, A, N>(
    fa: TheseT<M, E, A>,
    f: (e: E) => N
) => TheseT<M, N, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L19",
                    },
                    "type": "<E, A, N>(fa: TheseT<M, E, A>, f: (e: E) => N) => TheseT<M, N, A>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: <E, A>(a: A) => TheseT<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L30",
                    },
                    "type": "<E, A>(a: A) => TheseT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.rightM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "rightM",
                    "signature": "readonly rightM: <E, A>(ma: HKT<M, A>) => TheseT<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L27",
                    },
                    "type": "<E, A>(ma: HKT<M, A>) => TheseT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.swap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "swap",
                    "signature": "readonly swap: <E, A>(fa: TheseT<M, E, A>) => TheseT<M, A, E>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L26",
                    },
                    "type": "<E, A>(fa: TheseT<M, E, A>) => TheseT<M, A, E>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM.toTuple",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "toTuple",
                    "signature": "readonly toTuple: <E, A>(fa: TheseT<M, E, A>, e: E, a: A) => HKT<M, [E, A]>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L32",
                    },
                    "type": "<E, A>(fa: TheseT<M, E, A>, e: E, a: A) => HKT<M, [E, A]>",
                  },
                ],
              },
              "name": "TheseM",
              "signature": "interface TheseM<M> {}",
              "source": {
                "filename": "lib/TheseT.d.ts",
                "line": 16,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L16",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L16",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "theseT.TheseM1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <E, A, N, B>(
    fa: TheseT1<M, E, A>,
    f: (e: E) => N,
    g: (a: A) => B
) => TheseT1<M, N, B>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L53",
                    },
                    "type": "<E, A, N, B>(fa: Kind<M, These<E, A>>, f: (e: E) => N, g: (a: A) => B) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.both",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "both",
                    "signature": "readonly both: <E, A>(e: E, a: A) => TheseT1<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L66",
                    },
                    "type": "<E, A>(e: E, a: A) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <E, A, R>(
    fa: TheseT1<M, E, A>,
    onLeft: (e: E) => Kind<M, R>,
    onRight: (a: A) => Kind<M, R>,
    onBoth: (e: E, a: A) => Kind<M, R>
) => Kind<M, R>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L55",
                    },
                    "type": "<E, A, R>(fa: Kind<M, These<E, A>>, onLeft: (e: E) => Kind<M, R>, onRight: (a: A) => Kind<M, R>, onBoth: (e: E, a: A) => Kind<M, R>) => Kind<M, R>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <E>(S: Semigroup<E>) => {
    readonly _E: E;
    readonly map: <A, B>(
        ma: TheseT1<M, E, A>,
        f: (a: A) => B
    ) => TheseT1<M, E, B>;
    readonly of: <A>(a: A) => TheseT1<M, E, A>;
    readonly ap: <A, B>(
        mab: TheseT1<M, E, (a: A) => B>,
        ma: TheseT1<M, E, A>
    ) => TheseT1<M, E, B>;
    readonly chain: <A, B>(
        ma: TheseT1<M, E, A>,
        f: (a: A) => TheseT1<M, E, B>
    ) => TheseT1<M, E, B>;
};",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 68,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L68",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L68",
                    },
                    "type": "<E>(S: Semigroup<E>) => { readonly _E: E; readonly map: <A, B>(ma: Kind<M, These<E, A>>, f: (a: A) => B) => Kind<M, These<E, A>>; readonly of: <A>(a: A) => Kind<M, These<E, A>>; readonly ap: <A, B>(mab: Kind<M, These<E, A>>, ma: Kind<M, These<E, A>>) => Kind<M, These<E, A>>; readonly chain: <A, B>(ma: Kind<M, These<E, A>>, f: (a: A) => Kind<M, These<E, A>>) => Kind<M, These<E, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <E, A>(e: E) => TheseT1<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 64,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L64",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L64",
                    },
                    "type": "<E, A>(e: E) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.leftM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "leftM",
                    "signature": "readonly leftM: <E, A>(me: Kind<M, E>) => TheseT1<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 63,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L63",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L63",
                    },
                    "type": "<E, A>(me: Kind<M, E>) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, A, B>(
    fa: TheseT1<M, E, A>,
    f: (a: A) => B
) => TheseT1<M, E, B>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L52",
                    },
                    "type": "<E, A, B>(fa: Kind<M, These<E, A>>, f: (a: A) => B) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <E, A, N>(
    fa: TheseT1<M, E, A>,
    f: (e: E) => N
) => TheseT1<M, N, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L54",
                    },
                    "type": "<E, A, N>(fa: Kind<M, These<E, A>>, f: (e: E) => N) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: <E, A>(a: A) => TheseT1<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L65",
                    },
                    "type": "<E, A>(a: A) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.rightM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "rightM",
                    "signature": "readonly rightM: <E, A>(ma: Kind<M, A>) => TheseT1<M, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 62,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L62",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L62",
                    },
                    "type": "<E, A>(ma: Kind<M, A>) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.swap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "swap",
                    "signature": "readonly swap: <E, A>(fa: TheseT1<M, E, A>) => TheseT1<M, A, E>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 61,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L61",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L61",
                    },
                    "type": "<E, A>(fa: Kind<M, These<E, A>>) => Kind<M, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM1.toTuple",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "toTuple",
                    "signature": "readonly toTuple: <E, A>(fa: TheseT1<M, E, A>, e: E, a: A) => Kind<M, [E, A]>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 67,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L67",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L67",
                    },
                    "type": "<E, A>(fa: Kind<M, These<E, A>>, e: E, a: A) => Kind<M, [E, A]>",
                  },
                ],
              },
              "name": "TheseM1",
              "signature": "interface TheseM1<M extends URIS> {}",
              "source": {
                "filename": "lib/TheseT.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L51",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "theseT.TheseM2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.bimap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "bimap",
                    "signature": "readonly bimap: <R, E, A, N, B>(
    fa: TheseT2<M, R, E, A>,
    f: (e: E) => N,
    g: (a: A) => B
) => TheseT2<M, R, N, B>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 88,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L88",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L88",
                    },
                    "type": "<R, E, A, N, B>(fa: Kind2<M, R, These<E, A>>, f: (e: E) => N, g: (a: A) => B) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.both",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "both",
                    "signature": "readonly both: <R, E, A>(e: E, a: A) => TheseT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 101,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L101",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L101",
                    },
                    "type": "<R, E, A>(e: E, a: A) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.fold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "fold",
                    "signature": "readonly fold: <R, E, A, B>(
    fa: TheseT2<M, R, E, A>,
    onLeft: (e: E) => Kind2<M, R, B>,
    onRight: (a: A) => Kind2<M, R, B>,
    onBoth: (e: E, a: A) => Kind2<M, R, B>
) => Kind2<M, R, B>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 90,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L90",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L90",
                    },
                    "type": "<R, E, A, B>(fa: Kind2<M, R, These<E, A>>, onLeft: (e: E) => Kind2<M, R, B>, onRight: (a: A) => Kind2<M, R, B>, onBoth: (e: E, a: A) => Kind2<M, R, B>) => Kind2<M, R, B>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <E>(S: Semigroup<E>) => {
    readonly _E: E;
    readonly map: <R, A, B>(
        ma: TheseT2<M, R, E, A>,
        f: (a: A) => B
    ) => TheseT2<M, R, E, B>;
    readonly of: <R, A>(a: A) => TheseT2<M, R, E, A>;
    readonly ap: <R, A, B>(
        mab: TheseT2<M, R, E, (a: A) => B>,
        ma: TheseT2<M, R, E, A>
    ) => TheseT2<M, R, E, B>;
    readonly chain: <R, A, B>(
        ma: TheseT2<M, R, E, A>,
        f: (a: A) => TheseT2<M, R, E, B>
    ) => TheseT2<M, R, E, B>;
};",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 103,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L103",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L103",
                    },
                    "type": "<E>(S: Semigroup<E>) => { readonly _E: E; readonly map: <R, A, B>(ma: Kind2<M, R, These<E, A>>, f: (a: A) => B) => Kind2<M, R, These<E, A>>; readonly of: <R, A>(a: A) => Kind2<M, R, These<E, A>>; readonly ap: <R, A, B>(mab: Kind2<M, R, These<E, A>>, ma: Kind2<M, R, These<E, A>>) => Kind2<M, R, These<E, A>>; readonly chain: <R, A, B>(ma: Kind2<M, R, These<E, A>>, f: (a: A) => Kind2<M, R, These<E, A>>) => Kind2<M, R, These<E, A>>; }",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.left",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "left",
                    "signature": "readonly left: <R, E, A>(e: E) => TheseT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 99,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L99",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L99",
                    },
                    "type": "<R, E, A>(e: E) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.leftM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "leftM",
                    "signature": "readonly leftM: <R, E, A>(me: Kind2<M, R, E>) => TheseT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 98,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L98",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L98",
                    },
                    "type": "<R, E, A>(me: Kind2<M, R, E>) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, E, A, B>(
    fa: TheseT2<M, R, E, A>,
    f: (a: A) => B
) => TheseT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 87,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L87",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L87",
                    },
                    "type": "<R, E, A, B>(fa: Kind2<M, R, These<E, A>>, f: (a: A) => B) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.mapLeft",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "mapLeft",
                    "signature": "readonly mapLeft: <R, E, A, N>(
    fa: TheseT2<M, R, E, A>,
    f: (e: E) => N
) => TheseT2<M, R, N, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 89,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L89",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L89",
                    },
                    "type": "<R, E, A, N>(fa: Kind2<M, R, These<E, A>>, f: (e: E) => N) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.right",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "right",
                    "signature": "readonly right: <R, E, A>(a: A) => TheseT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L100",
                    },
                    "type": "<R, E, A>(a: A) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.rightM",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "rightM",
                    "signature": "readonly rightM: <R, E, A>(ma: Kind2<M, R, A>) => TheseT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 97,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L97",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L97",
                    },
                    "type": "<R, E, A>(ma: Kind2<M, R, A>) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.swap",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "swap",
                    "signature": "readonly swap: <R, E, A>(fa: TheseT2<M, R, E, A>) => TheseT2<M, R, A, E>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 96,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L96",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L96",
                    },
                    "type": "<R, E, A>(fa: Kind2<M, R, These<E, A>>) => Kind2<M, R, These<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "theseT.TheseM2.toTuple",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "toTuple",
                    "signature": "readonly toTuple: <R, E, A>(
    fa: TheseT2<M, R, E, A>,
    e: E,
    a: A
) => Kind2<M, R, [E, A]>;",
                    "source": {
                      "filename": "lib/TheseT.d.ts",
                      "line": 102,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L102",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L102",
                    },
                    "type": "<R, E, A>(fa: Kind2<M, R, These<E, A>>, e: E, a: A) => Kind2<M, R, [E, A]>",
                  },
                ],
              },
              "name": "TheseM2",
              "signature": "interface TheseM2<M extends URIS2> {}",
              "source": {
                "filename": "lib/TheseT.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L86",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.4.0
 */",
              ],
              "id": "theseT.TheseT",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TheseT",
              "signature": "interface TheseT<M, E, A> extends HKT<M, These<E, A>> {}",
              "source": {
                "filename": "lib/TheseT.d.ts",
                "line": 12,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L12",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L12",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.4.0
 */",
              ],
              "id": "theseT.TheseT1",
              "kind": "typeAlias",
              "name": "TheseT1",
              "signature": "type TheseT1<M extends URIS, E, A> = Kind<M, These<E, A>>;",
              "source": {
                "filename": "lib/TheseT.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L47",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.4.0
 */",
              ],
              "id": "theseT.TheseT2",
              "kind": "typeAlias",
              "name": "TheseT2",
              "signature": "type TheseT2<M extends URIS2, R, E, A> = Kind2<M, R, These<E, A>>;",
              "source": {
                "filename": "lib/TheseT.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L82",
              },
            },
          ],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.4.0
 */",
        ],
        "id": "theseT",
        "kind": "namespace",
        "name": "theseT",
        "signature": "module 'lib/TheseT.d.ts' {}",
        "source": {
          "filename": "lib/TheseT.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Apply a function to the current position
 *
 * @since 2.0.0
 */",
              ],
              "id": "traced.censor",
              "kind": "function",
              "name": "censor",
              "signature": "censor: <P>(f: (p: P) => P) => <A>(wa: Traced<P, A>) => Traced<P, A>;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L37",
              },
              "type": "<P>(f: (p: P) => P) => <A>(wa: Traced<P, A>) => Traced<P, A>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "traced.getComonad",
              "kind": "function",
              "name": "getComonad",
              "signature": "getComonad: <P>(monoid: Monoid<P>) => Comonad2C<URI, P>;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L42",
              },
              "type": "<P>(monoid: Monoid<P>) => Comonad2C<URI, P>",
            },
            {
              "docs": [
                "/**
 * Get the current position
 *
 * @since 2.0.0
 */",
              ],
              "id": "traced.listen",
              "kind": "function",
              "name": "listen",
              "signature": "listen: <P, A>(wa: Traced<P, A>) => Traced<P, [A, P]>;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 25,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L25",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L25",
              },
              "type": "<P, A>(wa: Traced<P, A>) => Traced<P, [A, P]>",
            },
            {
              "docs": [
                "/**
 * Get a value which depends on the current position
 *
 * @since 2.0.0
 */",
              ],
              "id": "traced.listens",
              "kind": "function",
              "name": "listens",
              "signature": "listens: <P, B>(f: (p: P) => B) => <A>(wa: Traced<P, A>) => Traced<P, [A, B]>;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L31",
              },
              "type": "<P, B>(f: (p: P) => B) => <A>(wa: Traced<P, A>) => Traced<P, [A, B]>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "traced.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: Traced<E, A>) => Traced<E, B>;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 50,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L50",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L50",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: Traced<E, A>) => Traced<E, B>",
            },
            {
              "docs": [
                "/**
 * Extracts a value at a relative position which depends on the current value.
 *
 * @since 2.0.0
 */",
              ],
              "id": "traced.tracks",
              "kind": "function",
              "name": "tracks",
              "signature": "tracks: <P, A>(M: Monoid<P>, f: (a: A) => P) => (wa: Traced<P, A>) => A;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L19",
              },
              "type": "<P, A>(M: Monoid<P>, f: (a: A) => P) => (wa: Traced<P, A>) => A",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "traced.Traced",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traced.Traced.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(p: P): A;",
                    "source": {
                      "filename": "lib/Traced.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L12",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Traced",
              "signature": "interface Traced<P, A> {}",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L11",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "traced.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 60,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L60",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L60",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "traced.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Traced'>;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 70,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L70",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L70",
              },
              "type": "Functor2<"Traced">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "traced.traced",
              "kind": "variable",
              "name": "traced",
              "signature": "const traced: Functor2<'Traced'>;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 75,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L75",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L75",
              },
              "type": "Functor2<"Traced">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "traced.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Traced.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L55",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "traced",
        "kind": "namespace",
        "name": "traced",
        "signature": "module 'lib/Traced.d.ts' {}",
        "source": {
          "filename": "lib/Traced.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Returns the composition of two traversables
 *
 * @example
 * import { array } from 'fp-ts/Array'
 * import { io } from 'fp-ts/IO'
 * import { none, option, some } from 'fp-ts/Option'
 * import { getTraversableComposition } from 'fp-ts/Traversable'
 *
 * const T = getTraversableComposition(array, option)
 * const state: Record<string, number | undefined> = {
 *   a: 1,
 *   b: 2
 * }
 * const read = (s: string) => () => state[s]
 * const x = T.sequence(io)([some(read('a')), none, some(read('b')), some(read('c'))])
 * assert.deepStrictEqual(x(), [some(1), none, some(2), some(undefined)])
 *
 * @since 2.0.0
 */",
              ],
              "id": "traversable.getTraversableComposition",
              "kind": "function",
              "name": "getTraversableComposition",
              "signature": "getTraversableComposition: {
    <F extends URIS, G extends URIS>(
        F: Traversable1<F>,
        G: Traversable1<G>
    ): TraversableComposition11<F, G>;
    <F, G>(F: Traversable<F>, G: Traversable<G>): TraversableComposition<F, G>;
};",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 341,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L341",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L341",
              },
              "type": "{ <F extends URIS, G extends URIS>(F: Traversable1<F>, G: Traversable1<G>): TraversableComposition11<F, G>; <F, G>(F: Traversable<F>, G: Traversable<G>): TraversableComposition<F, G>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "traversable.PipeableTraverse1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, FR, FE, B>(
    f: (a: A) => Kind3<F, FR, FE, B>
) => (ta: Kind<T, A>) => Kind3<F, FR, FE, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 353,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L353",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L353",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, FE>(F: Applicative3C<F, FE>): <A, FR, B>(
    f: (a: A) => Kind3<F, FR, FE, B>
) => (ta: Kind<T, A>) => Kind3<F, FR, FE, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 356,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L356",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L356",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    f: (a: A) => Kind2<F, FE, B>
) => (ta: Kind<T, A>) => Kind2<F, FE, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 359,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L359",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L359",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    f: (a: A) => Kind2<F, FE, B>
) => (ta: Kind<T, A>) => Kind2<F, FE, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 362,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L362",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L362",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (a: A) => Kind<F, B>
) => (ta: Kind<T, A>) => Kind<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 365,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L365",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L365",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (a: A) => HKT<F, B>
) => (ta: Kind<T, A>) => HKT<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 366,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L366",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L366",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableTraverse1",
              "signature": "interface PipeableTraverse1<T extends URIS> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 352,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L352",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L352",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "traversable.PipeableTraverse2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, FR, FE, B>(
    f: (a: A) => Kind3<F, FR, FE, B>
) => <TE>(ta: Kind2<T, TE, A>) => Kind3<F, FR, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 372,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L372",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L372",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    f: (a: A) => Kind2<F, FE, B>
) => <TE>(ta: Kind2<T, TE, A>) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 375,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L375",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L375",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    f: (a: A) => Kind2<F, FE, B>
) => <TE>(ta: Kind2<T, TE, A>) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 378,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L378",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L378",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (a: A) => Kind<F, B>
) => <TE>(ta: Kind2<T, TE, A>) => Kind<F, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 381,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L381",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L381",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.PipeableTraverse2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (a: A) => HKT<F, B>
) => <TE>(ta: Kind2<T, TE, A>) => HKT<F, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 384,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L384",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L384",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableTraverse2",
              "signature": "interface PipeableTraverse2<T extends URIS2> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 371,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L371",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L371",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Sequence",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Sequence.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <R, E, A>(
    ta: HKT<T, Kind3<F, R, E, A>>
) => Kind3<F, R, E, HKT<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 202,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L202",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L202",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <R, A>(
    ta: HKT<T, Kind3<F, R, E, A>>
) => Kind3<F, R, E, HKT<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 203,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L203",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L203",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <E, A>(
    ta: HKT<T, Kind2<F, E, A>>
) => Kind2<F, E, HKT<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 204,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L204",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L204",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A>(
    ta: HKT<T, Kind2<F, E, A>>
) => Kind2<F, E, HKT<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 205,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L205",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L205",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A>(
    ta: HKT<T, Kind<F, A>>
) => Kind<F, HKT<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 206,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L206",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L206",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A>(ta: HKT<T, HKT<F, A>>) => HKT<F, HKT<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 207,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L207",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L207",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Sequence",
              "signature": "interface Sequence<T> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 201,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L201",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L201",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Sequence1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Sequence1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS4>(F: Applicative4<F>): <S, R, E, A>(
    ta: Kind<T, Kind4<F, S, R, E, A>>
) => Kind4<F, S, R, E, Kind<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 213,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L213",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L213",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <R, E, A>(
    ta: Kind<T, Kind3<F, R, E, A>>
) => Kind3<F, R, E, Kind<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 216,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L216",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L216",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <R, A>(
    ta: Kind<T, Kind3<F, R, E, A>>
) => Kind3<F, R, E, Kind<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 217,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L217",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L217",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <E, A>(
    ta: Kind<T, Kind2<F, E, A>>
) => Kind2<F, E, Kind<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 218,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L218",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L218",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A>(
    ta: Kind<T, Kind2<F, E, A>>
) => Kind2<F, E, Kind<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 219,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L219",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L219",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A>(
    ta: Kind<T, Kind<F, A>>
) => Kind<F, Kind<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 220,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L220",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L220",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence1.6-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A>(ta: Kind<T, HKT<F, A>>) => HKT<F, Kind<T, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 221,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L221",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L221",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Sequence1",
              "signature": "interface Sequence1<T extends URIS> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 212,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L212",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L212",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Sequence2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Sequence2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <TE, R, FE, A>(
    ta: Kind2<T, TE, Kind3<F, R, FE, A>>
) => Kind3<F, R, FE, Kind2<T, TE, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 227,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L227",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L227",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <TE, FE, A>(
    ta: Kind2<T, TE, Kind2<F, FE, A>>
) => Kind2<F, FE, Kind2<T, TE, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 230,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L230",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L230",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <TE, A>(
    ta: Kind2<T, TE, Kind2<F, FE, A>>
) => Kind2<F, FE, Kind2<T, TE, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 231,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L231",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L231",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <E, A>(
    ta: Kind2<T, E, Kind<F, A>>
) => Kind<F, Kind2<T, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 234,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L234",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L234",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <E, A>(
    ta: Kind2<T, E, HKT<F, A>>
) => HKT<F, Kind2<T, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 235,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L235",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L235",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Sequence2",
              "signature": "interface Sequence2<T extends URIS2> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 226,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L226",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L226",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Sequence2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Sequence2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <R, FE, A>(
    ta: Kind2<T, E, Kind3<F, R, FE, A>>
) => Kind3<F, R, FE, Kind2<T, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 241,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L241",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L241",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <FE, A>(
    ta: Kind2<T, E, Kind2<F, FE, A>>
) => Kind2<F, FE, Kind2<T, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 244,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L244",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L244",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2C.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A>(
    ta: Kind2<T, E, Kind2<F, FE, A>>
) => Kind2<F, FE, Kind2<T, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 245,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L245",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L245",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2C.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A>(
    ta: Kind2<T, E, Kind<F, A>>
) => Kind<F, Kind2<T, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 246,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L246",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L246",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence2C.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A>(
    ta: Kind2<T, E, HKT<F, A>>
) => HKT<F, Kind2<T, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 247,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L247",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L247",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Sequence2C",
              "signature": "interface Sequence2C<T extends URIS2, E> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 240,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L240",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L240",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Sequence3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Sequence3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <TR, TE, FR, FE, A>(
    ta: Kind3<T, TR, TE, Kind3<F, FR, FE, A>>
) => Kind3<F, FR, FE, Kind3<T, TR, TE, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 253,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L253",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L253",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <R, TE, FE, A>(
    ta: Kind3<T, R, TE, Kind2<F, FE, A>>
) => Kind2<F, FE, Kind3<T, R, TE, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 256,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L256",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L256",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence3.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <R, TE, A>(
    ta: Kind3<T, R, TE, Kind2<F, FE, A>>
) => Kind2<F, FE, Kind3<T, R, TE, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 259,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L259",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L259",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence3.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <R, E, A>(
    ta: Kind3<T, R, E, Kind<F, A>>
) => Kind<F, Kind3<T, R, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 262,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L262",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L262",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Sequence3.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <R, E, A>(
    ta: Kind3<T, R, E, HKT<F, A>>
) => HKT<F, Kind3<T, R, E, A>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 263,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L263",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L263",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Sequence3",
              "signature": "interface Sequence3<T extends URIS3> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 252,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L252",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L252",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.SequenceComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.SequenceComposition11.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS3>(H: Applicative3<H>): <R, E, A>(
    fga: Kind<F, Kind<G, Kind3<H, R, E, A>>>
) => Kind3<H, R, E, Kind<F, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 300,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L300",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L300",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.SequenceComposition11.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS2>(H: Applicative2<H>): <E, A>(
    fga: Kind<F, Kind<G, Kind2<H, E, A>>>
) => Kind2<H, E, Kind<F, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 303,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L303",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L303",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.SequenceComposition11.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS2, E>(H: Applicative2C<H, E>): <A>(
    fga: Kind<F, Kind<G, Kind2<H, E, A>>>
) => Kind2<H, E, Kind<F, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 306,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L306",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L306",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.SequenceComposition11.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS>(H: Applicative1<H>): <A>(
    fga: Kind<F, Kind<G, Kind<H, A>>>
) => Kind<H, Kind<F, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 309,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L309",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L309",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.SequenceComposition11.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H>(H: Applicative<H>): <A>(
    fga: Kind<F, Kind<G, HKT<H, A>>>
) => HKT<H, Kind<F, Kind<G, A>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 310,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L310",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L310",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "SequenceComposition11",
              "signature": "interface SequenceComposition11<F extends URIS, G extends URIS> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 299,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L299",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L299",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traversable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversable.Traversable.sequence",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sequence",
                    "signature": "readonly sequence: Sequence<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 58,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L58",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L58",
                    },
                    "type": "Sequence<T>",
                  },
                  {
                    "docs": [
                      "/**
   * Runs an action for every element in a data structure and accumulates the results
   */",
                    ],
                    "id": "traversable.Traversable.traverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverse",
                    "signature": "readonly traverse: Traverse<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 57,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L57",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L57",
                    },
                    "type": "Traverse<T>",
                  },
                ],
              },
              "name": "Traversable",
              "signature": "interface Traversable<T> extends Functor<T>, Foldable<T> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L53",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traversable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversable.Traversable1.sequence",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sequence",
                    "signature": "readonly sequence: Sequence1<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 66,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L66",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L66",
                    },
                    "type": "Sequence1<T>",
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traversable1.traverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverse",
                    "signature": "readonly traverse: Traverse1<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L65",
                    },
                    "type": "Traverse1<T>",
                  },
                ],
              },
              "name": "Traversable1",
              "signature": "interface Traversable1<T extends URIS> extends Functor1<T>, Foldable1<T> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 64,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L64",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L64",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traversable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversable.Traversable2.sequence",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sequence",
                    "signature": "readonly sequence: Sequence2<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 74,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L74",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L74",
                    },
                    "type": "Sequence2<T>",
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traversable2.traverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverse",
                    "signature": "readonly traverse: Traverse2<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 73,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L73",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L73",
                    },
                    "type": "Traverse2<T>",
                  },
                ],
              },
              "name": "Traversable2",
              "signature": "interface Traversable2<T extends URIS2> extends Functor2<T>, Foldable2<T> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 72,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L72",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L72",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traversable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversable.Traversable2C.sequence",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sequence",
                    "signature": "readonly sequence: Sequence2C<T, TL>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L82",
                    },
                    "type": "Sequence2C<T, TL>",
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traversable2C.traverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverse",
                    "signature": "readonly traverse: Traverse2C<T, TL>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 81,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L81",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L81",
                    },
                    "type": "Traverse2C<T, TL>",
                  },
                ],
              },
              "name": "Traversable2C",
              "signature": "interface Traversable2C<T extends URIS2, TL>
    extends Functor2C<T, TL>,
        Foldable2C<T, TL> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 80,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L80",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L80",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traversable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversable.Traversable3.sequence",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sequence",
                    "signature": "readonly sequence: Sequence3<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 90,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L90",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L90",
                    },
                    "type": "Sequence3<T>",
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traversable3.traverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverse",
                    "signature": "readonly traverse: Traverse3<T>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 89,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L89",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L89",
                    },
                    "type": "Traverse3<T>",
                  },
                ],
              },
              "name": "Traversable3",
              "signature": "interface Traversable3<T extends URIS3> extends Functor3<T>, Foldable3<T> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L88",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L88",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.TraversableComposition",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversable.TraversableComposition.sequence",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sequence",
                    "signature": "readonly sequence: <H>(
    H: Applicative<H>
) => <A>(fga: HKT<F, HKT<G, HKT<H, A>>>) => HKT<H, HKT<F, HKT<G, A>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 272,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L272",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L272",
                    },
                    "type": "<H>(H: Applicative<H>) => <A>(fga: HKT<F, HKT<G, HKT<H, A>>>) => HKT<H, HKT<F, HKT<G, A>>>",
                  },
                  {
                    "docs": [],
                    "id": "traversable.TraversableComposition.traverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverse",
                    "signature": "readonly traverse: <H>(
    H: Applicative<H>
) => <A, B>(
    fga: HKT<F, HKT<G, A>>,
    f: (a: A) => HKT<H, B>
) => HKT<H, HKT<F, HKT<G, B>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 269,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L269",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L269",
                    },
                    "type": "<H>(H: Applicative<H>) => <A, B>(fga: HKT<F, HKT<G, A>>, f: (a: A) => HKT<H, B>) => HKT<H, HKT<F, HKT<G, B>>>",
                  },
                ],
              },
              "name": "TraversableComposition",
              "signature": "interface TraversableComposition<F, G>
    extends FoldableComposition<F, G>,
        FunctorComposition<F, G> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 268,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L268",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L268",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.TraversableComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversable.TraversableComposition11.sequence",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "sequence",
                    "signature": "readonly sequence: SequenceComposition11<F, G>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 319,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L319",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L319",
                    },
                    "type": "SequenceComposition11<F, G>",
                  },
                  {
                    "docs": [],
                    "id": "traversable.TraversableComposition11.traverse",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverse",
                    "signature": "readonly traverse: TraverseComposition11<F, G>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 318,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L318",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L318",
                    },
                    "type": "TraverseComposition11<F, G>",
                  },
                ],
              },
              "name": "TraversableComposition11",
              "signature": "interface TraversableComposition11<F extends URIS, G extends URIS>
    extends FoldableComposition11<F, G>,
        FunctorComposition11<F, G> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 315,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L315",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L315",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traverse",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Traverse.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    ta: HKT<T, A>,
    f: (a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 96,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L96",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L96",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    ta: HKT<T, A>,
    f: (a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L100",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    ta: HKT<T, A>,
    f: (a: A) => Kind2<F, E, B>
) => Kind2<F, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 104,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L104",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L104",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    ta: HKT<T, A>,
    f: (a: A) => Kind2<F, E, B>
) => Kind2<F, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 105,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L105",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L105",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: HKT<T, A>,
    f: (a: A) => Kind<F, B>
) => Kind<F, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 109,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L109",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L109",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: HKT<T, A>,
    f: (a: A) => HKT<F, B>
) => HKT<F, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 110,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L110",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L110",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Traverse",
              "signature": "interface Traverse<T> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 95,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L95",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L95",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traverse1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Traverse1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    ta: Kind<T, A>,
    f: (a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 116,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L116",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L116",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    ta: Kind<T, A>,
    f: (a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 120,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L120",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L120",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    ta: Kind<T, A>,
    f: (a: A) => Kind2<F, E, B>
) => Kind2<F, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 124,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L124",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L124",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    ta: Kind<T, A>,
    f: (a: A) => Kind2<F, E, B>
) => Kind2<F, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 128,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L128",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L128",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: Kind<T, A>,
    f: (a: A) => Kind<F, B>
) => Kind<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 132,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L132",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L132",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: Kind<T, A>,
    f: (a: A) => HKT<F, B>
) => HKT<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 133,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L133",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L133",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Traverse1",
              "signature": "interface Traverse1<T extends URIS> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L115",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traverse2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Traverse2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <TE, A, R, FE, B>(
    ta: Kind2<T, TE, A>,
    f: (a: A) => Kind3<F, R, FE, B>
) => Kind3<F, R, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 139,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L139",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L139",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <TE, A, FE, B>(
    ta: Kind2<T, TE, A>,
    f: (a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 143,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L143",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L143",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <TE, A, B>(
    ta: Kind2<T, TE, A>,
    f: (a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 147,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L147",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L147",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <E, A, B>(
    ta: Kind2<T, E, A>,
    f: (a: A) => Kind<F, B>
) => Kind<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 151,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L151",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L151",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <E, A, B>(
    ta: Kind2<T, E, A>,
    f: (a: A) => HKT<F, B>
) => HKT<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 155,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L155",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L155",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Traverse2",
              "signature": "interface Traverse2<T extends URIS2> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 138,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L138",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L138",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traverse2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Traverse2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B>(
    ta: Kind2<T, E, A>,
    f: (a: A) => Kind3<F, R, FE, B>
) => Kind3<F, R, FE, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 161,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L161",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L161",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    ta: Kind2<T, E, A>,
    f: (a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 165,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L165",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L165",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2C.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    ta: Kind2<T, E, A>,
    f: (a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 169,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L169",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L169",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2C.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: Kind2<T, E, A>,
    f: (a: A) => Kind<F, B>
) => Kind<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 173,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L173",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L173",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse2C.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: Kind2<T, E, A>,
    f: (a: A) => HKT<F, B>
) => HKT<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 174,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L174",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L174",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Traverse2C",
              "signature": "interface Traverse2C<T extends URIS2, E> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 160,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L160",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L160",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.Traverse3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.Traverse3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <TR, TE, A, FR, FE, B>(
    ta: Kind3<T, TR, TE, A>,
    f: (a: A) => Kind3<F, FR, FE, B>
) => Kind3<F, FR, FE, Kind3<T, TR, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 180,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L180",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L180",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <TR, A, TE, FE, B>(
    ta: Kind3<T, TR, TE, A>,
    f: (a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind3<T, TR, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 184,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L184",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L184",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse3.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <R, TE, A, B>(
    ta: Kind3<T, R, TE, A>,
    f: (a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind3<T, R, TE, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 188,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L188",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L188",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse3.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <R, E, A, B>(
    ta: Kind3<T, R, E, A>,
    f: (a: A) => Kind<F, B>
) => Kind<F, Kind3<T, R, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 192,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L192",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L192",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.Traverse3.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <R, E, A, B>(
    ta: Kind3<T, R, E, A>,
    f: (a: A) => HKT<F, B>
) => HKT<F, Kind3<T, R, E, B>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 196,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L196",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L196",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Traverse3",
              "signature": "interface Traverse3<T extends URIS3> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 179,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L179",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L179",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversable.TraverseComposition11",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversable.TraverseComposition11.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS3>(H: Applicative3<H>): <R, E, A, B>(
    fga: Kind<F, Kind<G, A>>,
    f: (a: A) => Kind3<H, R, E, B>
) => Kind3<H, R, E, Kind<F, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 278,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L278",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L278",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.TraverseComposition11.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS2>(H: Applicative2<H>): <E, A, B>(
    fga: Kind<F, Kind<G, A>>,
    f: (a: A) => Kind2<H, E, B>
) => Kind2<H, E, Kind<F, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 282,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L282",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L282",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.TraverseComposition11.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS2, E>(H: Applicative2C<H, E>): <A, B>(
    fga: Kind<F, Kind<G, A>>,
    f: (a: A) => Kind2<H, E, B>
) => Kind2<H, E, Kind<F, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 286,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L286",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L286",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.TraverseComposition11.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H extends URIS>(H: Applicative1<H>): <A, B>(
    fga: Kind<F, Kind<G, A>>,
    f: (a: A) => Kind<H, B>
) => Kind<H, Kind<F, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 290,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L290",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L290",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversable.TraverseComposition11.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<H>(H: Applicative<H>): <A, B>(
    fga: Kind<F, Kind<G, A>>,
    f: (a: A) => HKT<H, B>
) => HKT<H, Kind<F, Kind<G, B>>>;",
                    "source": {
                      "filename": "lib/Traversable.d.ts",
                      "line": 294,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L294",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L294",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TraverseComposition11",
              "signature": "interface TraverseComposition11<F extends URIS, G extends URIS> {}",
              "source": {
                "filename": "lib/Traversable.d.ts",
                "line": 277,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L277",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L277",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * \`Traversable\` represents data structures which can be _traversed_ accumulating results and effects in some
 * \`Applicative\` functor.
 *
 * - \`traverse\` runs an action for every element in a data structure, and accumulates the results.
 * - \`sequence\` runs the actions _contained_ in a data structure, and accumulates the results.
 *
 * The \`traverse\` and \`sequence\` functions should be compatible in the following sense:
 *
 * - \`traverse(A)(xs, f) <-> sequence(A)(A.map(xs, f))\`
 * - \`sequence(A)(xs) <-> traverse(A)(xs, identity)\`
 *
 * where \`A\` is an \`Applicative\` instance
 *
 * \`Traversable\` instances should also be compatible with the corresponding \`Foldable\` instances, in the following sense:
 *
 * \`\`\`ts
 * import { getApplicative, make } from 'fp-ts/Const'
 *
 * const A = getApplicative(M)
 *
 * foldMap(M)(xs, f) = traverse(A)(xs, a => make(f(a)))
 * \`\`\`
 *
 * where \`M\` is a \`Monoid\` instance
 *
 * @since 2.0.0
 */",
        ],
        "id": "traversable",
        "kind": "namespace",
        "name": "traversable",
        "signature": "module 'lib/Traversable.d.ts' {}",
        "source": {
          "filename": "lib/Traversable.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "traversableWithIndex.PipeableTraverseWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    f: (i: I, a: A) => Kind3<F, R, E, B>
) => (ta: Kind<T, A>) => Kind3<F, R, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 159,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L159",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L159",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    f: (i: I, a: A) => Kind3<F, R, E, B>
) => (ta: Kind<T, A>) => Kind3<F, R, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 162,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L162",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L162",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    f: (i: I, a: A) => Kind2<F, E, B>
) => (ta: Kind<T, A>) => Kind2<F, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 165,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L165",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L165",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    f: (i: I, a: A) => Kind2<F, E, B>
) => (ta: Kind<T, A>) => Kind2<F, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 168,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L168",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L168",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (i: I, a: A) => Kind<F, B>
) => (ta: Kind<T, A>) => Kind<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 171,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L171",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L171",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (i: I, a: A) => HKT<F, B>
) => (ta: Kind<T, A>) => HKT<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 172,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L172",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L172",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableTraverseWithIndex1",
              "signature": "interface PipeableTraverseWithIndex1<T extends URIS, I> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L158",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "traversableWithIndex.PipeableTraverseWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B>(
    f: (i: I, a: A) => Kind3<F, R, FE, B>
) => <TE>(ta: Kind2<T, TE, A>) => Kind3<F, R, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 178,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L178",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L178",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    f: (i: I, a: A) => Kind2<F, FE, B>
) => <TE>(ta: Kind2<T, TE, A>) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 181,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L181",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L181",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    f: (i: I, a: A) => Kind2<F, FE, B>
) => <TE>(ta: Kind2<T, TE, A>) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 184,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L184",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L184",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (i: I, a: A) => Kind<F, B>
) => <E>(ta: Kind2<T, E, A>) => Kind<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 187,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L187",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L187",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.PipeableTraverseWithIndex2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (i: I, a: A) => HKT<F, B>
) => <E>(ta: Kind2<T, E, A>) => HKT<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 190,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L190",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L190",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableTraverseWithIndex2",
              "signature": "interface PipeableTraverseWithIndex2<T extends URIS2, I> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 177,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L177",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L177",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraversableWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraversableWithIndex.traverseWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverseWithIndex",
                    "signature": "readonly traverseWithIndex: TraverseWithIndex<T, I>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 32,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L32",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L32",
                    },
                    "type": "TraverseWithIndex<T, I>",
                  },
                ],
              },
              "name": "TraversableWithIndex",
              "signature": "interface TraversableWithIndex<T, I>
    extends FunctorWithIndex<T, I>,
        FoldableWithIndex<T, I>,
        Traversable<T> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L31",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraversableWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraversableWithIndex1.traverseWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverseWithIndex",
                    "signature": "readonly traverseWithIndex: TraverseWithIndex1<T, I>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L41",
                    },
                    "type": "TraverseWithIndex1<T, I>",
                  },
                ],
              },
              "name": "TraversableWithIndex1",
              "signature": "interface TraversableWithIndex1<T extends URIS, I>
    extends FunctorWithIndex1<T, I>,
        FoldableWithIndex1<T, I>,
        Traversable1<T> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L37",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraversableWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraversableWithIndex2.traverseWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverseWithIndex",
                    "signature": "readonly traverseWithIndex: TraverseWithIndex2<T, I>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 50,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L50",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L50",
                    },
                    "type": "TraverseWithIndex2<T, I>",
                  },
                ],
              },
              "name": "TraversableWithIndex2",
              "signature": "interface TraversableWithIndex2<T extends URIS2, I>
    extends FunctorWithIndex2<T, I>,
        FoldableWithIndex2<T, I>,
        Traversable2<T> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L46",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraversableWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraversableWithIndex2C.traverseWithIndex",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "traverseWithIndex",
                    "signature": "readonly traverseWithIndex: TraverseWithIndex2C<T, I, E>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 59,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L59",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L59",
                    },
                    "type": "TraverseWithIndex2C<T, I, E>",
                  },
                ],
              },
              "name": "TraversableWithIndex2C",
              "signature": "interface TraversableWithIndex2C<T extends URIS2, I, E>
    extends FunctorWithIndex2C<T, I, E>,
        FoldableWithIndex2C<T, I, E>,
        Traversable2C<T, E> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 55,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L55",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L55",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraverseWithIndex",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    ta: HKT<T, A>,
    f: (i: I, a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L65",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    ta: HKT<T, A>,
    f: (i: I, a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 69,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L69",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L69",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    ta: HKT<T, A>,
    f: (i: I, a: A) => Kind2<F, E, B>
) => Kind2<F, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 73,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L73",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L73",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    ta: HKT<T, A>,
    f: (i: I, a: A) => Kind2<F, E, B>
) => Kind2<F, E, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L77",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: HKT<T, A>,
    f: (i: I, a: A) => Kind<F, B>
) => Kind<F, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 81,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L81",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L81",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: HKT<T, A>,
    f: (i: I, a: A) => HKT<F, B>
) => HKT<F, HKT<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L82",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TraverseWithIndex",
              "signature": "interface TraverseWithIndex<T, I> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 64,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L64",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L64",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraverseWithIndex1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    ta: Kind<T, A>,
    f: (i: I, a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 88,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L88",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L88",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    ta: Kind<T, A>,
    f: (i: I, a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L92",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    ta: Kind<T, A>,
    f: (i: I, a: A) => Kind2<F, E, B>
) => Kind2<F, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 96,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L96",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L96",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    ta: Kind<T, A>,
    f: (i: I, a: A) => Kind2<F, E, B>
) => Kind2<F, E, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L100",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: Kind<T, A>,
    f: (i: I, a: A) => Kind<F, B>
) => Kind<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 104,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L104",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L104",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: Kind<T, A>,
    f: (i: I, a: A) => HKT<F, B>
) => HKT<F, Kind<T, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 105,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L105",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L105",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TraverseWithIndex1",
              "signature": "interface TraverseWithIndex1<T extends URIS, I> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 87,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L87",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L87",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraverseWithIndex2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <TE, A, R, FE, B>(
    ta: Kind2<T, TE, A>,
    f: (i: I, a: A) => Kind3<F, R, FE, B>
) => Kind3<F, R, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 111,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L111",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L111",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <TE, A, FE, B>(
    ta: Kind2<T, TE, A>,
    f: (i: I, a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 115,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L115",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L115",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <TE, A, B>(
    ta: Kind2<T, TE, A>,
    f: (i: I, a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind2<T, TE, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 119,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L119",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L119",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <E, A, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => Kind<F, B>
) => Kind<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 123,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L123",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L123",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <E, A, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => HKT<F, B>
) => HKT<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 127,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L127",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L127",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TraverseWithIndex2",
              "signature": "interface TraverseWithIndex2<T extends URIS2, I> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L110",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "traversableWithIndex.TraverseWithIndex2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => Kind3<F, R, FE, B>
) => Kind3<F, R, FE, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 133,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L133",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L133",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3C<F, E>): <A, R, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => Kind3<F, R, E, B>
) => Kind3<F, R, E, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 137,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L137",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L137",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2C.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => Kind2<F, FE, B>
) => Kind2<F, FE, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 141,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L141",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L141",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2C.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2C<F, E>): <A, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => Kind2<F, E, B>
) => Kind2<F, E, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 145,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L145",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L145",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2C.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => Kind<F, B>
) => Kind<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 149,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L149",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L149",
                    },
                  },
                  {
                    "docs": [],
                    "id": "traversableWithIndex.TraverseWithIndex2C.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: Kind2<T, E, A>,
    f: (i: I, a: A) => HKT<F, B>
) => HKT<F, Kind2<T, E, B>>;",
                    "source": {
                      "filename": "lib/TraversableWithIndex.d.ts",
                      "line": 153,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L153",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L153",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "TraverseWithIndex2C",
              "signature": "interface TraverseWithIndex2C<T extends URIS2, I, E> {}",
              "source": {
                "filename": "lib/TraversableWithIndex.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L132",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * A \`Traversable\` with an additional index.
 * A \`TraversableWithIndex\` instance must be compatible with its \`Traversable\` instance
 *
 * \`\`\`ts
 * traverse(F)(ta, f) = traverseWithIndex(F)(ta, (_, a) => f(a))
 * \`\`\`
 *
 * with its \`FoldableWithIndex\` instance
 *
 * \`\`\`ts
 * foldMapWithIndex(M)(ta, f) = traverseWithIndex(getApplicative(M))(ta, (i, a) => new Const(f(i, a))).value
 * \`\`\`
 *
 * and with its \`FunctorWithIndex\` instance
 *
 * \`\`\`purescript
 * mapWithIndex(ta, f) = traverseWithIndex(identity)(ta, (i, a) => new Identity(f(i, a))).value
 * \`\`\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "traversableWithIndex",
        "kind": "namespace",
        "name": "traversableWithIndex",
        "signature": "module 'lib/TraversableWithIndex.d.ts' {}",
        "source": {
          "filename": "lib/TraversableWithIndex.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */",
              ],
              "id": "tree.ap",
              "kind": "function",
              "name": "ap",
              "signature": "ap: <A>(fa: Tree<A>) => <B>(fab: Tree<(a: A) => B>) => Tree<B>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 176,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L176",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L176",
              },
              "type": "<A>(fa: Tree<A>) => <B>(fab: Tree<(a: A) => B>) => Tree<B>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "tree.apFirst",
              "kind": "function",
              "name": "apFirst",
              "signature": "apFirst: <B>(fb: Tree<B>) => <A>(fa: Tree<A>) => Tree<A>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 185,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L185",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L185",
              },
              "type": "<B>(fb: Tree<B>) => <A>(fa: Tree<A>) => Tree<A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "tree.apS",
              "kind": "function",
              "name": "apS",
              "signature": "apS: <A, N extends string, B>(
    name: Exclude<N, keyof A>,
    fb: Tree<B>
) => (fa: Tree<A>) => Tree<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 342,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L342",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L342",
              },
              "type": "<A, N extends string, B>(name: Exclude<N, keyof A>, fb: Tree<B>) => (fa: Tree<A>) => Tree<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * Derivable from \`Apply\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "tree.apSecond",
              "kind": "function",
              "name": "apSecond",
              "signature": "apSecond: <B>(fb: Tree<B>) => <A>(fa: Tree<A>) => Tree<B>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 194,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L194",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L194",
              },
              "type": "<B>(fb: Tree<B>) => <A>(fa: Tree<A>) => Tree<B>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "tree.bind",
              "kind": "function",
              "name": "bind",
              "signature": "bind: <N extends string, A, B>(
    name: Exclude<N, keyof A>,
    f: (a: A) => Tree<B>
) => (fa: Tree<A>) => Tree<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 335,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L335",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L335",
              },
              "type": "<N extends string, A, B>(name: Exclude<N, keyof A>, f: (a: A) => Tree<B>) => (fa: Tree<A>) => Tree<{ [K in N | keyof A]: K extends keyof A ? A[K] : B; }>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "tree.bindTo",
              "kind": "function",
              "name": "bindTo",
              "signature": "bindTo: <N extends string>(name: N) => <A>(fa: Tree<A>) => Tree<{ [K in N]: A }>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 331,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L331",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L331",
              },
              "type": "<N extends string>(name: N) => <A>(fa: Tree<A>) => Tree<{ [K in N]: A; }>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */",
              ],
              "id": "tree.chain",
              "kind": "function",
              "name": "chain",
              "signature": "chain: <A, B>(f: (a: A) => Tree<B>) => (ma: Tree<A>) => Tree<B>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 201,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L201",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L201",
              },
              "type": "<A, B>(f: (a: A) => Tree<B>) => (ma: Tree<A>) => Tree<B>",
            },
            {
              "docs": [
                "/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "tree.chainFirst",
              "kind": "function",
              "name": "chainFirst",
              "signature": "chainFirst: <A, B>(f: (a: A) => Tree<B>) => (ma: Tree<A>) => Tree<A>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 211,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L211",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L211",
              },
              "type": "<A, B>(f: (a: A) => Tree<B>) => (ma: Tree<A>) => Tree<A>",
            },
            {
              "docs": [
                "/**
 * Neat 2-dimensional drawing of a forest
 *
 * @since 2.0.0
 */",
              ],
              "id": "tree.drawForest",
              "kind": "function",
              "name": "drawForest",
              "signature": "drawForest: (forest: Forest<string>) => string;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 53,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L53",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L53",
              },
              "type": "(forest: Forest<string>) => string",
            },
            {
              "docs": [
                "/**
 * Neat 2-dimensional drawing of a tree
 *
 * @example
 * import { make, drawTree, tree } from 'fp-ts/Tree'
 *
 * const fa = make('a', [
 *   tree.of('b'),
 *   tree.of('c'),
 *   make('d', [tree.of('e'), tree.of('f')])
 * ])
 *
 * assert.strictEqual(drawTree(fa), \`a
 * ├─ b
 * ├─ c
 * └─ d
 *    ├─ e
 *    └─ f\`)
 *
 *
 * @since 2.0.0
 */",
              ],
              "id": "tree.drawTree",
              "kind": "function",
              "name": "drawTree",
              "signature": "drawTree: (tree: Tree<string>) => string;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L76",
              },
              "type": "(tree: Tree<string>) => string",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "tree.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <A>(wa: Tree<A>) => Tree<Tree<A>>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 223,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L223",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L223",
              },
              "type": "<A>(wa: Tree<A>) => Tree<Tree<A>>",
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "tree.elem",
              "kind": "function",
              "name": "elem",
              "signature": "elem: <A>(E: Eq<A>) => (a: A, fa: Tree<A>) => boolean;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 142,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L142",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L142",
              },
              "type": "<A>(E: Eq<A>) => (a: A, fa: Tree<A>) => boolean",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "tree.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <A, B>(f: (wa: Tree<A>) => B) => (wa: Tree<A>) => Tree<B>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 216,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L216",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L216",
              },
              "type": "<A, B>(f: (wa: Tree<A>) => B) => (wa: Tree<A>) => Tree<B>",
            },
            {
              "docs": [
                "/**
 * @category Extract
 * @since 2.6.2
 */",
              ],
              "id": "tree.extract",
              "kind": "function",
              "name": "extract",
              "signature": "extract: <A>(wa: Tree<A>) => A;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 258,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L258",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L258",
              },
              "type": "<A>(wa: Tree<A>) => A",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Monad\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "tree.flatten",
              "kind": "function",
              "name": "flatten",
              "signature": "flatten: <A>(mma: Tree<Tree<A>>) => Tree<A>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 230,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L230",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L230",
              },
              "type": "<A>(mma: Tree<Tree<A>>) => Tree<A>",
            },
            {
              "docs": [
                "/**
 * Fold a tree into a "summary" value in depth-first order.
 *
 * For each node in the tree, apply \`f\` to the \`value\` and the result of applying \`f\` to each \`forest\`.
 *
 * This is also known as the catamorphism on trees.
 *
 * @example
 * import { fold, make } from 'fp-ts/Tree'
 *
 * const t = make(1, [make(2), make(3)])
 *
 * const sum = (as: Array<number>) => as.reduce((a, acc) => a + acc, 0)
 *
 * // Sum the values in a tree:
 * assert.deepStrictEqual(fold((a: number, bs: Array<number>) => a + sum(bs))(t), 6)
 *
 * // Find the maximum value in the tree:
 * assert.deepStrictEqual(fold((a: number, bs: Array<number>) => bs.reduce((b, acc) => Math.max(b, acc), a))(t), 3)
 *
 * // Count the number of leaves in the tree:
 * assert.deepStrictEqual(fold((_: number, bs: Array<number>) => (bs.length === 0 ? 1 : sum(bs)))(t), 2)
 *
 * @category destructors
 * @since 2.6.0
 */",
              ],
              "id": "tree.fold",
              "kind": "function",
              "name": "fold",
              "signature": "fold: <A, B>(f: (a: A, bs: Array<B>) => B) => (tree: Tree<A>) => B;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 169,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L169",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L169",
              },
              "type": "<A, B>(f: (a: A, bs: Array<B>) => B) => (tree: Tree<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "tree.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Tree<A>) => M;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 248,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L248",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L248",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Tree<A>) => M",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tree.getEq",
              "kind": "function",
              "name": "getEq",
              "signature": "getEq: <A>(E: Eq<A>) => Eq<Tree<A>>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 47,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L47",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L47",
              },
              "type": "<A>(E: Eq<A>) => Eq<Tree<A>>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tree.getShow",
              "kind": "function",
              "name": "getShow",
              "signature": "getShow: <A>(S: Show<A>) => Show<Tree<A>>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 42,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L42",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L42",
              },
              "type": "<A>(S: Show<A>) => Show<Tree<A>>",
            },
            {
              "docs": [
                "/**
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "tree.make",
              "kind": "function",
              "name": "make",
              "signature": "make: <A>(value: A, forest?: Forest<A>) => Tree<A>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 37,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L37",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L37",
              },
              "type": "<A>(value: A, forest?: Forest<A>) => Tree<A>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "tree.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => (fa: Tree<A>) => Tree<B>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 238,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L238",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L238",
              },
              "type": "<A, B>(f: (a: A) => B) => (fa: Tree<A>) => Tree<B>",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "tree.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: Tree<A>) => B;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 243,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L243",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L243",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => (fa: Tree<A>) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "tree.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: Tree<A>) => B;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 253,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L253",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L253",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => (fa: Tree<A>) => B",
            },
            {
              "docs": [
                "/**
 * Build a tree from a seed value
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "tree.unfoldForest",
              "kind": "function",
              "name": "unfoldForest",
              "signature": "unfoldForest: <A, B>(bs: Array<B>, f: (b: B) => [A, Array<B>]) => Forest<A>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 90,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L90",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L90",
              },
              "type": "<A, B>(bs: Array<B>, f: (b: B) => [A, Array<B>]) => Forest<A>",
            },
            {
              "docs": [
                "/**
 * Monadic forest builder, in depth-first order
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "tree.unfoldForestM",
              "kind": "function",
              "name": "unfoldForestM",
              "signature": "unfoldForestM: {
    <M extends URIS3>(M: Monad3<M>): <R, E, A, B>(
        bs: B[],
        f: (b: B) => Kind3<M, R, E, [A, B[]]>
    ) => Kind3<M, R, E, Forest<A>>;
    <M extends URIS3, E>(M: Monad3C<M, E>): <R, A, B>(
        bs: B[],
        f: (b: B) => Kind3<M, R, E, [A, B[]]>
    ) => Kind3<M, R, E, Forest<A>>;
    <M extends URIS2>(M: Monad2<M>): <R, E, B>(
        bs: B[],
        f: (b: B) => Kind2<M, R, [E, B[]]>
    ) => Kind2<M, R, Forest<E>>;
    <M extends URIS2, E>(M: Monad2C<M, E>): <A, B>(
        bs: B[],
        f: (b: B) => Kind2<M, E, [A, B[]]>
    ) => Kind2<M, E, Forest<A>>;
    <M extends URIS>(M: Monad1<M>): <A, B>(
        bs: B[],
        f: (b: B) => Kind<M, [A, B[]]>
    ) => Kind<M, Forest<A>>;
    <M>(M: MonadHKT<M>): <A, B>(
        bs: B[],
        f: (b: B) => HKT<M, [A, B[]]>
    ) => HKT<M, Forest<A>>;
};",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 121,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L121",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L121",
              },
              "type": "{ <M extends URIS3>(M: Monad3<M>): <R, E, A, B>(bs: B[], f: (b: B) => Kind3<M, R, E, [A, B[]]>) => Kind3<M, R, E, Forest<A>>; <M extends URIS3, E>(M: Monad3C<M, E>): <R, A, B>(bs: B[], f: (b: B) => Kind3<M, R, E, [A, B[]]>) => Kind3<M, R, E, Forest<A>>; <M extends URIS2>(M: Monad2<M>): <R, E, B>(bs: B[], f: (b: B) => Kind2<M, R, [E, B[]]>) => Kind2<M, R, Forest<E>>; <M extends URIS2, E>(M: Monad2C<M, E>): <A, B>(bs: B[], f: (b: B) => Kind2<M, E, [A, B[]]>) => Kind2<M, E, Forest<A>>; <M extends URIS>(M: Monad1<M>): <A, B>(bs: B[], f: (b: B) => Kind<M, [A, B[]]>) => Kind<M, Forest<A>>; <M>(M: MonadHKT<M>): <A, B>(bs: B[], f: (b: B) => HKT<M, [A, B[]]>) => HKT<M, Forest<A>>; }",
            },
            {
              "docs": [
                "/**
 * Build a tree from a seed value
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "tree.unfoldTree",
              "kind": "function",
              "name": "unfoldTree",
              "signature": "unfoldTree: <A, B>(b: B, f: (b: B) => [A, Array<B>]) => Tree<A>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 83,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L83",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L83",
              },
              "type": "<A, B>(b: B, f: (b: B) => [A, Array<B>]) => Tree<A>",
            },
            {
              "docs": [
                "/**
 * Monadic tree builder, in depth-first order
 *
 * @category constructors
 * @since 2.0.0
 */",
              ],
              "id": "tree.unfoldTreeM",
              "kind": "function",
              "name": "unfoldTreeM",
              "signature": "unfoldTreeM: {
    <M extends URIS3>(M: Monad3<M>): <R, E, A, B>(
        b: B,
        f: (b: B) => Kind3<M, R, E, [A, B[]]>
    ) => Kind3<M, R, E, Tree<A>>;
    <M extends URIS3, E>(M: Monad3C<M, E>): <R, A, B>(
        b: B,
        f: (b: B) => Kind3<M, R, E, [A, B[]]>
    ) => Kind3<M, R, E, Tree<A>>;
    <M extends URIS2>(M: Monad2<M>): <E, A, B>(
        b: B,
        f: (b: B) => Kind2<M, E, [A, B[]]>
    ) => Kind2<M, E, Tree<A>>;
    <M extends URIS2, E>(M: Monad2C<M, E>): <A, B>(
        b: B,
        f: (b: B) => Kind2<M, E, [A, B[]]>
    ) => Kind2<M, E, Tree<A>>;
    <M extends URIS>(M: Monad1<M>): <A, B>(
        b: B,
        f: (b: B) => Kind<M, [A, B[]]>
    ) => Kind<M, Tree<A>>;
    <M>(M: MonadHKT<M>): <A, B>(
        b: B,
        f: (b: B) => HKT<M, [A, B[]]>
    ) => HKT<M, Tree<A>>;
};",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 97,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L97",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L97",
              },
              "type": "{ <M extends URIS3>(M: Monad3<M>): <R, E, A, B>(b: B, f: (b: B) => Kind3<M, R, E, [A, B[]]>) => Kind3<M, R, E, Tree<A>>; <M extends URIS3, E>(M: Monad3C<M, E>): <R, A, B>(b: B, f: (b: B) => Kind3<M, R, E, [A, B[]]>) => Kind3<M, R, E, Tree<A>>; <M extends URIS2>(M: Monad2<M>): <E, A, B>(b: B, f: (b: B) => Kind2<M, E, [A, B[]]>) => Kind2<M, E, Tree<A>>; <M extends URIS2, E>(M: Monad2C<M, E>): <A, B>(b: B, f: (b: B) => Kind2<M, E, [A, B[]]>) => Kind2<M, E, Tree<A>>; <M extends URIS>(M: Monad1<M>): <A, B>(b: B, f: (b: B) => Kind<M, [A, B[]]>) => Kind<M, Tree<A>>; <M>(M: MonadHKT<M>): <A, B>(b: B, f: (b: B) => HKT<M, [A, B[]]>) => HKT<M, Tree<A>>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "tree.Tree",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "tree.Tree.forest",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "forest",
                    "signature": "readonly forest: Forest<A>;",
                    "source": {
                      "filename": "lib/Tree.d.ts",
                      "line": 31,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L31",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L31",
                    },
                    "type": "Forest<A>",
                  },
                  {
                    "docs": [],
                    "id": "tree.Tree.value",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "value",
                    "signature": "readonly value: A;",
                    "source": {
                      "filename": "lib/Tree.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L30",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Tree",
              "signature": "interface Tree<A> {}",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 29,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L29",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L29",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "tree.Forest",
              "kind": "typeAlias",
              "name": "Forest",
              "signature": "type Forest<A> = Array<Tree<A>>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L24",
              },
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tree.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 283,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L283",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L283",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tree.Applicative",
              "kind": "variable",
              "name": "Applicative",
              "signature": "const Applicative: Applicative1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 298,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L298",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L298",
              },
              "type": "Applicative1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tree.Comonad",
              "kind": "variable",
              "name": "Comonad",
              "signature": "const Comonad: Comonad1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 318,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L318",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L318",
              },
              "type": "Comonad1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.9.0
 */",
              ],
              "id": "tree.Do",
              "kind": "variable",
              "name": "Do",
              "signature": "const Do: Tree<{}>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 327,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L327",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L327",
              },
              "type": "Tree<{}>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tree.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 308,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L308",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L308",
              },
              "type": "Foldable1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tree.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 293,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L293",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L293",
              },
              "type": "Functor1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tree.Monad",
              "kind": "variable",
              "name": "Monad",
              "signature": "const Monad: Monad1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 303,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L303",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L303",
              },
              "type": "Monad1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * Wrap a value into the type constructor.
 *
 * @category Applicative
 * @since 2.7.0
 */",
              ],
              "id": "tree.of",
              "kind": "variable",
              "name": "of",
              "signature": "const of: <A>(a: A) => Kind<F, A>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 273,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L273",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L273",
              },
              "type": "<A>(a: A) => Kind<F, A>",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "tree.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 266,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L266",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L266",
              },
              "type": "Sequence1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tree.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 313,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L313",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L313",
              },
              "type": "Traversable1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "tree.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L262",
              },
              "type": "PipeableTraverse1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tree.tree",
              "kind": "variable",
              "name": "tree",
              "signature": "const tree: Monad1<'Tree'> &
    Foldable1<'Tree'> &
    Traversable1<'Tree'> &
    Comonad1<'Tree'>;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 323,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L323",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L323",
              },
              "type": "Monad1<"Tree"> & Foldable1<"Tree"> & Traversable1<"Tree"> & Comonad1<"Tree">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tree.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Tree.d.ts",
                "line": 278,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L278",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L278",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * Multi-way trees (aka rose trees) and forests, where a forest is
 *
 * \`\`\`ts
 * type Forest<A> = Array<Tree<A>>
 * \`\`\`
 *
 * @since 2.0.0
 */",
        ],
        "id": "tree",
        "kind": "namespace",
        "name": "tree",
        "signature": "module 'lib/Tree.d.ts' {}",
        "source": {
          "filename": "lib/Tree.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "tuple.bimap",
              "kind": "function",
              "name": "bimap",
              "signature": "bimap: <E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: [A, E]) => [B, G];",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 63,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L63",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L63",
              },
              "type": "<E, G, A, B>(f: (e: E) => G, g: (a: A) => B) => (fa: [A, E]) => [B, G]",
            },
            {
              "docs": [
                "/**
 * @category Semigroupoid
 * @since 2.0.0
 */",
              ],
              "id": "tuple.compose",
              "kind": "function",
              "name": "compose",
              "signature": "compose: <A, B>(ab: [B, A]) => <C>(bc: [C, B]) => [C, A];",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 75,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L75",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L75",
              },
              "type": "<A, B>(ab: [B, A]) => <C>(bc: [C, B]) => [C, A]",
            },
            {
              "docs": [
                "/**
 * Derivable from \`Extend\`.
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "tuple.duplicate",
              "kind": "function",
              "name": "duplicate",
              "signature": "duplicate: <E, A>(wa: [A, E]) => [[A, E], E];",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 82,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L82",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L82",
              },
              "type": "<E, A>(wa: [A, E]) => [[A, E], E]",
            },
            {
              "docs": [
                "/**
 * @category Extend
 * @since 2.0.0
 */",
              ],
              "id": "tuple.extend",
              "kind": "function",
              "name": "extend",
              "signature": "extend: <E, A, B>(f: (wa: [A, E]) => B) => (wa: [A, E]) => [B, E];",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 87,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L87",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L87",
              },
              "type": "<E, A, B>(f: (wa: [A, E]) => B) => (wa: [A, E]) => [B, E]",
            },
            {
              "docs": [
                "/**
 * @category Extract
 * @since 2.6.2
 */",
              ],
              "id": "tuple.extract",
              "kind": "function",
              "name": "extract",
              "signature": "extract: <E, A>(wa: [A, E]) => A;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 92,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L92",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L92",
              },
              "type": "<E, A>(wa: [A, E]) => A",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "tuple.foldMap",
              "kind": "function",
              "name": "foldMap",
              "signature": "foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: [A, E]) => M;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 97,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L97",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L97",
              },
              "type": "<M>(M: Monoid<M>) => <A>(f: (a: A) => M) => <E>(fa: [A, E]) => M",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "tuple.fst",
              "kind": "function",
              "name": "fst",
              "signature": "fst: <A, E>(ea: [A, E]) => A;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 21,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L21",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L21",
              },
              "type": "<A, E>(ea: [A, E]) => A",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.getApplicative",
              "kind": "function",
              "name": "getApplicative",
              "signature": "getApplicative: <M>(M: Monoid<M>) => Applicative2C<URI, M>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L41",
              },
              "type": "<M>(M: Monoid<M>) => Applicative2C<URI, M>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.getApply",
              "kind": "function",
              "name": "getApply",
              "signature": "getApply: <S>(S: Semigroup<S>) => Apply2C<URI, S>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L36",
              },
              "type": "<S>(S: Semigroup<S>) => Apply2C<URI, S>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.getChain",
              "kind": "function",
              "name": "getChain",
              "signature": "getChain: <S>(S: Semigroup<S>) => Chain2C<URI, S>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L46",
              },
              "type": "<S>(S: Semigroup<S>) => Chain2C<URI, S>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.getChainRec",
              "kind": "function",
              "name": "getChainRec",
              "signature": "getChainRec: <M>(M: Monoid<M>) => ChainRec2C<URI, M>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L56",
              },
              "type": "<M>(M: Monoid<M>) => ChainRec2C<URI, M>",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.getMonad",
              "kind": "function",
              "name": "getMonad",
              "signature": "getMonad: <M>(M: Monoid<M>) => Monad2C<URI, M>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 51,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L51",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L51",
              },
              "type": "<M>(M: Monoid<M>) => Monad2C<URI, M>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "tuple.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: [A, E]) => [B, E];",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 105,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L105",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L105",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: [A, E]) => [B, E]",
            },
            {
              "docs": [
                "/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */",
              ],
              "id": "tuple.mapLeft",
              "kind": "function",
              "name": "mapLeft",
              "signature": "mapLeft: <E, G>(f: (e: E) => G) => <A>(fa: [A, E]) => [A, G];",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 70,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L70",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L70",
              },
              "type": "<E, G>(f: (e: E) => G) => <A>(fa: [A, E]) => [A, G]",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "tuple.reduce",
              "kind": "function",
              "name": "reduce",
              "signature": "reduce: <A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: [A, E]) => B;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L110",
              },
              "type": "<A, B>(b: B, f: (b: B, a: A) => B) => <E>(fa: [A, E]) => B",
            },
            {
              "docs": [
                "/**
 * @category Foldable
 * @since 2.0.0
 */",
              ],
              "id": "tuple.reduceRight",
              "kind": "function",
              "name": "reduceRight",
              "signature": "reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: [A, E]) => B;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 115,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L115",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L115",
              },
              "type": "<A, B>(b: B, f: (a: A, b: B) => B) => <E>(fa: [A, E]) => B",
            },
            {
              "docs": [
                "/**
 * @category destructors
 * @since 2.0.0
 */",
              ],
              "id": "tuple.snd",
              "kind": "function",
              "name": "snd",
              "signature": "snd: <A, E>(ea: [A, E]) => E;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L26",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L26",
              },
              "type": "<A, E>(ea: [A, E]) => E",
            },
            {
              "docs": [
                "/**
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "tuple.swap",
              "kind": "function",
              "name": "swap",
              "signature": "swap: <A, E>(sa: [A, E]) => [E, A];",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 31,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L31",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L31",
              },
              "type": "<A, E>(sa: [A, E]) => [E, A]",
            },
          ],
          "interfaces": [],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 133,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L133",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L133",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tuple.Bifunctor",
              "kind": "variable",
              "name": "Bifunctor",
              "signature": "const Bifunctor: Bifunctor2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 148,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L148",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L148",
              },
              "type": "Bifunctor2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tuple.Comonad",
              "kind": "variable",
              "name": "Comonad",
              "signature": "const Comonad: Comonad2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L158",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L158",
              },
              "type": "Comonad2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tuple.Foldable",
              "kind": "variable",
              "name": "Foldable",
              "signature": "const Foldable: Foldable2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 163,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L163",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L163",
              },
              "type": "Foldable2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tuple.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 143,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L143",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L143",
              },
              "type": "Functor2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tuple.Semigroupoid",
              "kind": "variable",
              "name": "Semigroupoid",
              "signature": "const Semigroupoid: Semigroupoid2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L153",
              },
              "type": "Semigroupoid2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "tuple.sequence",
              "kind": "variable",
              "name": "sequence",
              "signature": "const sequence: Sequence2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 123,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L123",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L123",
              },
              "type": "Sequence2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "tuple.Traversable",
              "kind": "variable",
              "name": "Traversable",
              "signature": "const Traversable: Traversable2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 168,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L168",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L168",
              },
              "type": "Traversable2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @since 2.6.3
 */",
              ],
              "id": "tuple.traverse",
              "kind": "variable",
              "name": "traverse",
              "signature": "const traverse: PipeableTraverse2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 119,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L119",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L119",
              },
              "type": "PipeableTraverse2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.tuple",
              "kind": "variable",
              "name": "tuple",
              "signature": "const tuple: Semigroupoid2<'Tuple'> &
    Bifunctor2<'Tuple'> &
    Comonad2<'Tuple'> &
    Foldable2<'Tuple'> &
    Traversable2<'Tuple'>;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 173,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L173",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L173",
              },
              "type": "Semigroupoid2<"Tuple"> & Bifunctor2<"Tuple"> & Comonad2<"Tuple"> & Foldable2<"Tuple"> & Traversable2<"Tuple">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "tuple.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Tuple.d.ts",
                "line": 128,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L128",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L128",
              },
              "type": "string",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "tuple",
        "kind": "namespace",
        "name": "tuple",
        "signature": "module 'lib/Tuple.d.ts' {}",
        "source": {
          "filename": "lib/Tuple.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "unfoldable.Unfoldable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable.unfold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "unfold",
                    "signature": "readonly unfold: <A, B>(b: B, f: (b: B) => Option<[A, B]>) => HKT<F, A>;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 14,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L14",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L14",
                    },
                    "type": "<A, B>(b: B, f: (b: B) => Option<[A, B]>) => HKT<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 13,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L13",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L13",
                    },
                    "type": "{}",
                  },
                ],
              },
              "name": "Unfoldable",
              "signature": "interface Unfoldable<F> {}",
              "source": {
                "filename": "lib/Unfoldable.d.ts",
                "line": 12,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L12",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L12",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "unfoldable.Unfoldable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable1.unfold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "unfold",
                    "signature": "readonly unfold: <A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind<F, A>;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L22",
                    },
                    "type": "<A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind<F, A>",
                  },
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable1.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L21",
                    },
                    "type": "URIS",
                  },
                ],
              },
              "name": "Unfoldable1",
              "signature": "interface Unfoldable1<F extends URIS> {}",
              "source": {
                "filename": "lib/Unfoldable.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L20",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "unfoldable.Unfoldable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable2.unfold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "unfold",
                    "signature": "readonly unfold: <E, A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L30",
                    },
                    "type": "<E, A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable2.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 29,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L29",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L29",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Unfoldable2",
              "signature": "interface Unfoldable2<F extends URIS2> {}",
              "source": {
                "filename": "lib/Unfoldable.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L28",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "unfoldable.Unfoldable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable2C.unfold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "unfold",
                    "signature": "readonly unfold: <A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind2<F, E, A>;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 39,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L39",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L39",
                    },
                    "type": "<A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind2<F, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable2C.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 37,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L37",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L37",
                    },
                    "type": "URIS2",
                  },
                ],
              },
              "name": "Unfoldable2C",
              "signature": "interface Unfoldable2C<F extends URIS2, E> {}",
              "source": {
                "filename": "lib/Unfoldable.d.ts",
                "line": 36,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L36",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L36",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "unfoldable.Unfoldable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable3.unfold",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "unfold",
                    "signature": "readonly unfold: <R, E, A, B>(
    b: B,
    f: (b: B) => Option<[A, B]>
) => Kind3<F, R, E, A>;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L47",
                    },
                    "type": "<R, E, A, B>(b: B, f: (b: B) => Option<[A, B]>) => Kind3<F, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "unfoldable.Unfoldable3.URI",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "URI",
                    "signature": "readonly URI: F;",
                    "source": {
                      "filename": "lib/Unfoldable.d.ts",
                      "line": 46,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L46",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L46",
                    },
                    "type": "URIS3",
                  },
                ],
              },
              "name": "Unfoldable3",
              "signature": "interface Unfoldable3<F extends URIS3> {}",
              "source": {
                "filename": "lib/Unfoldable.d.ts",
                "line": 45,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L45",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L45",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * This class identifies data structures which can be _unfolded_, generalizing \`unfold\` on arrays.
 *
 * @since 2.0.0
 */",
        ],
        "id": "unfoldable",
        "kind": "namespace",
        "name": "unfoldable",
        "signature": "module 'lib/Unfoldable.d.ts' {}",
        "source": {
          "filename": "lib/Unfoldable.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "validationT.getValidationM",
              "kind": "function",
              "name": "getValidationM",
              "signature": "getValidationM: {
    <E, M extends URIS2>(S: Semigroup<E>, M: Monad2<M>): ValidationM2<M, E>;
    <E, M extends URIS>(S: Semigroup<E>, M: Monad1<M>): ValidationM1<M, E>;
    <E, M>(S: Semigroup<E>, M: Monad<M>): ValidationM<M, E>;
};",
              "source": {
                "filename": "lib/ValidationT.d.ts",
                "line": 49,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L49",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L49",
              },
              "type": "{ <E, M extends URIS2>(S: Semigroup<E>, M: Monad2<M>): ValidationM2<M, E>; <E, M extends URIS>(S: Semigroup<E>, M: Monad1<M>): ValidationM1<M, E>; <E, M>(S: Semigroup<E>, M: Monad<M>): ValidationM<M, E>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "validationT.ValidationM",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "validationT.ValidationM.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(
    fa: ValidationT<M, E, A>,
    that: Lazy<ValidationT<M, E, A>>
) => ValidationT<M, E, A>;",
                    "source": {
                      "filename": "lib/ValidationT.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L19",
                    },
                    "type": "<A>(fa: ValidationT<M, E, A>, that: Lazy<ValidationT<M, E, A>>) => ValidationT<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "validationT.ValidationM.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    ma: ValidationT<M, E, A>,
    f: (a: A) => ValidationT<M, E, B>
) => ValidationT<M, E, B>;",
                    "source": {
                      "filename": "lib/ValidationT.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L18",
                    },
                    "type": "<A, B>(ma: ValidationT<M, E, A>, f: (a: A) => ValidationT<M, E, B>) => ValidationT<M, E, B>",
                  },
                ],
              },
              "name": "ValidationM",
              "signature": "interface ValidationM<M, E> extends ApplicativeCompositionHKT2C<M, URI, E> {}",
              "source": {
                "filename": "lib/ValidationT.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "validationT.ValidationM1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "validationT.ValidationM1.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <A>(
    fa: ValidationT1<M, E, A>,
    that: Lazy<ValidationT1<M, E, A>>
) => ValidationT1<M, E, A>;",
                    "source": {
                      "filename": "lib/ValidationT.d.ts",
                      "line": 30,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L30",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L30",
                    },
                    "type": "<A>(fa: Kind<M, Either<E, A>>, that: Lazy<Kind<M, Either<E, A>>>) => Kind<M, Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "validationT.ValidationM1.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <A, B>(
    ma: ValidationT1<M, E, A>,
    f: (a: A) => ValidationT1<M, E, B>
) => ValidationT1<M, E, B>;",
                    "source": {
                      "filename": "lib/ValidationT.d.ts",
                      "line": 29,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L29",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L29",
                    },
                    "type": "<A, B>(ma: Kind<M, Either<E, A>>, f: (a: A) => Kind<M, Either<E, A>>) => Kind<M, Either<E, A>>",
                  },
                ],
              },
              "name": "ValidationM1",
              "signature": "interface ValidationM1<M extends URIS, E>
    extends ApplicativeComposition12C<M, URI, E> {}",
              "source": {
                "filename": "lib/ValidationT.d.ts",
                "line": 28,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L28",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L28",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "validationT.ValidationM2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "validationT.ValidationM2.alt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "alt",
                    "signature": "readonly alt: <R, A>(
    fa: ValidationT2<M, R, E, A>,
    that: Lazy<ValidationT2<M, R, E, A>>
) => ValidationT2<M, R, E, A>;",
                    "source": {
                      "filename": "lib/ValidationT.d.ts",
                      "line": 44,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L44",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L44",
                    },
                    "type": "<R, A>(fa: Kind2<M, R, Either<E, A>>, that: Lazy<Kind2<M, R, Either<E, A>>>) => Kind2<M, R, Either<E, A>>",
                  },
                  {
                    "docs": [],
                    "id": "validationT.ValidationM2.chain",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "chain",
                    "signature": "readonly chain: <R, A, B>(
    ma: ValidationT2<M, R, E, A>,
    f: (a: A) => ValidationT2<M, R, E, B>
) => ValidationT2<M, R, E, B>;",
                    "source": {
                      "filename": "lib/ValidationT.d.ts",
                      "line": 40,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L40",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L40",
                    },
                    "type": "<R, A, B>(ma: Kind2<M, R, Either<E, A>>, f: (a: A) => Kind2<M, R, Either<E, A>>) => Kind2<M, R, Either<E, A>>",
                  },
                ],
              },
              "name": "ValidationM2",
              "signature": "interface ValidationM2<M extends URIS2, E>
    extends ApplicativeComposition22C<M, URI, E> {}",
              "source": {
                "filename": "lib/ValidationT.d.ts",
                "line": 39,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L39",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L39",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "validationT.ValidationT",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "ValidationT",
              "signature": "interface ValidationT<M, E, A> extends HKT<M, Either<E, A>> {}",
              "source": {
                "filename": "lib/ValidationT.d.ts",
                "line": 13,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L13",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L13",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "validationT.ValidationT1",
              "kind": "typeAlias",
              "name": "ValidationT1",
              "signature": "type ValidationT1<M extends URIS, E, A> = Kind<M, Either<E, A>>;",
              "source": {
                "filename": "lib/ValidationT.d.ts",
                "line": 24,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L24",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L24",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "validationT.ValidationT2",
              "kind": "typeAlias",
              "name": "ValidationT2",
              "signature": "type ValidationT2<M extends URIS2, R, E, A> = Kind2<M, R, Either<E, A>>;",
              "source": {
                "filename": "lib/ValidationT.d.ts",
                "line": 35,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L35",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L35",
              },
            },
          ],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "validationT",
        "kind": "namespace",
        "name": "validationT",
        "signature": "module 'lib/ValidationT.d.ts' {}",
        "source": {
          "filename": "lib/ValidationT.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWilt",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B, C>(
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => (wa: HKT<W, A>) => Kind3<F, R, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 409,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L409",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L409",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B, C>(
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => (wa: HKT<W, A>) => Kind3<F, R, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 412,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L412",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L412",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B, C>(
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => (wa: HKT<W, A>) => Kind2<F, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 415,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L415",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L415",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B, C>(
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => (wa: HKT<W, A>) => Kind2<F, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 418,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L418",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L418",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    f: (a: A) => Kind<F, Either<B, C>>
) => (wa: HKT<W, A>) => Kind<F, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 421,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L421",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L421",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    f: (a: A) => HKT<F, Either<B, C>>
) => (wa: HKT<W, A>) => HKT<F, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 424,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L424",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L424",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWilt",
              "signature": "interface PipeableWilt<W> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 408,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L408",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L408",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWilt1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B, C>(
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => (wa: Kind<W, A>) => Kind3<F, R, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 432,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L432",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L432",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B, C>(
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => (wa: Kind<W, A>) => Kind3<F, R, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 435,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L435",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L435",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B, C>(
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => (wa: Kind<W, A>) => Kind2<F, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 438,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L438",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L438",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B, C>(
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => (wa: Kind<W, A>) => Kind2<F, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 441,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L441",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L441",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    f: (a: A) => Kind<F, Either<B, C>>
) => (wa: Kind<W, A>) => Kind<F, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 444,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L444",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L444",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    f: (a: A) => HKT<F, Either<B, C>>
) => (wa: Kind<W, A>) => HKT<F, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 447,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L447",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L447",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWilt1",
              "signature": "interface PipeableWilt1<W extends URIS> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 431,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L431",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L431",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWilt2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B, C>(
    f: (a: A) => Kind3<F, R, FE, Either<B, C>>
) => <WE>(
    wa: Kind2<W, WE, A>
) => Kind3<F, R, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 455,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L455",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L455",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B, C>(
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => <WE>(
    wa: Kind2<W, WE, A>
) => Kind2<F, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 458,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L458",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L458",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B, C>(
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => <WE>(
    wa: Kind2<W, WE, A>
) => Kind2<F, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 461,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L461",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L461",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    f: (a: A) => Kind<F, Either<B, C>>
) => <WE>(
    wa: Kind2<W, WE, A>
) => Kind<F, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 464,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L464",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L464",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    f: (a: A) => HKT<F, Either<B, C>>
) => <WE>(
    wa: Kind2<W, WE, A>
) => HKT<F, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 467,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L467",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L467",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWilt2",
              "signature": "interface PipeableWilt2<W extends URIS2> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 454,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L454",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L454",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWilt2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B, C>(
    f: (a: A) => Kind3<F, R, FE, Either<B, C>>
) => (
    wa: Kind2<W, WE, A>
) => Kind3<F, R, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 475,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L475",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L475",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B, C>(
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => (
    wa: Kind2<W, WE, A>
) => Kind2<F, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 478,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L478",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L478",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2C.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B, C>(
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => (
    wa: Kind2<W, WE, A>
) => Kind2<F, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 481,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L481",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L481",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2C.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    f: (a: A) => Kind<F, Either<B, C>>
) => (
    wa: Kind2<W, WE, A>
) => Kind<F, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 484,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L484",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L484",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt2C.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    f: (a: A) => HKT<F, Either<B, C>>
) => (
    wa: Kind2<W, WE, A>
) => HKT<F, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 487,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L487",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L487",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWilt2C",
              "signature": "interface PipeableWilt2C<W extends URIS2, WE> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 474,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L474",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L474",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWilt3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, FR, FE, B, C>(
    f: (a: A) => Kind3<F, FR, FE, Either<B, C>>
) => <WR, WE>(
    wa: Kind3<W, WR, WE, A>
) => Kind3<F, FR, FE, Separated<Kind3<W, WR, WE, B>, Kind3<W, WR, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 495,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L495",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L495",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B, C>(
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => <WR, WE>(
    wa: Kind3<W, WR, WE, A>
) => Kind2<F, FE, Separated<Kind3<W, WR, WE, B>, Kind3<W, WR, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 498,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L498",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L498",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt3.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B, C>(
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => <WR, WE>(
    wa: Kind3<W, WR, WE, A>
) => Kind2<F, FE, Separated<Kind3<W, WR, WE, B>, Kind3<W, WR, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 501,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L501",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L501",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt3.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    f: (a: A) => Kind<F, Either<B, C>>
) => <WR, WE>(
    wa: Kind3<W, WR, WE, A>
) => Kind<F, Separated<Kind3<W, WR, WE, B>, Kind3<W, WR, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 504,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L504",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L504",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWilt3.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    f: (a: A) => HKT<F, Either<B, C>>
) => <WR, WE>(
    wa: Kind3<W, WR, WE, A>
) => HKT<F, Separated<Kind3<W, WR, WE, B>, Kind3<W, WR, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 507,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L507",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L507",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWilt3",
              "signature": "interface PipeableWilt3<W extends URIS3> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 494,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L494",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L494",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWither",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => (ta: HKT<W, A>) => Kind3<F, R, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 313,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L313",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L313",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => (ta: HKT<W, A>) => Kind3<F, R, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 316,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L316",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L316",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    f: (a: A) => Kind2<F, E, Option<B>>
) => (ta: HKT<W, A>) => Kind2<F, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 319,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L319",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L319",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    f: (a: A) => Kind2<F, E, Option<B>>
) => (ta: HKT<W, A>) => Kind2<F, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 322,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L322",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L322",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (a: A) => Kind<F, Option<B>>
) => (ta: HKT<W, A>) => Kind<F, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 325,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L325",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L325",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (a: A) => HKT<F, Option<B>>
) => (ta: HKT<W, A>) => HKT<F, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 326,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L326",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L326",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWither",
              "signature": "interface PipeableWither<W> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 312,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L312",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L312",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWither1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => (ta: Kind<W, A>) => Kind3<F, R, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 332,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L332",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L332",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => (ta: Kind<W, A>) => Kind3<F, R, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 335,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L335",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L335",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    f: (a: A) => Kind2<F, E, Option<B>>
) => (ta: Kind<W, A>) => Kind2<F, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 338,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L338",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L338",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    f: (a: A) => Kind2<F, E, Option<B>>
) => (ta: Kind<W, A>) => Kind2<F, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 341,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L341",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L341",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (a: A) => Kind<F, Option<B>>
) => (ta: Kind<W, A>) => Kind<F, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 344,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L344",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L344",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (a: A) => HKT<F, Option<B>>
) => (ta: Kind<W, A>) => HKT<F, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 347,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L347",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L347",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWither1",
              "signature": "interface PipeableWither1<W extends URIS> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 331,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L331",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L331",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWither2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B>(
    f: (a: A) => Kind3<F, R, FE, Option<B>>
) => <WE>(ta: Kind2<W, WE, A>) => Kind3<F, R, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 353,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L353",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L353",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    f: (a: A) => Kind2<F, FE, Option<B>>
) => <WE>(ta: Kind2<W, WE, A>) => Kind2<F, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 356,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L356",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L356",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    f: (a: A) => Kind2<F, FE, Option<B>>
) => <WE>(ta: Kind2<W, WE, A>) => Kind2<F, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 359,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L359",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L359",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (a: A) => Kind<F, Option<B>>
) => <WE>(ta: Kind2<W, WE, A>) => Kind<F, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 362,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L362",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L362",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (a: A) => HKT<F, Option<B>>
) => <WE>(ta: Kind2<W, WE, A>) => HKT<F, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 365,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L365",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L365",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWither2",
              "signature": "interface PipeableWither2<W extends URIS2> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 352,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L352",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L352",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWither2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B>(
    f: (a: A) => Kind3<F, R, FE, Option<B>>
) => (ta: Kind2<W, WE, A>) => Kind3<F, R, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 371,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L371",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L371",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    f: (a: A) => Kind2<F, FE, Option<B>>
) => (ta: Kind2<W, WE, A>) => Kind2<F, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 374,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L374",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L374",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2C.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    f: (a: A) => Kind2<F, FE, Option<B>>
) => (ta: Kind2<W, WE, A>) => Kind2<F, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 377,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L377",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L377",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2C.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (a: A) => Kind<F, Option<B>>
) => (ta: Kind2<W, WE, A>) => Kind<F, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 380,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L380",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L380",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither2C.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (a: A) => HKT<F, Option<B>>
) => (ta: Kind2<W, WE, A>) => HKT<F, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 383,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L383",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L383",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWither2C",
              "signature": "interface PipeableWither2C<W extends URIS2, WE> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 370,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L370",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L370",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.6.5
 */",
              ],
              "id": "witherable.PipeableWither3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, FR, FE, B>(
    f: (a: A) => Kind3<F, FR, FE, Option<B>>
) => <WR, WE>(ta: Kind3<W, WR, WE, A>) => Kind3<F, FR, FE, Kind3<W, WR, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 389,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L389",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L389",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    f: (a: A) => Kind2<F, FE, Option<B>>
) => <WR, WE>(ta: Kind3<W, WR, WE, A>) => Kind2<F, FE, Kind3<W, WR, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 392,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L392",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L392",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither3.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    f: (a: A) => Kind2<F, FE, Option<B>>
) => <WR, WE>(ta: Kind3<W, WR, WE, A>) => Kind2<F, FE, Kind3<W, WR, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 395,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L395",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L395",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither3.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    f: (a: A) => Kind<F, Option<B>>
) => <WR, WE>(ta: Kind3<W, WR, WE, A>) => Kind<F, Kind3<W, WR, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 398,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L398",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L398",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.PipeableWither3.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    f: (a: A) => HKT<F, Option<B>>
) => <WR, WE>(ta: Kind3<W, WR, WE, A>) => HKT<F, Kind3<W, WR, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 401,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L401",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L401",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "PipeableWither3",
              "signature": "interface PipeableWither3<W extends URIS3> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 388,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L388",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L388",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wilt",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wilt.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B, C>(
    wa: HKT<W, A>,
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => Kind3<F, R, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 180,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L180",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L180",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B, C>(
    wa: HKT<W, A>,
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => Kind3<F, R, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 184,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L184",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L184",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B, C>(
    wa: HKT<W, A>,
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => Kind2<F, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 188,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L188",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L188",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B, C>(
    wa: HKT<W, A>,
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => Kind2<F, E, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 192,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L192",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L192",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    wa: HKT<W, A>,
    f: (a: A) => Kind<F, Either<B, C>>
) => Kind<F, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 196,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L196",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L196",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    wa: HKT<W, A>,
    f: (a: A) => HKT<F, Either<B, C>>
) => HKT<F, Separated<HKT<W, B>, HKT<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 200,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L200",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L200",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wilt",
              "signature": "interface Wilt<W> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 179,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L179",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L179",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wilt1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wilt1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B, C>(
    wa: Kind<W, A>,
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => Kind3<F, R, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 209,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L209",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L209",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B, C>(
    wa: Kind<W, A>,
    f: (a: A) => Kind3<F, R, E, Either<B, C>>
) => Kind3<F, R, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 213,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L213",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L213",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B, C>(
    wa: Kind<W, A>,
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => Kind2<F, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 217,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L217",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L217",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B, C>(
    wa: Kind<W, A>,
    f: (a: A) => Kind2<F, E, Either<B, C>>
) => Kind2<F, E, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 221,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L221",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L221",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    wa: Kind<W, A>,
    f: (a: A) => Kind<F, Either<B, C>>
) => Kind<F, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 225,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L225",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L225",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    wa: Kind<W, A>,
    f: (a: A) => HKT<F, Either<B, C>>
) => HKT<F, Separated<Kind<W, B>, Kind<W, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 229,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L229",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L229",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wilt1",
              "signature": "interface Wilt1<W extends URIS> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 208,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L208",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L208",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wilt2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wilt2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <WE, A, R, FE, B, C>(
    wa: Kind2<W, WE, A>,
    f: (a: A) => Kind3<F, R, FE, Either<B, C>>
) => Kind3<F, R, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 238,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L238",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L238",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <WE, A, FE, B, C>(
    wa: Kind2<W, WE, A>,
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => Kind2<F, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 242,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L242",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L242",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <WE, A, B, C>(
    wa: Kind2<W, WE, A>,
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => Kind2<F, FE, Separated<Kind2<W, WE, B>, Kind2<W, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 246,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L246",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L246",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <E, A, B, C>(
    wa: Kind2<W, E, A>,
    f: (a: A) => Kind<F, Either<B, C>>
) => Kind<F, Separated<Kind2<W, E, B>, Kind2<W, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 250,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L250",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L250",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <E, A, B, C>(
    wa: Kind2<W, E, A>,
    f: (a: A) => HKT<F, Either<B, C>>
) => HKT<F, Separated<Kind2<W, E, B>, Kind2<W, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 254,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L254",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L254",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wilt2",
              "signature": "interface Wilt2<W extends URIS2> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 237,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L237",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L237",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wilt2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wilt2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B, C>(
    wa: Kind2<W, E, A>,
    f: (a: A) => Kind3<F, R, FE, Either<B, C>>
) => Kind3<F, R, FE, Separated<Kind2<W, E, B>, Kind2<W, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 263,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L263",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L263",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B, C>(
    wa: Kind2<W, E, A>,
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => Kind2<F, FE, Separated<Kind2<W, E, B>, Kind2<W, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 267,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L267",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L267",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2C.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B, C>(
    wa: Kind2<W, E, A>,
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => Kind2<F, FE, Separated<Kind2<W, E, B>, Kind2<W, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 271,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L271",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L271",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2C.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B, C>(
    wa: Kind2<W, E, A>,
    f: (a: A) => Kind<F, Either<B, C>>
) => Kind<F, Separated<Kind2<W, E, B>, Kind2<W, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 275,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L275",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L275",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt2C.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B, C>(
    wa: Kind2<W, E, A>,
    f: (a: A) => HKT<F, Either<B, C>>
) => HKT<F, Separated<Kind2<W, E, B>, Kind2<W, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 279,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L279",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L279",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wilt2C",
              "signature": "interface Wilt2C<W extends URIS2, E> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 262,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L262",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L262",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wilt3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wilt3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <WR, WE, A, FR, FE, B, C>(
    wa: Kind3<W, WR, WE, A>,
    f: (a: A) => Kind3<F, FR, FE, Either<B, C>>
) => Kind3<F, FR, FE, Separated<Kind3<W, WR, WE, B>, Kind3<W, WR, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 288,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L288",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L288",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <R, WE, A, FE, B, C>(
    wa: Kind3<W, R, WE, A>,
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => Kind2<F, FE, Separated<Kind3<W, R, WE, B>, Kind3<W, R, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 292,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L292",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L292",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt3.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <R, WE, A, B, C>(
    wa: Kind3<W, R, WE, A>,
    f: (a: A) => Kind2<F, FE, Either<B, C>>
) => Kind2<F, FE, Separated<Kind3<W, R, WE, B>, Kind3<W, R, WE, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 296,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L296",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L296",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt3.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <R, E, A, B, C>(
    wa: Kind3<W, R, E, A>,
    f: (a: A) => Kind<F, Either<B, C>>
) => Kind<F, Separated<Kind3<W, R, E, B>, Kind3<W, R, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 300,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L300",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L300",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wilt3.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <R, E, A, B, C>(
    wa: Kind3<W, R, E, A>,
    f: (a: A) => HKT<F, Either<B, C>>
) => HKT<F, Separated<Kind3<W, R, E, B>, Kind3<W, R, E, C>>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 304,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L304",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L304",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wilt3",
              "signature": "interface Wilt3<W extends URIS3> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 287,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L287",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L287",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wither",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wither.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    ta: HKT<W, A>,
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => Kind3<F, R, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 65,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L65",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L65",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    ta: HKT<W, A>,
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => Kind3<F, R, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 69,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L69",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L69",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    ta: HKT<W, A>,
    f: (a: A) => Kind2<F, E, Option<B>>
) => Kind2<F, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 73,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L73",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L73",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    ta: HKT<W, A>,
    f: (a: A) => Kind2<F, E, Option<B>>
) => Kind2<F, E, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L77",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: HKT<W, A>,
    f: (a: A) => Kind<F, Option<B>>
) => Kind<F, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 81,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L81",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L81",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: HKT<W, A>,
    f: (a: A) => HKT<F, Option<B>>
) => HKT<F, HKT<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L82",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wither",
              "signature": "interface Wither<W> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 64,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L64",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L64",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wither1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wither1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, E, B>(
    ta: Kind<W, A>,
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => Kind3<F, R, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 88,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L88",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L88",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither1.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3, E>(F: Applicative3C<F, E>): <A, R, B>(
    ta: Kind<W, A>,
    f: (a: A) => Kind3<F, R, E, Option<B>>
) => Kind3<F, R, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 92,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L92",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L92",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither1.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, E, B>(
    ta: Kind<W, A>,
    f: (a: A) => Kind2<F, E, Option<B>>
) => Kind2<F, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 96,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L96",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L96",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither1.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, E>(F: Applicative2C<F, E>): <A, B>(
    ta: Kind<W, A>,
    f: (a: A) => Kind2<F, E, Option<B>>
) => Kind2<F, E, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L100",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither1.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: Kind<W, A>,
    f: (a: A) => Kind<F, Option<B>>
) => Kind<F, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 104,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L104",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L104",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither1.5-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: Kind<W, A>,
    f: (a: A) => HKT<F, Option<B>>
) => HKT<F, Kind<W, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 105,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L105",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L105",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wither1",
              "signature": "interface Wither1<W extends URIS> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 87,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L87",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L87",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wither2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wither2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <WE, A, R, FE, B>(
    ta: Kind2<W, WE, A>,
    f: (a: A) => Kind3<F, R, FE, Option<B>>
) => Kind3<F, R, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 111,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L111",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L111",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <WE, A, FE, B>(
    ta: Kind2<W, WE, A>,
    f: (a: A) => Kind2<F, FE, Option<B>>
) => Kind2<F, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 115,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L115",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L115",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <WE, A, B>(
    ta: Kind2<W, WE, A>,
    f: (a: A) => Kind2<F, FE, Option<B>>
) => Kind2<F, FE, Kind2<W, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 119,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L119",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L119",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <E, A, B>(
    ta: Kind2<W, E, A>,
    f: (a: A) => Kind<F, Option<B>>
) => Kind<F, Kind2<W, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 123,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L123",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L123",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <E, A, B>(
    ta: Kind2<W, E, A>,
    f: (a: A) => HKT<F, Option<B>>
) => HKT<F, Kind2<W, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 127,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L127",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L127",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wither2",
              "signature": "interface Wither2<W extends URIS2> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 110,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L110",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L110",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wither2C",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wither2C.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <A, R, FE, B>(
    ta: Kind2<W, E, A>,
    f: (a: A) => Kind3<F, R, FE, Option<B>>
) => Kind3<F, R, FE, Kind2<W, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 133,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L133",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L133",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2C.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <A, FE, B>(
    ta: Kind2<W, E, A>,
    f: (a: A) => Kind2<F, FE, Option<B>>
) => Kind2<F, FE, Kind2<W, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 137,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L137",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L137",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2C.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <A, B>(
    ta: Kind2<W, E, A>,
    f: (a: A) => Kind2<F, FE, Option<B>>
) => Kind2<F, FE, Kind2<W, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 141,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L141",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L141",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2C.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <A, B>(
    ta: Kind2<W, E, A>,
    f: (a: A) => Kind<F, Option<B>>
) => Kind<F, Kind2<W, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 145,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L145",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L145",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither2C.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <A, B>(
    ta: Kind2<W, E, A>,
    f: (a: A) => HKT<F, Option<B>>
) => HKT<F, Kind2<W, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 149,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L149",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L149",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wither2C",
              "signature": "interface Wither2C<W extends URIS2, E> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 132,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L132",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L132",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Wither3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "witherable.Wither3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS3>(F: Applicative3<F>): <WR, WE, A, FR, FE, B>(
    ta: Kind3<W, WR, WE, A>,
    f: (a: A) => Kind3<F, FR, FE, Option<B>>
) => Kind3<F, FR, FE, Kind3<W, WR, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 155,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L155",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L155",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither3.1-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2>(F: Applicative2<F>): <WR, WE, A, FE, B>(
    ta: Kind3<W, WR, WE, A>,
    f: (a: A) => Kind2<F, FE, Option<B>>
) => Kind2<F, FE, Kind3<W, WR, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 159,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L159",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L159",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither3.2-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS2, FE>(F: Applicative2C<F, FE>): <R, WE, A, B>(
    ta: Kind3<W, R, WE, A>,
    f: (a: A) => Kind2<F, FE, Option<B>>
) => Kind2<F, FE, Kind3<W, R, WE, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 163,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L163",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L163",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither3.3-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F extends URIS>(F: Applicative1<F>): <R, E, A, B>(
    ta: Kind3<W, R, E, A>,
    f: (a: A) => Kind<F, Option<B>>
) => Kind<F, Kind3<W, R, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 167,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L167",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L167",
                    },
                  },
                  {
                    "docs": [],
                    "id": "witherable.Wither3.4-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "<F>(F: Applicative<F>): <R, E, A, B>(
    ta: Kind3<W, R, E, A>,
    f: (a: A) => HKT<F, Option<B>>
) => HKT<F, Kind3<W, R, E, B>>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 171,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L171",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L171",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Wither3",
              "signature": "interface Wither3<W extends URIS3> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 154,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L154",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L154",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Witherable",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [
                      "/**
   * Partition a structure with effects
   */",
                    ],
                    "id": "witherable.Witherable.wilt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wilt",
                    "signature": "readonly wilt: Wilt<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 23,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L23",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L23",
                    },
                    "type": "Wilt<T>",
                  },
                  {
                    "docs": [
                      "/**
   * Filter a structure  with effects
   */",
                    ],
                    "id": "witherable.Witherable.wither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wither",
                    "signature": "readonly wither: Wither<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 27,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L27",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L27",
                    },
                    "type": "Wither<T>",
                  },
                ],
              },
              "name": "Witherable",
              "signature": "interface Witherable<T> extends Traversable<T>, Filterable<T> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 19,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L19",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L19",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Witherable1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "witherable.Witherable1.wilt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wilt",
                    "signature": "readonly wilt: Wilt1<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 34,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L34",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L34",
                    },
                    "type": "Wilt1<T>",
                  },
                  {
                    "docs": [],
                    "id": "witherable.Witherable1.wither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wither",
                    "signature": "readonly wither: Wither1<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 35,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L35",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L35",
                    },
                    "type": "Wither1<T>",
                  },
                ],
              },
              "name": "Witherable1",
              "signature": "interface Witherable1<T extends URIS> extends Traversable1<T>, Filterable1<T> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 33,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L33",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L33",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Witherable2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "witherable.Witherable2.wilt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wilt",
                    "signature": "readonly wilt: Wilt2<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 42,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L42",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L42",
                    },
                    "type": "Wilt2<T>",
                  },
                  {
                    "docs": [],
                    "id": "witherable.Witherable2.wither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wither",
                    "signature": "readonly wither: Wither2<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 43,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L43",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L43",
                    },
                    "type": "Wither2<T>",
                  },
                ],
              },
              "name": "Witherable2",
              "signature": "interface Witherable2<T extends URIS2> extends Traversable2<T>, Filterable2<T> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L41",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Witherable2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "witherable.Witherable2C.wilt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wilt",
                    "signature": "readonly wilt: Wilt2C<T, TL>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 50,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L50",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L50",
                    },
                    "type": "Wilt2C<T, TL>",
                  },
                  {
                    "docs": [],
                    "id": "witherable.Witherable2C.wither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wither",
                    "signature": "readonly wither: Wither2C<T, TL>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 51,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L51",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L51",
                    },
                    "type": "Wither2C<T, TL>",
                  },
                ],
              },
              "name": "Witherable2C",
              "signature": "interface Witherable2C<T extends URIS2, TL>
    extends Traversable2C<T, TL>,
        Filterable2C<T, TL> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 49,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L49",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L49",
              },
            },
            {
              "docs": [
                "/**
 * @category type classes
 * @since 2.0.0
 */",
              ],
              "id": "witherable.Witherable3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "witherable.Witherable3.wilt",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wilt",
                    "signature": "readonly wilt: Wilt3<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 58,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L58",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L58",
                    },
                    "type": "Wilt3<T>",
                  },
                  {
                    "docs": [],
                    "id": "witherable.Witherable3.wither",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "wither",
                    "signature": "readonly wither: Wither3<T>;",
                    "source": {
                      "filename": "lib/Witherable.d.ts",
                      "line": 59,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L59",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L59",
                    },
                    "type": "Wither3<T>",
                  },
                ],
              },
              "name": "Witherable3",
              "signature": "interface Witherable3<T extends URIS3> extends Traversable3<T>, Filterable3<T> {}",
              "source": {
                "filename": "lib/Witherable.d.ts",
                "line": 57,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L57",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L57",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * \`Witherable\` represents data structures which can be _partitioned_ with effects in some \`Applicative\` functor.
 *
 * Adapted from https://github.com/LiamGoodacre/purescript-filterable/blob/master/src/Data/Witherable.purs
 *
 * @since 2.0.0
 */",
        ],
        "id": "witherable",
        "kind": "namespace",
        "name": "witherable",
        "signature": "module 'lib/Witherable.d.ts' {}",
        "source": {
          "filename": "lib/Witherable.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * Modify the final accumulator value by applying a function
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "writer.censor",
              "kind": "function",
              "name": "censor",
              "signature": "censor: <W>(f: (w: W) => W) => <A>(fa: Writer<W, A>) => Writer<W, A>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 48,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L48",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L48",
              },
              "type": "<W>(f: (w: W) => W) => <A>(fa: Writer<W, A>) => Writer<W, A>",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "writer.evaluate",
              "kind": "function",
              "name": "evaluate",
              "signature": "evaluate: <W, A>(fa: Writer<W, A>) => A;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 104,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L104",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L104",
              },
              "type": "<W, A>(fa: Writer<W, A>) => A",
            },
            {
              "docs": [
                "/**
 * Use \`evaluate\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "writer.evalWriter",
              "kind": "function",
              "name": "evalWriter",
              "signature": "evalWriter: <W, A>(fa: Writer<W, A>) => A;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L93",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L93",
              },
              "type": "<W, A>(fa: Writer<W, A>) => A",
            },
            {
              "docs": [
                "/**
 * @since 2.8.0
 */",
              ],
              "id": "writer.execute",
              "kind": "function",
              "name": "execute",
              "signature": "execute: <W, A>(fa: Writer<W, A>) => W;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 108,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L108",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L108",
              },
              "type": "<W, A>(fa: Writer<W, A>) => W",
            },
            {
              "docs": [
                "/**
 * Use \`execute\` instead
 *
 * @since 2.0.0
 * @deprecated
 */",
              ],
              "id": "writer.execWriter",
              "kind": "function",
              "name": "execWriter",
              "signature": "execWriter: <W, A>(fa: Writer<W, A>) => W;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 100,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L100",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L100",
              },
              "type": "<W, A>(fa: Writer<W, A>) => W",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "writer.getMonad",
              "kind": "function",
              "name": "getMonad",
              "signature": "getMonad: <W>(M: Monoid<W>) => Monad2C<URI, W>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 76,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L76",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L76",
              },
              "type": "<W>(M: Monoid<W>) => Monad2C<URI, W>",
            },
            {
              "docs": [
                "/**
 * Modifies the result to include the changes to the accumulator
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "writer.listen",
              "kind": "function",
              "name": "listen",
              "signature": "listen: <W, A>(fa: Writer<W, A>) => Writer<W, [A, W]>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 27,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L27",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L27",
              },
              "type": "<W, A>(fa: Writer<W, A>) => Writer<W, [A, W]>",
            },
            {
              "docs": [
                "/**
 * Projects a value from modifications made to the accumulator during an action
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "writer.listens",
              "kind": "function",
              "name": "listens",
              "signature": "listens: <W, B>(f: (w: W) => B) => <A>(fa: Writer<W, A>) => Writer<W, [A, B]>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 41,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L41",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L41",
              },
              "type": "<W, B>(f: (w: W) => B) => <A>(fa: Writer<W, A>) => Writer<W, [A, B]>",
            },
            {
              "docs": [
                "/**
 * \`map\` can be used to turn functions \`(a: A) => B\` into functions \`(fa: F<A>) => F<B>\` whose argument and return types
 * use the type constructor \`F\` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */",
              ],
              "id": "writer.map",
              "kind": "function",
              "name": "map",
              "signature": "map: <A, B>(f: (a: A) => B) => <E>(fa: Writer<E, A>) => Writer<E, B>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 56,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L56",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L56",
              },
              "type": "<A, B>(f: (a: A) => B) => <E>(fa: Writer<E, A>) => Writer<E, B>",
            },
            {
              "docs": [
                "/**
 * Applies the returned function to the accumulator
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "writer.pass",
              "kind": "function",
              "name": "pass",
              "signature": "pass: <W, A>(fa: Writer<W, [A, (w: W) => W]>) => Writer<W, A>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L34",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L34",
              },
              "type": "<W, A>(fa: Writer<W, [A, (w: W) => W]>) => Writer<W, A>",
            },
            {
              "docs": [
                "/**
 * Appends a value to the accumulator
 *
 * @category combinators
 * @since 2.0.0
 */",
              ],
              "id": "writer.tell",
              "kind": "function",
              "name": "tell",
              "signature": "tell: <W>(w: W) => Writer<W, void>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 20,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L20",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L20",
              },
              "type": "<W>(w: W) => Writer<W, void>",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @category model
 * @since 2.0.0
 */",
              ],
              "id": "writer.Writer",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "writer.Writer.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): [A, W];",
                    "source": {
                      "filename": "lib/Writer.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L12",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "Writer",
              "signature": "interface Writer<W, A> {}",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L11",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "writer.URI",
              "kind": "typeAlias",
              "name": "URI",
              "signature": "type URI = typeof URI;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 66,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L66",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L66",
              },
            },
          ],
          "variables": [
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.7.0
 */",
              ],
              "id": "writer.Functor",
              "kind": "variable",
              "name": "Functor",
              "signature": "const Functor: Functor2<'Writer'>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 81,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L81",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L81",
              },
              "type": "Functor2<"Writer">",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "writer.URI",
              "kind": "variable",
              "name": "URI",
              "signature": "const URI: string;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 61,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L61",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L61",
              },
              "type": "string",
              "variableKind": "const",
            },
            {
              "docs": [
                "/**
 * @category instances
 * @since 2.0.0
 */",
              ],
              "id": "writer.writer",
              "kind": "variable",
              "name": "writer",
              "signature": "const writer: Functor2<'Writer'>;",
              "source": {
                "filename": "lib/Writer.d.ts",
                "line": 86,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L86",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L86",
              },
              "type": "Functor2<"Writer">",
              "variableKind": "const",
            },
          ],
        },
        "docs": [
          "/**
 * @since 2.0.0
 */",
        ],
        "id": "writer",
        "kind": "namespace",
        "name": "writer",
        "signature": "module 'lib/Writer.d.ts' {}",
        "source": {
          "filename": "lib/Writer.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts#L1",
        },
      },
      {
        "declarations": {
          "classes": [],
          "enums": [],
          "functions": [
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "writerT.getWriterM",
              "kind": "function",
              "name": "getWriterM",
              "signature": "getWriterM: {
    <M extends URIS3>(M: Monad3<M>): WriterM3<M>;
    <M extends URIS2>(M: Monad2<M>): WriterM2<M>;
    <M extends URIS2, E>(M: Monad2C<M, E>): WriterM2C<M, E>;
    <M extends URIS>(M: Monad1<M>): WriterM1<M>;
    <M>(M: Monad<M>): WriterM<M>;
};",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L153",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L153",
              },
              "type": "{ <M extends URIS3>(M: Monad3<M>): WriterM3<M>; <M extends URIS2>(M: Monad2<M>): WriterM2<M>; <M extends URIS2, E>(M: Monad2C<M, E>): WriterM2C<M, E>; <M extends URIS>(M: Monad1<M>): WriterM1<M>; <M>(M: Monad<M>): WriterM<M>; }",
            },
          ],
          "interfaces": [
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterM",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "writerT.WriterM.censor",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "censor",
                    "signature": "readonly censor: <W, A>(
    fa: WriterT<M, W, A>,
    f: (w: W) => W
) => WriterT<M, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 25,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L25",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L25",
                    },
                    "type": "<W, A>(fa: WriterT<M, W, A>, f: (w: W) => W) => WriterT<M, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.evalWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalWriter",
                    "signature": "readonly evalWriter: <W, A>(fa: WriterT<M, W, A>) => HKT<M, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 19,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L19",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L19",
                    },
                    "type": "<W, A>(fa: WriterT<M, W, A>) => HKT<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.execWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execWriter",
                    "signature": "readonly execWriter: <W, A>(fa: WriterT<M, W, A>) => HKT<M, W>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 20,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L20",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L20",
                    },
                    "type": "<W, A>(fa: WriterT<M, W, A>) => HKT<M, W>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <W>(M: Monoid<W>) => {
    readonly _E: W;
    readonly map: <A, B>(
        ma: WriterT<M, W, A>,
        f: (a: A) => B
    ) => WriterT<M, W, B>;
    readonly of: <A>(a: A) => WriterT<M, W, A>;
    readonly ap: <A, B>(
        mab: WriterT<M, W, (a: A) => B>,
        ma: WriterT<M, W, A>
    ) => WriterT<M, W, B>;
    readonly chain: <A, B>(
        ma: WriterT<M, W, A>,
        f: (a: A) => WriterT<M, W, B>
    ) => WriterT<M, W, B>;
};",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 26,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L26",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L26",
                    },
                    "type": "<W>(M: Monoid<W>) => { readonly _E: W; readonly map: <A, B>(ma: WriterT<M, W, A>, f: (a: A) => B) => WriterT<M, W, B>; readonly of: <A>(a: A) => WriterT<M, W, A>; readonly ap: <A, B>(mab: WriterT<M, W, (a: A) => B>, ma: WriterT<M, W, A>) => WriterT<M, W, B>; readonly chain: <A, B>(ma: WriterT<M, W, A>, f: (a: A) => WriterT<M, W, B>) => WriterT<M, W, B>; }",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.listen",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listen",
                    "signature": "readonly listen: <W, A>(fa: WriterT<M, W, A>) => WriterT<M, W, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 22,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L22",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L22",
                    },
                    "type": "<W, A>(fa: WriterT<M, W, A>) => WriterT<M, W, [A, W]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.listens",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listens",
                    "signature": "readonly listens: <W, A, B>(
    fa: WriterT<M, W, A>,
    f: (w: W) => B
) => WriterT<M, W, [A, B]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 24,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L24",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L24",
                    },
                    "type": "<W, A, B>(fa: WriterT<M, W, A>, f: (w: W) => B) => WriterT<M, W, [A, B]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <W, A, B>(
    fa: WriterT<M, W, A>,
    f: (a: A) => B
) => WriterT<M, W, B>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 18,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L18",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L18",
                    },
                    "type": "<W, A, B>(fa: WriterT<M, W, A>, f: (a: A) => B) => WriterT<M, W, B>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.pass",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "pass",
                    "signature": "readonly pass: <W, A>(fa: WriterT<M, W, [A, (w: W) => W]>) => WriterT<M, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 23,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L23",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L23",
                    },
                    "type": "<W, A>(fa: WriterT<M, W, [A, (w: W) => W]>) => WriterT<M, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM.tell",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "tell",
                    "signature": "readonly tell: <W>(w: W) => WriterT<M, W, void>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 21,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L21",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L21",
                    },
                    "type": "<W>(w: W) => WriterT<M, W, void>",
                  },
                ],
              },
              "name": "WriterM",
              "signature": "interface WriterM<M> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 17,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L17",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L17",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterM1",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.censor",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "censor",
                    "signature": "readonly censor: <W, A>(
    fa: WriterT1<M, W, A>,
    f: (w: W) => W
) => WriterT1<M, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 54,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L54",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L54",
                    },
                    "type": "<W, A>(fa: WriterT1<M, W, A>, f: (w: W) => W) => WriterT1<M, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.evalWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalWriter",
                    "signature": "readonly evalWriter: <W, A>(fa: WriterT1<M, W, A>) => Kind<M, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L48",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L48",
                    },
                    "type": "<W, A>(fa: WriterT1<M, W, A>) => Kind<M, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.execWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execWriter",
                    "signature": "readonly execWriter: <W, A>(fa: WriterT1<M, W, A>) => Kind<M, W>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 49,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L49",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L49",
                    },
                    "type": "<W, A>(fa: WriterT1<M, W, A>) => Kind<M, W>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <W>(M: Monoid<W>) => {
    readonly _E: W;
    readonly map: <A, B>(
        ma: WriterT1<M, W, A>,
        f: (a: A) => B
    ) => WriterT1<M, W, B>;
    readonly of: <A>(a: A) => WriterT1<M, W, A>;
    readonly ap: <A, B>(
        mab: WriterT1<M, W, (a: A) => B>,
        ma: WriterT1<M, W, A>
    ) => WriterT1<M, W, B>;
    readonly chain: <A, B>(
        ma: WriterT1<M, W, A>,
        f: (a: A) => WriterT1<M, W, B>
    ) => WriterT1<M, W, B>;
};",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 55,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L55",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L55",
                    },
                    "type": "<W>(M: Monoid<W>) => { readonly _E: W; readonly map: <A, B>(ma: WriterT1<M, W, A>, f: (a: A) => B) => WriterT1<M, W, B>; readonly of: <A>(a: A) => WriterT1<M, W, A>; readonly ap: <A, B>(mab: WriterT1<M, W, (a: A) => B>, ma: WriterT1<M, W, A>) => WriterT1<M, W, B>; readonly chain: <A, B>(ma: WriterT1<M, W, A>, f: (a: A) => WriterT1<M, W, B>) => WriterT1<M, W, B>; }",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.listen",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listen",
                    "signature": "readonly listen: <W, A>(fa: WriterT1<M, W, A>) => WriterT1<M, W, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 51,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L51",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L51",
                    },
                    "type": "<W, A>(fa: WriterT1<M, W, A>) => WriterT1<M, W, [A, W]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.listens",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listens",
                    "signature": "readonly listens: <W, A, B>(
    fa: WriterT1<M, W, A>,
    f: (w: W) => B
) => WriterT1<M, W, [A, B]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 53,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L53",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L53",
                    },
                    "type": "<W, A, B>(fa: WriterT1<M, W, A>, f: (w: W) => B) => WriterT1<M, W, [A, B]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <W, A, B>(
    fa: WriterT1<M, W, A>,
    f: (a: A) => B
) => WriterT1<M, W, B>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 47,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L47",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L47",
                    },
                    "type": "<W, A, B>(fa: WriterT1<M, W, A>, f: (a: A) => B) => WriterT1<M, W, B>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.pass",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "pass",
                    "signature": "readonly pass: <W, A>(fa: WriterT1<M, W, [A, (w: W) => W]>) => WriterT1<M, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 52,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L52",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L52",
                    },
                    "type": "<W, A>(fa: WriterT1<M, W, [A, (w: W) => W]>) => WriterT1<M, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM1.tell",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "tell",
                    "signature": "readonly tell: <W>(w: W) => WriterT1<M, W, void>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 50,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L50",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L50",
                    },
                    "type": "<W>(w: W) => WriterT1<M, W, void>",
                  },
                ],
              },
              "name": "WriterM1",
              "signature": "interface WriterM1<M extends URIS> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 46,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L46",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L46",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterM2",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.censor",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "censor",
                    "signature": "readonly censor: <E, W, A>(
    fa: WriterT2<M, E, W, A>,
    f: (w: W) => W
) => WriterT2<M, E, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 83,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L83",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L83",
                    },
                    "type": "<E, W, A>(fa: WriterT2<M, E, W, A>, f: (w: W) => W) => WriterT2<M, E, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.evalWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalWriter",
                    "signature": "readonly evalWriter: <E, W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L77",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L77",
                    },
                    "type": "<E, W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.execWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execWriter",
                    "signature": "readonly execWriter: <E, W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, W>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 78,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L78",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L78",
                    },
                    "type": "<E, W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, W>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <W>(M: Monoid<W>) => {
    readonly _E: W;
    readonly map: <E, A, B>(
        ma: WriterT2<M, E, W, A>,
        f: (a: A) => B
    ) => WriterT2<M, E, W, B>;
    readonly of: <E, A>(a: A) => WriterT2<M, E, W, A>;
    readonly ap: <E, A, B>(
        mab: WriterT2<M, E, W, (a: A) => B>,
        ma: WriterT2<M, E, W, A>
    ) => WriterT2<M, E, W, B>;
    readonly chain: <E, A, B>(
        ma: WriterT2<M, E, W, A>,
        f: (a: A) => WriterT2<M, E, W, B>
    ) => WriterT2<M, E, W, B>;
};",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 84,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L84",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L84",
                    },
                    "type": "<W>(M: Monoid<W>) => { readonly _E: W; readonly map: <E, A, B>(ma: WriterT2<M, E, W, A>, f: (a: A) => B) => WriterT2<M, E, W, B>; readonly of: <E, A>(a: A) => WriterT2<M, E, W, A>; readonly ap: <E, A, B>(mab: WriterT2<M, E, W, (a: A) => B>, ma: WriterT2<M, E, W, A>) => WriterT2<M, E, W, B>; readonly chain: <E, A, B>(ma: WriterT2<M, E, W, A>, f: (a: A) => WriterT2<M, E, W, B>) => WriterT2<M, E, W, B>; }",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.listen",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listen",
                    "signature": "readonly listen: <E, W, A>(
    fa: WriterT2<M, E, W, A>
) => WriterT2<M, E, W, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 80,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L80",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L80",
                    },
                    "type": "<E, W, A>(fa: WriterT2<M, E, W, A>) => WriterT2<M, E, W, [A, W]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.listens",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listens",
                    "signature": "readonly listens: <E, W, A, B>(
    fa: WriterT2<M, E, W, A>,
    f: (w: W) => B
) => WriterT2<M, E, W, [A, B]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 82,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L82",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L82",
                    },
                    "type": "<E, W, A, B>(fa: WriterT2<M, E, W, A>, f: (w: W) => B) => WriterT2<M, E, W, [A, B]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <E, W, A, B>(
    fa: WriterT2<M, E, W, A>,
    f: (a: A) => B
) => WriterT2<M, E, W, B>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 76,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L76",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L76",
                    },
                    "type": "<E, W, A, B>(fa: WriterT2<M, E, W, A>, f: (a: A) => B) => WriterT2<M, E, W, B>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.pass",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "pass",
                    "signature": "readonly pass: <E, W, A>(
    fa: WriterT2<M, E, W, [A, (w: W) => W]>
) => WriterT2<M, E, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 81,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L81",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L81",
                    },
                    "type": "<E, W, A>(fa: WriterT2<M, E, W, [A, (w: W) => W]>) => WriterT2<M, E, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2.tell",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "tell",
                    "signature": "readonly tell: <E, W>(w: W) => WriterT2<M, E, W, void>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 79,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L79",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L79",
                    },
                    "type": "<E, W>(w: W) => WriterT2<M, E, W, void>",
                  },
                ],
              },
              "name": "WriterM2",
              "signature": "interface WriterM2<M extends URIS2> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 75,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L75",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L75",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterM2C",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.censor",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "censor",
                    "signature": "readonly censor: <W, A>(
    fa: WriterT2<M, E, W, A>,
    f: (w: W) => W
) => WriterT2<M, E, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 105,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L105",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L105",
                    },
                    "type": "<W, A>(fa: WriterT2<M, E, W, A>, f: (w: W) => W) => WriterT2<M, E, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.evalWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalWriter",
                    "signature": "readonly evalWriter: <W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 99,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L99",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L99",
                    },
                    "type": "<W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.execWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execWriter",
                    "signature": "readonly execWriter: <W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, W>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 100,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L100",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L100",
                    },
                    "type": "<W, A>(fa: WriterT2<M, E, W, A>) => Kind2<M, E, W>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <W>(M: Monoid<W>) => {
    readonly _E: W;
    readonly map: <A, B>(
        ma: WriterT2<M, E, W, A>,
        f: (a: A) => B
    ) => WriterT2<M, E, W, B>;
    readonly of: <A>(a: A) => WriterT2<M, E, W, A>;
    readonly ap: <A, B>(
        mab: WriterT2<M, E, W, (a: A) => B>,
        ma: WriterT2<M, E, W, A>
    ) => WriterT2<M, E, W, B>;
    readonly chain: <A, B>(
        ma: WriterT2<M, E, W, A>,
        f: (a: A) => WriterT2<M, E, W, B>
    ) => WriterT2<M, E, W, B>;
};",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 106,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L106",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L106",
                    },
                    "type": "<W>(M: Monoid<W>) => { readonly _E: W; readonly map: <A, B>(ma: WriterT2<M, E, W, A>, f: (a: A) => B) => WriterT2<M, E, W, B>; readonly of: <A>(a: A) => WriterT2<M, E, W, A>; readonly ap: <A, B>(mab: WriterT2<M, E, W, (a: A) => B>, ma: WriterT2<M, E, W, A>) => WriterT2<M, E, W, B>; readonly chain: <A, B>(ma: WriterT2<M, E, W, A>, f: (a: A) => WriterT2<M, E, W, B>) => WriterT2<M, E, W, B>; }",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.listen",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listen",
                    "signature": "readonly listen: <W, A>(fa: WriterT2<M, E, W, A>) => WriterT2<M, E, W, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 102,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L102",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L102",
                    },
                    "type": "<W, A>(fa: WriterT2<M, E, W, A>) => WriterT2<M, E, W, [A, W]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.listens",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listens",
                    "signature": "readonly listens: <W, A, B>(
    fa: WriterT2<M, E, W, A>,
    f: (w: W) => B
) => WriterT2<M, E, W, [A, B]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 104,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L104",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L104",
                    },
                    "type": "<W, A, B>(fa: WriterT2<M, E, W, A>, f: (w: W) => B) => WriterT2<M, E, W, [A, B]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <W, A, B>(
    fa: WriterT2<M, E, W, A>,
    f: (a: A) => B
) => WriterT2<M, E, W, B>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 98,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L98",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L98",
                    },
                    "type": "<W, A, B>(fa: WriterT2<M, E, W, A>, f: (a: A) => B) => WriterT2<M, E, W, B>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.pass",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "pass",
                    "signature": "readonly pass: <W, A>(
    fa: WriterT2<M, E, W, [A, (w: W) => W]>
) => WriterT2<M, E, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 103,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L103",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L103",
                    },
                    "type": "<W, A>(fa: WriterT2<M, E, W, [A, (w: W) => W]>) => WriterT2<M, E, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM2C.tell",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "tell",
                    "signature": "readonly tell: <W>(w: W) => WriterT2<M, E, W, void>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 101,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L101",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L101",
                    },
                    "type": "<W>(w: W) => WriterT2<M, E, W, void>",
                  },
                ],
              },
              "name": "WriterM2C",
              "signature": "interface WriterM2C<M extends URIS2, E> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 97,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L97",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L97",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterM3",
              "kind": "interface",
              "members": {
                "callSignatures": [],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.censor",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "censor",
                    "signature": "readonly censor: <R, E, W, A>(
    fa: WriterT3<M, R, E, W, A>,
    f: (w: W) => W
) => WriterT3<M, R, E, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 133,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L133",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L133",
                    },
                    "type": "<R, E, W, A>(fa: WriterT3<M, R, E, W, A>, f: (w: W) => W) => WriterT3<M, R, E, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.evalWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "evalWriter",
                    "signature": "readonly evalWriter: <R, E, W, A>(
    fa: WriterT3<M, R, E, W, A>
) => Kind3<M, R, E, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 127,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L127",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L127",
                    },
                    "type": "<R, E, W, A>(fa: WriterT3<M, R, E, W, A>) => Kind3<M, R, E, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.execWriter",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "execWriter",
                    "signature": "readonly execWriter: <R, E, W, A>(
    fa: WriterT3<M, R, E, W, A>
) => Kind3<M, R, E, W>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 128,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L128",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L128",
                    },
                    "type": "<R, E, W, A>(fa: WriterT3<M, R, E, W, A>) => Kind3<M, R, E, W>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.getMonad",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "getMonad",
                    "signature": "readonly getMonad: <W>(M: Monoid<W>) => {
    readonly _E: W;
    readonly map: <R, E, A, B>(
        ma: WriterT3<M, R, E, W, A>,
        f: (a: A) => B
    ) => WriterT3<M, R, E, W, B>;
    readonly of: <R, E, A>(a: A) => WriterT3<M, R, E, W, A>;
    readonly ap: <R, E, A, B>(
        mab: WriterT3<M, R, E, W, (a: A) => B>,
        ma: WriterT3<M, R, E, W, A>
    ) => WriterT3<M, R, E, W, B>;
    readonly chain: <R, E, A, B>(
        ma: WriterT3<M, R, E, W, A>,
        f: (a: A) => WriterT3<M, R, E, W, B>
    ) => WriterT3<M, R, E, W, B>;
};",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 134,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L134",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L134",
                    },
                    "type": "<W>(M: Monoid<W>) => { readonly _E: W; readonly map: <R, E, A, B>(ma: WriterT3<M, R, E, W, A>, f: (a: A) => B) => WriterT3<M, R, E, W, B>; readonly of: <R, E, A>(a: A) => WriterT3<M, R, E, W, A>; readonly ap: <R, E, A, B>(mab: WriterT3<M, R, E, W, (a: A) => B>, ma: WriterT3<M, R, E, W, A>) => WriterT3<M, R, E, W, B>; readonly chain: <R, E, A, B>(ma: WriterT3<M, R, E, W, A>, f: (a: A) => WriterT3<M, R, E, W, B>) => WriterT3<M, R, E, W, B>; }",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.listen",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listen",
                    "signature": "readonly listen: <R, E, W, A>(
    fa: WriterT3<M, R, E, W, A>
) => WriterT3<M, R, E, W, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 130,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L130",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L130",
                    },
                    "type": "<R, E, W, A>(fa: WriterT3<M, R, E, W, A>) => WriterT3<M, R, E, W, [A, W]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.listens",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "listens",
                    "signature": "readonly listens: <R, E, W, A, B>(
    fa: WriterT3<M, R, E, W, A>,
    f: (w: W) => B
) => WriterT3<M, R, E, W, [A, B]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 132,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L132",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L132",
                    },
                    "type": "<R, E, W, A, B>(fa: WriterT3<M, R, E, W, A>, f: (w: W) => B) => WriterT3<M, R, E, W, [A, B]>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.map",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "map",
                    "signature": "readonly map: <R, E, W, A, B>(
    fa: WriterT3<M, R, E, W, A>,
    f: (a: A) => B
) => WriterT3<M, R, E, W, B>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 126,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L126",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L126",
                    },
                    "type": "<R, E, W, A, B>(fa: WriterT3<M, R, E, W, A>, f: (a: A) => B) => WriterT3<M, R, E, W, B>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.pass",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "pass",
                    "signature": "readonly pass: <R, E, W, A>(
    fa: WriterT3<M, R, E, W, [A, (w: W) => W]>
) => WriterT3<M, R, E, W, A>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 131,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L131",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L131",
                    },
                    "type": "<R, E, W, A>(fa: WriterT3<M, R, E, W, [A, (w: W) => W]>) => WriterT3<M, R, E, W, A>",
                  },
                  {
                    "docs": [],
                    "id": "writerT.WriterM3.tell",
                    "isOptional": false,
                    "isReadonly": true,
                    "kind": "interfaceProperty",
                    "name": "tell",
                    "signature": "readonly tell: <R, E, W>(w: W) => WriterT3<M, R, E, W, void>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 129,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L129",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L129",
                    },
                    "type": "<R, E, W>(w: W) => WriterT3<M, R, E, W, void>",
                  },
                ],
              },
              "name": "WriterM3",
              "signature": "interface WriterM3<M extends URIS3> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 125,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L125",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L125",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterT",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "writerT.WriterT.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): HKT<M, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 12,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L12",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L12",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "WriterT",
              "signature": "interface WriterT<M, W, A> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 11,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L11",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L11",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterT1",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "writerT.WriterT1.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): Kind<M, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 41,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L41",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L41",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "WriterT1",
              "signature": "interface WriterT1<M extends URIS, W, A> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L40",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L40",
              },
            },
            {
              "docs": [
                "/**
 * @category model
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterT2",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "writerT.WriterT2.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): Kind2<M, E, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 70,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L70",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L70",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "WriterT2",
              "signature": "interface WriterT2<M extends URIS2, E, W, A> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 69,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L69",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L69",
              },
            },
            {
              "docs": [
                "/**
 * @since 2.4.0
 */",
              ],
              "id": "writerT.WriterT3",
              "kind": "interface",
              "members": {
                "callSignatures": [
                  {
                    "docs": [],
                    "id": "writerT.WriterT3.0-call-signature",
                    "kind": "interfaceCallSignature",
                    "name": "call signature",
                    "signature": "(): Kind3<M, R, E, [A, W]>;",
                    "source": {
                      "filename": "lib/WriterT.d.ts",
                      "line": 120,
                      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L120",
                      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L120",
                    },
                  },
                ],
                "constructSignatures": [],
                "indexSignatures": [],
                "methods": [],
                "properties": [],
              },
              "name": "WriterT3",
              "signature": "interface WriterT3<M extends URIS3, R, E, W, A> {}",
              "source": {
                "filename": "lib/WriterT.d.ts",
                "line": 119,
                "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L119",
                "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L119",
              },
            },
          ],
          "namespaces": [],
          "typeAliases": [],
          "variables": [],
        },
        "docs": [
          "/**
 * @since 2.4.0
 */",
        ],
        "id": "writerT",
        "kind": "namespace",
        "name": "writerT",
        "signature": "module 'lib/WriterT.d.ts' {}",
        "source": {
          "filename": "lib/WriterT.d.ts",
          "line": 1,
          "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts#L1",
          "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts#L1",
        },
      },
    ],
    "typeAliases": [],
    "variables": [],
  },
  "files": [
    {
      "filename": "lib/Alt.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alt.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alt.d.ts",
    },
    {
      "filename": "lib/Alternative.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Alternative.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Alternative.d.ts",
    },
    {
      "filename": "lib/Applicative.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Applicative.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Applicative.d.ts",
    },
    {
      "filename": "lib/Apply.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Apply.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Apply.d.ts",
    },
    {
      "filename": "lib/Array.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Array.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Array.d.ts",
    },
    {
      "filename": "lib/Bifunctor.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bifunctor.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bifunctor.d.ts",
    },
    {
      "filename": "lib/BooleanAlgebra.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BooleanAlgebra.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BooleanAlgebra.d.ts",
    },
    {
      "filename": "lib/Bounded.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Bounded.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Bounded.d.ts",
    },
    {
      "filename": "lib/BoundedDistributiveLattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedDistributiveLattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedDistributiveLattice.d.ts",
    },
    {
      "filename": "lib/BoundedJoinSemilattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedJoinSemilattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedJoinSemilattice.d.ts",
    },
    {
      "filename": "lib/BoundedLattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedLattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedLattice.d.ts",
    },
    {
      "filename": "lib/BoundedMeetSemilattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/BoundedMeetSemilattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/BoundedMeetSemilattice.d.ts",
    },
    {
      "filename": "lib/Category.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Category.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Category.d.ts",
    },
    {
      "filename": "lib/Chain.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Chain.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Chain.d.ts",
    },
    {
      "filename": "lib/ChainRec.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ChainRec.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ChainRec.d.ts",
    },
    {
      "filename": "lib/Choice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Choice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Choice.d.ts",
    },
    {
      "filename": "lib/Comonad.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Comonad.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Comonad.d.ts",
    },
    {
      "filename": "lib/Compactable.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Compactable.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Compactable.d.ts",
    },
    {
      "filename": "lib/Console.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Console.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Console.d.ts",
    },
    {
      "filename": "lib/Const.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Const.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Const.d.ts",
    },
    {
      "filename": "lib/Contravariant.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Contravariant.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Contravariant.d.ts",
    },
    {
      "filename": "lib/Date.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Date.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Date.d.ts",
    },
    {
      "filename": "lib/DistributiveLattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/DistributiveLattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/DistributiveLattice.d.ts",
    },
    {
      "filename": "lib/Either.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Either.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Either.d.ts",
    },
    {
      "filename": "lib/EitherT.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/EitherT.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/EitherT.d.ts",
    },
    {
      "filename": "lib/Eq.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Eq.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Eq.d.ts",
    },
    {
      "filename": "lib/Extend.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Extend.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Extend.d.ts",
    },
    {
      "filename": "lib/Field.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Field.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Field.d.ts",
    },
    {
      "filename": "lib/Filterable.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Filterable.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Filterable.d.ts",
    },
    {
      "filename": "lib/FilterableWithIndex.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FilterableWithIndex.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FilterableWithIndex.d.ts",
    },
    {
      "filename": "lib/Foldable.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Foldable.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Foldable.d.ts",
    },
    {
      "filename": "lib/FoldableWithIndex.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FoldableWithIndex.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FoldableWithIndex.d.ts",
    },
    {
      "filename": "lib/Functor.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Functor.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Functor.d.ts",
    },
    {
      "filename": "lib/FunctorWithIndex.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/FunctorWithIndex.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/FunctorWithIndex.d.ts",
    },
    {
      "filename": "lib/Group.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Group.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Group.d.ts",
    },
    {
      "filename": "lib/HeytingAlgebra.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/HeytingAlgebra.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/HeytingAlgebra.d.ts",
    },
    {
      "filename": "lib/IO.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IO.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IO.d.ts",
    },
    {
      "filename": "lib/IOEither.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IOEither.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IOEither.d.ts",
    },
    {
      "filename": "lib/IORef.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/IORef.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/IORef.d.ts",
    },
    {
      "filename": "lib/Identity.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Identity.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Identity.d.ts",
    },
    {
      "filename": "lib/Invariant.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Invariant.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Invariant.d.ts",
    },
    {
      "filename": "lib/JoinSemilattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/JoinSemilattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/JoinSemilattice.d.ts",
    },
    {
      "filename": "lib/Lattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Lattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Lattice.d.ts",
    },
    {
      "filename": "lib/Magma.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Magma.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Magma.d.ts",
    },
    {
      "filename": "lib/Map.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Map.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Map.d.ts",
    },
    {
      "filename": "lib/MeetSemilattice.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MeetSemilattice.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MeetSemilattice.d.ts",
    },
    {
      "filename": "lib/Monad.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monad.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monad.d.ts",
    },
    {
      "filename": "lib/MonadIO.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadIO.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadIO.d.ts",
    },
    {
      "filename": "lib/MonadTask.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadTask.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadTask.d.ts",
    },
    {
      "filename": "lib/MonadThrow.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/MonadThrow.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/MonadThrow.d.ts",
    },
    {
      "filename": "lib/Monoid.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Monoid.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Monoid.d.ts",
    },
    {
      "filename": "lib/NonEmptyArray.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/NonEmptyArray.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/NonEmptyArray.d.ts",
    },
    {
      "filename": "lib/Option.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Option.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Option.d.ts",
    },
    {
      "filename": "lib/OptionT.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/OptionT.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/OptionT.d.ts",
    },
    {
      "filename": "lib/Ord.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ord.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ord.d.ts",
    },
    {
      "filename": "lib/Ordering.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ordering.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ordering.d.ts",
    },
    {
      "filename": "lib/Profunctor.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Profunctor.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Profunctor.d.ts",
    },
    {
      "filename": "lib/Random.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Random.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Random.d.ts",
    },
    {
      "filename": "lib/Reader.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Reader.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Reader.d.ts",
    },
    {
      "filename": "lib/ReaderEither.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderEither.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderEither.d.ts",
    },
    {
      "filename": "lib/ReaderT.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderT.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderT.d.ts",
    },
    {
      "filename": "lib/ReaderTask.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTask.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTask.d.ts",
    },
    {
      "filename": "lib/ReaderTaskEither.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReaderTaskEither.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReaderTaskEither.d.ts",
    },
    {
      "filename": "lib/ReadonlyArray.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyArray.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyArray.d.ts",
    },
    {
      "filename": "lib/ReadonlyMap.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyMap.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyMap.d.ts",
    },
    {
      "filename": "lib/ReadonlyNonEmptyArray.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyNonEmptyArray.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyNonEmptyArray.d.ts",
    },
    {
      "filename": "lib/ReadonlyRecord.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyRecord.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyRecord.d.ts",
    },
    {
      "filename": "lib/ReadonlySet.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlySet.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlySet.d.ts",
    },
    {
      "filename": "lib/ReadonlyTuple.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ReadonlyTuple.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ReadonlyTuple.d.ts",
    },
    {
      "filename": "lib/Record.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Record.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Record.d.ts",
    },
    {
      "filename": "lib/Ring.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Ring.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Ring.d.ts",
    },
    {
      "filename": "lib/Semigroup.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroup.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroup.d.ts",
    },
    {
      "filename": "lib/Semigroupoid.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semigroupoid.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semigroupoid.d.ts",
    },
    {
      "filename": "lib/Semiring.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Semiring.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Semiring.d.ts",
    },
    {
      "filename": "lib/Set.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Set.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Set.d.ts",
    },
    {
      "filename": "lib/Show.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Show.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Show.d.ts",
    },
    {
      "filename": "lib/State.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/State.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/State.d.ts",
    },
    {
      "filename": "lib/StateReaderTaskEither.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateReaderTaskEither.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateReaderTaskEither.d.ts",
    },
    {
      "filename": "lib/StateT.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/StateT.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/StateT.d.ts",
    },
    {
      "filename": "lib/Store.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Store.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Store.d.ts",
    },
    {
      "filename": "lib/Strong.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Strong.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Strong.d.ts",
    },
    {
      "filename": "lib/Task.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Task.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Task.d.ts",
    },
    {
      "filename": "lib/TaskEither.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskEither.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskEither.d.ts",
    },
    {
      "filename": "lib/TaskThese.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TaskThese.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TaskThese.d.ts",
    },
    {
      "filename": "lib/These.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/These.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/These.d.ts",
    },
    {
      "filename": "lib/TheseT.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TheseT.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TheseT.d.ts",
    },
    {
      "filename": "lib/Traced.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traced.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traced.d.ts",
    },
    {
      "filename": "lib/Traversable.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Traversable.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Traversable.d.ts",
    },
    {
      "filename": "lib/TraversableWithIndex.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/TraversableWithIndex.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/TraversableWithIndex.d.ts",
    },
    {
      "filename": "lib/Tree.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tree.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tree.d.ts",
    },
    {
      "filename": "lib/Tuple.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Tuple.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Tuple.d.ts",
    },
    {
      "filename": "lib/Unfoldable.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Unfoldable.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Unfoldable.d.ts",
    },
    {
      "filename": "lib/ValidationT.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/ValidationT.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/ValidationT.d.ts",
    },
    {
      "filename": "lib/Witherable.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Witherable.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Witherable.d.ts",
    },
    {
      "filename": "lib/Writer.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/Writer.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/Writer.d.ts",
    },
    {
      "filename": "lib/WriterT.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/WriterT.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/WriterT.d.ts",
    },
    {
      "filename": "lib/boolean.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/boolean.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/boolean.d.ts",
    },
    {
      "filename": "lib/function.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/function.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/function.d.ts",
    },
    {
      "filename": "lib/index.d.ts",
      "isIndexFile": true,
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/index.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/index.d.ts",
    },
    {
      "filename": "lib/pipeable.d.ts",
      "unpkgURL": "https://unpkg.com/browse/fp-ts@2.9.3/lib/pipeable.d.ts",
      "url": "https://github.com/gcanti/fp-ts/tree/v2.9.3/lib/pipeable.d.ts",
    },
  ],
  "overview": undefined,
}
`;
