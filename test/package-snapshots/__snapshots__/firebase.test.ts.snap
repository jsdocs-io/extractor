// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`firebase 8.2.4 1`] = `
Object {
  "declarations": Object {
    "classes": Array [],
    "enums": Array [],
    "functions": Array [],
    "interfaces": Array [],
    "namespaces": Array [
      Object {
        "declarations": Object {
          "classes": Array [],
          "enums": Array [],
          "functions": Array [
            Object {
              "docs": Array [
                "/**
   * Gets the {@link firebase.analytics.Analytics \`Analytics\`} service.
   *
   * \`firebase.analytics()\` can be called with no arguments to access the default
   * app's {@link firebase.analytics.Analytics \`Analytics\`} service.
   *
   * @webonly
   *
   * @example
   * \`\`\`javascript
   * // Get the Analytics service for the default app
   * const defaultAnalytics = firebase.analytics();
   * \`\`\`
   *
   * @param app The app to create an analytics service for.
   * If not passed, uses the default app.
   */",
              ],
              "id": "firebase.analytics",
              "kind": "FunctionDeclaration",
              "name": "analytics",
              "signature": "analytics: typeof analytics;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1276,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1276",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1276",
              },
              "type": "typeof analytics",
            },
            Object {
              "docs": Array [
                "/**
   * Retrieves a Firebase {@link firebase.app.App app} instance.
   *
   * When called with no arguments, the default app is returned. When an app name
   * is provided, the app corresponding to that name is returned.
   *
   * An exception is thrown if the app being retrieved has not yet been
   * initialized.
   *
   * @example
   * \`\`\`javascript
   * // Return the default app
   * var app = firebase.app();
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Return a named app
   * var otherApp = firebase.app(\\"otherApp\\");
   * \`\`\`
   *
   * @param name Optional name of the app to return. If no name is
   *   provided, the default is \`\\"[DEFAULT]\\"\`.
   *
   * @return The app corresponding to the provided app name.
   *   If no app name is provided, the default app is returned.
   */",
              ],
              "id": "firebase.app",
              "kind": "FunctionDeclaration",
              "name": "app",
              "signature": "app: (name?: string) => app.App;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1036,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1036",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1036",
              },
              "type": "(name?: string) => app.App",
            },
            Object {
              "docs": Array [
                "/**
   * Gets the {@link firebase.auth.Auth \`Auth\`} service for the default app or a
   * given app.
   *
   * \`firebase.auth()\` can be called with no arguments to access the default app's
   * {@link firebase.auth.Auth \`Auth\`} service or as \`firebase.auth(app)\` to
   * access the {@link firebase.auth.Auth \`Auth\`} service associated with a
   * specific app.
   *
   * @example
   * \`\`\`javascript
   *
   * // Get the Auth service for the default app
   * var defaultAuth = firebase.auth();
   * \`\`\`
   * @example
   * \`\`\`javascript
   *
   * // Get the Auth service for a given app
   * var otherAuth = firebase.auth(otherApp);
   * \`\`\`
   * @param app
   */",
              ],
              "id": "firebase.auth",
              "kind": "FunctionDeclaration",
              "name": "auth",
              "signature": "auth: typeof auth;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1066,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1066",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1066",
              },
              "type": "typeof auth",
            },
            Object {
              "docs": Array [
                "/**
   * Gets the {@link firebase.database.Database \`Database\`} service for the
   * default app or a given app.
   *
   * \`firebase.database()\` can be called with no arguments to access the default
   * app's {@link firebase.database.Database \`Database\`} service or as
   * \`firebase.database(app)\` to access the
   * {@link firebase.database.Database \`Database\`} service associated with a
   * specific app.
   *
   * \`firebase.database\` is also a namespace that can be used to access global
   * constants and methods associated with the \`Database\` service.
   *
   * @example
   * \`\`\`javascript
   * // Get the Database service for the default app
   * var defaultDatabase = firebase.database();
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Get the Database service for a specific app
   * var otherDatabase = firebase.database(app);
   * \`\`\`
   *
   * @namespace
   * @param app Optional app whose Database service to
   *   return. If not provided, the default Database service will be returned.
   * @return The default Database service if no app
   *   is provided or the Database service associated with the provided app.
   */",
              ],
              "id": "firebase.database",
              "kind": "FunctionDeclaration",
              "name": "database",
              "signature": "database: typeof database;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1099,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1099",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1099",
              },
              "type": "typeof database",
            },
            Object {
              "docs": Array [],
              "id": "firebase.firestore",
              "kind": "FunctionDeclaration",
              "name": "firestore",
              "signature": "firestore: typeof firestore;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1214,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1214",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1214",
              },
              "type": "typeof firestore",
            },
            Object {
              "docs": Array [],
              "id": "firebase.functions",
              "kind": "FunctionDeclaration",
              "name": "functions",
              "signature": "functions: typeof functions;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1216,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1216",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1216",
              },
              "type": "typeof functions",
            },
            Object {
              "docs": Array [
                "/**
   * Creates and initializes a Firebase {@link firebase.app.App app} instance.
   *
   * See
   * {@link
   *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app
   *   Add Firebase to your app} and
   * {@link
   *   https://firebase.google.com/docs/web/setup#multiple-projects
   *   Initialize multiple projects} for detailed documentation.
   *
   * @example
   * \`\`\`javascript
   *
   * // Initialize default app
   * // Retrieve your own options values by adding a web app on
   * // https://console.firebase.google.com
   * firebase.initializeApp({
   *   apiKey: \\"AIza....\\",                             // Auth / General Use
   *   appId: \\"1:27992087142:web:ce....\\",      // General Use
   *   projectId: \\"my-firebase-project\\",               // General Use
   *   authDomain: \\"YOUR_APP.firebaseapp.com\\",         // Auth with popup/redirect
   *   databaseURL: \\"https://YOUR_APP.firebaseio.com\\", // Realtime Database
   *   storageBucket: \\"YOUR_APP.appspot.com\\",          // Storage
   *   messagingSenderId: \\"123456789\\",                  // Cloud Messaging
   *   measurementId: \\"G-12345\\"                        // Analytics
   * });
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   *
   * // Initialize another app
   * var otherApp = firebase.initializeApp({
   *   apiKey: \\"AIza....\\",
   *   appId: \\"1:27992087142:web:ce....\\",
   *   projectId: \\"my-firebase-project\\",
   *   databaseURL: \\"https://<OTHER_DATABASE_NAME>.firebaseio.com\\",
   *   storageBucket: \\"<OTHER_STORAGE_BUCKET>.appspot.com\\"
   * }, \\"nameOfOtherApp\\");
   * \`\`\`
   *
   * @param options Options to configure the app's services.
   * @param name Optional name of the app to initialize. If no name
   *   is provided, the default is \`\\"[DEFAULT]\\"\`.
   *
   * @return {!firebase.app.App} The initialized app.
   */",
              ],
              "id": "firebase.initializeApp",
              "kind": "FunctionDeclaration",
              "name": "initializeApp",
              "signature": "initializeApp: (options: Object, name?: string) => app.App;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1149,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1149",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1149",
              },
              "type": "(options: Object, name?: string) => app.App",
            },
            Object {
              "docs": Array [
                "/**
   * Gets the {@link firebase.messaging.Messaging \`Messaging\`} service for the
   * default app or a given app.
   *
   * \`firebase.messaging()\` can be called with no arguments to access the default
   * app's {@link firebase.messaging.Messaging \`Messaging\`} service or as
   * \`firebase.messaging(app)\` to access the
   * {@link firebase.messaging.Messaging \`Messaging\`} service associated with a
   * specific app.
   *
   * Calling \`firebase.messaging()\` in a service worker results in Firebase
   * generating notifications if the push message payload has a \`notification\`
   * parameter.
   *
   * @webonly
   *
   * @example
   * \`\`\`javascript
   * // Get the Messaging service for the default app
   * var defaultMessaging = firebase.messaging();
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Get the Messaging service for a given app
   * var otherMessaging = firebase.messaging(otherApp);
   * \`\`\`
   *
   * @namespace
   * @param app The app to create a Messaging service for.
   *     If not passed, uses the default app.
   */",
              ],
              "id": "firebase.messaging",
              "kind": "FunctionDeclaration",
              "name": "messaging",
              "signature": "messaging: typeof messaging;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1183,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1183",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1183",
              },
              "type": "typeof messaging",
            },
            Object {
              "docs": Array [
                "/**
   * Sets log handler for all Firebase packages.
   * @param logCallback An optional custom log handler that executes user code whenever
   * the Firebase SDK makes a logging call.
   */",
              ],
              "id": "firebase.onLog",
              "kind": "FunctionDeclaration",
              "name": "onLog",
              "signature": "onLog: (
    logCallback: (callbackParams: {
        level: LogLevel;
        message: string;
        args: any[];
        type: string;
    }) => void,
    options?: { level: LogLevel }
) => void;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 121,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L121",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L121",
              },
              "type": "(logCallback: (callbackParams: {    level: LogLevel;    message: string;    args: any[];    type: string;}) => void, options?: {    level: LogLevel;}) => void",
            },
            Object {
              "docs": Array [
                "/**
   * Gets the {@link firebase.performance.Performance \`Performance\`} service.
   *
   * \`firebase.performance()\` can be called with no arguments to access the default
   * app's {@link firebase.performance.Performance \`Performance\`} service.
   * The {@link firebase.performance.Performance \`Performance\`} service does not work with
   * any other app.
   *
   * @webonly
   *
   * @example
   * \`\`\`javascript
   * // Get the Performance service for the default app
   * const defaultPerformance = firebase.performance();
   * \`\`\`
   *
   * @param app The app to create a performance service for. Performance Monitoring only works with
   * the default app.
   * If not passed, uses the default app.
   */",
              ],
              "id": "firebase.performance",
              "kind": "FunctionDeclaration",
              "name": "performance",
              "signature": "performance: (app?: app.App) => performance.Performance;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1238,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1238",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1238",
              },
              "type": "(app?: app.App) => performance.Performance",
            },
            Object {
              "docs": Array [
                "/**
   * Registers a library's name and version for platform logging purposes.
   * @param library Name of 1p or 3p library (e.g. firestore, angularfire)
   * @param version Current version of that library.
   * @param variant Bundle variant, e.g., node, rn, etc.
   */",
              ],
              "id": "firebase.registerVersion",
              "kind": "FunctionDeclaration",
              "name": "registerVersion",
              "signature": "registerVersion: (library: string, version: string, variant?: string) => void;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 101,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L101",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L101",
              },
              "type": "(library: string, version: string, variant?: string) => void",
            },
            Object {
              "docs": Array [
                "/**
   * Gets the {@link firebase.remoteConfig.RemoteConfig \`RemoteConfig\`} instance.
   *
   * @webonly
   *
   * @example
   * \`\`\`javascript
   * // Get the RemoteConfig instance for the default app
   * const defaultRemoteConfig = firebase.remoteConfig();
   * \`\`\`
   *
   * @param app The app to create a Remote Config service for. If not passed, uses the default app.
   */",
              ],
              "id": "firebase.remoteConfig",
              "kind": "FunctionDeclaration",
              "name": "remoteConfig",
              "signature": "remoteConfig: (app?: app.App) => remoteConfig.RemoteConfig;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1255,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1255",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1255",
              },
              "type": "(app?: app.App) => remoteConfig.RemoteConfig",
            },
            Object {
              "docs": Array [
                "/**
   * Sets log level for all Firebase packages.
   *
   * All of the log types above the current log level are captured (i.e. if
   * you set the log level to \`info\`, errors are logged, but \`debug\` and
   * \`verbose\` logs are not).
   */",
              ],
              "id": "firebase.setLogLevel",
              "kind": "FunctionDeclaration",
              "name": "setLogLevel",
              "signature": "setLogLevel: (logLevel: LogLevel) => void;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 114,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L114",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L114",
              },
              "type": "(logLevel: LogLevel) => void",
            },
            Object {
              "docs": Array [
                "/**
   * Gets the {@link firebase.storage.Storage \`Storage\`} service for the default
   * app or a given app.
   *
   * \`firebase.storage()\` can be called with no arguments to access the default
   * app's {@link firebase.storage.Storage \`Storage\`} service or as
   * \`firebase.storage(app)\` to access the
   * {@link firebase.storage.Storage \`Storage\`} service associated with a
   * specific app.
   *
   * @webonly
   *
   * @example
   * \`\`\`javascript
   * // Get the Storage service for the default app
   * var defaultStorage = firebase.storage();
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Get the Storage service for a given app
   * var otherStorage = firebase.storage(otherApp);
   * \`\`\`
   *
   * @param app The app to create a storage service for.
   *     If not passed, uses the default app.
   */",
              ],
              "id": "firebase.storage",
              "kind": "FunctionDeclaration",
              "name": "storage",
              "signature": "storage: typeof storage;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1212,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1212",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1212",
              },
              "type": "typeof storage",
            },
          ],
          "interfaces": Array [
            Object {
              "docs": Array [
                "/**
   * \`FirebaseError\` is a subclass of the standard JavaScript \`Error\` object. In
   * addition to a message string and stack trace, it contains a string code.
   */",
              ],
              "id": "firebase.FirebaseError",
              "kind": "InterfaceDeclaration",
              "members": Object {
                "callSignatures": Array [],
                "constructSignatures": Array [],
                "indexSignatures": Array [],
                "methods": Array [],
                "properties": Array [
                  Object {
                    "docs": Array [
                      "/**
     * Error codes are strings using the following format: \`\\"service/string-code\\"\`.
     * Some examples include \`\\"app/no-app\\"\` and \`\\"auth/user-not-found\\"\`.
     *
     * While the message for a given error can change, the code will remain the same
     * between backward-compatible versions of the Firebase SDK.
     */",
                    ],
                    "id": "firebase.FirebaseError.code",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "code",
                    "signature": "code: string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 48,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L48",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L48",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * An explanatory message for the error that just occurred.
     *
     * This message is designed to be helpful to you, the developer. Because
     * it generally does not convey meaningful information to end users,
     * this message should not be displayed in your application.
     */",
                    ],
                    "id": "firebase.FirebaseError.message",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "message",
                    "signature": "message: string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 56,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L56",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L56",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * The name of the class of errors, which is \`\\"FirebaseError\\"\`.
     */",
                    ],
                    "id": "firebase.FirebaseError.name",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "name",
                    "signature": "name: string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 60,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L60",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L60",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * A string value containing the execution backtrace when the error originally
     * occurred. This may not always be available.
     *
     * When it is available, this information can be sent to
     * {@link https://firebase.google.com/support/ Firebase Support} to help
     * explain the cause of an error.
     */",
                    ],
                    "id": "firebase.FirebaseError.stack",
                    "isOptional": true,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "stack",
                    "signature": "stack?: string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 69,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L69",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L69",
                    },
                    "type": "string",
                  },
                ],
              },
              "name": "FirebaseError",
              "signature": "interface FirebaseError {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 40,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L40",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L40",
              },
            },
            Object {
              "docs": Array [
                "/**
   * @hidden
   */",
              ],
              "id": "firebase.Observer",
              "kind": "InterfaceDeclaration",
              "members": Object {
                "callSignatures": Array [],
                "constructSignatures": Array [],
                "indexSignatures": Array [],
                "methods": Array [],
                "properties": Array [
                  Object {
                    "docs": Array [],
                    "id": "firebase.Observer.complete",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "complete",
                    "signature": "complete: CompleteFn;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 78,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L78",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L78",
                    },
                    "type": "CompleteFn",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.Observer.error",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "error",
                    "signature": "error: ErrorFn<E>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 77,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L77",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L77",
                    },
                    "type": "ErrorFn<E>",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.Observer.next",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "next",
                    "signature": "next: NextFn<T>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 76,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L76",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L76",
                    },
                    "type": "NextFn<T>",
                  },
                ],
              },
              "name": "Observer",
              "signature": "interface Observer<T, E = Error> {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 75,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L75",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L75",
              },
            },
            Object {
              "docs": Array [
                "/**
   * A user account.
   */",
              ],
              "id": "firebase.User",
              "kind": "InterfaceDeclaration",
              "members": Object {
                "callSignatures": Array [],
                "constructSignatures": Array [],
                "indexSignatures": Array [],
                "methods": Array [
                  Object {
                    "docs": Array [
                      "/**
     * Deletes and signs out the user.
     *
     * <b>Important:</b> this is a security-sensitive operation that requires the
     * user to have recently signed in. If this requirement isn't met, ask the user
     * to authenticate again and then call
     * {@link firebase.User.reauthenticateWithCredential}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/requires-recent-login</dt>
     * <dd>Thrown if the user's last sign-in time does not meet the security
     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to
     *     resolve. This does not apply if the user is anonymous.</dd>
     * </dl>
     */",
                    ],
                    "id": "firebase.User.delete",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "delete",
                    "signature": "delete: () => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 175,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L175",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L175",
                    },
                    "type": "() => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Returns a JSON Web Token (JWT) used to identify the user to a Firebase
     * service.
     *
     * Returns the current token if it has not expired. Otherwise, this will
     * refresh the token and return a new one.
     *
     * @param forceRefresh Force refresh regardless of token
     *     expiration.
     */",
                    ],
                    "id": "firebase.User.getIdToken",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "getIdToken",
                    "signature": "getIdToken: (forceRefresh?: boolean) => Promise<string>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 190,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L190",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L190",
                    },
                    "type": "(forceRefresh?: boolean) => Promise<string>",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.User.getIdTokenResult",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "getIdTokenResult",
                    "signature": "getIdTokenResult: (forceRefresh?: boolean) => Promise<auth.IdTokenResult>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 177,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L177",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L177",
                    },
                    "type": "(forceRefresh?: boolean) => Promise<auth.IdTokenResult>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Links the user account with the given credentials and returns any available
     * additional user information, such as user name.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/provider-already-linked</dt>
     * <dd>Thrown if the provider has already been linked to the user. This error is
     *     thrown even if this is not the same provider's account that is currently
     *     linked to the user.</dd>
     * <dt>auth/invalid-credential</dt>
     * <dd>Thrown if the provider's credential is not valid. This can happen if it
     *     has already expired when calling link, or if it used invalid token(s).
     *     See the Firebase documentation for your provider, and make sure you pass
     *     in the correct parameters to the credential method.</dd>
     * <dt>auth/credential-already-in-use</dt>
     * <dd>Thrown if the account corresponding to the credential already exists
     *     among your users, or is already linked to a Firebase User.
     *     For example, this error could be thrown if you are upgrading an anonymous
     *     user to a Google user by linking a Google credential to it and the Google
     *     credential used is already associated with an existing Firebase Google
     *     user.
     *     The fields <code>error.email</code>, <code>error.phoneNumber</code>, and
     *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})
     *     may be provided, depending on the type of credential. You can recover
     *     from this error by signing in with <code>error.credential</code> directly
     *     via {@link firebase.auth.Auth.signInWithCredential}.</dd>
     * <dt>auth/email-already-in-use</dt>
     * <dd>Thrown if the email corresponding to the credential already exists
     *     among your users. When thrown while linking a credential to an existing
     *     user, an <code>error.email</code> and <code>error.credential</code>
     *     ({@link firebase.auth.AuthCredential}) fields are also provided.
     *     You have to link the credential to the existing user with that email if
     *     you wish to continue signing in with that credential. To do so, call
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to
     *     <code>error.email</code> via one of the providers returned and then
     *     {@link firebase.User.linkWithCredential} the original credential to that
     *     newly signed in user.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go
     *     to the Firebase Console for your project, in the Auth section and the
     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>
     * <dt>auth/wrong-password</dt>
     * <dd>Thrown if the password used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or
     *     when the user associated with the email does not have a password.</dd>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     code of the credential is not valid.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification
     *     ID of the credential is not valid.</dd>
     * </dl>
     *
     * @deprecated  This method is deprecated. Use
     * {@link firebase.User.linkWithCredential} instead.
     *
     * @param credential The auth credential.
     */",
                    ],
                    "id": "firebase.User.linkAndRetrieveDataWithCredential",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "linkAndRetrieveDataWithCredential",
                    "signature": "linkAndRetrieveDataWithCredential: (
    credential: auth.AuthCredential
) => Promise<auth.UserCredential>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 256,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L256",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L256",
                    },
                    "type": "(credential: auth.AuthCredential) => Promise<auth.UserCredential>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Links the user account with the given credentials.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/provider-already-linked</dt>
     * <dd>Thrown if the provider has already been linked to the user. This error is
     *     thrown even if this is not the same provider's account that is currently
     *     linked to the user.</dd>
     * <dt>auth/invalid-credential</dt>
     * <dd>Thrown if the provider's credential is not valid. This can happen if it
     *     has already expired when calling link, or if it used invalid token(s).
     *     See the Firebase documentation for your provider, and make sure you pass
     *     in the correct parameters to the credential method.</dd>
     * <dt>auth/credential-already-in-use</dt>
     * <dd>Thrown if the account corresponding to the credential already exists
     *     among your users, or is already linked to a Firebase User.
     *     For example, this error could be thrown if you are upgrading an anonymous
     *     user to a Google user by linking a Google credential to it and the Google
     *     credential used is already associated with an existing Firebase Google
     *     user.
     *     The fields <code>error.email</code>, <code>error.phoneNumber</code>, and
     *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})
     *     may be provided, depending on the type of credential. You can recover
     *     from this error by signing in with <code>error.credential</code> directly
     *     via {@link firebase.auth.Auth.signInWithCredential}.</dd>
     * <dt>auth/email-already-in-use</dt>
     * <dd>Thrown if the email corresponding to the credential already exists
     *     among your users. When thrown while linking a credential to an existing
     *     user, an <code>error.email</code> and <code>error.credential</code>
     *     ({@link firebase.auth.AuthCredential}) fields are also provided.
     *     You have to link the credential to the existing user with that email if
     *     you wish to continue signing in with that credential. To do so, call
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to
     *     <code>error.email</code> via one of the providers returned and then
     *     {@link firebase.User.linkWithCredential} the original credential to that
     *     newly signed in user.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go
     *     to the Firebase Console for your project, in the Auth section and the
     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>
     * <dt>auth/wrong-password</dt>
     * <dd>Thrown if the password used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or
     *     when the user associated with the email does not have a password.</dd>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     code of the credential is not valid.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification
     *     ID of the credential is not valid.</dd>
     * </dl>
     *
     * @param credential The auth credential.
     */",
                    ],
                    "id": "firebase.User.linkWithCredential",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "linkWithCredential",
                    "signature": "linkWithCredential: (
    credential: auth.AuthCredential
) => Promise<auth.UserCredential>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 319,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L319",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L319",
                    },
                    "type": "(credential: auth.AuthCredential) => Promise<auth.UserCredential>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Links the user account with the given phone number.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/provider-already-linked</dt>
     * <dd>Thrown if the provider has already been linked to the user. This error is
     *     thrown even if this is not the same provider's account that is currently
     *     linked to the user.</dd>
     * <dt>auth/captcha-check-failed</dt>
     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if
     *     this method was called from a non-whitelisted domain.</dd>
     * <dt>auth/invalid-phone-number</dt>
     * <dd>Thrown if the phone number has an invalid format.</dd>
     * <dt>auth/missing-phone-number</dt>
     * <dd>Thrown if the phone number is missing.</dd>
     * <dt>auth/quota-exceeded</dt>
     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given phone number has been
     *     disabled.</dd>
     * <dt>auth/credential-already-in-use</dt>
     * <dd>Thrown if the account corresponding to the phone number already exists
     *     among your users, or is already linked to a Firebase User.
     *     The fields <code>error.phoneNumber</code> and
     *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})
     *     are provided in this case. You can recover from this error by signing in
     *     with that credential directly via
     *     {@link firebase.auth.Auth.signInWithCredential}.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if you have not enabled the phone authentication provider in the
     *     Firebase Console. Go to the Firebase Console for your project, in the
     *     Auth section and the <strong>Sign in Method</strong> tab and configure
     *     the provider.</dd>
     * </dl>
     *
     * @param phoneNumber The user's phone number in E.164 format (e.g.
     *     +16505550101).
     * @param applicationVerifier
     */",
                    ],
                    "id": "firebase.User.linkWithPhoneNumber",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "linkWithPhoneNumber",
                    "signature": "linkWithPhoneNumber: (
    phoneNumber: string,
    applicationVerifier: auth.ApplicationVerifier
) => Promise<auth.ConfirmationResult>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 362,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L362",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L362",
                    },
                    "type": "(phoneNumber: string, applicationVerifier: auth.ApplicationVerifier) => Promise<auth.ConfirmationResult>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Links the authenticated provider to the user account using a pop-up based
     * OAuth flow.
     *
     * If the linking is successful, the returned result will contain the user
     * and the provider's credential.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/auth-domain-config-required</dt>
     * <dd>Thrown if authDomain configuration is not provided when calling
     *     firebase.initializeApp(). Check Firebase Console for instructions on
     *     determining and passing that field.</dd>
     * <dt>auth/cancelled-popup-request</dt>
     * <dd>Thrown if successive popup operations are triggered. Only one popup
     *     request is allowed at one time on a user or an auth instance. All the
     *     popups would fail with this error except for the last one.</dd>
     * <dt>auth/credential-already-in-use</dt>
     * <dd>Thrown if the account corresponding to the credential already exists
     *     among your users, or is already linked to a Firebase User.
     *     For example, this error could be thrown if you are upgrading an anonymous
     *     user to a Google user by linking a Google credential to it and the Google
     *     credential used is already associated with an existing Firebase Google
     *     user.
     *     An <code>error.email</code> and <code>error.credential</code>
     *     ({@link firebase.auth.AuthCredential}) fields are also provided. You can
     *     recover from this error by signing in with that credential directly via
     *     {@link firebase.auth.Auth.signInWithCredential}.</dd>
     * <dt>auth/email-already-in-use</dt>
     * <dd>Thrown if the email corresponding to the credential already exists
     *     among your users. When thrown while linking a credential to an existing
     *     user, an <code>error.email</code> and <code>error.credential</code>
     *     ({@link firebase.auth.AuthCredential}) fields are also provided.
     *     You have to link the credential to the existing user with that email if
     *     you wish to continue signing in with that credential. To do so, call
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to
     *     <code>error.email</code> via one of the providers returned and then
     *     {@link firebase.User.linkWithCredential} the original credential to that
     *     newly signed in user.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go
     *     to the Firebase Console for your project, in the Auth section and the
     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>
     * <dt>auth/popup-blocked</dt>
     * <dt>auth/operation-not-supported-in-this-environment</dt>
     * <dd>Thrown if this operation is not supported in the environment your
     *     application is running on. \\"location.protocol\\" must be http or https.
     *     </dd>
     * <dd>Thrown if the popup was blocked by the browser, typically when this
     *     operation is triggered outside of a click handler.</dd>
     * <dt>auth/popup-closed-by-user</dt>
     * <dd>Thrown if the popup window is closed by the user without completing the
     *     sign in to the provider.</dd>
     * <dt>auth/provider-already-linked</dt>
     * <dd>Thrown if the provider has already been linked to the user. This error is
     *     thrown even if this is not the same provider's account that is currently
     *     linked to the user.</dd>
     * <dt>auth/unauthorized-domain</dt>
     * <dd>Thrown if the app domain is not authorized for OAuth operations for your
     *     Firebase project. Edit the list of authorized domains from the Firebase
     *     console.</dd>
     * </dl>
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * // Creates the provider object.
     * var provider = new firebase.auth.FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('email');
     * provider.addScope('user_friends');
     * // Link with popup:
     * user.linkWithPopup(provider).then(function(result) {
     *   // The firebase.User instance:
     *   var user = result.user;
     *   // The Facebook firebase.auth.AuthCredential containing the Facebook
     *   // access token:
     *   var credential = result.credential;
     * }, function(error) {
     *   // An error happened.
     * });
     * \`\`\`
     *
     * @param provider The provider to authenticate.
     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link
     *     firebase.auth.EmailAuthProvider} will throw an error.
     */",
                    ],
                    "id": "firebase.User.linkWithPopup",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "linkWithPopup",
                    "signature": "linkWithPopup: (provider: auth.AuthProvider) => Promise<auth.UserCredential>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 454,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L454",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L454",
                    },
                    "type": "(provider: auth.AuthProvider) => Promise<auth.UserCredential>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Links the authenticated provider to the user account using a full-page
     * redirect flow.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/auth-domain-config-required</dt>
     * <dd>Thrown if authDomain configuration is not provided when calling
     *     firebase.initializeApp(). Check Firebase Console for instructions on
     *     determining and passing that field.</dd>
     * <dt>auth/operation-not-supported-in-this-environment</dt>
     * <dd>Thrown if this operation is not supported in the environment your
     *     application is running on. \\"location.protocol\\" must be http or https.
     *     </dd>
     * <dt>auth/provider-already-linked</dt>
     * <dd>Thrown if the provider has already been linked to the user. This error is
     *     thrown even if this is not the same provider's account that is currently
     *     linked to the user.</dd>
     * <dt>auth/unauthorized-domain</dt>
     * <dd>Thrown if the app domain is not authorized for OAuth operations for your
     *     Firebase project. Edit the list of authorized domains from the Firebase
     *     console.</dd>
     * </dl>
     *
     * @param provider The provider to authenticate.
     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link
     *     firebase.auth.EmailAuthProvider} will throw an error.
     */",
                    ],
                    "id": "firebase.User.linkWithRedirect",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "linkWithRedirect",
                    "signature": "linkWithRedirect: (provider: auth.AuthProvider) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 485,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L485",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L485",
                    },
                    "type": "(provider: auth.AuthProvider) => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Re-authenticates a user using a fresh credential, and returns any available
     * additional user information, such as user name. Use before operations
     * such as {@link firebase.User.updatePassword} that require tokens from recent
     * sign-in attempts.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/user-mismatch</dt>
     * <dd>Thrown if the credential given does not correspond to the user.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if the credential given does not correspond to any existing user.
     *     </dd>
     * <dt>auth/invalid-credential</dt>
     * <dd>Thrown if the provider's credential is not valid. This can happen if it
     *     has already expired when calling link, or if it used invalid token(s).
     *     See the Firebase documentation for your provider, and make sure you pass
     *     in the correct parameters to the credential method.</dd>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>
     * <dt>auth/wrong-password</dt>
     * <dd>Thrown if the password used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or when
     *     the user associated with the email does not have a password.</dd>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     code of the credential is not valid.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification
     *     ID of the credential is not valid.</dd>
     * </dl>
     *
     * @deprecated
     * This method is deprecated. Use
     * {@link firebase.User.reauthenticateWithCredential} instead.
     *
     * @param credential
     */",
                    ],
                    "id": "firebase.User.reauthenticateAndRetrieveDataWithCredential",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "reauthenticateAndRetrieveDataWithCredential",
                    "signature": "reauthenticateAndRetrieveDataWithCredential: (
    credential: auth.AuthCredential
) => Promise<auth.UserCredential>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 542,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L542",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L542",
                    },
                    "type": "(credential: auth.AuthCredential) => Promise<auth.UserCredential>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Re-authenticates a user using a fresh credential. Use before operations
     * such as {@link firebase.User.updatePassword} that require tokens from recent
     * sign-in attempts.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/user-mismatch</dt>
     * <dd>Thrown if the credential given does not correspond to the user.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if the credential given does not correspond to any existing user.
     *     </dd>
     * <dt>auth/invalid-credential</dt>
     * <dd>Thrown if the provider's credential is not valid. This can happen if it
     *     has already expired when calling link, or if it used invalid token(s).
     *     See the Firebase documentation for your provider, and make sure you pass
     *     in the correct parameters to the credential method.</dd>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is invalid.</dd>
     * <dt>auth/wrong-password</dt>
     * <dd>Thrown if the password used in a
     *     {@link firebase.auth.EmailAuthProvider.credential} is not correct or when
     *     the user associated with the email does not have a password.</dd>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     code of the credential is not valid.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification
     *     ID of the credential is not valid.</dd>
     * </dl>
     *
     * @param credential
     */",
                    ],
                    "id": "firebase.User.reauthenticateWithCredential",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "reauthenticateWithCredential",
                    "signature": "reauthenticateWithCredential: (
    credential: auth.AuthCredential
) => Promise<auth.UserCredential>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 581,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L581",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L581",
                    },
                    "type": "(credential: auth.AuthCredential) => Promise<auth.UserCredential>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Re-authenticates a user using a fresh credential. Use before operations
     * such as {@link firebase.User.updatePassword} that require tokens from recent
     * sign-in attempts.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/user-mismatch</dt>
     * <dd>Thrown if the credential given does not correspond to the user.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if the credential given does not correspond to any existing user.
     *     </dd>
     * <dt>auth/captcha-check-failed</dt>
     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if
     *     this method was called from a non-whitelisted domain.</dd>
     * <dt>auth/invalid-phone-number</dt>
     * <dd>Thrown if the phone number has an invalid format.</dd>
     * <dt>auth/missing-phone-number</dt>
     * <dd>Thrown if the phone number is missing.</dd>
     * <dt>auth/quota-exceeded</dt>
     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>
     * </dl>
     *
     * @param phoneNumber The user's phone number in E.164 format (e.g.
     *     +16505550101).
     * @param applicationVerifier
     */",
                    ],
                    "id": "firebase.User.reauthenticateWithPhoneNumber",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "reauthenticateWithPhoneNumber",
                    "signature": "reauthenticateWithPhoneNumber: (
    phoneNumber: string,
    applicationVerifier: auth.ApplicationVerifier
) => Promise<auth.ConfirmationResult>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 611,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L611",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L611",
                    },
                    "type": "(phoneNumber: string, applicationVerifier: auth.ApplicationVerifier) => Promise<auth.ConfirmationResult>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Reauthenticates the current user with the specified provider using a pop-up
     * based OAuth flow.
     *
     * If the reauthentication is successful, the returned result will contain the
     * user and the provider's credential.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/auth-domain-config-required</dt>
     * <dd>Thrown if authDomain configuration is not provided when calling
     *     firebase.initializeApp(). Check Firebase Console for instructions on
     *     determining and passing that field.</dd>
     * <dt>auth/cancelled-popup-request</dt>
     * <dd>Thrown if successive popup operations are triggered. Only one popup
     *     request is allowed at one time on a user or an auth instance. All the
     *     popups would fail with this error except for the last one.</dd>
     * <dt>auth/user-mismatch</dt>
     * <dd>Thrown if the credential given does not correspond to the user.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go
     *     to the Firebase Console for your project, in the Auth section and the
     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>
     * <dt>auth/popup-blocked</dt>
     * <dd>Thrown if the popup was blocked by the browser, typically when this
     *     operation is triggered outside of a click handler.</dd>
     * <dt>auth/operation-not-supported-in-this-environment</dt>
     * <dd>Thrown if this operation is not supported in the environment your
     *     application is running on. \\"location.protocol\\" must be http or https.
     *     </dd>
     * <dt>auth/popup-closed-by-user</dt>
     * <dd>Thrown if the popup window is closed by the user without completing the
     *     sign in to the provider.</dd>
     * <dt>auth/unauthorized-domain</dt>
     * <dd>Thrown if the app domain is not authorized for OAuth operations for your
     *     Firebase project. Edit the list of authorized domains from the Firebase
     *     console.</dd>
     * </dl>
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * // Creates the provider object.
     * var provider = new firebase.auth.FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('email');
     * provider.addScope('user_friends');
     * // Reauthenticate with popup:
     * user.reauthenticateWithPopup(provider).then(function(result) {
     *   // The firebase.User instance:
     *   var user = result.user;
     *   // The Facebook firebase.auth.AuthCredential containing the Facebook
     *   // access token:
     *   var credential = result.credential;
     * }, function(error) {
     *   // An error happened.
     * });
     * \`\`\`
     *
     * @param provider The provider to authenticate.
     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link
     *     firebase.auth.EmailAuthProvider} will throw an error.
     */",
                    ],
                    "id": "firebase.User.reauthenticateWithPopup",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "reauthenticateWithPopup",
                    "signature": "reauthenticateWithPopup: (
    provider: auth.AuthProvider
) => Promise<auth.UserCredential>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 679,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L679",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L679",
                    },
                    "type": "(provider: auth.AuthProvider) => Promise<auth.UserCredential>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Reauthenticates the current user with the specified OAuth provider using a
     * full-page redirect flow.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/auth-domain-config-required</dt>
     * <dd>Thrown if authDomain configuration is not provided when calling
     *     firebase.initializeApp(). Check Firebase Console for instructions on
     *     determining and passing that field.</dd>
     * <dt>auth/operation-not-supported-in-this-environment</dt>
     * <dd>Thrown if this operation is not supported in the environment your
     *     application is running on. \\"location.protocol\\" must be http or https.
     *     </dd>
     * <dt>auth/user-mismatch</dt>
     * <dd>Thrown if the credential given does not correspond to the user.</dd>
     * <dt>auth/unauthorized-domain</dt>
     * <dd>Thrown if the app domain is not authorized for OAuth operations for your
     *     Firebase project. Edit the list of authorized domains from the Firebase
     *     console.</dd>
     * </dl>
     *
     * @webonly
     *
     * @param provider The provider to authenticate.
     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link
     *     firebase.auth.EmailAuthProvider} will throw an error.
     */",
                    ],
                    "id": "firebase.User.reauthenticateWithRedirect",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "reauthenticateWithRedirect",
                    "signature": "reauthenticateWithRedirect: (provider: auth.AuthProvider) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 710,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L710",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L710",
                    },
                    "type": "(provider: auth.AuthProvider) => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Refreshes the current user, if signed in.
     *
     */",
                    ],
                    "id": "firebase.User.reload",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "reload",
                    "signature": "reload: () => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 718,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L718",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L718",
                    },
                    "type": "() => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Sends a verification email to a user.
     *
     * The verification process is completed by calling
     * {@link firebase.auth.Auth.applyActionCode}
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/missing-android-pkg-name</dt>
     * <dd>An Android package name must be provided if the Android app is required
     *     to be installed.</dd>
     * <dt>auth/missing-continue-uri</dt>
     * <dd>A continue URL must be provided in the request.</dd>
     * <dt>auth/missing-ios-bundle-id</dt>
     * <dd>An iOS bundle ID must be provided if an App Store ID is provided.</dd>
     * <dt>auth/invalid-continue-uri</dt>
     * <dd>The continue URL provided in the request is invalid.</dd>
     * <dt>auth/unauthorized-continue-uri</dt>
     * <dd>The domain of the continue URL is not whitelisted. Whitelist
     *     the domain in the Firebase console.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * var actionCodeSettings = {
     *   url: 'https://www.example.com/cart?email=user@example.com&cartId=123',
     *   iOS: {
     *     bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * firebase.auth().currentUser.sendEmailVerification(actionCodeSettings)
     *     .then(function() {
     *       // Verification email sent.
     *     })
     *     .catch(function(error) {
     *       // Error occurred. Inspect error.code.
     *     });
     * \`\`\`
     *
     * @param actionCodeSettings The action
     *     code settings. If specified, the state/continue URL will be set as the
     *     \\"continueUrl\\" parameter in the email verification link. The default email
     *     verification landing page will use this to display a link to go back to
     *     the app if it is installed.
     *     If the actionCodeSettings is not specified, no URL is appended to the
     *     action URL.
     *     The state URL provided must belong to a domain that is whitelisted by the
     *     developer in the console. Otherwise an error will be thrown.
     *     Mobile app redirects will only be applicable if the developer configures
     *     and accepts the Firebase Dynamic Links terms of condition.
     *     The Android package name and iOS bundle ID will be respected only if they
     *     are configured in the same Firebase Auth project used.
     */",
                    ],
                    "id": "firebase.User.sendEmailVerification",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "sendEmailVerification",
                    "signature": "sendEmailVerification: (
    actionCodeSettings?: auth.ActionCodeSettings
) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 778,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L778",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L778",
                    },
                    "type": "(actionCodeSettings?: auth.ActionCodeSettings) => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Returns a JSON-serializable representation of this object.
     *
     * @return A JSON-serializable representation of this object.
     */",
                    ],
                    "id": "firebase.User.toJSON",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "toJSON",
                    "signature": "toJSON: () => Object;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 806,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L806",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L806",
                    },
                    "type": "() => Object",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Unlinks a provider from a user account.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/no-such-provider</dt>
     * <dd>Thrown if the user does not have this provider linked or when the
     *     provider ID given does not exist.</dd>
     * </dt>
     *
     * @param providerId
     */",
                    ],
                    "id": "firebase.User.unlink",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "unlink",
                    "signature": "unlink: (providerId: string) => Promise<firebase.User>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 819,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L819",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L819",
                    },
                    "type": "(providerId: string) => Promise<firebase.User>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Updates the user's email address.
     *
     * An email will be sent to the original email address (if it was set) that
     * allows to revoke the email address change, in order to protect them from
     * account hijacking.
     *
     * <b>Important:</b> this is a security sensitive operation that requires the
     * user to have recently signed in. If this requirement isn't met, ask the user
     * to authenticate again and then call
     * {@link firebase.User.reauthenticateWithCredential}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email used is invalid.</dd>
     * <dt>auth/email-already-in-use</dt>
     * <dd>Thrown if the email is already used by another user.</dd>
     * <dt>auth/requires-recent-login</dt>
     * <dd>Thrown if the user's last sign-in time does not meet the security
     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to
     *     resolve. This does not apply if the user is anonymous.</dd>
     * </dl>
     *
     * @param newEmail The new email address.
     */",
                    ],
                    "id": "firebase.User.updateEmail",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "updateEmail",
                    "signature": "updateEmail: (newEmail: string) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 846,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L846",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L846",
                    },
                    "type": "(newEmail: string) => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Updates the user's password.
     *
     * <b>Important:</b> this is a security sensitive operation that requires the
     * user to have recently signed in. If this requirement isn't met, ask the user
     * to authenticate again and then call
     * {@link firebase.User.reauthenticateWithCredential}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/weak-password</dt>
     * <dd>Thrown if the password is not strong enough.</dd>
     * <dt>auth/requires-recent-login</dt>
     * <dd>Thrown if the user's last sign-in time does not meet the security
     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to
     *     resolve. This does not apply if the user is anonymous.</dd>
     * </dl>
     *
     * @param newPassword
     */",
                    ],
                    "id": "firebase.User.updatePassword",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "updatePassword",
                    "signature": "updatePassword: (newPassword: string) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 867,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L867",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L867",
                    },
                    "type": "(newPassword: string) => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Updates the user's phone number.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the verification code of the credential is not valid.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the verification ID of the credential is not valid.</dd>
     * </dl>
     *
     * @param phoneCredential
     */",
                    ],
                    "id": "firebase.User.updatePhoneNumber",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "updatePhoneNumber",
                    "signature": "updatePhoneNumber: (phoneCredential: auth.AuthCredential) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 881,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L881",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L881",
                    },
                    "type": "(phoneCredential: auth.AuthCredential) => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Updates a user's profile data.
     *
     * @example
     * \`\`\`javascript
     * // Updates the user attributes:
     * user.updateProfile({
     *   displayName: \\"Jane Q. User\\",
     *   photoURL: \\"https://example.com/jane-q-user/profile.jpg\\"
     * }).then(function() {
     *   // Profile updated successfully!
     *   // \\"Jane Q. User\\"
     *   var displayName = user.displayName;
     *   // \\"https://example.com/jane-q-user/profile.jpg\\"
     *   var photoURL = user.photoURL;
     * }, function(error) {
     *   // An error happened.
     * });
     *
     * // Passing a null value will delete the current attribute's value, but not
     * // passing a property won't change the current attribute's value:
     * // Let's say we're using the same user than before, after the update.
     * user.updateProfile({photoURL: null}).then(function() {
     *   // Profile updated successfully!
     *   // \\"Jane Q. User\\", hasn't changed.
     *   var displayName = user.displayName;
     *   // Now, this is null.
     *   var photoURL = user.photoURL;
     * }, function(error) {
     *   // An error happened.
     * });
     * \`\`\`
     *
     * @param profile The profile's
     *     displayName and photoURL to update.
     */",
                    ],
                    "id": "firebase.User.updateProfile",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "updateProfile",
                    "signature": "updateProfile: (profile: {
    displayName?: string | null;
    photoURL?: string | null;
}) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 920,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L920",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L920",
                    },
                    "type": "(profile: {    displayName?: string | null;    photoURL?: string | null;}) => Promise<void>",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * Sends a verification email to a new email address. The user's email will be
     * updated to the new one after being verified.
     *
     * If you have a custom email action handler, you can complete the verification
     * process by calling {@link firebase.auth.Auth.applyActionCode}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/missing-android-pkg-name</dt>
     * <dd>An Android package name must be provided if the Android app is required
     *     to be installed.</dd>
     * <dt>auth/missing-continue-uri</dt>
     * <dd>A continue URL must be provided in the request.</dd>
     * <dt>auth/missing-ios-bundle-id</dt>
     * <dd>An iOS bundle ID must be provided if an App Store ID is provided.</dd>
     * <dt>auth/invalid-continue-uri</dt>
     * <dd>The continue URL provided in the request is invalid.</dd>
     * <dt>auth/unauthorized-continue-uri</dt>
     * <dd>The domain of the continue URL is not whitelisted. Whitelist
     *     the domain in the Firebase console.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * var actionCodeSettings = {
     *   url: 'https://www.example.com/cart?email=user@example.com&cartId=123',
     *   iOS: {
     *     bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * firebase.auth().currentUser.verifyBeforeUpdateEmail(
     *   'user@example.com', actionCodeSettings)
     *   .then(function() {
     *     // Verification email sent.
     *   })
     *   .catch(function(error) {
     *     // Error occurred. Inspect error.code.
     *   });
     * \`\`\`
     *
     * @param newEmail The email address to be verified and updated to.
     * @param actionCodeSettings The action
     *     code settings. If specified, the state/continue URL will be set as the
     *     \\"continueUrl\\" parameter in the email verification link. The default email
     *     verification landing page will use this to display a link to go back to
     *     the app if it is installed.
     *     If the actionCodeSettings is not specified, no URL is appended to the
     *     action URL.
     *     The state URL provided must belong to a domain that is whitelisted by the
     *     developer in the console. Otherwise an error will be thrown.
     *     Mobile app redirects will only be applicable if the developer configures
     *     and accepts the Firebase Dynamic Links terms of condition.
     *     The Android package name and iOS bundle ID will be respected only if they
     *     are configured in the same Firebase Auth project used.
     */",
                    ],
                    "id": "firebase.User.verifyBeforeUpdateEmail",
                    "kind": "InterfaceMethodDeclaration",
                    "name": "verifyBeforeUpdateEmail",
                    "signature": "verifyBeforeUpdateEmail: (
    newEmail: string,
    actionCodeSettings?: auth.ActionCodeSettings
) => Promise<void>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 986,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L986",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L986",
                    },
                    "type": "(newEmail: string, actionCodeSettings?: auth.ActionCodeSettings) => Promise<void>",
                  },
                ],
                "properties": Array [
                  Object {
                    "docs": Array [],
                    "id": "firebase.User.emailVerified",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "emailVerified",
                    "signature": "emailVerified: boolean;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 176,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L176",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L176",
                    },
                    "type": "boolean",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.User.isAnonymous",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "isAnonymous",
                    "signature": "isAnonymous: boolean;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 191,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L191",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L191",
                    },
                    "type": "boolean",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.User.metadata",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "metadata",
                    "signature": "metadata: firebase.auth.UserMetadata;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 486,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L486",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L486",
                    },
                    "type": "auth.UserMetadata",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * The {@link firebase.User.MultiFactorUser} object corresponding to the current user.
     * This is used to access all multi-factor properties and operations related to the
     * current user.
     */",
                    ],
                    "id": "firebase.User.multiFactor",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "multiFactor",
                    "signature": "multiFactor: firebase.User.MultiFactorUser;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 493,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L493",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L493",
                    },
                    "type": "User.MultiFactorUser",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * The phone number normalized based on the E.164 standard (e.g. +16505550101)
     * for the current user. This is null if the user has no phone credential linked
     * to the account.
     */",
                    ],
                    "id": "firebase.User.phoneNumber",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "phoneNumber",
                    "signature": "phoneNumber: string | null;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 499,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L499",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L499",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.User.providerData",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "providerData",
                    "signature": "providerData: (firebase.UserInfo | null)[];",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 500,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L500",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L500",
                    },
                    "type": "UserInfo[]",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.User.refreshToken",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "refreshToken",
                    "signature": "refreshToken: string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 713,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L713",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L713",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * The current user's tenant ID. This is a read-only property, which indicates
     * the tenant ID used to sign in the current user. This is null if the user is
     * signed in from the parent project.
     *
     * @example
     * \`\`\`javascript
     * // Set the tenant ID on Auth instance.
     * firebase.auth().tenantId = ‘TENANT_PROJECT_ID’;
     *
     * // All future sign-in request now include tenant ID.
     * firebase.auth().signInWithEmailAndPassword(email, password)
     *   .then(function(result) {
     *     // result.user.tenantId should be ‘TENANT_PROJECT_ID’.
     *   }).catch(function(error) {
     *     // Handle error.
     *   });
     * \`\`\`
     */",
                    ],
                    "id": "firebase.User.tenantId",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "tenantId",
                    "signature": "tenantId: string | null;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 800,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L800",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L800",
                    },
                    "type": "string",
                  },
                ],
              },
              "name": "User",
              "signature": "interface User extends firebase.UserInfo {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 158,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L158",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L158",
              },
            },
            Object {
              "docs": Array [
                "/**
   * User profile information, visible only to the Firebase project's
   * apps.
   *
   */",
              ],
              "id": "firebase.UserInfo",
              "kind": "InterfaceDeclaration",
              "members": Object {
                "callSignatures": Array [],
                "constructSignatures": Array [],
                "indexSignatures": Array [],
                "methods": Array [],
                "properties": Array [
                  Object {
                    "docs": Array [],
                    "id": "firebase.UserInfo.displayName",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "displayName",
                    "signature": "displayName: string | null;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 998,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L998",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L998",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.UserInfo.email",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "email",
                    "signature": "email: string | null;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 999,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L999",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L999",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.UserInfo.phoneNumber",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "phoneNumber",
                    "signature": "phoneNumber: string | null;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1000,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1000",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1000",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.UserInfo.photoURL",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "photoURL",
                    "signature": "photoURL: string | null;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1001,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1001",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1001",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.UserInfo.providerId",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "providerId",
                    "signature": "providerId: string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1002,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1002",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1002",
                    },
                    "type": "string",
                  },
                  Object {
                    "docs": Array [
                      "/**
     * The user's unique ID.
     */",
                    ],
                    "id": "firebase.UserInfo.uid",
                    "isOptional": false,
                    "isReadonly": false,
                    "kind": "InterfacePropertyDeclaration",
                    "name": "uid",
                    "signature": "uid: string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1006,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1006",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1006",
                    },
                    "type": "string",
                  },
                ],
              },
              "name": "UserInfo",
              "signature": "interface UserInfo {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 997,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L997",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L997",
              },
            },
          ],
          "namespaces": Array [
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [
                  Object {
                    "docs": Array [
                      "/**
   * Enum of standard gtag.js event names provided for convenient
   * developer usage. \`logEvent\` will also accept any custom string
   * and interpret it as a custom event name.
   */",
                    ],
                    "id": "firebase.analytics.EventName",
                    "isConst": false,
                    "kind": "EnumDeclaration",
                    "members": Array [
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.ADD_PAYMENT_INFO",
                        "kind": "EnumMemberDeclaration",
                        "name": "ADD_PAYMENT_INFO",
                        "signature": "ADD_PAYMENT_INFO = 'add_payment_info'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5034,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5034",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5034",
                        },
                        "value": "add_payment_info",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.ADD_SHIPPING_INFO",
                        "kind": "EnumMemberDeclaration",
                        "name": "ADD_SHIPPING_INFO",
                        "signature": "ADD_SHIPPING_INFO = 'add_shipping_info'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5035,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5035",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5035",
                        },
                        "value": "add_shipping_info",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.ADD_TO_CART",
                        "kind": "EnumMemberDeclaration",
                        "name": "ADD_TO_CART",
                        "signature": "ADD_TO_CART = 'add_to_cart'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5036,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5036",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5036",
                        },
                        "value": "add_to_cart",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.ADD_TO_WISHLIST",
                        "kind": "EnumMemberDeclaration",
                        "name": "ADD_TO_WISHLIST",
                        "signature": "ADD_TO_WISHLIST = 'add_to_wishlist'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5037,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5037",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5037",
                        },
                        "value": "add_to_wishlist",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.BEGIN_CHECKOUT",
                        "kind": "EnumMemberDeclaration",
                        "name": "BEGIN_CHECKOUT",
                        "signature": "BEGIN_CHECKOUT = 'begin_checkout'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5038,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5038",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5038",
                        },
                        "value": "begin_checkout",
                      },
                      Object {
                        "docs": Array [
                          "/** @deprecated */",
                        ],
                        "id": "firebase.analytics.EventName.CHECKOUT_PROGRESS",
                        "kind": "EnumMemberDeclaration",
                        "name": "CHECKOUT_PROGRESS",
                        "signature": "CHECKOUT_PROGRESS = 'checkout_progress'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5040,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5040",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5040",
                        },
                        "value": "checkout_progress",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.EXCEPTION",
                        "kind": "EnumMemberDeclaration",
                        "name": "EXCEPTION",
                        "signature": "EXCEPTION = 'exception'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5041,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5041",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5041",
                        },
                        "value": "exception",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.GENERATE_LEAD",
                        "kind": "EnumMemberDeclaration",
                        "name": "GENERATE_LEAD",
                        "signature": "GENERATE_LEAD = 'generate_lead'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5042,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5042",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5042",
                        },
                        "value": "generate_lead",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.LOGIN",
                        "kind": "EnumMemberDeclaration",
                        "name": "LOGIN",
                        "signature": "LOGIN = 'login'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5043,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5043",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5043",
                        },
                        "value": "login",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.PAGE_VIEW",
                        "kind": "EnumMemberDeclaration",
                        "name": "PAGE_VIEW",
                        "signature": "PAGE_VIEW = 'page_view'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5044,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5044",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5044",
                        },
                        "value": "page_view",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.PURCHASE",
                        "kind": "EnumMemberDeclaration",
                        "name": "PURCHASE",
                        "signature": "PURCHASE = 'purchase'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5045,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5045",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5045",
                        },
                        "value": "purchase",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.REFUND",
                        "kind": "EnumMemberDeclaration",
                        "name": "REFUND",
                        "signature": "REFUND = 'refund'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5046,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5046",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5046",
                        },
                        "value": "refund",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.REMOVE_FROM_CART",
                        "kind": "EnumMemberDeclaration",
                        "name": "REMOVE_FROM_CART",
                        "signature": "REMOVE_FROM_CART = 'remove_from_cart'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5047,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5047",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5047",
                        },
                        "value": "remove_from_cart",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.SCREEN_VIEW",
                        "kind": "EnumMemberDeclaration",
                        "name": "SCREEN_VIEW",
                        "signature": "SCREEN_VIEW = 'screen_view'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5048,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5048",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5048",
                        },
                        "value": "screen_view",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.SEARCH",
                        "kind": "EnumMemberDeclaration",
                        "name": "SEARCH",
                        "signature": "SEARCH = 'search'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5049,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5049",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5049",
                        },
                        "value": "search",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.SELECT_CONTENT",
                        "kind": "EnumMemberDeclaration",
                        "name": "SELECT_CONTENT",
                        "signature": "SELECT_CONTENT = 'select_content'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5050,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5050",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5050",
                        },
                        "value": "select_content",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.SELECT_ITEM",
                        "kind": "EnumMemberDeclaration",
                        "name": "SELECT_ITEM",
                        "signature": "SELECT_ITEM = 'select_item'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5051,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5051",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5051",
                        },
                        "value": "select_item",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.SELECT_PROMOTION",
                        "kind": "EnumMemberDeclaration",
                        "name": "SELECT_PROMOTION",
                        "signature": "SELECT_PROMOTION = 'select_promotion'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5052,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5052",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5052",
                        },
                        "value": "select_promotion",
                      },
                      Object {
                        "docs": Array [
                          "/** @deprecated */",
                        ],
                        "id": "firebase.analytics.EventName.SET_CHECKOUT_OPTION",
                        "kind": "EnumMemberDeclaration",
                        "name": "SET_CHECKOUT_OPTION",
                        "signature": "SET_CHECKOUT_OPTION = 'set_checkout_option'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5054,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5054",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5054",
                        },
                        "value": "set_checkout_option",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.SHARE",
                        "kind": "EnumMemberDeclaration",
                        "name": "SHARE",
                        "signature": "SHARE = 'share'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5055,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5055",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5055",
                        },
                        "value": "share",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.SIGN_UP",
                        "kind": "EnumMemberDeclaration",
                        "name": "SIGN_UP",
                        "signature": "SIGN_UP = 'sign_up'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5056,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5056",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5056",
                        },
                        "value": "sign_up",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.TIMING_COMPLETE",
                        "kind": "EnumMemberDeclaration",
                        "name": "TIMING_COMPLETE",
                        "signature": "TIMING_COMPLETE = 'timing_complete'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5057,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5057",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5057",
                        },
                        "value": "timing_complete",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.VIEW_CART",
                        "kind": "EnumMemberDeclaration",
                        "name": "VIEW_CART",
                        "signature": "VIEW_CART = 'view_cart'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5058,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5058",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5058",
                        },
                        "value": "view_cart",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.VIEW_ITEM",
                        "kind": "EnumMemberDeclaration",
                        "name": "VIEW_ITEM",
                        "signature": "VIEW_ITEM = 'view_item'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5059,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5059",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5059",
                        },
                        "value": "view_item",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.VIEW_ITEM_LIST",
                        "kind": "EnumMemberDeclaration",
                        "name": "VIEW_ITEM_LIST",
                        "signature": "VIEW_ITEM_LIST = 'view_item_list'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5060,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5060",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5060",
                        },
                        "value": "view_item_list",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.VIEW_PROMOTION",
                        "kind": "EnumMemberDeclaration",
                        "name": "VIEW_PROMOTION",
                        "signature": "VIEW_PROMOTION = 'view_promotion'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5061,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5061",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5061",
                        },
                        "value": "view_promotion",
                      },
                      Object {
                        "docs": Array [],
                        "id": "firebase.analytics.EventName.VIEW_SEARCH_RESULTS",
                        "kind": "EnumMemberDeclaration",
                        "name": "VIEW_SEARCH_RESULTS",
                        "signature": "VIEW_SEARCH_RESULTS = 'view_search_results'",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 5062,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5062",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5062",
                        },
                        "value": "view_search_results",
                      },
                    ],
                    "name": "EventName",
                    "signature": "enum EventName {
    ADD_PAYMENT_INFO = 'add_payment_info',
    ADD_SHIPPING_INFO = 'add_shipping_info',
    ADD_TO_CART = 'add_to_cart',
    ADD_TO_WISHLIST = 'add_to_wishlist',
    BEGIN_CHECKOUT = 'begin_checkout',
    CHECKOUT_PROGRESS = 'checkout_progress',
    EXCEPTION = 'exception',
    GENERATE_LEAD = 'generate_lead',
    LOGIN = 'login',
    PAGE_VIEW = 'page_view',
    PURCHASE = 'purchase',
    REFUND = 'refund',
    REMOVE_FROM_CART = 'remove_from_cart',
    SCREEN_VIEW = 'screen_view',
    SEARCH = 'search',
    SELECT_CONTENT = 'select_content',
    SELECT_ITEM = 'select_item',
    SELECT_PROMOTION = 'select_promotion',
    SET_CHECKOUT_OPTION = 'set_checkout_option',
    SHARE = 'share',
    SIGN_UP = 'sign_up',
    TIMING_COMPLETE = 'timing_complete',
    VIEW_CART = 'view_cart',
    VIEW_ITEM = 'view_item',
    VIEW_ITEM_LIST = 'view_item_list',
    VIEW_PROMOTION = 'view_promotion',
    VIEW_SEARCH_RESULTS = 'view_search_results',
}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5033,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5033",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5033",
                    },
                  },
                ],
                "functions": Array [
                  Object {
                    "docs": Array [
                      "/**
   * An async function that returns true if current browser context supports initialization of analytics module
   * (\`firebase.analytics()\`).
   *
   * Returns false otherwise.
   *
   *
   */",
                    ],
                    "id": "firebase.analytics.isSupported",
                    "kind": "FunctionDeclaration",
                    "name": "isSupported",
                    "signature": "isSupported: () => Promise<boolean>;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5116,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5116",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5116",
                    },
                    "type": "() => Promise<boolean>",
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Configures Firebase Analytics to use custom \`gtag\` or \`dataLayer\` names.
   * Intended to be used if \`gtag.js\` script has been installed on
   * this page independently of Firebase Analytics, and is using non-default
   * names for either the \`gtag\` function or for \`dataLayer\`.
   * Must be called before calling \`firebase.analytics()\` or it won't
   * have any effect.
   */",
                    ],
                    "id": "firebase.analytics.settings",
                    "kind": "FunctionDeclaration",
                    "name": "settings",
                    "signature": "settings: (settings: SettingsOptions) => void;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4937,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4937",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4937",
                    },
                    "type": "(settings: SettingsOptions) => void",
                  },
                ],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Analytics service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.analytics \`firebase.analytics()\`}.
   */",
                    ],
                    "id": "firebase.analytics.Analytics",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Sends analytics event with given \`eventParams\`. This method
     * automatically associates this logged event with this Firebase web
     * app instance on this device.
     * List of recommended event parameters can be found in
     * {@link https://developers.google.com/gtagjs/reference/event
     * the gtag.js reference documentation}.
     */",
                          ],
                          "id": "firebase.analytics.Analytics.logEvent",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "logEvent",
                          "signature": "logEvent: {
    (
        eventName: 'add_payment_info',
        eventParams?: {
            [key: string]: any;
            coupon?: EventParams['coupon'];
            currency?: EventParams['currency'];
            items?: EventParams['items'];
            payment_type?: EventParams['payment_type'];
            value?: EventParams['value'];
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'add_shipping_info',
        eventParams: {
            [key: string]: any;
            coupon?: string;
            currency?: string;
            items?: Item[];
            shipping_tier?: string;
            value?: number;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',
        eventParams: {
            [key: string]: any;
            currency?: string;
            value?: number;
            items?: Item[];
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'begin_checkout',
        eventParams: {
            [key: string]: any;
            currency?: string;
            coupon?: string;
            value?: number;
            items?: Item[];
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'checkout_progress',
        eventParams: {
            [key: string]: any;
            currency?: string;
            coupon?: string;
            value?: number;
            items?: Item[];
            checkout_step?: number;
            checkout_option?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'exception',
        eventParams: {
            [key: string]: any;
            description?: string;
            fatal?: boolean;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'generate_lead',
        eventParams: {
            [key: string]: any;
            value?: number;
            currency?: string;
            transaction_id?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'login',
        eventParams: { [key: string]: any; method?: string },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'page_view',
        eventParams: {
            [key: string]: any;
            page_title?: string;
            page_location?: string;
            page_path?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'purchase' | 'refund',
        eventParams: {
            [key: string]: any;
            value?: number;
            currency?: string;
            transaction_id: string;
            tax?: Currency;
            shipping?: Currency;
            items?: Item[];
            coupon?: string;
            affiliation?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'screen_view',
        eventParams: {
            [key: string]: any;
            app_name: string;
            screen_name: string;
            app_id?: string;
            app_version?: string;
            app_installer_id?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'search' | 'view_search_results',
        eventParams: { [key: string]: any; search_term?: string },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'select_content',
        eventParams: {
            [key: string]: any;
            items?: Item[];
            promotions?: Promotion[];
            content_type?: string;
            content_id?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'select_item',
        eventParams: {
            [key: string]: any;
            items?: Item[];
            item_list_name?: string;
            item_list_id?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'select_promotion' | 'view_promotion',
        eventParams: {
            [key: string]: any;
            items?: Item[];
            promotion_id?: string;
            promotion_name?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'set_checkout_option',
        eventParams: {
            [key: string]: any;
            checkout_step?: number;
            checkout_option?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'share',
        eventParams: {
            [key: string]: any;
            method?: string;
            content_type?: string;
            content_id?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'sign_up',
        eventParams: { [key: string]: any; method?: string },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'timing_complete',
        eventParams: {
            [key: string]: any;
            name: string;
            value: number;
            event_category?: string;
            event_label?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'view_cart' | 'view_item',
        eventParams: {
            [key: string]: any;
            currency?: string;
            items?: Item[];
            value?: number;
        },
        options?: AnalyticsCallOptions
    ): void;
    (
        eventName: 'view_item_list',
        eventParams: {
            [key: string]: any;
            items?: Item[];
            item_list_name?: string;
            item_list_id?: string;
        },
        options?: AnalyticsCallOptions
    ): void;
    <T extends string>(
        eventName: CustomEventName<T>,
        eventParams?: { [key: string]: any },
        options?: AnalyticsCallOptions
    ): void;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4459,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4459",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4459",
                          },
                          "type": "{ (eventName: 'add_payment_info', eventParams?: { [key: string]: any; coupon?: EventParams['coupon']; currency?: EventParams['currency']; items?: EventParams['items']; payment_type?: EventParams['payment_type']; value?: EventParams['value']; }, options?: AnalyticsCallOptions): void; (eventName: \\"add_shipping_info\\", eventParams: { [key: string]: any; coupon?: string; currency?: string; items?: Item[]; shipping_tier?: string; value?: number; }, options?: AnalyticsCallOptions): void; (eventName: \\"add_to_cart\\" | \\"add_to_wishlist\\" | \\"remove_from_cart\\", eventParams: { [key: string]: any; currency?: string; value?: number; items?: Item[]; }, options?: AnalyticsCallOptions): void; (eventName: \\"begin_checkout\\", eventParams: { [key: string]: any; currency?: string; coupon?: string; value?: number; items?: Item[]; }, options?: AnalyticsCallOptions): void; (eventName: \\"checkout_progress\\", eventParams: { [key: string]: any; currency?: string; coupon?: string; value?: number; items?: Item[]; checkout_step?: number; checkout_option?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"exception\\", eventParams: { [key: string]: any; description?: string; fatal?: boolean; }, options?: AnalyticsCallOptions): void; (eventName: \\"generate_lead\\", eventParams: { [key: string]: any; value?: number; currency?: string; transaction_id?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"login\\", eventParams: { [key: string]: any; method?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"page_view\\", eventParams: { [key: string]: any; page_title?: string; page_location?: string; page_path?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"purchase\\" | \\"refund\\", eventParams: { [key: string]: any; value?: number; currency?: string; transaction_id: string; tax?: Currency; shipping?: Currency; items?: Item[]; coupon?: string; affiliation?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"screen_view\\", eventParams: { [key: string]: any; app_name: string; screen_name: string; app_id?: string; app_version?: string; app_installer_id?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"search\\" | \\"view_search_results\\", eventParams: { [key: string]: any; search_term?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"select_content\\", eventParams: { [key: string]: any; items?: Item[]; promotions?: Promotion[]; content_type?: string; content_id?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"select_item\\", eventParams: { [key: string]: any; items?: Item[]; item_list_name?: string; item_list_id?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"select_promotion\\" | \\"view_promotion\\", eventParams: { [key: string]: any; items?: Item[]; promotion_id?: string; promotion_name?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"set_checkout_option\\", eventParams: { [key: string]: any; checkout_step?: number; checkout_option?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"share\\", eventParams: { [key: string]: any; method?: string; content_type?: string; content_id?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"sign_up\\", eventParams: { [key: string]: any; method?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"timing_complete\\", eventParams: { [key: string]: any; name: string; value: number; event_category?: string; event_label?: string; }, options?: AnalyticsCallOptions): void; (eventName: \\"view_cart\\" | \\"view_item\\", eventParams: { [key: string]: any; currency?: string; items?: Item[]; value?: number; }, options?: AnalyticsCallOptions): void; (eventName: \\"view_item_list\\", eventParams: { [key: string]: any; items?: Item[]; item_list_name?: string; item_list_id?: string; }, options?: AnalyticsCallOptions): void; <T extends string>(eventName: CustomEventName<T>, eventParams?: { [key: string]: any; }, options?: AnalyticsCallOptions): void; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets whether analytics collection is enabled for this app on this device.
     * window['ga-disable-analyticsId'] = true;
     */",
                          ],
                          "id": "firebase.analytics.Analytics.setAnalyticsCollectionEnabled",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setAnalyticsCollectionEnabled",
                          "signature": "setAnalyticsCollectionEnabled: (enabled: boolean) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4901,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4901",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4901",
                          },
                          "type": "(enabled: boolean) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Use gtag 'config' command to set 'screen_name'.
     */",
                          ],
                          "id": "firebase.analytics.Analytics.setCurrentScreen",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setCurrentScreen",
                          "signature": "setCurrentScreen: (screenName: string, options?: AnalyticsCallOptions) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4876,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4876",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4876",
                          },
                          "type": "(screenName: string, options?: AnalyticsCallOptions) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Use gtag 'config' command to set 'user_id'.
     */",
                          ],
                          "id": "firebase.analytics.Analytics.setUserId",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setUserId",
                          "signature": "setUserId: (id: string, options?: AnalyticsCallOptions) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4884,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4884",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4884",
                          },
                          "type": "(id: string, options?: AnalyticsCallOptions) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Use gtag 'config' command to set all params specified.
     */",
                          ],
                          "id": "firebase.analytics.Analytics.setUserProperties",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setUserProperties",
                          "signature": "setUserProperties: (
    properties: CustomParams,
    options?: AnalyticsCallOptions
) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4892,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4892",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4892",
                          },
                          "type": "(properties: CustomParams, options?: AnalyticsCallOptions) => void",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The {@link firebase.app.App app} associated with the \`Analytics\` service
     * instance.
     *
     * @example
     * \`\`\`javascript
     * var app = analytics.app;
     * \`\`\`
     */",
                          ],
                          "id": "firebase.analytics.Analytics.app",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "app",
                          "signature": "app: firebase.app.App;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4449,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4449",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4449",
                          },
                          "type": "app.App",
                        },
                      ],
                    },
                    "name": "Analytics",
                    "signature": "interface Analytics {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4439,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4439",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4439",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Additional options that can be passed to Firebase Analytics method
   * calls such as \`logEvent\`, \`setCurrentScreen\`, etc.
   */",
                    ],
                    "id": "firebase.analytics.AnalyticsCallOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * If true, this config or event call applies globally to all
     * analytics properties on the page.
     */",
                          ],
                          "id": "firebase.analytics.AnalyticsCallOptions.global",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "global",
                          "signature": "global: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4915,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4915",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4915",
                          },
                          "type": "boolean",
                        },
                      ],
                    },
                    "name": "AnalyticsCallOptions",
                    "signature": "interface AnalyticsCallOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4910,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4910",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4910",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Standard gtag.js control parameters.
   * For more information, see
   * {@link https://developers.google.com/gtagjs/reference/parameter
   * the gtag.js documentation on parameters}.
   */",
                    ],
                    "id": "firebase.analytics.ControlParams",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.ControlParams.event_callback",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "event_callback",
                          "signature": "event_callback?: () => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4948,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4948",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4948",
                          },
                          "type": "() => void",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.ControlParams.event_timeout",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "event_timeout",
                          "signature": "event_timeout?: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4949,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4949",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4949",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.ControlParams.groups",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "groups",
                          "signature": "groups?: string | string[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4946,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4946",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4946",
                          },
                          "type": "string | string[]",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.ControlParams.send_to",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "send_to",
                          "signature": "send_to?: string | string[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4947,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4947",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4947",
                          },
                          "type": "string | string[]",
                        },
                      ],
                    },
                    "name": "ControlParams",
                    "signature": "interface ControlParams {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4945,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4945",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4945",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Any custom params the user may pass to gtag.js.
   */",
                    ],
                    "id": "firebase.analytics.CustomParams",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.CustomParams.0-index-signature",
                          "kind": "InterfaceIndexSignatureDeclaration",
                          "name": "index signature",
                          "signature": "[key: string]: any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4992,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4992",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4992",
                          },
                        },
                      ],
                      "methods": Array [],
                      "properties": Array [],
                    },
                    "name": "CustomParams",
                    "signature": "interface CustomParams {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4991,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4991",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4991",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Standard gtag.js event parameters.
   * For more information, see
   * {@link https://developers.google.com/gtagjs/reference/parameter
   * the gtag.js documentation on parameters}.
   */",
                    ],
                    "id": "firebase.analytics.EventParams",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.affiliation",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "affiliation",
                          "signature": "affiliation?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4985,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4985",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4985",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.checkout_option",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "checkout_option",
                          "signature": "checkout_option?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4959,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4959",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4959",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.checkout_step",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "checkout_step",
                          "signature": "checkout_step?: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4960,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4960",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4960",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.content_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "content_id",
                          "signature": "content_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4961,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4961",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4961",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.content_type",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "content_type",
                          "signature": "content_type?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4962,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4962",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4962",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.coupon",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "coupon",
                          "signature": "coupon?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4963,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4963",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4963",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.currency",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "currency",
                          "signature": "currency?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4964,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4964",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4964",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.description",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "description",
                          "signature": "description?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4965,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4965",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4965",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.event_category",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "event_category",
                          "signature": "event_category: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4978,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4978",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4978",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.event_label",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "event_label",
                          "signature": "event_label?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4977,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4977",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4977",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.fatal",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "fatal",
                          "signature": "fatal?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4966,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4966",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4966",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.item_list_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_list_id",
                          "signature": "item_list_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4980,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4980",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4980",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.item_list_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_list_name",
                          "signature": "item_list_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4981,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4981",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4981",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.items",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "items",
                          "signature": "items?: Item[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4967,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4967",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4967",
                          },
                          "type": "Item[]",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.method",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "method",
                          "signature": "method?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4968,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4968",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4968",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.number",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "number",
                          "signature": "number?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4969,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4969",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4969",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.payment_type",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "payment_type",
                          "signature": "payment_type?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4984,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4984",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4984",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.promotion_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "promotion_id",
                          "signature": "promotion_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4982,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4982",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4982",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.promotion_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "promotion_name",
                          "signature": "promotion_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4983,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4983",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4983",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.promotions",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "promotions",
                          "signature": "promotions?: Promotion[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4970,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4970",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4970",
                          },
                          "type": "Promotion[]",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.screen_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "screen_name",
                          "signature": "screen_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4971,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4971",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4971",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.search_term",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "search_term",
                          "signature": "search_term?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4972,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4972",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4972",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.shipping",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "shipping",
                          "signature": "shipping?: Currency;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4973,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4973",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4973",
                          },
                          "type": "Currency",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.shipping_tier",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "shipping_tier",
                          "signature": "shipping_tier?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4979,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4979",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4979",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.tax",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "tax",
                          "signature": "tax?: Currency;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4974,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4974",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4974",
                          },
                          "type": "Currency",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.transaction_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "transaction_id",
                          "signature": "transaction_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4975,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4975",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4975",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.EventParams.value",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "value",
                          "signature": "value?: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4976,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4976",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4976",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "EventParams",
                    "signature": "interface EventParams {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4958,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4958",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4958",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.analytics.Item",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.affiliation",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "affiliation",
                          "signature": "affiliation?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5084,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5084",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5084",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/** @deprecated Use item_brand instead. */",
                          ],
                          "id": "firebase.analytics.Item.brand",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "brand",
                          "signature": "brand?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5091,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5091",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5091",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/** @deprecated Use item_category instead. */",
                          ],
                          "id": "firebase.analytics.Item.category",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "category",
                          "signature": "category?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5093,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5093",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5093",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.coupon",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "coupon",
                          "signature": "coupon?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5080,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5080",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5080",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.creative_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "creative_name",
                          "signature": "creative_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5085,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5085",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5085",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.creative_slot",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "creative_slot",
                          "signature": "creative_slot?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5086,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5086",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5086",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.discount",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "discount",
                          "signature": "discount?: Currency;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5083,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5083",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5083",
                          },
                          "type": "Currency",
                        },
                        Object {
                          "docs": Array [
                            "/** @deprecated Use item_id instead. */",
                          ],
                          "id": "firebase.analytics.Item.id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "id",
                          "signature": "id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5095,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5095",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5095",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.index",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "index",
                          "signature": "index?: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5079,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5079",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5079",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_brand",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_brand",
                          "signature": "item_brand?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5070,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5070",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5070",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_category",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_category",
                          "signature": "item_category?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5071,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5071",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5071",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_category2",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_category2",
                          "signature": "item_category2?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5072,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5072",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5072",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_category3",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_category3",
                          "signature": "item_category3?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5073,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5073",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5073",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_category4",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_category4",
                          "signature": "item_category4?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5074,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5074",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5074",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_category5",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_category5",
                          "signature": "item_category5?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5075,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5075",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5075",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_id",
                          "signature": "item_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5068,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5068",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5068",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_list_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_list_id",
                          "signature": "item_list_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5082,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5082",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5082",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_list_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_list_name",
                          "signature": "item_list_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5081,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5081",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5081",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_name",
                          "signature": "item_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5069,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5069",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5069",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.item_variant",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "item_variant",
                          "signature": "item_variant?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5076,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5076",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5076",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.location_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "location_id",
                          "signature": "location_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5089,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5089",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5089",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/** @deprecated Use item_name instead. */",
                          ],
                          "id": "firebase.analytics.Item.name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "name",
                          "signature": "name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5097,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5097",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5097",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.price",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "price",
                          "signature": "price?: Currency;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5077,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5077",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5077",
                          },
                          "type": "Currency",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.promotion_id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "promotion_id",
                          "signature": "promotion_id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5087,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5087",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5087",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.promotion_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "promotion_name",
                          "signature": "promotion_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5088,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5088",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5088",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Item.quantity",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "quantity",
                          "signature": "quantity?: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5078,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5078",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5078",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "Item",
                    "signature": "interface Item {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5067,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5067",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5067",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/** @deprecated Use Item instead. */",
                    ],
                    "id": "firebase.analytics.Promotion",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Promotion.creative_name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "creative_name",
                          "signature": "creative_name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5102,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5102",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5102",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Promotion.creative_slot",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "creative_slot",
                          "signature": "creative_slot?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5103,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5103",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5103",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Promotion.id",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "id",
                          "signature": "id?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5104,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5104",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5104",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.analytics.Promotion.name",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "name",
                          "signature": "name?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5105,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5105",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5105",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "Promotion",
                    "signature": "interface Promotion {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5101,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5101",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5101",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Specifies custom options for your Firebase Analytics instance.
   * You must set these before initializing \`firebase.analytics()\`.
   */",
                    ],
                    "id": "firebase.analytics.SettingsOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/** Sets custom name for \`dataLayer\` array used by gtag. */",
                          ],
                          "id": "firebase.analytics.SettingsOptions.dataLayerName",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "dataLayerName",
                          "signature": "dataLayerName?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4926,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4926",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4926",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/** Sets custom name for \`gtag\` function. */",
                          ],
                          "id": "firebase.analytics.SettingsOptions.gtagName",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "gtagName",
                          "signature": "gtagName?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4924,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4924",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4924",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "SettingsOptions",
                    "signature": "interface SettingsOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4922,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4922",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4922",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [
                  Object {
                    "docs": Array [],
                    "id": "firebase.analytics.Currency",
                    "kind": "TypeAliasDeclaration",
                    "name": "Currency",
                    "signature": "type Currency = string | number;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5065,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5065",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5065",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.analytics.CustomEventName",
                    "kind": "TypeAliasDeclaration",
                    "name": "CustomEventName",
                    "signature": "type CustomEventName<T> = T extends EventNameString ? never : T;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4904,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4904",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4904",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Type for standard gtag.js event names. \`logEvent\` also accepts any
   * custom string and interprets it as a custom event name.
   */",
                    ],
                    "id": "firebase.analytics.EventNameString",
                    "kind": "TypeAliasDeclaration",
                    "name": "EventNameString",
                    "signature": "type EventNameString =
    | 'add_payment_info'
    | 'add_shipping_info'
    | 'add_to_cart'
    | 'add_to_wishlist'
    | 'begin_checkout'
    | 'checkout_progress'
    | 'exception'
    | 'generate_lead'
    | 'login'
    | 'page_view'
    | 'purchase'
    | 'refund'
    | 'remove_from_cart'
    | 'screen_view'
    | 'search'
    | 'select_content'
    | 'select_item'
    | 'select_promotion'
    | 'set_checkout_option'
    | 'share'
    | 'sign_up'
    | 'timing_complete'
    | 'view_cart'
    | 'view_item'
    | 'view_item_list'
    | 'view_promotion'
    | 'view_search_results';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4999,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4999",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4999",
                    },
                  },
                ],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.analytics",
              "kind": "NamespaceDeclaration",
              "name": "firebase.analytics",
              "signature": "namespace firebase.analytics {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 4432,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4432",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4432",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * A Firebase App holds the initialization information for a collection of
   * services.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.initializeApp|\`firebase.initializeApp()\`} to create an app.
   *
   */",
                    ],
                    "id": "firebase.app.App",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.analytics.Analytics \`Analytics\`} service for the
     * current app. If the current app is not the default one, throws an error.
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * const analytics = app.analytics();
     * // The above is shorthand for:
     * // const analytics = firebase.analytics(app);
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.analytics",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "analytics",
                          "signature": "analytics: () => firebase.analytics.Analytics;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1452,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1452",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1452",
                          },
                          "type": "() => firebase.analytics.Analytics",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.auth.Auth \`Auth\`} service for the current app.
     *
     * @example
     * \`\`\`javascript
     * var auth = app.auth();
     * // The above is shorthand for:
     * // var auth = firebase.auth(app);
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.auth",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "auth",
                          "signature": "auth: () => firebase.auth.Auth;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1299,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1299",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1299",
                          },
                          "type": "() => firebase.auth.Auth",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.database.Database \`Database\`} service for the
     * current app.
     *
     * @example
     * \`\`\`javascript
     * var database = app.database();
     * // The above is shorthand for:
     * // var database = firebase.database(app);
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.database",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "database",
                          "signature": "database: (url?: string) => firebase.database.Database;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1311,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1311",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1311",
                          },
                          "type": "(url?: string) => firebase.database.Database",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Renders this app unusable and frees the resources of all associated
     * services.
     *
     * @example
     * \`\`\`javascript
     * app.delete()
     *   .then(function() {
     *     console.log(\\"App deleted successfully\\");
     *   })
     *   .catch(function(error) {
     *     console.log(\\"Error deleting app:\\", error);
     *   });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.delete",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "delete",
                          "signature": "delete: () => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1327,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1327",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1327",
                          },
                          "type": "() => Promise<any>",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.app.App.firestore",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "firestore",
                          "signature": "firestore: () => firebase.firestore.Firestore;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1410,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1410",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1410",
                          },
                          "type": "() => firebase.firestore.Firestore",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.app.App.functions",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "functions",
                          "signature": "functions: (region?: string) => firebase.functions.Functions;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1411,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1411",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1411",
                          },
                          "type": "(region?: string) => firebase.functions.Functions",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.installations.Installations \`Installations\`} service for the
     * current app.
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * const installations = app.installations();
     * // The above is shorthand for:
     * // const installations = firebase.installations(app);
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.installations",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "installations",
                          "signature": "installations: () => firebase.installations.Installations;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1341,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1341",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1341",
                          },
                          "type": "() => firebase.installations.Installations",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.messaging.Messaging \`Messaging\`} service for the
     * current app.
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * var messaging = app.messaging();
     * // The above is shorthand for:
     * // var messaging = firebase.messaging(app);
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.messaging",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "messaging",
                          "signature": "messaging: () => firebase.messaging.Messaging;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1355,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1355",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1355",
                          },
                          "type": "() => firebase.messaging.Messaging",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.performance.Performance \`Performance\`} service for the
     * current app. If the current app is not the default one, throws an error.
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * const perf = app.performance();
     * // The above is shorthand for:
     * // const perf = firebase.performance(app);
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.performance",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "performance",
                          "signature": "performance: () => firebase.performance.Performance;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1425,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1425",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1425",
                          },
                          "type": "() => firebase.performance.Performance",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.remoteConfig.RemoteConfig \`RemoteConfig\`} instance.
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * const rc = app.remoteConfig();
     * // The above is shorthand for:
     * // const rc = firebase.remoteConfig(app);
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.remoteConfig",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "remoteConfig",
                          "signature": "remoteConfig: () => firebase.remoteConfig.RemoteConfig;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1438,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1438",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1438",
                          },
                          "type": "() => firebase.remoteConfig.RemoteConfig",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link firebase.storage.Storage \`Storage\`} service for the current
     * app, optionally initialized with a custom storage bucket.
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * var storage = app.storage();
     * // The above is shorthand for:
     * // var storage = firebase.storage(app);
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * var storage = app.storage(\\"gs://your-app.appspot.com\\");
     * \`\`\`
     *
     * @param url The gs:// url to your Firebase Storage Bucket.
     *     If not passed, uses the app's default Storage Bucket.
     */",
                          ],
                          "id": "firebase.app.App.storage",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "storage",
                          "signature": "storage: (url?: string) => firebase.storage.Storage;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1409,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1409",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1409",
                          },
                          "type": "(url?: string) => firebase.storage.Storage",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The (read-only) name for this app.
     *
     * The default app's name is \`\\"[DEFAULT]\\"\`.
     *
     * @example
     * \`\`\`javascript
     * // The default app's name is \\"[DEFAULT]\\"
     * firebase.initializeApp(defaultAppConfig);
     * console.log(firebase.app().name);  // \\"[DEFAULT]\\"
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // A named app's name is what you provide to initializeApp()
     * var otherApp = firebase.initializeApp(otherAppConfig, \\"other\\");
     * console.log(otherApp.name);  // \\"other\\"
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.name",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "name",
                          "signature": "name: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1375,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1375",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1375",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The (read-only) configuration options for this app. These are the original
     * parameters given in
     * {@link firebase.initializeApp \`firebase.initializeApp()\`}.
     *
     * @example
     * \`\`\`javascript
     * var app = firebase.initializeApp(config);
     * console.log(app.options.databaseURL === config.databaseURL);  // true
     * \`\`\`
     */",
                          ],
                          "id": "firebase.app.App.options",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "options",
                          "signature": "options: Object;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1387,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1387",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1387",
                          },
                          "type": "Object",
                        },
                      ],
                    },
                    "name": "App",
                    "signature": "interface App {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1288,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1288",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1288",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.app",
              "kind": "NamespaceDeclaration",
              "name": "firebase.app",
              "signature": "namespace firebase.app {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1279,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1279",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1279",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * A utility class to parse email action URLs.
   */",
                    ],
                    "id": "firebase.auth.ActionCodeURL",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Parses the email action link string and returns an ActionCodeURL object
     * if the link is valid, otherwise returns null.
     *
     * @param link The email action link string.
     * @return The ActionCodeURL object, or null if the link is invalid.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeURL.parseLink",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "parseLink",
                          "signature": "static parseLink: (link: string) => ActionCodeURL;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1936,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1936",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1936",
                          },
                          "type": "(link: string) => ActionCodeURL",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The API key of the email action link.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeURL.apiKey",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "apiKey",
                          "signature": "apiKey: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1911,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1911",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1911",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The action code of the email action link.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeURL.code",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "code",
                          "signature": "code: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1915,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1915",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1915",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The continue URL of the email action link. Null if not provided.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeURL.continueUrl",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "continueUrl",
                          "signature": "continueUrl: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1919,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1919",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1919",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The language code of the email action link. Null if not provided.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeURL.languageCode",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "languageCode",
                          "signature": "languageCode: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1923,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1923",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1923",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The action performed by the email action link. It returns from one
     * of the types from {@link firebase.auth.ActionCodeInfo}.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeURL.operation",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "operation",
                          "signature": "operation: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1928,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1928",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1928",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The tenant ID of the email action link. Null if the email action
     * is from the parent project.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeURL.tenantId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "tenantId",
                          "signature": "tenantId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1941,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1941",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1941",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "ActionCodeURL",
                    "signature": "class ActionCodeURL {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1906,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1906",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1906",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Interface that represents the credentials returned by an auth provider.
   * Implementations specify the details about each auth provider's credential
   * requirements.
   *
   */",
                    ],
                    "id": "firebase.auth.AuthCredential",
                    "isAbstract": true,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Static method to deserialize a JSON representation of an object into an
     * {@link firebase.auth.AuthCredential}. Input can be either Object or the
     * stringified representation of the object. When string is provided,
     * JSON.parse would be called first. If the JSON input does not represent
     * an\`AuthCredential\`, null is returned.
     * @param json The plain object representation of an
     *     AuthCredential.
     */",
                          ],
                          "id": "firebase.auth.AuthCredential.fromJSON",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "fromJSON",
                          "signature": "static fromJSON: (json: Object | string) => AuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3201,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3201",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3201",
                          },
                          "type": "(json: Object | string) => AuthCredential",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a JSON-serializable representation of this object.
     */",
                          ],
                          "id": "firebase.auth.AuthCredential.toJSON",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "toJSON",
                          "signature": "toJSON: () => Object;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3191,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3191",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3191",
                          },
                          "type": "() => Object",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The authentication provider ID for the credential.
     * For example, 'facebook.com', or 'google.com'.
     */",
                          ],
                          "id": "firebase.auth.AuthCredential.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3180,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3180",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3180",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The authentication sign in method for the credential.
     * For example, 'password', or 'emailLink. This corresponds to the sign-in
     * method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     */",
                          ],
                          "id": "firebase.auth.AuthCredential.signInMethod",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "signInMethod",
                          "signature": "signInMethod: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3187,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3187",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3187",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "AuthCredential",
                    "signature": "abstract class AuthCredential {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3175,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3175",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3175",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Email and password auth provider implementation.
   *
   * To authenticate: {@link firebase.auth.Auth.createUserWithEmailAndPassword}
   * and {@link firebase.auth.Auth.signInWithEmailAndPassword}.
   */",
                    ],
                    "id": "firebase.auth.EmailAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @example
     * \`\`\`javascript
     * var cred = firebase.auth.EmailAuthProvider.credential(
     *     email,
     *     password
     * );
     * \`\`\`
     *
     * @param email Email address.
     * @param password User account password.
     * @return The auth provider credential.
     */",
                          ],
                          "id": "firebase.auth.EmailAuthProvider.credential",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "credential",
                          "signature": "static credential: (email: string, password: string) => AuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3291,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3291",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3291",
                          },
                          "type": "(email: string, password: string) => AuthCredential",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Initialize an \`EmailAuthProvider\` credential using an email and an email link
     * after a sign in with email link operation.
     *
     * @example
     * \`\`\`javascript
     * var cred = firebase.auth.EmailAuthProvider.credentialWithLink(
     *     email,
     *     emailLink
     * );
     * \`\`\`
     *
     * @param email Email address.
     * @param emailLink Sign-in email link.
     * @return The auth provider credential.
     */",
                          ],
                          "id": "firebase.auth.EmailAuthProvider.credentialWithLink",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "credentialWithLink",
                          "signature": "static credentialWithLink: (email: string, emailLink: string) => AuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3311,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3311",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3311",
                          },
                          "type": "(email: string, emailLink: string) => AuthCredential",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * This corresponds to the sign-in method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     */",
                          ],
                          "id": "firebase.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "EMAIL_LINK_SIGN_IN_METHOD",
                          "signature": "static EMAIL_LINK_SIGN_IN_METHOD: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3277,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3277",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3277",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * This corresponds to the sign-in method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     */",
                          ],
                          "id": "firebase.auth.EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "EMAIL_PASSWORD_SIGN_IN_METHOD",
                          "signature": "static EMAIL_PASSWORD_SIGN_IN_METHOD: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3272,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3272",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3272",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.EmailAuthProvider.PROVIDER_ID",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "PROVIDER_ID",
                          "signature": "static PROVIDER_ID: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3267,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3267",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3267",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "EmailAuthProvider",
                    "signature": "class EmailAuthProvider extends EmailAuthProvider_Instance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3266,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3266",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3266",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * @hidden
   */",
                    ],
                    "id": "firebase.auth.EmailAuthProvider_Instance",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.EmailAuthProvider_Instance.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3320,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3320",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3320",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "EmailAuthProvider_Instance",
                    "signature": "class EmailAuthProvider_Instance implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3319,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3319",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3319",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Facebook auth provider.
   *
   * @example
   * \`\`\`javascript
   * // Sign in using a redirect.
   * firebase.auth().getRedirectResult().then(function(result) {
   *   if (result.credential) {
   *     // This gives you a Google Access Token.
   *     var token = result.credential.accessToken;
   *   }
   *   var user = result.user;
   * })
   * // Start a sign in process for an unauthenticated user.
   * var provider = new firebase.auth.FacebookAuthProvider();
   * provider.addScope('user_birthday');
   * firebase.auth().signInWithRedirect(provider);
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Sign in using a popup.
   * var provider = new firebase.auth.FacebookAuthProvider();
   * provider.addScope('user_birthday');
   * firebase.auth().signInWithPopup(provider).then(function(result) {
   *   // This gives you a Facebook Access Token.
   *   var token = result.credential.accessToken;
   *   // The signed-in user info.
   *   var user = result.user;
   * });
   * \`\`\`
   *
   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state
   * changes.
   */",
                    ],
                    "id": "firebase.auth.FacebookAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @example
     * \`\`\`javascript
     * var cred = firebase.auth.FacebookAuthProvider.credential(
     *     // \`event\` from the Facebook auth.authResponseChange callback.
     *     event.authResponse.accessToken
     * );
     * \`\`\`
     *
     * @param token Facebook access token.
     */",
                          ],
                          "id": "firebase.auth.FacebookAuthProvider.credential",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "credential",
                          "signature": "static credential: (token: string) => OAuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3550,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3550",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3550",
                          },
                          "type": "(token: string) => OAuthCredential",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * This corresponds to the sign-in method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     */",
                          ],
                          "id": "firebase.auth.FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "FACEBOOK_SIGN_IN_METHOD",
                          "signature": "static FACEBOOK_SIGN_IN_METHOD: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3538,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3538",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3538",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.FacebookAuthProvider.PROVIDER_ID",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "PROVIDER_ID",
                          "signature": "static PROVIDER_ID: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3533,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3533",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3533",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "FacebookAuthProvider",
                    "signature": "class FacebookAuthProvider extends FacebookAuthProvider_Instance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3532,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3532",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3532",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * @hidden
   */",
                    ],
                    "id": "firebase.auth.FacebookAuthProvider_Instance",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @param scope Facebook OAuth scope.
     * @return The provider instance itself.
     */",
                          ],
                          "id": "firebase.auth.FacebookAuthProvider_Instance.addScope",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "addScope",
                          "signature": "addScope: (scope: string) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3560,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3560",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3560",
                          },
                          "type": "(scope: string) => AuthProvider",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets the OAuth custom parameters to pass in a Facebook OAuth request for
     * popup and redirect sign-in operations.
     * Valid parameters include 'auth_type', 'display' and 'locale'.
     * For a detailed list, check the
     * {@link https://goo.gl/pve4fo Facebook}
     * documentation.
     * Reserved required OAuth 2.0 parameters such as 'client_id', 'redirect_uri',
     * 'scope', 'response_type' and 'state' are not allowed and will be ignored.
     * @param customOAuthParameters The custom OAuth parameters to pass
     *     in the OAuth request.
     * @return The provider instance itself.
     */",
                          ],
                          "id": "firebase.auth.FacebookAuthProvider_Instance.setCustomParameters",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "setCustomParameters",
                          "signature": "setCustomParameters: (customOAuthParameters: Object) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3575,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3575",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3575",
                          },
                          "type": "(customOAuthParameters: Object) => AuthProvider",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.FacebookAuthProvider_Instance.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3561,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3561",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3561",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "FacebookAuthProvider_Instance",
                    "signature": "class FacebookAuthProvider_Instance implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3555,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3555",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3555",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * GitHub auth provider.
   *
   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect
   * directly, or use the signInWithPopup handler:
   *
   * @example
   * \`\`\`javascript
   * // Using a redirect.
   * firebase.auth().getRedirectResult().then(function(result) {
   *   if (result.credential) {
   *     // This gives you a GitHub Access Token.
   *     var token = result.credential.accessToken;
   *   }
   *   var user = result.user;
   * }).catch(function(error) {
   *   // Handle Errors here.
   *   var errorCode = error.code;
   *   var errorMessage = error.message;
   *   // The email of the user's account used.
   *   var email = error.email;
   *   // The firebase.auth.AuthCredential type that was used.
   *   var credential = error.credential;
   *   if (errorCode === 'auth/account-exists-with-different-credential') {
   *     alert('You have signed up with a different provider for that email.');
   *     // Handle linking here if your app allows it.
   *   } else {
   *     console.error(error);
   *   }
   * });
   *
   * // Start a sign in process for an unauthenticated user.
   * var provider = new firebase.auth.GithubAuthProvider();
   * provider.addScope('repo');
   * firebase.auth().signInWithRedirect(provider);
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // With popup.
   * var provider = new firebase.auth.GithubAuthProvider();
   *  provider.addScope('repo');
   *  firebase.auth().signInWithPopup(provider).then(function(result) {
   *    // This gives you a GitHub Access Token.
   *    var token = result.credential.accessToken;
   *    // The signed-in user info.
   *    var user = result.user;
   *  }).catch(function(error) {
   *    // Handle Errors here.
   *    var errorCode = error.code;
   *    var errorMessage = error.message;
   *    // The email of the user's account used.
   *    var email = error.email;
   *    // The firebase.auth.AuthCredential type that was used.
   *    var credential = error.credential;
   *    if (errorCode === 'auth/account-exists-with-different-credential') {
   *      alert('You have signed up with a different provider for that email.');
   *      // Handle linking here if your app allows it.
   *    } else {
   *      console.error(error);
   *    }
   *  });
   * \`\`\`
   *
   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state
   * changes.
   */",
                    ],
                    "id": "firebase.auth.GithubAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @example
     * \`\`\`javascript
     * var cred = firebase.auth.FacebookAuthProvider.credential(
     *     // \`event\` from the Facebook auth.authResponseChange callback.
     *     event.authResponse.accessToken
     * );
     * \`\`\`
     *
     * @param token Github access token.
     * @return {!firebase.auth.OAuthCredential} The auth provider credential.
     */",
                          ],
                          "id": "firebase.auth.GithubAuthProvider.credential",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "credential",
                          "signature": "static credential: (token: string) => OAuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3666,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3666",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3666",
                          },
                          "type": "(token: string) => OAuthCredential",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * This corresponds to the sign-in method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     */",
                          ],
                          "id": "firebase.auth.GithubAuthProvider.GITHUB_SIGN_IN_METHOD",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "GITHUB_SIGN_IN_METHOD",
                          "signature": "static GITHUB_SIGN_IN_METHOD: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3653,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3653",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3653",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.GithubAuthProvider.PROVIDER_ID",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "PROVIDER_ID",
                          "signature": "static PROVIDER_ID: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3648,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3648",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3648",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "GithubAuthProvider",
                    "signature": "class GithubAuthProvider extends GithubAuthProvider_Instance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3647,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3647",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3647",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * @hidden
   */",
                    ],
                    "id": "firebase.auth.GithubAuthProvider_Instance",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @param scope Github OAuth scope.
     * @return The provider instance itself.
     */",
                          ],
                          "id": "firebase.auth.GithubAuthProvider_Instance.addScope",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "addScope",
                          "signature": "addScope: (scope: string) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3676,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3676",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3676",
                          },
                          "type": "(scope: string) => AuthProvider",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets the OAuth custom parameters to pass in a GitHub OAuth request for popup
     * and redirect sign-in operations.
     * Valid parameters include 'allow_signup'.
     * For a detailed list, check the
     * {@link https://developer.github.com/v3/oauth/ GitHub} documentation.
     * Reserved required OAuth 2.0 parameters such as 'client_id', 'redirect_uri',
     * 'scope', 'response_type' and 'state' are not allowed and will be ignored.
     * @param customOAuthParameters The custom OAuth parameters to pass
     *     in the OAuth request.
     * @return The provider instance itself.
     */",
                          ],
                          "id": "firebase.auth.GithubAuthProvider_Instance.setCustomParameters",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "setCustomParameters",
                          "signature": "setCustomParameters: (customOAuthParameters: Object) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3690,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3690",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3690",
                          },
                          "type": "(customOAuthParameters: Object) => AuthProvider",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.GithubAuthProvider_Instance.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3677,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3677",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3677",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "GithubAuthProvider_Instance",
                    "signature": "class GithubAuthProvider_Instance implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3671,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3671",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3671",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Google auth provider.
   *
   * @example
   * \`\`\`javascript
   * // Using a redirect.
   * firebase.auth().getRedirectResult().then(function(result) {
   *   if (result.credential) {
   *     // This gives you a Google Access Token.
   *     var token = result.credential.accessToken;
   *   }
   *   var user = result.user;
   * });
   *
   * // Start a sign in process for an unauthenticated user.
   * var provider = new firebase.auth.GoogleAuthProvider();
   * provider.addScope('profile');
   * provider.addScope('email');
   * firebase.auth().signInWithRedirect(provider);
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Using a popup.
   * var provider = new firebase.auth.GoogleAuthProvider();
   * provider.addScope('profile');
   * provider.addScope('email');
   * firebase.auth().signInWithPopup(provider).then(function(result) {
   *  // This gives you a Google Access Token.
   *  var token = result.credential.accessToken;
   *  // The signed-in user info.
   *  var user = result.user;
   * });
   * \`\`\`
   *
   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state
   * changes.
   */",
                    ],
                    "id": "firebase.auth.GoogleAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates a credential for Google. At least one of ID token and access token
     * is required.
     *
     * @example
     * \`\`\`javascript
     * // \\\\\`googleUser\\\\\` from the onsuccess Google Sign In callback.
     * var credential = firebase.auth.GoogleAuthProvider.credential(
                  googleUser.getAuthResponse().id_token);
     * firebase.auth().signInWithCredential(credential)
     * \`\`\`
     * @param idToken Google ID token.
     * @param accessToken Google access token.
     * @return The auth provider credential.
     */",
                          ],
                          "id": "firebase.auth.GoogleAuthProvider.credential",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "credential",
                          "signature": "static credential: (
    idToken?: string | null,
    accessToken?: string | null
) => OAuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3755,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3755",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3755",
                          },
                          "type": "(idToken?: string | null, accessToken?: string | null) => OAuthCredential",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * This corresponds to the sign-in method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     */",
                          ],
                          "id": "firebase.auth.GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "GOOGLE_SIGN_IN_METHOD",
                          "signature": "static GOOGLE_SIGN_IN_METHOD: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3739,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3739",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3739",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.GoogleAuthProvider.PROVIDER_ID",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "PROVIDER_ID",
                          "signature": "static PROVIDER_ID: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3734,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3734",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3734",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "GoogleAuthProvider",
                    "signature": "class GoogleAuthProvider extends GoogleAuthProvider_Instance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3733,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3733",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3733",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * @hidden
   */",
                    ],
                    "id": "firebase.auth.GoogleAuthProvider_Instance",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @param scope Google OAuth scope.
     * @return The provider instance itself.
     */",
                          ],
                          "id": "firebase.auth.GoogleAuthProvider_Instance.addScope",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "addScope",
                          "signature": "addScope: (scope: string) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3768,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3768",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3768",
                          },
                          "type": "(scope: string) => AuthProvider",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets the OAuth custom parameters to pass in a Google OAuth request for popup
     * and redirect sign-in operations.
     * Valid parameters include 'hd', 'hl', 'include_granted_scopes', 'login_hint'
     * and 'prompt'.
     * For a detailed list, check the
     * {@link https://goo.gl/Xo01Jm Google}
     * documentation.
     * Reserved required OAuth 2.0 parameters such as 'client_id', 'redirect_uri',
     * 'scope', 'response_type' and 'state' are not allowed and will be ignored.
     * @param customOAuthParameters The custom OAuth parameters to pass
     *     in the OAuth request.
     * @return The provider instance itself.
     */",
                          ],
                          "id": "firebase.auth.GoogleAuthProvider_Instance.setCustomParameters",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "setCustomParameters",
                          "signature": "setCustomParameters: (customOAuthParameters: Object) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3784,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3784",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3784",
                          },
                          "type": "(customOAuthParameters: Object) => AuthProvider",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.GoogleAuthProvider_Instance.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3769,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3769",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3769",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "GoogleAuthProvider_Instance",
                    "signature": "class GoogleAuthProvider_Instance implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3763,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3763",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3763",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * The base class for asserting ownership of a second factor. This is used to
   * facilitate enrollment of a second factor on an existing user
   * or sign-in of a user who already verified the first factor.
   *
   */",
                    ],
                    "id": "firebase.auth.MultiFactorAssertion",
                    "isAbstract": true,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The identifier of the second factor.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorAssertion.factorId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "factorId",
                          "signature": "factorId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3957,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3957",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3957",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "MultiFactorAssertion",
                    "signature": "abstract class MultiFactorAssertion {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3953,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3953",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3953",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * The class used to facilitate recovery from
   * {@link firebase.auth.MultiFactorError} when a user needs to provide a second
   * factor to sign in.
   *
   * @example
   * \`\`\`javascript
   * firebase.auth().signInWithEmailAndPassword()
   *     .then(function(result) {
   *       // User signed in. No 2nd factor challenge is needed.
   *     })
   *     .catch(function(error) {
   *       if (error.code == 'auth/multi-factor-auth-required') {
   *         var resolver = error.resolver;
   *         // Show UI to let user select second factor.
   *         var multiFactorHints = resolver.hints;
   *       } else {
   *         // Handle other errors.
   *       }
   *     });
   *
   * // The enrolled second factors that can be used to complete
   * // sign-in are returned in the \`MultiFactorResolver.hints\` list.
   * // UI needs to be presented to allow the user to select a second factor
   * // from that list.
   *
   * var selectedHint = // ; selected from multiFactorHints
   * var phoneAuthProvider = new firebase.auth.PhoneAuthProvider();
   * var phoneInfoOptions = {
   *   multiFactorHint: selectedHint,
   *   session: resolver.session
   * };
   * phoneAuthProvider.verifyPhoneNumber(
   *   phoneInfoOptions,
   *   appVerifier
   * ).then(function(verificationId) {
   *   // store verificationID and show UI to let user enter verification code.
   * });
   *
   * // UI to enter verification code and continue.
   * // Continue button click handler
   * var phoneAuthCredential =
   *     firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);
   * var multiFactorAssertion =
   *     firebase.auth.PhoneMultiFactorGenerator.assertion(phoneAuthCredential);
   * resolver.resolveSignIn(multiFactorAssertion)
   *     .then(function(userCredential) {
   *       // User signed in.
   *     });
   * \`\`\`
   */",
                    ],
                    "id": "firebase.auth.MultiFactorResolver",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * A helper function to help users complete sign in with a second factor
     * using an {@link firebase.auth.MultiFactorAssertion} confirming the user
     * successfully completed the second factor challenge.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the verification code is not valid.</dd>
     * <dt>auth/missing-verification-code</dt>
     * <dd>Thrown if the verification code is missing.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     ID of the credential is not valid.</dd>
     * <dt>auth/missing-verification-id</dt>
     * <dd>Thrown if the verification ID is missing.</dd>
     * <dt>auth/code-expired</dt>
     * <dd>Thrown if the verification code has expired.</dd>
     * <dt>auth/invalid-multi-factor-session</dt>
     * <dd>Thrown if the request does not contain a valid proof of first factor
     *     successful sign-in.</dd>
     * <dt>auth/missing-multi-factor-session</dt>
     * <dd>Thrown if The request is missing proof of first factor successful
     *     sign-in.</dd>
     * </dl>
     *
     * @param assertion The multi-factor assertion to resolve sign-in with.
     * @return The promise that resolves with the user credential object.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorResolver.resolveSignIn",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "resolveSignIn",
                          "signature": "resolveSignIn: (assertion: MultiFactorAssertion) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4152,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4152",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4152",
                          },
                          "type": "(assertion: MultiFactorAssertion) => Promise<UserCredential>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The Auth instance used to sign in with the first factor.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorResolver.auth",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "auth",
                          "signature": "auth: Auth;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4111,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4111",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4111",
                          },
                          "type": "Auth",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The list of hints for the second factors needed to complete the sign-in
     * for the current session.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorResolver.hints",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "hints",
                          "signature": "hints: MultiFactorInfo[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4121,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4121",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4121",
                          },
                          "type": "MultiFactorInfo[]",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The session identifier for the current sign-in flow, which can be used
     * to complete the second factor sign-in.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorResolver.session",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "session",
                          "signature": "session: MultiFactorSession;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4116,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4116",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4116",
                          },
                          "type": "MultiFactorSession",
                        },
                      ],
                    },
                    "name": "MultiFactorResolver",
                    "signature": "class MultiFactorResolver {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4106,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4106",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4106",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * The multi-factor session object used for enrolling a second factor on a
   * user or helping sign in an enrolled user with a second factor.
   */",
                    ],
                    "id": "firebase.auth.MultiFactorSession",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [],
                    },
                    "name": "MultiFactorSession",
                    "signature": "class MultiFactorSession {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4161,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4161",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4161",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Interface that represents the OAuth credentials returned by an OAuth
   * provider. Implementations specify the details about each auth provider's
   * credential requirements.
   *
   */",
                    ],
                    "id": "firebase.auth.OAuthCredential",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The OAuth access token associated with the credential if it belongs to
     * an OAuth provider, such as \`facebook.com\`, \`twitter.com\`, etc.
     */",
                          ],
                          "id": "firebase.auth.OAuthCredential.accessToken",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "accessToken",
                          "signature": "accessToken?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3221,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3221",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3221",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The OAuth ID token associated with the credential if it belongs to an
     * OIDC provider, such as \`google.com\`.
     */",
                          ],
                          "id": "firebase.auth.OAuthCredential.idToken",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "idToken",
                          "signature": "idToken?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3216,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3216",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3216",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The OAuth access token secret associated with the credential if it
     * belongs to an OAuth 1.0 provider, such as \`twitter.com\`.
     */",
                          ],
                          "id": "firebase.auth.OAuthCredential.secret",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "secret",
                          "signature": "secret?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3226,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3226",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3226",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "OAuthCredential",
                    "signature": "class OAuthCredential extends AuthCredential {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3210,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3210",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3210",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [],
                        "id": "firebase.auth.OAuthProvider.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "constructor(providerId: string);",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 3828,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3828",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3828",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * Generic OAuth provider.
   *
   * @example
   * \`\`\`javascript
   * // Using a redirect.
   * firebase.auth().getRedirectResult().then(function(result) {
   *   if (result.credential) {
   *     // This gives you the OAuth Access Token for that provider.
   *     var token = result.credential.accessToken;
   *   }
   *   var user = result.user;
   * });
   *
   * // Start a sign in process for an unauthenticated user.
   * var provider = new firebase.auth.OAuthProvider('google.com');
   * provider.addScope('profile');
   * provider.addScope('email');
   * firebase.auth().signInWithRedirect(provider);
   * \`\`\`
   * @example
   * \`\`\`javascript
   * // Using a popup.
   * var provider = new firebase.auth.OAuthProvider('google.com');
   * provider.addScope('profile');
   * provider.addScope('email');
   * firebase.auth().signInWithPopup(provider).then(function(result) {
   *  // This gives you the OAuth Access Token for that provider.
   *  var token = result.credential.accessToken;
   *  // The signed-in user info.
   *  var user = result.user;
   * });
   * \`\`\`
   *
   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state
   * changes.
   * @param providerId The associated provider ID, such as \`github.com\`.
   */",
                    ],
                    "id": "firebase.auth.OAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @param scope Provider OAuth scope to add.
     */",
                          ],
                          "id": "firebase.auth.OAuthProvider.addScope",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "addScope",
                          "signature": "addScope: (scope: string) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3833,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3833",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3833",
                          },
                          "type": "(scope: string) => AuthProvider",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a Firebase credential from a generic OAuth provider's access token or
     * ID token. The raw nonce is required when an ID token with a nonce field is
     * provided. The SHA-256 hash of the raw nonce must match the nonce field in
     * the ID token.
     *
     * @example
     * \`\`\`javascript
     * // \`googleUser\` from the onsuccess Google Sign In callback.
     * // Initialize a generate OAuth provider with a \`google.com\` providerId.
     * var provider = new firebase.auth.OAuthProvider('google.com');
     * var credential = provider.credential({
     *   idToken: googleUser.getAuthResponse().id_token,
     * });
     * firebase.auth().signInWithCredential(credential)
     * \`\`\`
     *
     * @param optionsOrIdToken Either the options object containing
     *     the ID token, access token and raw nonce or the ID token string.
     * @param accessToken The OAuth access token.
     */",
                          ],
                          "id": "firebase.auth.OAuthProvider.credential",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "credential",
                          "signature": "credential: (
    optionsOrIdToken: string | OAuthCredentialOptions,
    accessToken?: string
) => OAuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3855,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3855",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3855",
                          },
                          "type": "(optionsOrIdToken: string | OAuthCredentialOptions, accessToken?: string) => OAuthCredential",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets the OAuth custom parameters to pass in an OAuth request for popup
     * and redirect sign-in operations.
     * For a detailed list, check the
     * reserved required OAuth 2.0 parameters such as \`client_id\`, \`redirect_uri\`,
     * \`scope\`, \`response_type\` and \`state\` are not allowed and will be ignored.
     * @param customOAuthParameters The custom OAuth parameters to pass
     *     in the OAuth request.
     */",
                          ],
                          "id": "firebase.auth.OAuthProvider.setCustomParameters",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "setCustomParameters",
                          "signature": "setCustomParameters: (customOAuthParameters: Object) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3868,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3868",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3868",
                          },
                          "type": "(customOAuthParameters: Object) => AuthProvider",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.OAuthProvider.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3829,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3829",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3829",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "OAuthProvider",
                    "signature": "class OAuthProvider implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3827,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3827",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3827",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Classes that represents the Phone Auth credentials returned by a
   * {@link firebase.auth.PhoneAuthProvider}.
   *
   */",
                    ],
                    "id": "firebase.auth.PhoneAuthCredential",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [],
                    },
                    "name": "PhoneAuthCredential",
                    "signature": "class PhoneAuthCredential extends AuthCredential {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4170,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4170",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4170",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Phone number auth provider.
   *
   * @example
   * \`\`\`javascript
   * // 'recaptcha-container' is the ID of an element in the DOM.
   * var applicationVerifier = new firebase.auth.RecaptchaVerifier(
   *     'recaptcha-container');
   * var provider = new firebase.auth.PhoneAuthProvider();
   * provider.verifyPhoneNumber('+16505550101', applicationVerifier)
   *     .then(function(verificationId) {
   *       var verificationCode = window.prompt('Please enter the verification ' +
   *           'code that was sent to your mobile device.');
   *       return firebase.auth.PhoneAuthProvider.credential(verificationId,
   *           verificationCode);
   *     })
   *     .then(function(phoneCredential) {
   *       return firebase.auth().signInWithCredential(phoneCredential);
   *     });
   * \`\`\`
   * @param auth The Firebase Auth instance in which
   *     sign-ins should occur. Uses the default Auth instance if unspecified.
   */",
                    ],
                    "id": "firebase.auth.PhoneAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates a phone auth credential, given the verification ID from
     * {@link firebase.auth.PhoneAuthProvider.verifyPhoneNumber} and the code
     * that was sent to the user's mobile device.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/missing-verification-code</dt>
     * <dd>Thrown if the verification code is missing.</dd>
     * <dt>auth/missing-verification-id</dt>
     * <dd>Thrown if the verification ID is missing.</dd>
     * </dl>
     *
     * @param verificationId The verification ID returned from
     *     {@link firebase.auth.PhoneAuthProvider.verifyPhoneNumber}.
     * @param verificationCode The verification code sent to the user's
     *     mobile device.
     * @return The auth provider credential.
     */",
                          ],
                          "id": "firebase.auth.PhoneAuthProvider.credential",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "credential",
                          "signature": "static credential: (
    verificationId: string,
    verificationCode: string
) => AuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4223,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4223",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4223",
                          },
                          "type": "(verificationId: string, verificationCode: string) => AuthCredential",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * This corresponds to the sign-in method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     */",
                          ],
                          "id": "firebase.auth.PhoneAuthProvider.PHONE_SIGN_IN_METHOD",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "PHONE_SIGN_IN_METHOD",
                          "signature": "static PHONE_SIGN_IN_METHOD: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4203,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4203",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4203",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneAuthProvider.PROVIDER_ID",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "PROVIDER_ID",
                          "signature": "static PROVIDER_ID: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4198,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4198",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4198",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "PhoneAuthProvider",
                    "signature": "class PhoneAuthProvider extends PhoneAuthProvider_Instance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4197,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4197",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4197",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [],
                        "id": "firebase.auth.PhoneAuthProvider_Instance.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "constructor(auth?: Auth);",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 4232,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4232",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4232",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * @hidden
   */",
                    ],
                    "id": "firebase.auth.PhoneAuthProvider_Instance",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Starts a phone number authentication flow by sending a verification code to
     * the given phone number. Returns an ID that can be passed to
     * {@link firebase.auth.PhoneAuthProvider.credential} to identify this flow.
     *
     * For abuse prevention, this method also requires a
     * {@link firebase.auth.ApplicationVerifier}. The Firebase Auth SDK includes
     * a reCAPTCHA-based implementation, {@link firebase.auth.RecaptchaVerifier}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/captcha-check-failed</dt>
     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if
     *     this method was called from a non-whitelisted domain.</dd>
     * <dt>auth/invalid-phone-number</dt>
     * <dd>Thrown if the phone number has an invalid format.</dd>
     * <dt>auth/missing-phone-number</dt>
     * <dd>Thrown if the phone number is missing.</dd>
     * <dt>auth/quota-exceeded</dt>
     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given phone number has been
     *     disabled.</dd>
     * <dt>auth/maximum-second-factor-count-exceeded</dt>
     * <dd>Thrown if The maximum allowed number of second factors on a user
     *     has been exceeded.</dd>
     * <dt>auth/second-factor-already-in-use</dt>
     * <dd>Thrown if the second factor is already enrolled on this account.</dd>
     * <dt>auth/unsupported-first-factor</dt>
     * <dd>Thrown if the first factor being used to sign in is not supported.</dd>
     * <dt>auth/unverified-email</dt>
     * <dd>Thrown if the email of the account is not verified.</dd>
     * </dl>
     *
     * @param phoneInfoOptions The user's {@link firebase.auth.PhoneInfoOptions}.
     *     The phone number should be in E.164 format (e.g. +16505550101).
     * @param applicationVerifier
     * @return A Promise for the verification ID.
     */",
                          ],
                          "id": "firebase.auth.PhoneAuthProvider_Instance.verifyPhoneNumber",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "verifyPhoneNumber",
                          "signature": "verifyPhoneNumber: (
    phoneInfoOptions: string | PhoneInfoOptions,
    applicationVerifier: ApplicationVerifier
) => Promise<string>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4273,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4273",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4273",
                          },
                          "type": "(phoneInfoOptions: string | PhoneInfoOptions, applicationVerifier: ApplicationVerifier) => Promise<string>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneAuthProvider_Instance.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4233,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4233",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4233",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "PhoneAuthProvider_Instance",
                    "signature": "class PhoneAuthProvider_Instance implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4231,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4231",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4231",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * The class for asserting ownership of a phone second factor.
   */",
                    ],
                    "id": "firebase.auth.PhoneMultiFactorAssertion",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [],
                    },
                    "name": "PhoneMultiFactorAssertion",
                    "signature": "class PhoneMultiFactorAssertion extends firebase.auth.MultiFactorAssertion {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3963,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3963",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3963",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * The class used to initialize {@link firebase.auth.PhoneMultiFactorAssertion}.
   */",
                    ],
                    "id": "firebase.auth.PhoneMultiFactorGenerator",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Initializes the {@link firebase.auth.PhoneMultiFactorAssertion} to confirm ownership
     * of the phone second factor.
     */",
                          ],
                          "id": "firebase.auth.PhoneMultiFactorGenerator.assertion",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "assertion",
                          "signature": "static assertion: (
    phoneAuthCredential: PhoneAuthCredential
) => PhoneMultiFactorAssertion;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3980,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3980",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3980",
                          },
                          "type": "(phoneAuthCredential: PhoneAuthCredential) => PhoneMultiFactorAssertion",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The identifier of the phone second factor: \`phone\`.
     */",
                          ],
                          "id": "firebase.auth.PhoneMultiFactorGenerator.FACTOR_ID",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "FACTOR_ID",
                          "signature": "static FACTOR_ID: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3975,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3975",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3975",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "PhoneMultiFactorGenerator",
                    "signature": "class PhoneMultiFactorGenerator {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3970,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3970",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3970",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * An {@link https://www.google.com/recaptcha/ reCAPTCHA}-based application
   * verifier.
   *
   * @webonly
   *
   * @param container The reCAPTCHA container parameter. This
   *     has different meaning depending on whether the reCAPTCHA is hidden or
   *     visible. For a visible reCAPTCHA the container must be empty. If a string
   *     is used, it has to correspond to an element ID. The corresponding element
   *     must also must be in the DOM at the time of initialization.
   * @param parameters The optional reCAPTCHA parameters. Check the
   *     reCAPTCHA docs for a comprehensive list. All parameters are accepted
   *     except for the sitekey. Firebase Auth backend provisions a reCAPTCHA for
   *     each project and will configure this upon rendering. For an invisible
   *     reCAPTCHA, a size key must have the value 'invisible'.
   * @param app The corresponding Firebase app. If none is
   *     provided, the default Firebase App instance is used. A Firebase App
   *     instance must be initialized with an API key, otherwise an error will be
   *     thrown.
   */",
                    ],
                    "id": "firebase.auth.RecaptchaVerifier",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [],
                    },
                    "name": "RecaptchaVerifier",
                    "signature": "class RecaptchaVerifier extends RecaptchaVerifier_Instance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4300,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4300",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4300",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [],
                        "id": "firebase.auth.RecaptchaVerifier_Instance.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "constructor(container: any, parameters?: Object, app?: app.App);",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 4307,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4307",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4307",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * @webonly
   * @hidden
   */",
                    ],
                    "id": "firebase.auth.RecaptchaVerifier_Instance",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Clears the reCAPTCHA widget from the page and destroys the current instance.
     */",
                          ],
                          "id": "firebase.auth.RecaptchaVerifier_Instance.clear",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "clear",
                          "signature": "clear: () => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4315,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4315",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4315",
                          },
                          "type": "() => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Renders the reCAPTCHA widget on the page.
     * @return A Promise that resolves with the
     *     reCAPTCHA widget ID.
     */",
                          ],
                          "id": "firebase.auth.RecaptchaVerifier_Instance.render",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "render",
                          "signature": "render: () => Promise<number>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4321,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4321",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4321",
                          },
                          "type": "() => Promise<number>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA
     * token.
     * @return A Promise for the reCAPTCHA token.
     */",
                          ],
                          "id": "firebase.auth.RecaptchaVerifier_Instance.verify",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "verify",
                          "signature": "verify: () => Promise<string>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4331,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4331",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4331",
                          },
                          "type": "() => Promise<string>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The application verifier type. For a reCAPTCHA verifier, this is 'recaptcha'.
     */",
                          ],
                          "id": "firebase.auth.RecaptchaVerifier_Instance.type",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "type",
                          "signature": "type: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4325,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4325",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4325",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "RecaptchaVerifier_Instance",
                    "signature": "class RecaptchaVerifier_Instance implements firebase.auth.ApplicationVerifier {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4305,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4305",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4305",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [],
                        "id": "firebase.auth.SAMLAuthProvider.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "constructor(providerId: string);",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 3874,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3874",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3874",
                        },
                      },
                    ],
                    "docs": Array [],
                    "id": "firebase.auth.SAMLAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.SAMLAuthProvider.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3875,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3875",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3875",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "SAMLAuthProvider",
                    "signature": "class SAMLAuthProvider implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3873,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3873",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3873",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Twitter auth provider.
   *
   * @example
   * \`\`\`javascript
   * // Using a redirect.
   * firebase.auth().getRedirectResult().then(function(result) {
   *   if (result.credential) {
   *     // For accessing the Twitter API.
   *     var token = result.credential.accessToken;
   *     var secret = result.credential.secret;
   *   }
   *   var user = result.user;
   * });
   *
   * // Start a sign in process for an unauthenticated user.
   * var provider = new firebase.auth.TwitterAuthProvider();
   * firebase.auth().signInWithRedirect(provider);
   * \`\`\`
   * @example
   * \`\`\`javascript
   * // Using a popup.
   * var provider = new firebase.auth.TwitterAuthProvider();
   * firebase.auth().signInWithPopup(provider).then(function(result) {
   *   // For accessing the Twitter API.
   *   var token = result.credential.accessToken;
   *   var secret = result.credential.secret;
   *   // The signed-in user info.
   *   var user = result.user;
   * });
   * \`\`\`
   *
   * @see {@link firebase.auth.Auth.onAuthStateChanged} to receive sign in state
   * changes.
   */",
                    ],
                    "id": "firebase.auth.TwitterAuthProvider",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * @param token Twitter access token.
     * @param secret Twitter secret.
     * @return The auth provider credential.
     */",
                          ],
                          "id": "firebase.auth.TwitterAuthProvider.credential",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "credential",
                          "signature": "static credential: (token: string, secret: string) => OAuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4382,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4382",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4382",
                          },
                          "type": "(token: string, secret: string) => OAuthCredential",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.TwitterAuthProvider.PROVIDER_ID",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "PROVIDER_ID",
                          "signature": "static PROVIDER_ID: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4370,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4370",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4370",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * This corresponds to the sign-in method identifier as returned in
     * {@link firebase.auth.Auth.fetchSignInMethodsForEmail}.
     *
     */",
                          ],
                          "id": "firebase.auth.TwitterAuthProvider.TWITTER_SIGN_IN_METHOD",
                          "isStatic": true,
                          "kind": "ClassPropertyDeclaration",
                          "name": "TWITTER_SIGN_IN_METHOD",
                          "signature": "static TWITTER_SIGN_IN_METHOD: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4376,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4376",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4376",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "TwitterAuthProvider",
                    "signature": "class TwitterAuthProvider extends TwitterAuthProvider_Instance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4369,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4369",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4369",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * @hidden
   */",
                    ],
                    "id": "firebase.auth.TwitterAuthProvider_Instance",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Sets the OAuth custom parameters to pass in a Twitter OAuth request for popup
     * and redirect sign-in operations.
     * Valid parameters include 'lang'.
     * Reserved required OAuth 1.0 parameters such as 'oauth_consumer_key',
     * 'oauth_token', 'oauth_signature', etc are not allowed and will be ignored.
     * @param customOAuthParameters The custom OAuth parameters to pass
     *     in the OAuth request.
     * @return The provider instance itself.
     */",
                          ],
                          "id": "firebase.auth.TwitterAuthProvider_Instance.setCustomParameters",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "setCustomParameters",
                          "signature": "setCustomParameters: (customOAuthParameters: Object) => AuthProvider;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4402,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4402",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4402",
                          },
                          "type": "(customOAuthParameters: Object) => AuthProvider",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.TwitterAuthProvider_Instance.providerId",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4391,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4391",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4391",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "TwitterAuthProvider_Instance",
                    "signature": "class TwitterAuthProvider_Instance implements firebase.auth.AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4390,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4390",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4390",
                    },
                  },
                ],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * A response from {@link firebase.auth.Auth.checkActionCode}.
   */",
                    ],
                    "id": "firebase.auth.ActionCodeInfo",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The data associated with the action code.
     *
     * For the \`PASSWORD_RESET\`, \`VERIFY_EMAIL\`, and \`RECOVER_EMAIL\` actions, this object
     * contains an \`email\` field with the address the email was sent to.
     *
     * For the RECOVER_EMAIL action, which allows a user to undo an email address
     * change, this object also contains a \`previousEmail\` field with the user account's
     * current email address. After the action completes, the user's email address will
     * revert to the value in the \`email\` field from the value in \`previousEmail\` field.
     *
     * For the VERIFY_AND_CHANGE_EMAIL action, which allows a user to verify the email
     * before updating it, this object contains a \`previousEmail\` field with the user
     * account's email address before updating. After the action completes, the user's
     * email address will be updated to the value in the \`email\` field from the value
     * in \`previousEmail\` field.
     *
     * For the REVERT_SECOND_FACTOR_ADDITION action, which allows a user to unenroll
     * a newly added second factor, this object contains a \`multiFactorInfo\` field with
     * the information about the second factor. For phone second factor, the
     * \`multiFactorInfo\` is a {@link firebase.auth.PhoneMultiFactorInfo} object,
     * which contains the phone number.
     */",
                          ],
                          "id": "firebase.auth.ActionCodeInfo.data",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "data",
                          "signature": "data: {
    email?: string | null;
    /**
     * @deprecated
     * This field is deprecated in favor of previousEmail.
     */
    fromEmail?: string | null;
    multiFactorInfo?: firebase.auth.MultiFactorInfo | null;
    previousEmail?: string | null;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1970,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1970",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1970",
                          },
                          "type": "{ email?: string | null; fromEmail?: string | null; multiFactorInfo?: MultiFactorInfo; previousEmail?: string | null; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The type of operation that generated the action code. This could be:
     * <ul>
     * <li>\`EMAIL_SIGNIN\`: email sign in code generated via
     *     {@link firebase.auth.Auth.sendSignInLinkToEmail}.</li>
     * <li>\`PASSWORD_RESET\`: password reset code generated via
     *     {@link firebase.auth.Auth.sendPasswordResetEmail}.</li>
     * <li>\`RECOVER_EMAIL\`: email change revocation code generated via
     *     {@link firebase.User.updateEmail}.</li>
     * <li>\`REVERT_SECOND_FACTOR_ADDITION\`: revert second factor addition
     *     code generated via
     *     {@link firebase.User.MultiFactorUser.enroll}.</li>
     * <li>\`VERIFY_AND_CHANGE_EMAIL\`: verify and change email code generated
     *     via {@link firebase.User.verifyBeforeUpdateEmail}.</li>
     * <li>\`VERIFY_EMAIL\`: email verification code generated via
     *     {@link firebase.User.sendEmailVerification}.</li>
     * </ul>
     */",
                          ],
                          "id": "firebase.auth.ActionCodeInfo.operation",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "operation",
                          "signature": "operation: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1998,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1998",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1998",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "ActionCodeInfo",
                    "signature": "interface ActionCodeInfo {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1946,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1946",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1946",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A verifier for domain verification and abuse prevention. Currently, the
   * only implementation is {@link firebase.auth.RecaptchaVerifier}.
   */",
                    ],
                    "id": "firebase.auth.ApplicationVerifier",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Executes the verification process.
     * @return A Promise for a token that can be used to
     *     assert the validity of a request.
     */",
                          ],
                          "id": "firebase.auth.ApplicationVerifier.verify",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "verify",
                          "signature": "verify: () => Promise<string>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2069,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2069",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2069",
                          },
                          "type": "() => Promise<string>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Identifies the type of application verifier (e.g. \\"recaptcha\\").
     */",
                          ],
                          "id": "firebase.auth.ApplicationVerifier.type",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "type",
                          "signature": "type: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2063,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2063",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2063",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "ApplicationVerifier",
                    "signature": "interface ApplicationVerifier {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 2059,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2059",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2059",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Auth service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.auth \`firebase.auth()\`}.
   *
   * See
   * {@link https://firebase.google.com/docs/auth/ Firebase Authentication}
   * for a full guide on how to use the Firebase Auth service.
   *
   */",
                    ],
                    "id": "firebase.auth.Auth",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Applies a verification code sent to the user by email or other out-of-band
     * mechanism.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/expired-action-code</dt>
     * <dd>Thrown if the action code has expired.</dd>
     * <dt>auth/invalid-action-code</dt>
     * <dd>Thrown if the action code is invalid. This can happen if the code is
     *     malformed or has already been used.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given action code has been
     *     disabled.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if there is no user corresponding to the action code. This may
     *     have happened if the user was deleted between when the action code was
     *     issued and when this method was called.</dd>
     * </dl>
     *
     * @param code A verification code sent to the user.
     */",
                          ],
                          "id": "firebase.auth.Auth.applyActionCode",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "applyActionCode",
                          "signature": "applyActionCode: (code: string) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2138,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2138",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2138",
                          },
                          "type": "(code: string) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Checks a verification code sent to the user by email or other out-of-band
     * mechanism.
     *
     * Returns metadata about the code.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/expired-action-code</dt>
     * <dd>Thrown if the action code has expired.</dd>
     * <dt>auth/invalid-action-code</dt>
     * <dd>Thrown if the action code is invalid. This can happen if the code is
     *     malformed or has already been used.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given action code has been
     *     disabled.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if there is no user corresponding to the action code. This may
     *     have happened if the user was deleted between when the action code was
     *     issued and when this method was called.</dd>
     * </dl>
     *
     * @param code A verification code sent to the user.
     */",
                          ],
                          "id": "firebase.auth.Auth.checkActionCode",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "checkActionCode",
                          "signature": "checkActionCode: (code: string) => Promise<ActionCodeInfo>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2163,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2163",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2163",
                          },
                          "type": "(code: string) => Promise<ActionCodeInfo>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Completes the password reset process, given a confirmation code and new
     * password.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/expired-action-code</dt>
     * <dd>Thrown if the password reset code has expired.</dd>
     * <dt>auth/invalid-action-code</dt>
     * <dd>Thrown if the password reset code is invalid. This can happen if the
     *     code is malformed or has already been used.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given password reset code has
     *     been disabled.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if there is no user corresponding to the password reset code. This
     *     may have happened if the user was deleted between when the code was
     *     issued and when this method was called.</dd>
     * <dt>auth/weak-password</dt>
     * <dd>Thrown if the new password is not strong enough.</dd>
     * </dl>
     *
     * @param code The confirmation code send via email to the user.
     * @param newPassword The new password.
     */",
                          ],
                          "id": "firebase.auth.Auth.confirmPasswordReset",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "confirmPasswordReset",
                          "signature": "confirmPasswordReset: (code: string, newPassword: string) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2189,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2189",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2189",
                          },
                          "type": "(code: string, newPassword: string) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a new user account associated with the specified email address and
     * password.
     *
     * On successful creation of the user account, this user will also be
     * signed in to your application.
     *
     * User account creation can fail if the account already exists or the password
     * is invalid.
     *
     * Note: The email address acts as a unique identifier for the user and
     * enables an email-based password reset.  This function will create
     * a new user account and set the initial user password.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/email-already-in-use</dt>
     * <dd>Thrown if there already exists an account with the given email
     *     address.</dd>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email address is not valid.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if email/password accounts are not enabled. Enable email/password
     *     accounts in the Firebase Console, under the Auth tab.</dd>
     * <dt>auth/weak-password</dt>
     * <dd>Thrown if the password is not strong enough.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().createUserWithEmailAndPassword(email, password)
     *     .catch(function(error) {
     *   // Handle Errors here.
     *   var errorCode = error.code;
     *   var errorMessage = error.message;
     *   if (errorCode == 'auth/weak-password') {
     *     alert('The password is too weak.');
     *   } else {
     *     alert(errorMessage);
     *   }
     *   console.log(error);
     * });
     * \`\`\`
     * @param email The user's email address.
     * @param password The user's chosen password.
     */",
                          ],
                          "id": "firebase.auth.Auth.createUserWithEmailAndPassword",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "createUserWithEmailAndPassword",
                          "signature": "createUserWithEmailAndPassword: (
    email: string,
    password: string
) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2237,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2237",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2237",
                          },
                          "type": "(email: string, password: string) => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the list of possible sign in methods for the given email address. This
     * is useful to differentiate methods of sign-in for the same provider,
     * eg. \`EmailAuthProvider\` which has 2 methods of sign-in, email/password and
     * email/link.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email address is not valid.</dd>
     * </dl>
     */",
                          ],
                          "id": "firebase.auth.Auth.fetchSignInMethodsForEmail",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "fetchSignInMethodsForEmail",
                          "signature": "fetchSignInMethodsForEmail: (email: string) => Promise<Array<string>>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2258,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2258",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2258",
                          },
                          "type": "(email: string) => Promise<Array<string>>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a UserCredential from the redirect-based sign-in flow.
     *
     * If sign-in succeeded, returns the signed in user. If sign-in was
     * unsuccessful, fails with an error. If no redirect operation was called,
     * returns a UserCredential with a null User.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/account-exists-with-different-credential</dt>
     * <dd>Thrown if there already exists an account with the email address
     *     asserted by the credential. Resolve this by calling
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} with the error.email
     *     and then asking the user to sign in using one of the returned providers.
     *     Once the user is signed in, the original credential retrieved from the
     *     error.credential can be linked to the user with
     *     {@link firebase.User.linkWithCredential} to prevent the user from signing
     *     in again to the original provider via popup or redirect. If you are using
     *     redirects for sign in, save the credential in session storage and then
     *     retrieve on redirect and repopulate the credential using for example
     *     {@link firebase.auth.GoogleAuthProvider.credential} depending on the
     *     credential provider id and complete the link.</dd>
     * <dt>auth/auth-domain-config-required</dt>
     * <dd>Thrown if authDomain configuration is not provided when calling
     *     firebase.initializeApp(). Check Firebase Console for instructions on
     *     determining and passing that field.</dd>
     * <dt>auth/credential-already-in-use</dt>
     * <dd>Thrown if the account corresponding to the credential already exists
     *     among your users, or is already linked to a Firebase User.
     *     For example, this error could be thrown if you are upgrading an anonymous
     *     user to a Google user by linking a Google credential to it and the Google
     *     credential used is already associated with an existing Firebase Google
     *     user.
     *     An <code>error.email</code> and <code>error.credential</code>
     *     ({@link firebase.auth.AuthCredential}) fields are also provided. You can
     *     recover from this error by signing in with that credential directly via
     *     {@link firebase.auth.Auth.signInWithCredential}.</dd>
     * <dt>auth/email-already-in-use</dt>
     * <dd>Thrown if the email corresponding to the credential already exists
     *     among your users. When thrown while linking a credential to an existing
     *     user, an <code>error.email</code> and <code>error.credential</code>
     *     ({@link firebase.auth.AuthCredential}) fields are also provided.
     *     You have to link the credential to the existing user with that email if
     *     you wish to continue signing in with that credential. To do so, call
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to
     *     <code>error.email</code> via one of the providers returned and then
     *     {@link firebase.User.linkWithCredential} the original credential to that
     *     newly signed in user.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if the type of account corresponding to the credential
     *     is not enabled. Enable the account type in the Firebase Console, under
     *     the Auth tab.</dd>
     * <dt>auth/operation-not-supported-in-this-environment</dt>
     * <dd>Thrown if this operation is not supported in the environment your
     *     application is running on. \\"location.protocol\\" must be http or https.
     *     </dd>
     * <dt>auth/timeout</dt>
     * <dd>Thrown typically if the app domain is not authorized for OAuth operations
     *     for your Firebase project. Edit the list of authorized domains from the
     *     Firebase console.</dd>
     * </dl>
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * // First, we perform the signInWithRedirect.
     * // Creates the provider object.
     * var provider = new firebase.auth.FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('email');
     * provider.addScope('user_friends');
     * // Sign in with redirect:
     * auth.signInWithRedirect(provider)
     * ////////////////////////////////////////////////////////////
     * // The user is redirected to the provider's sign in flow...
     * ////////////////////////////////////////////////////////////
     * // Then redirected back to the app, where we check the redirect result:
     * auth.getRedirectResult().then(function(result) {
     *   // The firebase.User instance:
     *   var user = result.user;
     *   // The Facebook firebase.auth.AuthCredential containing the Facebook
     *   // access token:
     *   var credential = result.credential;
     *   // As this API can be used for sign-in, linking and reauthentication,
     *   // check the operationType to determine what triggered this redirect
     *   // operation.
     *   var operationType = result.operationType;
     * }, function(error) {
     *   // The provider's account email, can be used in case of
     *   // auth/account-exists-with-different-credential to fetch the providers
     *   // linked to the email:
     *   var email = error.email;
     *   // The provider's credential:
     *   var credential = error.credential;
     *   // In case of auth/account-exists-with-different-credential error,
     *   // you can fetch the providers using this:
     *   if (error.code === 'auth/account-exists-with-different-credential') {
     *     auth.fetchSignInMethodsForEmail(email).then(function(providers) {
     *       // The returned 'providers' is a list of the available providers
     *       // linked to the email address. Please refer to the guide for a more
     *       // complete explanation on how to recover from this error.
     *     });
     *   }
     * });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.auth.Auth.getRedirectResult",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getRedirectResult",
                          "signature": "getRedirectResult: () => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2371,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2371",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2371",
                          },
                          "type": "() => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Checks if an incoming link is a sign-in with email link.
     */",
                          ],
                          "id": "firebase.auth.Auth.isSignInWithEmailLink",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "isSignInWithEmailLink",
                          "signature": "isSignInWithEmailLink: (emailLink: string) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2263,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2263",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2263",
                          },
                          "type": "(emailLink: string) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Adds an observer for changes to the user's sign-in state.
     *
     * Prior to 4.0.0, this triggered the observer when users were signed in,
     * signed out, or when the user's ID token changed in situations such as token
     * expiry or password change. After 4.0.0, the observer is only triggered
     * on sign-in or sign-out.
     *
     * To keep the old behavior, see {@link firebase.auth.Auth.onIdTokenChanged}.
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().onAuthStateChanged(function(user) {
     *   if (user) {
     *     // User is signed in.
     *   }
     * });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.auth.Auth.onAuthStateChanged",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onAuthStateChanged",
                          "signature": "onAuthStateChanged: (
    nextOrObserver:
        | Observer<any, globalThis.Error>
        | ((a: firebase.User | null) => any),
    error?: (a: Error) => any,
    completed?: firebase.Unsubscribe
) => firebase.Unsubscribe;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2406,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2406",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2406",
                          },
                          "type": "(nextOrObserver: Observer<any, globalThis.Error> | ((a: firebase.User | null) => any), error?: (a: Error) => any, completed?: firebase.Unsubscribe) => firebase.Unsubscribe",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Adds an observer for changes to the signed-in user's ID token, which includes
     * sign-in, sign-out, and token refresh events. This method has the same
     * behavior as {@link firebase.auth.Auth.onAuthStateChanged} had prior to 4.0.0.
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().onIdTokenChanged(function(user) {
     *   if (user) {
     *     // User is signed in or token was refreshed.
     *   }
     * });
     * \`\`\`
     * @param
     *     nextOrObserver An observer object or a function triggered on change.
     * @param error Optional A function
     *     triggered on auth error.
     * @param completed Optional A function triggered when the
     *     observer is removed.
     */",
                          ],
                          "id": "firebase.auth.Auth.onIdTokenChanged",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onIdTokenChanged",
                          "signature": "onIdTokenChanged: (
    nextOrObserver:
        | Observer<any, globalThis.Error>
        | ((a: firebase.User | null) => any),
    error?: (a: Error) => any,
    completed?: firebase.Unsubscribe
) => firebase.Unsubscribe;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2433,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2433",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2433",
                          },
                          "type": "(nextOrObserver: Observer<any, globalThis.Error> | ((a: firebase.User | null) => any), error?: (a: Error) => any, completed?: firebase.Unsubscribe) => firebase.Unsubscribe",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sends a password reset email to the given email address.
     *
     * To complete the password reset, call
     * {@link firebase.auth.Auth.confirmPasswordReset} with the code supplied in the
     * email sent to the user, along with the new password specified by the user.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email address is not valid.</dd>
     * <dt>auth/missing-android-pkg-name</dt>
     * <dd>An Android package name must be provided if the Android app is required
     *     to be installed.</dd>
     * <dt>auth/missing-continue-uri</dt>
     * <dd>A continue URL must be provided in the request.</dd>
     * <dt>auth/missing-ios-bundle-id</dt>
     * <dd>An iOS Bundle ID must be provided if an App Store ID is provided.</dd>
     * <dt>auth/invalid-continue-uri</dt>
     * <dd>The continue URL provided in the request is invalid.</dd>
     * <dt>auth/unauthorized-continue-uri</dt>
     * <dd>The domain of the continue URL is not whitelisted. Whitelist
     *     the domain in the Firebase console.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if there is no user corresponding to the email address.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * var actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *     bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * firebase.auth().sendPasswordResetEmail(
     *     'user@example.com', actionCodeSettings)
     *     .then(function() {
     *       // Password reset email sent.
     *     })
     *     .catch(function(error) {
     *       // Error occurred. Inspect error.code.
     *     });
     * \`\`\`
     *
     * @param email The email address with the password to be reset.
     * @param actionCodeSettings The action
     *     code settings. If specified, the state/continue URL will be set as the
     *     \\"continueUrl\\" parameter in the password reset link. The default password
     *     reset landing page will use this to display a link to go back to the app
     *     if it is installed.
     *     If the actionCodeSettings is not specified, no URL is appended to the
     *     action URL.
     *     The state URL provided must belong to a domain that is whitelisted by the
     *     developer in the console. Otherwise an error will be thrown.
     *     Mobile app redirects will only be applicable if the developer configures
     *     and accepts the Firebase Dynamic Links terms of condition.
     *     The Android package name and iOS bundle ID will be respected only if they
     *     are configured in the same Firebase Auth project used.
     */",
                          ],
                          "id": "firebase.auth.Auth.sendPasswordResetEmail",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "sendPasswordResetEmail",
                          "signature": "sendPasswordResetEmail: (
    email: string,
    actionCodeSettings?: ActionCodeSettings
) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2582,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2582",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2582",
                          },
                          "type": "(email: string, actionCodeSettings?: ActionCodeSettings) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sends a sign-in email link to the user with the specified email.
     *
     * The sign-in operation has to always be completed in the app unlike other out
     * of band email actions (password reset and email verifications). This is
     * because, at the end of the flow, the user is expected to be signed in and
     * their Auth state persisted within the app.
     *
     * To complete sign in with the email link, call
     * {@link firebase.auth.Auth.signInWithEmailLink} with the email address and
     * the email link supplied in the email sent to the user.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/argument-error</dt>
     * <dd>Thrown if handleCodeInApp is false.</dd>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email address is not valid.</dd>
     * <dt>auth/missing-android-pkg-name</dt>
     * <dd>An Android package name must be provided if the Android app is required
     *     to be installed.</dd>
     * <dt>auth/missing-continue-uri</dt>
     * <dd>A continue URL must be provided in the request.</dd>
     * <dt>auth/missing-ios-bundle-id</dt>
     * <dd>An iOS Bundle ID must be provided if an App Store ID is provided.</dd>
     * <dt>auth/invalid-continue-uri</dt>
     * <dd>The continue URL provided in the request is invalid.</dd>
     * <dt>auth/unauthorized-continue-uri</dt>
     * <dd>The domain of the continue URL is not whitelisted. Whitelist
     *     the domain in the Firebase console.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * var actionCodeSettings = {
     *   // The URL to redirect to for sign-in completion. This is also the deep
     *   // link for mobile redirects. The domain (www.example.com) for this URL
     *   // must be whitelisted in the Firebase Console.
     *   url: 'https://www.example.com/finishSignUp?cartId=1234',
     *   iOS: {
     *     bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   // This must be true.
     *   handleCodeInApp: true
     * };
     * firebase.auth().sendSignInLinkToEmail('user@example.com', actionCodeSettings)
     *     .then(function() {
     *       // The link was successfully sent. Inform the user. Save the email
     *       // locally so you don't need to ask the user for it again if they open
     *       // the link on the same device.
     *     })
     *     .catch(function(error) {
     *       // Some error occurred, you can inspect the code: error.code
     *     });
     * \`\`\`
     * @param email The email account to sign in with.
     * @param actionCodeSettings The action
     *     code settings. The action code settings which provides Firebase with
     *     instructions on how to construct the email link. This includes the
     *     sign in completion URL or the deep link for mobile redirects, the mobile
     *     apps to use when the sign-in link is opened on an Android or iOS device.
     *     Mobile app redirects will only be applicable if the developer configures
     *     and accepts the Firebase Dynamic Links terms of condition.
     *     The Android package name and iOS bundle ID will be respected only if they
     *     are configured in the same Firebase Auth project used.
     */",
                          ],
                          "id": "firebase.auth.Auth.sendSignInLinkToEmail",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "sendSignInLinkToEmail",
                          "signature": "sendSignInLinkToEmail: (
    email: string,
    actionCodeSettings: ActionCodeSettings
) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2511,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2511",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2511",
                          },
                          "type": "(email: string, actionCodeSettings: ActionCodeSettings) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Changes the current type of persistence on the current Auth instance for the
     * currently saved Auth session and applies this type of persistence for
     * future sign-in requests, including sign-in with redirect requests. This will
     * return a promise that will resolve once the state finishes copying from one
     * type of storage to the other.
     * Calling a sign-in method after changing persistence will wait for that
     * persistence change to complete before applying it on the new Auth state.
     *
     * This makes it easy for a user signing in to specify whether their session
     * should be remembered or not. It also makes it easier to never persist the
     * Auth state for applications that are shared by other users or have sensitive
     * data.
     *
     * The default for web browser apps and React Native apps is 'local' (provided
     * the browser supports this mechanism) whereas it is 'none' for Node.js backend
     * apps.
     *
     * <h4>Error Codes (thrown synchronously)</h4>
     * <dl>
     * <dt>auth/invalid-persistence-type</dt>
     * <dd>Thrown if the specified persistence type is invalid.</dd>
     * <dt>auth/unsupported-persistence-type</dt>
     * <dd>Thrown if the current environment does not support the specified
     *     persistence type.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)
     *     .then(function() {
     *   // Existing and future Auth states are now persisted in the current
     *   // session only. Closing the window would clear any existing state even if
     *   // a user forgets to sign out.
     * });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.auth.Auth.setPersistence",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setPersistence",
                          "signature": "setPersistence: (persistence: string) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2624,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2624",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2624",
                          },
                          "type": "(persistence: string) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously signs in with the given credentials, and returns any available
     * additional user information, such as user name.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/account-exists-with-different-credential</dt>
     * <dd>Thrown if there already exists an account with the email address
     *     asserted by the credential. Resolve this by calling
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} and then asking the
     *     user to sign in using one of the returned providers. Once the user is
     *     signed in, the original credential can be linked to the user with
     *     {@link firebase.User.linkWithCredential}.</dd>
     * <dt>auth/invalid-credential</dt>
     * <dd>Thrown if the credential is malformed or has expired.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if the type of account corresponding to the credential
     *     is not enabled. Enable the account type in the Firebase Console, under
     *     the Auth tab.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given credential has been
     *     disabled.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if signing in with a credential from
     *     {@link firebase.auth.EmailAuthProvider.credential} and there is no user
     *     corresponding to the given email. </dd>
     * <dt>auth/wrong-password</dt>
     * <dd>Thrown if signing in with a credential from
     *     {@link firebase.auth.EmailAuthProvider.credential} and the password is
     *     invalid for the given email, or if the account corresponding to the email
     *     does not have a password set.</dd>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     code of the credential is not valid.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification
     *     ID of the credential is not valid.</dd>
     * </dl>
     *
     * @deprecated
     * This method is deprecated. Use
     * {@link firebase.auth.Auth.signInWithCredential} instead.
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().signInAndRetrieveDataWithCredential(credential)
     *     .then(function(userCredential) {
     *       console.log(userCredential.additionalUserInfo.username);
     *     });
     * \`\`\`
     * @param credential The auth credential.
     */",
                          ],
                          "id": "firebase.auth.Auth.signInAndRetrieveDataWithCredential",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInAndRetrieveDataWithCredential",
                          "signature": "signInAndRetrieveDataWithCredential: (
    credential: AuthCredential
) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2680,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2680",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2680",
                          },
                          "type": "(credential: AuthCredential) => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously signs in as an anonymous user.
     *
     *
     * If there is already an anonymous user signed in, that user will be returned;
     * otherwise, a new anonymous user identity will be created and returned.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if anonymous accounts are not enabled. Enable anonymous accounts
     *     in the Firebase Console, under the Auth tab.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().signInAnonymously().catch(function(error) {
     *   // Handle Errors here.
     *   var errorCode = error.code;
     *   var errorMessage = error.message;
     *
     *   if (errorCode === 'auth/operation-not-allowed') {
     *     alert('You must enable Anonymous auth in the Firebase Console.');
     *   } else {
     *     console.error(error);
     *   }
     * });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.auth.Auth.signInAnonymously",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInAnonymously",
                          "signature": "signInAnonymously: () => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2712,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2712",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2712",
                          },
                          "type": "() => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously signs in with the given credentials.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/account-exists-with-different-credential</dt>
     * <dd>Thrown if there already exists an account with the email address
     *     asserted by the credential. Resolve this by calling
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} and then asking the
     *     user to sign in using one of the returned providers. Once the user is
     *     signed in, the original credential can be linked to the user with
     *     {@link firebase.User.linkWithCredential}.</dd>
     * <dt>auth/invalid-credential</dt>
     * <dd>Thrown if the credential is malformed or has expired.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if the type of account corresponding to the credential
     *     is not enabled. Enable the account type in the Firebase Console, under
     *     the Auth tab.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given credential has been
     *     disabled.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if signing in with a credential from
     *     {@link firebase.auth.EmailAuthProvider.credential} and there is no user
     *     corresponding to the given email. </dd>
     * <dt>auth/wrong-password</dt>
     * <dd>Thrown if signing in with a credential from
     *     {@link firebase.auth.EmailAuthProvider.credential} and the password is
     *     invalid for the given email, or if the account corresponding to the email
     *     does not have a password set.</dd>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     code of the credential is not valid.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential}  and the verification
     *     ID of the credential is not valid.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().signInWithCredential(credential).catch(function(error) {
     *   // Handle Errors here.
     *   var errorCode = error.code;
     *   var errorMessage = error.message;
     *   // The email of the user's account used.
     *   var email = error.email;
     *   // The firebase.auth.AuthCredential type that was used.
     *   var credential = error.credential;
     *   if (errorCode === 'auth/account-exists-with-different-credential') {
     *     alert('Email already associated with another account.');
     *     // Handle account linking here, if using.
     *   } else {
     *     console.error(error);
     *   }
     *  });
     * \`\`\`
     *
     * @param credential The auth credential.
     */",
                          ],
                          "id": "firebase.auth.Auth.signInWithCredential",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInWithCredential",
                          "signature": "signInWithCredential: (credential: AuthCredential) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2775,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2775",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2775",
                          },
                          "type": "(credential: AuthCredential) => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously signs in using a custom token.
     *
     * Custom tokens are used to integrate Firebase Auth with existing auth systems,
     * and must be generated by the auth backend.
     *
     * Fails with an error if the token is invalid, expired, or not accepted by the
     * Firebase Auth service.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/custom-token-mismatch</dt>
     * <dd>Thrown if the custom token is for a different Firebase App.</dd>
     * <dt>auth/invalid-custom-token</dt>
     * <dd>Thrown if the custom token format is incorrect.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().signInWithCustomToken(token).catch(function(error) {
     *   // Handle Errors here.
     *   var errorCode = error.code;
     *   var errorMessage = error.message;
     *   if (errorCode === 'auth/invalid-custom-token') {
     *     alert('The token you provided is not valid.');
     *   } else {
     *     console.error(error);
     *   }
     * });
     * \`\`\`
     *
     * @param token The custom token to sign in with.
     */",
                          ],
                          "id": "firebase.auth.Auth.signInWithCustomToken",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInWithCustomToken",
                          "signature": "signInWithCustomToken: (token: string) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2811,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2811",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2811",
                          },
                          "type": "(token: string) => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously signs in using an email and password.
     *
     * Fails with an error if the email address and password do not match.
     *
     * Note: The user's password is NOT the password used to access the user's email
     * account. The email address serves as a unique identifier for the user, and
     * the password is used to access the user's account in your Firebase project.
     *
     * See also: {@link firebase.auth.Auth.createUserWithEmailAndPassword}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email address is not valid.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given email has been
     *     disabled.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if there is no user corresponding to the given email.</dd>
     * <dt>auth/wrong-password</dt>
     * <dd>Thrown if the password is invalid for the given email, or the account
     *     corresponding to the email does not have a password set.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().signInWithEmailAndPassword(email, password)
     *     .catch(function(error) {
     *   // Handle Errors here.
     *   var errorCode = error.code;
     *   var errorMessage = error.message;
     *   if (errorCode === 'auth/wrong-password') {
     *     alert('Wrong password.');
     *   } else {
     *     alert(errorMessage);
     *   }
     *   console.log(error);
     * });
     * \`\`\`
     *
     * @param email The users email address.
     * @param password The users password.
     */",
                          ],
                          "id": "firebase.auth.Auth.signInWithEmailAndPassword",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInWithEmailAndPassword",
                          "signature": "signInWithEmailAndPassword: (
    email: string,
    password: string
) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2856,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2856",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2856",
                          },
                          "type": "(email: string, password: string) => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously signs in using an email and sign-in email link. If no link
     * is passed, the link is inferred from the current URL.
     *
     * Fails with an error if the email address is invalid or OTP in email link
     * expires.
     *
     * Note: Confirm the link is a sign-in email link before calling this method
     * {@link firebase.auth.Auth.isSignInWithEmailLink}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/expired-action-code</dt>
     * <dd>Thrown if OTP in email link expires.</dd>
     * <dt>auth/invalid-email</dt>
     * <dd>Thrown if the email address is not valid.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given email has been
     *     disabled.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().signInWithEmailLink(email, emailLink)
     *     .catch(function(error) {
     *       // Some error occurred, you can inspect the code: error.code
     *       // Common errors could be invalid email and invalid or expired OTPs.
     *     });
     * \`\`\`
     *
     * @param email The email account to sign in with.
     * @param emailLink The optional link which contains the OTP needed
     *     to complete the sign in with email link. If not specified, the current
     *     URL is used instead.
     */",
                          ],
                          "id": "firebase.auth.Auth.signInWithEmailLink",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInWithEmailLink",
                          "signature": "signInWithEmailLink: (
    email: string,
    emailLink?: string
) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2951,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2951",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2951",
                          },
                          "type": "(email: string, emailLink?: string) => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously signs in using a phone number. This method sends a code via
     * SMS to the given phone number, and returns a
     * {@link firebase.auth.ConfirmationResult}. After the user provides the code
     * sent to their phone, call {@link firebase.auth.ConfirmationResult.confirm}
     * with the code to sign the user in.
     *
     * For abuse prevention, this method also requires a
     * {@link firebase.auth.ApplicationVerifier}. The Firebase Auth SDK includes
     * a reCAPTCHA-based implementation, {@link firebase.auth.RecaptchaVerifier}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/captcha-check-failed</dt>
     * <dd>Thrown if the reCAPTCHA response token was invalid, expired, or if
     *     this method was called from a non-whitelisted domain.</dd>
     * <dt>auth/invalid-phone-number</dt>
     * <dd>Thrown if the phone number has an invalid format.</dd>
     * <dt>auth/missing-phone-number</dt>
     * <dd>Thrown if the phone number is missing.</dd>
     * <dt>auth/quota-exceeded</dt>
     * <dd>Thrown if the SMS quota for the Firebase project has been exceeded.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given phone number has been
     *     disabled.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go
     *     to the Firebase Console for your project, in the Auth section and the
     *     <strong>Sign in Method</strong> tab and configure the provider.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * var applicationVerifier = new firebase.auth.RecaptchaVerifier(
     *     'recaptcha-container');
     * firebase.auth().signInWithPhoneNumber(phoneNumber, applicationVerifier)
     *     .then(function(confirmationResult) {
     *       var verificationCode = window.prompt('Please enter the verification ' +
     *           'code that was sent to your mobile device.');
     *       return confirmationResult.confirm(verificationCode);
     *     })
     *     .catch(function(error) {
     *       // Handle Errors here.
     *     });
     * \`\`\`
     *
     * @param phoneNumber The user's phone number in E.164 format (e.g.
     *     +16505550101).
     * @param applicationVerifier
     */",
                          ],
                          "id": "firebase.auth.Auth.signInWithPhoneNumber",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInWithPhoneNumber",
                          "signature": "signInWithPhoneNumber: (
    phoneNumber: string,
    applicationVerifier: ApplicationVerifier
) => Promise<ConfirmationResult>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2912,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2912",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2912",
                          },
                          "type": "(phoneNumber: string, applicationVerifier: ApplicationVerifier) => Promise<ConfirmationResult>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Authenticates a Firebase client using a popup-based OAuth authentication
     * flow.
     *
     * If succeeds, returns the signed in user along with the provider's credential.
     * If sign in was unsuccessful, returns an error object containing additional
     * information about the error.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/account-exists-with-different-credential</dt>
     * <dd>Thrown if there already exists an account with the email address
     *     asserted by the credential. Resolve this by calling
     *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} with the error.email
     *     and then asking the user to sign in using one of the returned providers.
     *     Once the user is signed in, the original credential retrieved from the
     *     error.credential can be linked to the user with
     *     {@link firebase.User.linkWithCredential} to prevent the user from signing
     *     in again to the original provider via popup or redirect. If you are using
     *     redirects for sign in, save the credential in session storage and then
     *     retrieve on redirect and repopulate the credential using for example
     *     {@link firebase.auth.GoogleAuthProvider.credential} depending on the
     *     credential provider id and complete the link.</dd>
     * <dt>auth/auth-domain-config-required</dt>
     * <dd>Thrown if authDomain configuration is not provided when calling
     *     firebase.initializeApp(). Check Firebase Console for instructions on
     *     determining and passing that field.</dd>
     * <dt>auth/cancelled-popup-request</dt>
     * <dd>Thrown if successive popup operations are triggered. Only one popup
     *     request is allowed at one time. All the popups would fail with this error
     *     except for the last one.</dd>
     * <dt>auth/operation-not-allowed</dt>
     * <dd>Thrown if the type of account corresponding to the credential
     *     is not enabled. Enable the account type in the Firebase Console, under
     *     the Auth tab.</dd>
     * <dt>auth/operation-not-supported-in-this-environment</dt>
     * <dd>Thrown if this operation is not supported in the environment your
     *     application is running on. \\"location.protocol\\" must be http or https.
     *     </dd>
     * <dt>auth/popup-blocked</dt>
     * <dd>Thrown if the popup was blocked by the browser, typically when this
     *     operation is triggered outside of a click handler.</dd>
     * <dt>auth/popup-closed-by-user</dt>
     * <dd>Thrown if the popup window is closed by the user without completing the
     *     sign in to the provider.</dd>
     * <dt>auth/unauthorized-domain</dt>
     * <dd>Thrown if the app domain is not authorized for OAuth operations for your
     *     Firebase project. Edit the list of authorized domains from the Firebase
     *     console.</dd>
     * </dl>
     *
     * @webonly
     *
     * @example
     * \`\`\`javascript
     * // Creates the provider object.
     * var provider = new firebase.auth.FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('email');
     * provider.addScope('user_friends');
     * // Sign in with popup:
     * auth.signInWithPopup(provider).then(function(result) {
     *   // The firebase.User instance:
     *   var user = result.user;
     *   // The Facebook firebase.auth.AuthCredential containing the Facebook
     *   // access token:
     *   var credential = result.credential;
     * }, function(error) {
     *   // The provider's account email, can be used in case of
     *   // auth/account-exists-with-different-credential to fetch the providers
     *   // linked to the email:
     *   var email = error.email;
     *   // The provider's credential:
     *   var credential = error.credential;
     *   // In case of auth/account-exists-with-different-credential error,
     *   // you can fetch the providers using this:
     *   if (error.code === 'auth/account-exists-with-different-credential') {
     *     auth.fetchSignInMethodsForEmail(email).then(function(providers) {
     *       // The returned 'providers' is a list of the available providers
     *       // linked to the email address. Please refer to the guide for a more
     *       // complete explanation on how to recover from this error.
     *     });
     *   }
     * });
     * \`\`\`
     *
     * @param provider The provider to authenticate.
     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link
     *     firebase.auth.EmailAuthProvider} will throw an error.
     */",
                          ],
                          "id": "firebase.auth.Auth.signInWithPopup",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInWithPopup",
                          "signature": "signInWithPopup: (provider: AuthProvider) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3045,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3045",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3045",
                          },
                          "type": "(provider: AuthProvider) => Promise<UserCredential>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Authenticates a Firebase client using a full-page redirect flow. To handle
     * the results and errors for this operation, refer to {@link
     * firebase.auth.Auth.getRedirectResult}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/auth-domain-config-required</dt>
     * <dd>Thrown if authDomain configuration is not provided when calling
     *     firebase.initializeApp(). Check Firebase Console for instructions on
     *     determining and passing that field.</dd>
     * <dt>auth/operation-not-supported-in-this-environment</dt>
     * <dd>Thrown if this operation is not supported in the environment your
     *     application is running on. \\"location.protocol\\" must be http or https.
     *     </dd>
     * <dt>auth/unauthorized-domain</dt>
     * <dd>Thrown if the app domain is not authorized for OAuth operations for your
     *     Firebase project. Edit the list of authorized domains from the Firebase
     *     console.</dd>
     * </dl>
     *
     * @webonly
     *
     * @param provider The provider to authenticate.
     *     The provider has to be an OAuth provider. Non-OAuth providers like {@link
     *     firebase.auth.EmailAuthProvider} will throw an error.
     */",
                          ],
                          "id": "firebase.auth.Auth.signInWithRedirect",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signInWithRedirect",
                          "signature": "signInWithRedirect: (provider: AuthProvider) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3075,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3075",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3075",
                          },
                          "type": "(provider: AuthProvider) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Signs out the current user.
     */",
                          ],
                          "id": "firebase.auth.Auth.signOut",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "signOut",
                          "signature": "signOut: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3079,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3079",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3079",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Asynchronously sets the provided user as \`currentUser\` on the current Auth
     * instance. A new instance copy of the user provided will be made and set as
     * \`currentUser\`.
     *
     * This will trigger {@link firebase.auth.Auth.onAuthStateChanged} and
     * {@link firebase.auth.Auth.onIdTokenChanged} listeners like other sign in
     * methods.
     *
     * The operation fails with an error if the user to be updated belongs to a
     * different Firebase project.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-user-token</dt>
     * <dd>Thrown if the user to be updated belongs to a diffent Firebase
     *     project.</dd>
     * <dt>auth/user-token-expired</dt>
     * <dd>Thrown if the token of the user to be updated is expired.</dd>
     * <dt>auth/null-user</dt>
     * <dd>Thrown if the user to be updated is null.</dd>
     * <dt>auth/tenant-id-mismatch</dt>
     * <dd>Thrown if the provided user's tenant ID does not match the
     *     underlying Auth instance's configured tenant ID</dd>
     * </dl>
     */",
                          ],
                          "id": "firebase.auth.Auth.updateCurrentUser",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "updateCurrentUser",
                          "signature": "updateCurrentUser: (user: firebase.User | null) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3129,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3129",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3129",
                          },
                          "type": "(user: firebase.User | null) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets the current language to the default device/browser preference.
     */",
                          ],
                          "id": "firebase.auth.Auth.useDeviceLanguage",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "useDeviceLanguage",
                          "signature": "useDeviceLanguage: () => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3133,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3133",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3133",
                          },
                          "type": "() => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Modify this Auth instance to communicate with the Firebase Auth emulator.  This must be
     * called synchronously immediately following the first call to \`firebase.auth()\`.  Do not use
     * with production credentials as emulator traffic is not encrypted.
     *
     * @param url The URL at which the emulator is running (eg, 'http://localhost:9099')
     */",
                          ],
                          "id": "firebase.auth.Auth.useEmulator",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "useEmulator",
                          "signature": "useEmulator: (url: string) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3141,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3141",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3141",
                          },
                          "type": "(url: string) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Checks a password reset code sent to the user by email or other out-of-band
     * mechanism.
     *
     * Returns the user's email address if valid.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/expired-action-code</dt>
     * <dd>Thrown if the password reset code has expired.</dd>
     * <dt>auth/invalid-action-code</dt>
     * <dd>Thrown if the password reset code is invalid. This can happen if the code
     *     is malformed or has already been used.</dd>
     * <dt>auth/user-disabled</dt>
     * <dd>Thrown if the user corresponding to the given password reset code has
     *     been disabled.</dd>
     * <dt>auth/user-not-found</dt>
     * <dd>Thrown if there is no user corresponding to the password reset code. This
     *     may have happened if the user was deleted between when the code was
     *     issued and when this method was called.</dd>
     * </dl>
     *
     * @param code A verification code sent to the user.
     */",
                          ],
                          "id": "firebase.auth.Auth.verifyPasswordResetCode",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "verifyPasswordResetCode",
                          "signature": "verifyPasswordResetCode: (code: string) => Promise<string>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3166,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3166",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3166",
                          },
                          "type": "(code: string) => Promise<string>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The {@link firebase.app.App app} associated with the \`Auth\` service
     * instance.
     *
     * @example
     * \`\`\`javascript
     * var app = auth.app;
     * \`\`\`
     */",
                          ],
                          "id": "firebase.auth.Auth.app",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "app",
                          "signature": "app: firebase.app.App;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2115,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2115",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2115",
                          },
                          "type": "app.App",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The currently signed-in user (or null).
     */",
                          ],
                          "id": "firebase.auth.Auth.currentUser",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "currentUser",
                          "signature": "currentUser: firebase.User | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2244,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2244",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2244",
                          },
                          "type": "User",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The current Auth instance's language code. This is a readable/writable
     * property. When set to null, the default Firebase Console language setting
     * is applied. The language code will propagate to email action templates
     * (password reset, email verification and email change revocation), SMS
     * templates for phone authentication, reCAPTCHA verifier and OAuth
     * popup/redirect operations provided the specified providers support
     * localization with the language code specified.
     */",
                          ],
                          "id": "firebase.auth.Auth.languageCode",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "languageCode",
                          "signature": "languageCode: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2381,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2381",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2381",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The current Auth instance's settings. This is used to edit/read configuration
     * related options like app verification mode for phone authentication.
     */",
                          ],
                          "id": "firebase.auth.Auth.settings",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "settings",
                          "signature": "settings: firebase.auth.AuthSettings;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2386,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2386",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2386",
                          },
                          "type": "AuthSettings",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The current Auth instance's tenant ID. This is a readable/writable
     * property. When you set the tenant ID of an Auth instance, all future
     * sign-in/sign-up operations will pass this tenant ID and sign in or
     * sign up users to the specified tenant project.
     * When set to null, users are signed in to the parent project. By default,
     * this is set to null.
     *
     * @example
     * \`\`\`javascript
     * // Set the tenant ID on Auth instance.
     * firebase.auth().tenantId = ‘TENANT_PROJECT_ID’;
     *
     * // All future sign-in request now include tenant ID.
     * firebase.auth().signInWithEmailAndPassword(email, password)
     *   .then(function(result) {
     *     // result.user.tenantId should be ‘TENANT_PROJECT_ID’.
     *   }).catch(function(error) {
     *     // Handle error.
     *   });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.auth.Auth.tenantId",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "tenantId",
                          "signature": "tenantId: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3102,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3102",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3102",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "Auth",
                    "signature": "interface Auth {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 2105,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2105",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2105",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The account conflict error.
   * Refer to {@link firebase.auth.Auth.signInWithPopup} for more information.
   *
   * <h4>Common Error Codes</h4>
   * <dl>
   * <dt>auth/account-exists-with-different-credential</dt>
   * <dd>Thrown if there already exists an account with the email address
   *     asserted by the credential. Resolve this by calling
   *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail} with the error.email
   *     and then asking the user to sign in using one of the returned providers.
   *     Once the user is signed in, the original credential retrieved from the
   *     error.credential can be linked to the user with
   *     {@link firebase.User.linkWithCredential} to prevent the user from signing
   *     in again to the original provider via popup or redirect. If you are using
   *     redirects for sign in, save the credential in session storage and then
   *     retrieve on redirect and repopulate the credential using for example
   *     {@link firebase.auth.GoogleAuthProvider.credential} depending on the
   *     credential provider id and complete the link.</dd>
   * <dt>auth/credential-already-in-use</dt>
   * <dd>Thrown if the account corresponding to the credential already exists
   *     among your users, or is already linked to a Firebase User.
   *     For example, this error could be thrown if you are upgrading an anonymous
   *     user to a Google user by linking a Google credential to it and the Google
   *     credential used is already associated with an existing Firebase Google
   *     user.
   *     The fields <code>error.email</code>, <code>error.phoneNumber</code>, and
   *     <code>error.credential</code> ({@link firebase.auth.AuthCredential})
   *     may be provided, depending on the type of credential. You can recover
   *     from this error by signing in with <code>error.credential</code> directly
   *     via {@link firebase.auth.Auth.signInWithCredential}.</dd>
   * <dt>auth/email-already-in-use</dt>
   * <dd>Thrown if the email corresponding to the credential already exists
   *     among your users. When thrown while linking a credential to an existing
   *     user, an <code>error.email</code> and <code>error.credential</code>
   *     ({@link firebase.auth.AuthCredential}) fields are also provided.
   *     You have to link the credential to the existing user with that email if
   *     you wish to continue signing in with that credential. To do so, call
   *     {@link firebase.auth.Auth.fetchSignInMethodsForEmail}, sign in to
   *     <code>error.email</code> via one of the providers returned and then
   *     {@link firebase.User.linkWithCredential} the original credential to that
   *     newly signed in user.</dd>
   * </dl>
   */",
                    ],
                    "id": "firebase.auth.AuthError",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The {@link firebase.auth.AuthCredential} that can be used to resolve the
     * error.
     */",
                          ],
                          "id": "firebase.auth.AuthError.credential",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "credential",
                          "signature": "credential?: firebase.auth.AuthCredential;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3444,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3444",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3444",
                          },
                          "type": "AuthCredential",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The email of the user's account used for sign-in/linking.
     */",
                          ],
                          "id": "firebase.auth.AuthError.email",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "email",
                          "signature": "email?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3448,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3448",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3448",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The phone number of the user's account used for sign-in/linking.
     */",
                          ],
                          "id": "firebase.auth.AuthError.phoneNumber",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "phoneNumber",
                          "signature": "phoneNumber?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3452,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3452",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3452",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The tenant ID being used for sign-in/linking. If you use
     * {@link firebase.auth.Auth.signInWithRedirect} to sign in, you have to
     * set the tenant ID on Auth instanace again as the tenant ID is not
     * persisted after redirection.
     */",
                          ],
                          "id": "firebase.auth.AuthError.tenantId",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "tenantId",
                          "signature": "tenantId?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3459,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3459",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3459",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "AuthError",
                    "signature": "interface AuthError extends firebase.auth.Error {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3439,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3439",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3439",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Interface that represents an auth provider.
   */",
                    ],
                    "id": "firebase.auth.AuthProvider",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.AuthProvider.providerId",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "providerId",
                          "signature": "providerId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3233,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3233",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3233",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "AuthProvider",
                    "signature": "interface AuthProvider {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3232,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3232",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3232",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Interface representing an Auth instance's settings, currently used for
   * enabling/disabling app verification for phone Auth testing.
   */",
                    ],
                    "id": "firebase.auth.AuthSettings",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * When set, this property disables app verification for the purpose of testing
     * phone authentication. For this property to take effect, it needs to be set
     * before rendering a reCAPTCHA app verifier. When this is disabled, a
     * mock reCAPTCHA is rendered instead. This is useful for manual testing during
     * development or for automated integration tests.
     *
     * In order to use this feature, you will need to
     * {@link https://firebase.google.com/docs/auth/web/phone-auth#test-with-whitelisted-phone-numbers
     * whitelist your phone number} via the
     * Firebase Console.
     *
     * The default value is false (app verification is enabled).
     */",
                          ],
                          "id": "firebase.auth.AuthSettings.appVerificationDisabledForTesting",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "appVerificationDisabledForTesting",
                          "signature": "appVerificationDisabledForTesting: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 2091,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2091",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2091",
                          },
                          "type": "boolean",
                        },
                      ],
                    },
                    "name": "AuthSettings",
                    "signature": "interface AuthSettings {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 2076,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2076",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2076",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A result from a phone number sign-in, link, or reauthenticate call.
   */",
                    ],
                    "id": "firebase.auth.ConfirmationResult",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Finishes a phone number sign-in, link, or reauthentication, given the code
     * that was sent to the user's mobile device.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the verification code is not valid.</dd>
     * <dt>auth/missing-verification-code</dt>
     * <dd>Thrown if the verification code is missing.</dd>
     * </dl>
     */",
                          ],
                          "id": "firebase.auth.ConfirmationResult.confirm",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "confirm",
                          "signature": "confirm: (verificationCode: string) => Promise<UserCredential>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3252,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3252",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3252",
                          },
                          "type": "(verificationCode: string) => Promise<UserCredential>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The phone number authentication operation's verification ID. This can be used
     * along with the verification code to initialize a phone auth credential.
     */",
                          ],
                          "id": "firebase.auth.ConfirmationResult.verificationId",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "verificationId",
                          "signature": "verificationId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3257,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3257",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3257",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "ConfirmationResult",
                    "signature": "interface ConfirmationResult {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3239,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3239",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3239",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * An authentication error.
   * For method-specific error codes, refer to the specific methods in the
   * documentation. For common error codes, check the reference below. Use{@link
   * firebase.auth.Error.code} to get the specific error code. For a detailed
   * message, use {@link firebase.auth.Error.message}.
   * Errors with the code <strong>auth/account-exists-with-different-credential
   * </strong> will have the additional fields <strong>email</strong> and <strong>
   * credential</strong> which are needed to provide a way to resolve these
   * specific errors. Refer to {@link firebase.auth.Auth.signInWithPopup} for more
   * information.
   *
   * <h4>Common Error Codes</h4>
   * <dl>
   * <dt>auth/app-deleted</dt>
   * <dd>Thrown if the instance of FirebaseApp has been deleted.</dd>
   * <dt>auth/app-not-authorized</dt>
   * <dd>Thrown if the app identified by the domain where it's hosted, is not
   *     authorized to use Firebase Authentication with the provided API key.
   *     Review your key configuration in the Google API console.</dd>
   * <dt>auth/argument-error</dt>
   * <dd>Thrown if a method is called with incorrect arguments.</dd>
   * <dt>auth/invalid-api-key</dt>
   * <dd>Thrown if the provided API key is invalid. Please check that you have
   *     copied it correctly from the Firebase Console.</dd>
   * <dt>auth/invalid-user-token</dt>
   * <dd>Thrown if the user's credential is no longer valid. The user must sign in
   *     again.</dd>
   * <dt>auth/invalid-tenant-id</dt>
   * <dd>Thrown if the tenant ID provided is invalid.</dd>
   * <dt>auth/network-request-failed</dt>
   * <dd>Thrown if a network error (such as timeout, interrupted connection or
   *     unreachable host) has occurred.</dd>
   * <dt>auth/operation-not-allowed</dt>
   * <dd>Thrown if you have not enabled the provider in the Firebase Console. Go
   *     to the Firebase Console for your project, in the Auth section and the
   *     <strong>Sign in Method</strong> tab and configure the provider.</dd>
   * <dt>auth/requires-recent-login</dt>
   * <dd>Thrown if the user's last sign-in time does not meet the security
   *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to
   *     resolve. This does not apply if the user is anonymous.</dd>
   * <dt>auth/too-many-requests</dt>
   * <dd>Thrown if requests are blocked from a device due to unusual activity.
   *     Trying again after some delay would unblock.</dd>
   * <dt>auth/unauthorized-domain</dt>
   * <dd>Thrown if the app domain is not authorized for OAuth operations for your
   *     Firebase project. Edit the list of authorized domains from the Firebase
   *     console.</dd>
   * <dt>auth/user-disabled</dt>
   * <dd>Thrown if the user account has been disabled by an administrator.
   *     Accounts can be enabled or disabled in the Firebase Console, the Auth
   *     section and Users subsection.</dd>
   * <dt>auth/user-token-expired</dt>
   * <dd>Thrown if the user's credential has expired. This could also be thrown if
   *     a user has been deleted. Prompting the user to sign in again should
   *     resolve this for either case.</dd>
   * <dt>auth/web-storage-unsupported</dt>
   * <dd>Thrown if the browser does not support web storage or if the user
   *     disables them.</dd>
   * </dl>
   */",
                    ],
                    "id": "firebase.auth.Error",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Unique error code.
     */",
                          ],
                          "id": "firebase.auth.Error.code",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "code",
                          "signature": "code: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3388,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3388",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3388",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Complete error message.
     */",
                          ],
                          "id": "firebase.auth.Error.message",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "message",
                          "signature": "message: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3392,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3392",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3392",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "Error",
                    "signature": "interface Error {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3384,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3384",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3384",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Interface representing ID token result obtained from
   * {@link firebase.User.getIdTokenResult}. It contains the ID token JWT string
   * and other helper properties for getting different data associated with the
   * token as well as all the decoded payload claims.
   *
   * Note that these claims are not to be trusted as they are parsed client side.
   * Only server side verification can guarantee the integrity of the token
   * claims.
   */",
                    ],
                    "id": "firebase.auth.IdTokenResult",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The authentication time formatted as a UTC string. This is the time the
     * user authenticated (signed in) and not the time the token was refreshed.
     */",
                          ],
                          "id": "firebase.auth.IdTokenResult.authTime",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "authTime",
                          "signature": "authTime: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3901,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3901",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3901",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The entire payload claims of the ID token including the standard reserved
     * claims as well as the custom claims.
     */",
                          ],
                          "id": "firebase.auth.IdTokenResult.claims",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "claims",
                          "signature": "claims: {
    [key: string]: any;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3920,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3920",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3920",
                          },
                          "type": "{ [key: string]: any; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The ID token expiration time formatted as a UTC string.
     */",
                          ],
                          "id": "firebase.auth.IdTokenResult.expirationTime",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "expirationTime",
                          "signature": "expirationTime: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3896,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3896",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3896",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The ID token issued at time formatted as a UTC string.
     */",
                          ],
                          "id": "firebase.auth.IdTokenResult.issuedAtTime",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "issuedAtTime",
                          "signature": "issuedAtTime: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3905,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3905",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3905",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The sign-in provider through which the ID token was obtained (anonymous,
     * custom, phone, password, etc). Note, this does not map to provider IDs.
     */",
                          ],
                          "id": "firebase.auth.IdTokenResult.signInProvider",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "signInProvider",
                          "signature": "signInProvider: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3910,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3910",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3910",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The type of second factor associated with this session, provided the user
     * was multi-factor authenticated (eg. phone, etc).
     */",
                          ],
                          "id": "firebase.auth.IdTokenResult.signInSecondFactor",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "signInSecondFactor",
                          "signature": "signInSecondFactor: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3915,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3915",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3915",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The Firebase Auth ID token JWT string.
     */",
                          ],
                          "id": "firebase.auth.IdTokenResult.token",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "token",
                          "signature": "token: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3892,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3892",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3892",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "IdTokenResult",
                    "signature": "interface IdTokenResult {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3888,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3888",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3888",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The error thrown when the user needs to provide a second factor to sign in
   * successfully.
   * The error code for this error is <code>auth/multi-factor-auth-required</code>.
   * This error provides a {@link firebase.auth.MultiFactorResolver} object,
   * which you can use to get the second sign-in factor from the user.
   *
   * @example
   * \`\`\`javascript
   * firebase.auth().signInWithEmailAndPassword()
   *     .then(function(result) {
   *       // User signed in. No 2nd factor challenge is needed.
   *     })
   *     .catch(function(error) {
   *       if (error.code == 'auth/multi-factor-auth-required') {
   *         var resolver = error.resolver;
   *         var multiFactorHints = resolver.hints;
   *       } else {
   *         // Handle other errors.
   *       }
   *     });
   *
   * resolver.resolveSignIn(multiFactorAssertion)
   *     .then(function(userCredential) {
   *       // User signed in.
   *     });
   * \`\`\`
   */",
                    ],
                    "id": "firebase.auth.MultiFactorError",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The multi-factor resolver to complete second factor sign-in.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorError.resolver",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "resolver",
                          "signature": "resolver: firebase.auth.MultiFactorResolver;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3494,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3494",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3494",
                          },
                          "type": "MultiFactorResolver",
                        },
                      ],
                    },
                    "name": "MultiFactorError",
                    "signature": "interface MultiFactorError extends firebase.auth.AuthError {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3490,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3490",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3490",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A structure containing the information of a second factor entity.
   */",
                    ],
                    "id": "firebase.auth.MultiFactorInfo",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The user friendly name of the current second factor.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorInfo.displayName",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "displayName",
                          "signature": "displayName?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3996,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3996",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3996",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The enrollment date of the second factor formatted as a UTC string.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorInfo.enrollmentTime",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "enrollmentTime",
                          "signature": "enrollmentTime: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4000,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4000",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4000",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The identifier of the second factor.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorInfo.factorId",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "factorId",
                          "signature": "factorId: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4004,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4004",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4004",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The multi-factor enrollment ID.
     */",
                          ],
                          "id": "firebase.auth.MultiFactorInfo.uid",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "uid",
                          "signature": "uid: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3992,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3992",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3992",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "MultiFactorInfo",
                    "signature": "interface MultiFactorInfo {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3988,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3988",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3988",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Defines the options for initializing an
   * {@link firebase.auth.OAuthCredential}. For ID tokens with nonce claim,
   * the raw nonce has to also be provided.
   */",
                    ],
                    "id": "firebase.auth.OAuthCredentialOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The OAuth access token used to initialize the OAuthCredential.
     */",
                          ],
                          "id": "firebase.auth.OAuthCredentialOptions.accessToken",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "accessToken",
                          "signature": "accessToken?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3938,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3938",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3938",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The OAuth ID token used to initialize the OAuthCredential.
     */",
                          ],
                          "id": "firebase.auth.OAuthCredentialOptions.idToken",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "idToken",
                          "signature": "idToken?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3934,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3934",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3934",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The raw nonce associated with the ID token. It is required when an ID token
     * with a nonce field is provided. The SHA-256 hash of the raw nonce must match
     * the nonce field in the ID token.
     */",
                          ],
                          "id": "firebase.auth.OAuthCredentialOptions.rawNonce",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "rawNonce",
                          "signature": "rawNonce?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 3944,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3944",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3944",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "OAuthCredentialOptions",
                    "signature": "interface OAuthCredentialOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 3930,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L3930",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L3930",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The phone info options for multi-factor enrollment. Phone number and
   * multi-factor session are required.
   */",
                    ],
                    "id": "firebase.auth.PhoneMultiFactorEnrollInfoOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneMultiFactorEnrollInfoOptions.phoneNumber",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "phoneNumber",
                          "signature": "phoneNumber: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4041,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4041",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4041",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneMultiFactorEnrollInfoOptions.session",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "session",
                          "signature": "session: firebase.auth.MultiFactorSession;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4042,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4042",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4042",
                          },
                          "type": "MultiFactorSession",
                        },
                      ],
                    },
                    "name": "PhoneMultiFactorEnrollInfoOptions",
                    "signature": "interface PhoneMultiFactorEnrollInfoOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4040,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4040",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4040",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The subclass of the MultiFactorInfo interface for phone number second factors.
   * The factorId of this second factor is
   * {@link firebase.auth.PhoneMultiFactorGenerator.FACTOR_ID}.
   */",
                    ],
                    "id": "firebase.auth.PhoneMultiFactorInfo",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The phone number associated with the current second factor.
     */",
                          ],
                          "id": "firebase.auth.PhoneMultiFactorInfo.phoneNumber",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "phoneNumber",
                          "signature": "phoneNumber: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4016,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4016",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4016",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "PhoneMultiFactorInfo",
                    "signature": "interface PhoneMultiFactorInfo extends firebase.auth.MultiFactorInfo {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4012,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4012",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4012",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The phone info options for multi-factor sign-in. Either multi-factor hint or
   * multi-factor UID and multi-factor session are required.
   */",
                    ],
                    "id": "firebase.auth.PhoneMultiFactorSignInInfoOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneMultiFactorSignInInfoOptions.multiFactorHint",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "multiFactorHint",
                          "signature": "multiFactorHint?: firebase.auth.MultiFactorInfo;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4050,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4050",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4050",
                          },
                          "type": "MultiFactorInfo",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneMultiFactorSignInInfoOptions.multiFactorUid",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "multiFactorUid",
                          "signature": "multiFactorUid?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4051,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4051",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4051",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneMultiFactorSignInInfoOptions.session",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "session",
                          "signature": "session: firebase.auth.MultiFactorSession;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4052,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4052",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4052",
                          },
                          "type": "MultiFactorSession",
                        },
                      ],
                    },
                    "name": "PhoneMultiFactorSignInInfoOptions",
                    "signature": "interface PhoneMultiFactorSignInInfoOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4049,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4049",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4049",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The phone info options for single-factor sign-in. Only phone number is
   * required.
   */",
                    ],
                    "id": "firebase.auth.PhoneSingleFactorInfoOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.PhoneSingleFactorInfoOptions.phoneNumber",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "phoneNumber",
                          "signature": "phoneNumber: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4033,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4033",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4033",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "PhoneSingleFactorInfoOptions",
                    "signature": "interface PhoneSingleFactorInfoOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4032,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4032",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4032",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Interface representing a user's metadata.
   */",
                    ],
                    "id": "firebase.auth.UserMetadata",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.UserMetadata.creationTime",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "creationTime",
                          "signature": "creationTime?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4424,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4424",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4424",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.UserMetadata.lastSignInTime",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "lastSignInTime",
                          "signature": "lastSignInTime?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 4425,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4425",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4425",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "UserMetadata",
                    "signature": "interface UserMetadata {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4423,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4423",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4423",
                    },
                  },
                ],
                "namespaces": Array [
                  Object {
                    "declarations": Object {
                      "classes": Array [],
                      "enums": Array [],
                      "functions": Array [],
                      "interfaces": Array [],
                      "namespaces": Array [],
                      "typeAliases": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.ActionCodeInfo.Operation",
                          "kind": "TypeAliasDeclaration",
                          "name": "Operation",
                          "signature": "type Operation = string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5281,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5281",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5281",
                          },
                        },
                      ],
                      "variables": Array [
                        Object {
                          "docs": Array [
                            "/**
   * An enumeration of the possible email action types.
   */",
                          ],
                          "id": "firebase.auth.ActionCodeInfo.Operation",
                          "kind": "VariableDeclaration",
                          "name": "Operation",
                          "signature": "var Operation: {
    EMAIL_SIGNIN: string;
    PASSWORD_RESET: string;
    RECOVER_EMAIL: string;
    REVERT_SECOND_FACTOR_ADDITION: string;
    VERIFY_AND_CHANGE_EMAIL: string;
    VERIFY_EMAIL: string;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5285,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5285",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5285",
                          },
                          "type": "{ EMAIL_SIGNIN: string; PASSWORD_RESET: string; RECOVER_EMAIL: string; REVERT_SECOND_FACTOR_ADDITION: string; VERIFY_AND_CHANGE_EMAIL: string; VERIFY_EMAIL: string; }",
                          "variableKind": "var",
                        },
                      ],
                    },
                    "docs": Array [],
                    "id": "firebase.auth.ActionCodeInfo",
                    "kind": "NamespaceDeclaration",
                    "name": "firebase.auth.ActionCodeInfo",
                    "signature": "namespace firebase.auth.ActionCodeInfo {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5280,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5280",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5280",
                    },
                  },
                  Object {
                    "declarations": Object {
                      "classes": Array [],
                      "enums": Array [],
                      "functions": Array [],
                      "interfaces": Array [],
                      "namespaces": Array [],
                      "typeAliases": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.auth.Auth.Persistence",
                          "kind": "TypeAliasDeclaration",
                          "name": "Persistence",
                          "signature": "type Persistence = string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5120,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5120",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5120",
                          },
                        },
                      ],
                      "variables": Array [
                        Object {
                          "docs": Array [
                            "/**
   * An enumeration of the possible persistence mechanism types.
   */",
                          ],
                          "id": "firebase.auth.Auth.Persistence",
                          "kind": "VariableDeclaration",
                          "name": "Persistence",
                          "signature": "var Persistence: { LOCAL: string; NONE: string; SESSION: string };",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5124,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5124",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5124",
                          },
                          "type": "{ LOCAL: string; NONE: string; SESSION: string; }",
                          "variableKind": "var",
                        },
                      ],
                    },
                    "docs": Array [],
                    "id": "firebase.auth.Auth",
                    "kind": "NamespaceDeclaration",
                    "name": "firebase.auth.Auth",
                    "signature": "namespace firebase.auth.Auth {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5119,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5119",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5119",
                    },
                  },
                ],
                "typeAliases": Array [
                  Object {
                    "docs": Array [
                      "/**
   * This is the interface that defines the required continue/state URL with
   * optional Android and iOS bundle identifiers.
   * The action code setting fields are:
   * <ul>
   * <li><p>url: Sets the link continue/state URL, which has different meanings
   *     in different contexts:</p>
   *     <ul>
   *     <li>When the link is handled in the web action widgets, this is the deep
   *         link in the continueUrl query parameter.</li>
   *     <li>When the link is handled in the app directly, this is the continueUrl
   *         query parameter in the deep link of the Dynamic Link.</li>
   *     </ul>
   *     </li>
   * <li>iOS: Sets the iOS bundle ID. This will try to open the link in an iOS app
   *     if it is installed.</li>
   * <li>android: Sets the Android package name. This will try to open the link in
   *     an android app if it is installed. If installApp is passed, it specifies
   *     whether to install the Android app if the device supports it and the app
   *     is not already installed. If this field is provided without a
   *     packageName, an error is thrown explaining that the packageName must be
   *     provided in conjunction with this field.
   *     If minimumVersion is specified, and an older version of the app is
   *     installed, the user is taken to the Play Store to upgrade the app.</li>
   * <li>handleCodeInApp: The default is false. When set to true, the action code
   *     link will be be sent as a Universal Link or Android App Link and will be
   *     opened by the app if installed. In the false case, the code will be sent
   *     to the web widget first and then on continue will redirect to the app if
   *     installed.</li>
   * </ul>
   */",
                    ],
                    "id": "firebase.auth.ActionCodeSettings",
                    "kind": "TypeAliasDeclaration",
                    "name": "ActionCodeSettings",
                    "signature": "type ActionCodeSettings = {
    android?: {
        installApp?: boolean;
        minimumVersion?: string;
        packageName: string;
    };
    handleCodeInApp?: boolean;
    iOS?: { bundleId: string };
    url: string;
    dynamicLinkDomain?: string;
};",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 2032,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2032",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2032",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A structure containing additional user information from a federated identity
   * provider.
   */",
                    ],
                    "id": "firebase.auth.AdditionalUserInfo",
                    "kind": "TypeAliasDeclaration",
                    "name": "AdditionalUserInfo",
                    "signature": "type AdditionalUserInfo = {
    isNewUser: boolean;
    profile: Object | null;
    providerId: string;
    username?: string | null;
};",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 2048,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L2048",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L2048",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The information required to verify the ownership of a phone number. The
   * information that's required depends on whether you are doing single-factor
   * sign-in, multi-factor enrollment or multi-factor sign-in.
   */",
                    ],
                    "id": "firebase.auth.PhoneInfoOptions",
                    "kind": "TypeAliasDeclaration",
                    "name": "PhoneInfoOptions",
                    "signature": "type PhoneInfoOptions =
    | firebase.auth.PhoneSingleFactorInfoOptions
    | firebase.auth.PhoneMultiFactorEnrollInfoOptions
    | firebase.auth.PhoneMultiFactorSignInInfoOptions;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4024,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4024",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4024",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A structure containing a User, an AuthCredential, the operationType, and
   * any additional user information that was returned from the identity provider.
   * operationType could be 'signIn' for a sign-in operation, 'link' for a linking
   * operation and 'reauthenticate' for a reauthentication operation.
   */",
                    ],
                    "id": "firebase.auth.UserCredential",
                    "kind": "TypeAliasDeclaration",
                    "name": "UserCredential",
                    "signature": "type UserCredential = {
    additionalUserInfo?: firebase.auth.AdditionalUserInfo | null;
    credential: firebase.auth.AuthCredential | null;
    operationType?: string | null;
    user: firebase.User | null;
};",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 4413,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L4413",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L4413",
                    },
                  },
                ],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.auth",
              "kind": "NamespaceDeclaration",
              "name": "firebase.auth",
              "signature": "namespace firebase.auth {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1902,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1902",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1902",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [
                  Object {
                    "docs": Array [
                      "/**
   * Logs debugging information to the console.
   *
   * @example
   * \`\`\`javascript
   * // Enable logging
   * firebase.database.enableLogging(true);
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Disable logging
   * firebase.database.enableLogging(false);
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Enable logging across page refreshes
   * firebase.database.enableLogging(true, true);
   * \`\`\`
   *
   * @example
   * \`\`\`javascript
   * // Provide custom logger which prefixes log statements with \\"[FIREBASE]\\"
   * firebase.database.enableLogging(function(message) {
   *   console.log(\\"[FIREBASE]\\", message);
   * });
   * \`\`\`
   *
   * @param logger Enables logging if \`true\`;
   *   disables logging if \`false\`. You can also provide a custom logger function
   *   to control how things get logged.
   * @param persistent Remembers the logging state between page
   *   refreshes if \`true\`.
   */",
                    ],
                    "id": "firebase.database.enableLogging",
                    "kind": "FunctionDeclaration",
                    "name": "enableLogging",
                    "signature": "enableLogging: (
    logger?: boolean | ((a: string) => any),
    persistent?: boolean
) => any;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 6952,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6952",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6952",
                    },
                    "type": "(logger?: boolean | ((a: string) => any), persistent?: boolean) => any",
                  },
                ],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Database service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.database \`firebase.database()\`}.
   *
   * See
   * {@link
   *   https://firebase.google.com/docs/database/web/start/
   *   Installation &amp; Setup in JavaScript}
   * for a full guide on how to use the Firebase Database service.
   */",
                    ],
                    "id": "firebase.database.Database",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Disconnects from the server (all Database operations will be completed
     * offline).
     *
     * The client automatically maintains a persistent connection to the Database
     * server, which will remain active indefinitely and reconnect when
     * disconnected. However, the \`goOffline()\` and \`goOnline()\` methods may be used
     * to control the client connection in cases where a persistent connection is
     * undesirable.
     *
     * While offline, the client will no longer receive data updates from the
     * Database. However, all Database operations performed locally will continue to
     * immediately fire events, allowing your application to continue behaving
     * normally. Additionally, each operation performed locally will automatically
     * be queued and retried upon reconnection to the Database server.
     *
     * To reconnect to the Database and begin receiving remote events, see
     * \`goOnline()\`.
     *
     * @example
     * \`\`\`javascript
     * firebase.database().goOffline();
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Database.goOffline",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "goOffline",
                          "signature": "goOffline: () => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5703,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5703",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5703",
                          },
                          "type": "() => any",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Reconnects to the server and synchronizes the offline Database state
     * with the server state.
     *
     * This method should be used after disabling the active connection with
     * \`goOffline()\`. Once reconnected, the client will transmit the proper data
     * and fire the appropriate events so that your client \\"catches up\\"
     * automatically.
     *
     * @example
     * \`\`\`javascript
     * firebase.database().goOnline();
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Database.goOnline",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "goOnline",
                          "signature": "goOnline: () => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5718,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5718",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5718",
                          },
                          "type": "() => any",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a \`Reference\` representing the location in the Database
     * corresponding to the provided path. If no path is provided, the \`Reference\`
     * will point to the root of the Database.
     *
     * @example
     * \`\`\`javascript
     * // Get a reference to the root of the Database
     * var rootRef = firebase.database().ref();
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // Get a reference to the /users/ada node
     * var adaRef = firebase.database().ref(\\"users/ada\\");
     * // The above is shorthand for the following operations:
     * //var rootRef = firebase.database().ref();
     * //var adaRef = rootRef.child(\\"users/ada\\");
     * \`\`\`
     *
     * @param path Optional path representing the location the returned
     *   \`Reference\` will point. If not provided, the returned \`Reference\` will
     *   point to the root of the Database.
     * @return If a path is provided, a \`Reference\`
     *   pointing to the provided path. Otherwise, a \`Reference\` pointing to the
     *   root of the Database.
     */",
                          ],
                          "id": "firebase.database.Database.ref",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "ref",
                          "signature": "ref: (path?: string) => Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5746,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5746",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5746",
                          },
                          "type": "(path?: string) => Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a \`Reference\` representing the location in the Database
     * corresponding to the provided Firebase URL.
     *
     * An exception is thrown if the URL is not a valid Firebase Database URL or it
     * has a different domain than the current \`Database\` instance.
     *
     * Note that all query parameters (\`orderBy\`, \`limitToLast\`, etc.) are ignored
     * and are not applied to the returned \`Reference\`.
     *
     * @example
     * \`\`\`javascript
     * // Get a reference to the root of the Database
     * var rootRef = firebase.database().ref(\\"https://<DATABASE_NAME>.firebaseio.com\\");
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // Get a reference to the /users/ada node
     * var adaRef = firebase.database().ref(\\"https://<DATABASE_NAME>.firebaseio.com/users/ada\\");
     * \`\`\`
     *
     * @param url The Firebase URL at which the returned \`Reference\` will
     *   point.
     * @return A \`Reference\` pointing to the provided
     *   Firebase URL.
     */",
                          ],
                          "id": "firebase.database.Database.refFromURL",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "refFromURL",
                          "signature": "refFromURL: (url: string) => Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5774,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5774",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5774",
                          },
                          "type": "(url: string) => Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Modify this instance to communicate with the Realtime Database emulator.
     *
     * <p>Note: This method must be called before performing any other operation.
     *
     * @param host the emulator host (ex: localhost)
     * @param port the emulator port (ex: 8080)
     */",
                          ],
                          "id": "firebase.database.Database.useEmulator",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "useEmulator",
                          "signature": "useEmulator: (host: string, port: number) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5678,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5678",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5678",
                          },
                          "type": "(host: string, port: number) => void",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The {@link firebase.app.App app} associated with the \`Database\` service
     * instance.
     *
     * @example
     * \`\`\`javascript
     * var app = database.app;
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Database.app",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "app",
                          "signature": "app: firebase.app.App;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5669,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5669",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5669",
                          },
                          "type": "app.App",
                        },
                      ],
                    },
                    "name": "Database",
                    "signature": "interface Database {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5659,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5659",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5659",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A \`DataSnapshot\` contains data from a Database location.
   *
   * Any time you read data from the Database, you receive the data as a
   * \`DataSnapshot\`. A \`DataSnapshot\` is passed to the event callbacks you attach
   * with \`on()\` or \`once()\`. You can extract the contents of the snapshot as a
   * JavaScript object by calling the \`val()\` method. Alternatively, you can
   * traverse into the snapshot by calling \`child()\` to return child snapshots
   * (which you could then call \`val()\` on).
   *
   * A \`DataSnapshot\` is an efficiently generated, immutable copy of the data at
   * a Database location. It cannot be modified and will never change (to modify
   * data, you always call the \`set()\` method on a \`Reference\` directly).
   *
   */",
                    ],
                    "id": "firebase.database.DataSnapshot",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Gets another \`DataSnapshot\` for the location at the specified relative path.
     *
     * Passing a relative path to the \`child()\` method of a DataSnapshot returns
     * another \`DataSnapshot\` for the location at the specified relative path. The
     * relative path can either be a simple child name (for example, \\"ada\\") or a
     * deeper, slash-separated path (for example, \\"ada/name/first\\"). If the child
     * location has no data, an empty \`DataSnapshot\` (that is, a \`DataSnapshot\`
     * whose value is \`null\`) is returned.
     *
     * @example
     * \`\`\`javascript
     * // Assume we have the following data in the Database:
     * {
     *   \\"name\\": {
     *     \\"first\\": \\"Ada\\",
     *     \\"last\\": \\"Lovelace\\"
     *   }
     * }
     *
     * // Test for the existence of certain keys within a DataSnapshot
     * var ref = firebase.database().ref(\\"users/ada\\");
     * ref.once(\\"value\\")
     *   .then(function(snapshot) {
     *     var name = snapshot.child(\\"name\\").val(); // {first:\\"Ada\\",last:\\"Lovelace\\"}
     *     var firstName = snapshot.child(\\"name/first\\").val(); // \\"Ada\\"
     *     var lastName = snapshot.child(\\"name\\").child(\\"last\\").val(); // \\"Lovelace\\"
     *     var age = snapshot.child(\\"age\\").val(); // null
     *   });
     * \`\`\`
     *
     * @param path A relative path to the location of child data.
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.child",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "child",
                          "signature": "child: (path: string) => DataSnapshot;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5363,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5363",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5363",
                          },
                          "type": "(path: string) => DataSnapshot",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`DataSnapshot\` contains any data. It is slightly more
     * efficient than using \`snapshot.val() !== null\`.
     *
     * @example
     * \`\`\`javascript
     * // Assume we have the following data in the Database:
     * {
     *   \\"name\\": {
     *     \\"first\\": \\"Ada\\",
     *     \\"last\\": \\"Lovelace\\"
     *   }
     * }
     *
     * // Test for the existence of certain keys within a DataSnapshot
     * var ref = firebase.database().ref(\\"users/ada\\");
     * ref.once(\\"value\\")
     *   .then(function(snapshot) {
     *     var a = snapshot.exists();  // true
     *     var b = snapshot.child(\\"name\\").exists(); // true
     *     var c = snapshot.child(\\"name/first\\").exists(); // true
     *     var d = snapshot.child(\\"name/middle\\").exists(); // false
     *   });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.exists",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "exists",
                          "signature": "exists: () => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5389,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5389",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5389",
                          },
                          "type": "() => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Exports the entire contents of the DataSnapshot as a JavaScript object.
     *
     * The \`exportVal()\` method is similar to \`val()\`, except priority information
     * is included (if available), making it suitable for backing up your data.
     *
     * @return The DataSnapshot's contents as a JavaScript value (Object,
     *   Array, string, number, boolean, or \`null\`).
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.exportVal",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "exportVal",
                          "signature": "exportVal: () => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5399,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5399",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5399",
                          },
                          "type": "() => any",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Enumerates the top-level children in the \`DataSnapshot\`.
     *
     * Because of the way JavaScript objects work, the ordering of data in the
     * JavaScript object returned by \`val()\` is not guaranteed to match the ordering
     * on the server nor the ordering of \`child_added\` events. That is where
     * \`forEach()\` comes in handy. It guarantees the children of a \`DataSnapshot\`
     * will be iterated in their query order.
     *
     * If no explicit \`orderBy*()\` method is used, results are returned
     * ordered by key (unless priorities are used, in which case, results are
     * returned by priority).
     *
     * @example
     * \`\`\`javascript
     * // Assume we have the following data in the Database:
     * {
     *   \\"users\\": {
     *     \\"ada\\": {
     *       \\"first\\": \\"Ada\\",
     *       \\"last\\": \\"Lovelace\\"
     *     },
     *     \\"alan\\": {
     *       \\"first\\": \\"Alan\\",
     *       \\"last\\": \\"Turing\\"
     *     }
     *   }
     * }
     *
     * // Loop through users in order with the forEach() method. The callback
     * // provided to forEach() will be called synchronously with a DataSnapshot
     * // for each child:
     * var query = firebase.database().ref(\\"users\\").orderByKey();
     * query.once(\\"value\\")
     *   .then(function(snapshot) {
     *     snapshot.forEach(function(childSnapshot) {
     *       // key will be \\"ada\\" the first time and \\"alan\\" the second time
     *       var key = childSnapshot.key;
     *       // childData will be the actual contents of the child
     *       var childData = childSnapshot.val();
     *   });
     * });
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // You can cancel the enumeration at any point by having your callback
     * // function return true. For example, the following code sample will only
     * // fire the callback function one time:
     * var query = firebase.database().ref(\\"users\\").orderByKey();
     * query.once(\\"value\\")
     *   .then(function(snapshot) {
     *     snapshot.forEach(function(childSnapshot) {
     *       var key = childSnapshot.key; // \\"ada\\"
     *
     *       // Cancel enumeration
     *       return true;
     *   });
     * });
     * \`\`\`
     *
     * @param action A function
     *   that will be called for each child DataSnapshot. The callback can return
     *   true to cancel further enumeration.
     * @return true if enumeration was canceled due to your callback
     *   returning true.
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.forEach",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "forEach",
                          "signature": "forEach: (action: (a: DataSnapshot) => boolean | void) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5467,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5467",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5467",
                          },
                          "type": "(action: (a: DataSnapshot) => boolean | void) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the priority value of the data in this \`DataSnapshot\`.
     *
     * Applications need not use priority but can order collections by
     * ordinary properties (see
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data
     *  Sorting and filtering data}).
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.getPriority",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getPriority",
                          "signature": "getPriority: () => string | number | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5479,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5479",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5479",
                          },
                          "type": "() => string | number | null",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if the specified child path has (non-null) data.
     *
     * @example
     * \`\`\`javascript
     * // Assume we have the following data in the Database:
     * {
     *   \\"name\\": {
     *     \\"first\\": \\"Ada\\",
     *     \\"last\\": \\"Lovelace\\"
     *   }
     * }
     *
     * // Determine which child keys in DataSnapshot have data.
     * var ref = firebase.database().ref(\\"users/ada\\");
     * ref.once(\\"value\\")
     *   .then(function(snapshot) {
     *     var hasName = snapshot.hasChild(\\"name\\"); // true
     *     var hasAge = snapshot.hasChild(\\"age\\"); // false
     *   });
     * \`\`\`
     *
     * @param path A relative path to the location of a potential child.
     * @return \`true\` if data exists at the specified child path; else
     *  \`false\`.
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.hasChild",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "hasChild",
                          "signature": "hasChild: (path: string) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5506,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5506",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5506",
                          },
                          "type": "(path: string) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns whether or not the \`DataSnapshot\` has any non-\`null\` child
     * properties.
     *
     * You can use \`hasChildren()\` to determine if a \`DataSnapshot\` has any
     * children. If it does, you can enumerate them using \`forEach()\`. If it
     * doesn't, then either this snapshot contains a primitive value (which can be
     * retrieved with \`val()\`) or it is empty (in which case, \`val()\` will return
     * \`null\`).
     *
     * @example
     * \`\`\`javascript
     * // Assume we have the following data in the Database:
     * {
     *   \\"name\\": {
     *     \\"first\\": \\"Ada\\",
     *     \\"last\\": \\"Lovelace\\"
     *   }
     * }
     *
     * var ref = firebase.database().ref(\\"users/ada\\");
     * ref.once(\\"value\\")
     *   .then(function(snapshot) {
     *     var a = snapshot.hasChildren(); // true
     *     var b = snapshot.child(\\"name\\").hasChildren(); // true
     *     var c = snapshot.child(\\"name/first\\").hasChildren(); // false
     *   });
     * \`\`\`
     *
     * @return true if this snapshot has any children; else false.
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.hasChildren",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "hasChildren",
                          "signature": "hasChildren: () => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5538,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5538",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5538",
                          },
                          "type": "() => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns the number of child properties of this \`DataSnapshot\`.
     *
     * @example
     * \`\`\`javascript
     * // Assume we have the following data in the Database:
     * {
     *   \\"name\\": {
     *     \\"first\\": \\"Ada\\",
     *     \\"last\\": \\"Lovelace\\"
     *   }
     * }
     *
     * var ref = firebase.database().ref(\\"users/ada\\");
     * ref.once(\\"value\\")
     *   .then(function(snapshot) {
     *     var a = snapshot.numChildren(); // 1 (\\"name\\")
     *     var b = snapshot.child(\\"name\\").numChildren(); // 2 (\\"first\\", \\"last\\")
     *     var c = snapshot.child(\\"name/first\\").numChildren(); // 0
     *   });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.numChildren",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "numChildren",
                          "signature": "numChildren: () => number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5598,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5598",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5598",
                          },
                          "type": "() => number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a JSON-serializable representation of this object.
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.toJSON",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "toJSON",
                          "signature": "toJSON: () => Object | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5644,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5644",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5644",
                          },
                          "type": "() => Object | null",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Extracts a JavaScript value from a \`DataSnapshot\`.
     *
     * Depending on the data in a \`DataSnapshot\`, the \`val()\` method may return a
     * scalar type (string, number, or boolean), an array, or an object. It may also
     * return null, indicating that the \`DataSnapshot\` is empty (contains no data).
     *
     * @example
     * \`\`\`javascript
     * // Write and then read back a string from the Database.
     * ref.set(\\"hello\\")
     *   .then(function() {
     *     return ref.once(\\"value\\");
     *   })
     *   .then(function(snapshot) {
     *     var data = snapshot.val(); // data === \\"hello\\"
     *   });
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // Write and then read back a JavaScript object from the Database.
     * ref.set({ name: \\"Ada\\", age: 36 })
     *   .then(function() {
     *    return ref.once(\\"value\\");
     *   })
     *   .then(function(snapshot) {
     *     var data = snapshot.val();
     *     // data is { \\"name\\": \\"Ada\\", \\"age\\": 36 }
     *     // data.name === \\"Ada\\"
     *     // data.age === 36
     *   });
     * \`\`\`
     *
     * @return The DataSnapshot's contents as a JavaScript value (Object,
     *   Array, string, number, boolean, or \`null\`).
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.val",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "val",
                          "signature": "val: () => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5636,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5636",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5636",
                          },
                          "type": "() => any",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The key (last part of the path) of the location of this \`DataSnapshot\`.
     *
     * The last token in a Database location is considered its key. For example,
     * \\"ada\\" is the key for the /users/ada/ node. Accessing the key on any
     * \`DataSnapshot\` will return the key for the location that generated it.
     * However, accessing the key on the root URL of a Database will return \`null\`.
     *
     * @example
     * \`\`\`javascript
     * // Assume we have the following data in the Database:
     * {
     *   \\"name\\": {
     *     \\"first\\": \\"Ada\\",
     *     \\"last\\": \\"Lovelace\\"
     *   }
     * }
     *
     * var ref = firebase.database().ref(\\"users/ada\\");
     * ref.once(\\"value\\")
     *   .then(function(snapshot) {
     *     var key = snapshot.key; // \\"ada\\"
     *     var childKey = snapshot.child(\\"name/last\\").key; // \\"last\\"
     *   });
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * var rootRef = firebase.database().ref();
     * rootRef.once(\\"value\\")
     *   .then(function(snapshot) {
     *     var key = snapshot.key; // null
     *     var childKey = snapshot.child(\\"users/ada\\").key; // \\"ada\\"
     *   });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.key",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "key",
                          "signature": "key: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5575,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5575",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5575",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The \`Reference\` for the location that generated this \`DataSnapshot\`.
     */",
                          ],
                          "id": "firebase.database.DataSnapshot.ref",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "ref",
                          "signature": "ref: firebase.database.Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5640,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5640",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5640",
                          },
                          "type": "Reference",
                        },
                      ],
                    },
                    "name": "DataSnapshot",
                    "signature": "interface DataSnapshot {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5329,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5329",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5329",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The \`onDisconnect\` class allows you to write or clear data when your client
   * disconnects from the Database server. These updates occur whether your
   * client disconnects cleanly or not, so you can rely on them to clean up data
   * even if a connection is dropped or a client crashes.
   *
   * The \`onDisconnect\` class is most commonly used to manage presence in
   * applications where it is useful to detect how many clients are connected and
   * when other clients disconnect. See
   * {@link
   *   https://firebase.google.com/docs/database/web/offline-capabilities
   *   Enabling Offline Capabilities in JavaScript} for more information.
   *
   * To avoid problems when a connection is dropped before the requests can be
   * transferred to the Database server, these functions should be called before
   * writing any data.
   *
   * Note that \`onDisconnect\` operations are only triggered once. If you want an
   * operation to occur each time a disconnect occurs, you'll need to re-establish
   * the \`onDisconnect\` operations each time you reconnect.
   */",
                    ],
                    "id": "firebase.database.OnDisconnect",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Cancels all previously queued \`onDisconnect()\` set or update events for this
     * location and all children.
     *
     * If a write has been queued for this location via a \`set()\` or \`update()\` at a
     * parent location, the write at this location will be canceled, though writes
     * to sibling locations will still occur.
     *
     * @example
     * \`\`\`javascript
     * var ref = firebase.database().ref(\\"onlineState\\");
     * ref.onDisconnect().set(false);
     * // ... sometime later
     * ref.onDisconnect().cancel();
     * \`\`\`
     *
     * @param onComplete An optional callback function that will
     *   be called when synchronization to the server has completed. The callback
     *   will be passed a single parameter: null for success, or an Error object
     *   indicating a failure.
     * @return Resolves when synchronization to the server
     *   is complete.
     */",
                          ],
                          "id": "firebase.database.OnDisconnect.cancel",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "cancel",
                          "signature": "cancel: (onComplete?: (a: Error | null) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5822,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5822",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5822",
                          },
                          "type": "(onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Ensures the data at this location is deleted when the client is disconnected
     * (due to closing the browser, navigating to a new page, or network issues).
     *
     * @param onComplete An optional callback function that will
     *   be called when synchronization to the server has completed. The callback
     *   will be passed a single parameter: null for success, or an Error object
     *   indicating a failure.
     * @return Resolves when synchronization to the server
     *   is complete.
     */",
                          ],
                          "id": "firebase.database.OnDisconnect.remove",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "remove",
                          "signature": "remove: (onComplete?: (a: Error | null) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5834,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5834",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5834",
                          },
                          "type": "(onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Ensures the data at this location is set to the specified value when the
     * client is disconnected (due to closing the browser, navigating to a new page,
     * or network issues).
     *
     * \`set()\` is especially useful for implementing \\"presence\\" systems, where a
     * value should be changed or cleared when a user disconnects so that they
     * appear \\"offline\\" to other users. See
     * {@link
     *   https://firebase.google.com/docs/database/web/offline-capabilities
     *   Enabling Offline Capabilities in JavaScript} for more information.
     *
     * Note that \`onDisconnect\` operations are only triggered once. If you want an
     * operation to occur each time a disconnect occurs, you'll need to re-establish
     * the \`onDisconnect\` operations each time.
     *
     * @example
     * \`\`\`javascript
     * var ref = firebase.database().ref(\\"users/ada/status\\");
     * ref.onDisconnect().set(\\"I disconnected!\\");
     * \`\`\`
     *
     * @param value The value to be written to this location on
     *   disconnect (can be an object, array, string, number, boolean, or null).
     * @param onComplete An optional callback function that
     *   will be called when synchronization to the Database server has completed.
     *   The callback will be passed a single parameter: null for success, or an
     *   \`Error\` object indicating a failure.
     * @return Resolves when synchronization to the
     *   Database is complete.
     */",
                          ],
                          "id": "firebase.database.OnDisconnect.set",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "set",
                          "signature": "set: (value: any, onComplete?: (a: Error | null) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5866,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5866",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5866",
                          },
                          "type": "(value: any, onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Ensures the data at this location is set to the specified value and priority
     * when the client is disconnected (due to closing the browser, navigating to a
     * new page, or network issues).
     */",
                          ],
                          "id": "firebase.database.OnDisconnect.setWithPriority",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setWithPriority",
                          "signature": "setWithPriority: (
    value: any,
    priority: number | string | null,
    onComplete?: (a: Error | null) => any
) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5872,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5872",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5872",
                          },
                          "type": "(value: any, priority: number | string | null, onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Writes multiple values at this location when the client is disconnected (due
     * to closing the browser, navigating to a new page, or network issues).
     *
     * The \`values\` argument contains multiple property-value pairs that will be
     * written to the Database together. Each child property can either be a simple
     * property (for example, \\"name\\") or a relative path (for example, \\"name/first\\")
     * from the current location to the data to update.
     *
     * As opposed to the \`set()\` method, \`update()\` can be use to selectively update
     * only the referenced properties at the current location (instead of replacing
     * all the child properties at the current location).
     *
     * See more examples using the connected version of
     * {@link firebase.database.Reference.update \`update()\`}.
     *
     * @example
     * \`\`\`javascript
     * var ref = firebase.database().ref(\\"users/ada\\");
     * ref.update({
     *    onlineState: true,
     *    status: \\"I'm online.\\"
     * });
     * ref.onDisconnect().update({
     *   onlineState: false,
     *   status: \\"I'm offline.\\"
     * });
     * \`\`\`
     *
     * @param values Object containing multiple values.
     * @param onComplete An optional callback function that will
     *   be called when synchronization to the server has completed. The
     *   callback will be passed a single parameter: null for success, or an Error
     *   object indicating a failure.
     * @return Resolves when synchronization to the
     *   Database is complete.
     */",
                          ],
                          "id": "firebase.database.OnDisconnect.update",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "update",
                          "signature": "update: (values: Object, onComplete?: (a: Error | null) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5914,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5914",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5914",
                          },
                          "type": "(values: Object, onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "OnDisconnect",
                    "signature": "interface OnDisconnect {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5798,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5798",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5798",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A \`Query\` sorts and filters the data at a Database location so only a subset
   * of the child data is included. This can be used to order a collection of
   * data by some attribute (for example, height of dinosaurs) as well as to
   * restrict a large list of items (for example, chat messages) down to a number
   * suitable for synchronizing to the client. Queries are created by chaining
   * together one or more of the filter methods defined here.
   *
   * Just as with a \`Reference\`, you can receive data from a \`Query\` by using the
   * \`on()\` method. You will only receive events and \`DataSnapshot\`s for the
   * subset of the data that matches your query.
   *
   * Read our documentation on
   * {@link
   *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data
   *  Sorting and filtering data} for more information.
   */",
                    ],
                    "id": "firebase.database.Query",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates a \`Query\` with the specified ending point.
     *
     * Using \`startAt()\`, \`endAt()\`, and \`equalTo()\` allows you to choose arbitrary
     * starting and ending points for your queries.
     *
     * The ending point is inclusive, so children with exactly the specified value
     * will be included in the query. The optional key argument can be used to
     * further limit the range of the query. If it is specified, then children that
     * have exactly the specified value must also have a key name less than or equal
     * to the specified key.
     *
     * You can read more about \`endAt()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data
     *  Filtering data}.
     *
     * @example
     * \`\`\`javascript
     * // Find all dinosaurs whose names come before Pterodactyl lexicographically.
     * var ref = firebase.database().ref(\\"dinosaurs\\");
     * ref.orderByKey().endAt(\\"pterodactyl\\").on(\\"child_added\\", function(snapshot) {
     *   console.log(snapshot.key);
     * });
     * \`\`\`
     *
     * @param value The value to end at. The argument
     *   type depends on which \`orderBy*()\` function was used in this query.
     *   Specify a value that matches the \`orderBy*()\` type. When used in
     *   combination with \`orderByKey()\`, the value must be a string.
     * @param key The child key to end at, among the children with the
     *   previously specified priority. This argument is only allowed if ordering by
     *   child, value, or priority.
     */",
                          ],
                          "id": "firebase.database.Query.endAt",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "endAt",
                          "signature": "endAt: (value: number | string | boolean | null, key?: string) => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5976,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5976",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5976",
                          },
                          "type": "(value: number | string | boolean | null, key?: string) => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a \`Query\` that includes children that match the specified value.
     *
     * Using \`startAt()\`, \`endAt()\`, and \`equalTo()\` allows us to choose arbitrary
     * starting and ending points for our queries.
     *
     * The optional key argument can be used to further limit the range of the
     * query. If it is specified, then children that have exactly the specified
     * value must also have exactly the specified key as their key name. This can be
     * used to filter result sets with many matches for the same value.
     *
     * You can read more about \`equalTo()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data
     *  Filtering data}.
     *
     * @example
     * \`\`\`javascript
     * // Find all dinosaurs whose height is exactly 25 meters.
     * var ref = firebase.database().ref(\\"dinosaurs\\");
     * ref.orderByChild(\\"height\\").equalTo(25).on(\\"child_added\\", function(snapshot) {
     *   console.log(snapshot.key);
     * });
     * \`\`\`
     *
     * @param value The value to match for. The
     *   argument type depends on which \`orderBy*()\` function was used in this
     *   query. Specify a value that matches the \`orderBy*()\` type. When used in
     *   combination with \`orderByKey()\`, the value must be a string.
     * @param key The child key to start at, among the children with the
     *   previously specified priority. This argument is only allowed if ordering by
     *   child, value, or priority.
     */",
                          ],
                          "id": "firebase.database.Query.equalTo",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "equalTo",
                          "signature": "equalTo: (value: number | string | boolean | null, key?: string) => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6013,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6013",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6013",
                          },
                          "type": "(value: number | string | boolean | null, key?: string) => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the most up-to-date result for this query.
     *
     * @return A promise which resolves to the resulting DataSnapshot if
     * a value is available, or rejects if the client is unable to return
     * a value (e.g., if the server is unreachable and there is nothing
     * cached).
     */",
                          ],
                          "id": "firebase.database.Query.get",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "get",
                          "signature": "get: () => Promise<DataSnapshot>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6182,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6182",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6182",
                          },
                          "type": "() => Promise<DataSnapshot>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns whether or not the current and provided queries represent the same
     * location, have the same query parameters, and are from the same instance of
     * \`firebase.app.App\`.
     *
     * Two \`Reference\` objects are equivalent if they represent the same location
     * and are from the same instance of \`firebase.app.App\`.
     *
     * Two \`Query\` objects are equivalent if they represent the same location, have
     * the same query parameters, and are from the same instance of
     * \`firebase.app.App\`. Equivalent queries share the same sort order, limits, and
     * starting and ending points.
     *
     * @example
     * \`\`\`javascript
     * var rootRef = firebase.database.ref();
     * var usersRef = rootRef.child(\\"users\\");
     *
     * usersRef.isEqual(rootRef);  // false
     * usersRef.isEqual(rootRef.child(\\"users\\"));  // true
     * usersRef.parent.isEqual(rootRef);  // true
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * var rootRef = firebase.database.ref();
     * var usersRef = rootRef.child(\\"users\\");
     * var usersQuery = usersRef.limitToLast(10);
     *
     * usersQuery.isEqual(usersRef);  // false
     * usersQuery.isEqual(usersRef.limitToLast(10));  // true
     * usersQuery.isEqual(rootRef.limitToLast(10));  // false
     * usersQuery.isEqual(usersRef.orderByKey().limitToLast(10));  // false
     * \`\`\`
     *
     * @param other The query to compare against.
     * @return Whether or not the current and provided queries are
     *   equivalent.
     */",
                          ],
                          "id": "firebase.database.Query.isEqual",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: Query) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6056,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6056",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6056",
                          },
                          "type": "(other: Query) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Generates a new \`Query\` limited to the first specific number of children.
     *
     * The \`limitToFirst()\` method is used to set a maximum number of children to be
     * synced for a given callback. If we set a limit of 100, we will initially only
     * receive up to 100 \`child_added\` events. If we have fewer than 100 messages
     * stored in our Database, a \`child_added\` event will fire for each message.
     * However, if we have over 100 messages, we will only receive a \`child_added\`
     * event for the first 100 ordered messages. As items change, we will receive
     * \`child_removed\` events for each item that drops out of the active list so
     * that the total number stays at 100.
     *
     * You can read more about \`limitToFirst()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data
     *  Filtering data}.
     *
     * @example
     * \`\`\`javascript
     * // Find the two shortest dinosaurs.
     * var ref = firebase.database().ref(\\"dinosaurs\\");
     * ref.orderByChild(\\"height\\").limitToFirst(2).on(\\"child_added\\", function(snapshot) {
     *   // This will be called exactly two times (unless there are less than two
     *   // dinosaurs in the Database).
     *
     *   // It will also get fired again if one of the first two dinosaurs is
     *   // removed from the data set, as a new dinosaur will now be the second
     *   // shortest.
     *   console.log(snapshot.key);
     * });
     * \`\`\`
     *
     * @param limit The maximum number of nodes to include in this query.
     */",
                          ],
                          "id": "firebase.database.Query.limitToFirst",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "limitToFirst",
                          "signature": "limitToFirst: (limit: number) => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6091,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6091",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6091",
                          },
                          "type": "(limit: number) => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Generates a new \`Query\` object limited to the last specific number of
     * children.
     *
     * The \`limitToLast()\` method is used to set a maximum number of children to be
     * synced for a given callback. If we set a limit of 100, we will initially only
     * receive up to 100 \`child_added\` events. If we have fewer than 100 messages
     * stored in our Database, a \`child_added\` event will fire for each message.
     * However, if we have over 100 messages, we will only receive a \`child_added\`
     * event for the last 100 ordered messages. As items change, we will receive
     * \`child_removed\` events for each item that drops out of the active list so
     * that the total number stays at 100.
     *
     * You can read more about \`limitToLast()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data
     *  Filtering data}.
     *
     * @example
     * \`\`\`javascript
     * // Find the two heaviest dinosaurs.
     * var ref = firebase.database().ref(\\"dinosaurs\\");
     * ref.orderByChild(\\"weight\\").limitToLast(2).on(\\"child_added\\", function(snapshot) {
     *   // This callback will be triggered exactly two times, unless there are
     *   // fewer than two dinosaurs stored in the Database. It will also get fired
     *   // for every new, heavier dinosaur that gets added to the data set.
     *   console.log(snapshot.key);
     * });
     * \`\`\`
     *
     * @param limit The maximum number of nodes to include in this query.
     */",
                          ],
                          "id": "firebase.database.Query.limitToLast",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "limitToLast",
                          "signature": "limitToLast: (limit: number) => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6124,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6124",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6124",
                          },
                          "type": "(limit: number) => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Detaches a callback previously attached with \`on()\`.
     *
     * Detach a callback previously attached with \`on()\`. Note that if \`on()\` was
     * called multiple times with the same eventType and callback, the callback
     * will be called multiple times for each event, and \`off()\` must be called
     * multiple times to remove the callback. Calling \`off()\` on a parent listener
     * will not automatically remove listeners registered on child nodes, \`off()\`
     * must also be called on any child listeners to remove the callback.
     *
     * If a callback is not specified, all callbacks for the specified eventType
     * will be removed. Similarly, if no eventType is specified, all callbacks
     * for the \`Reference\` will be removed.
     *
     * @example
     * \`\`\`javascript
     * var onValueChange = function(dataSnapshot) {  ... };
     * ref.on('value', onValueChange);
     * ref.child('meta-data').on('child_added', onChildAdded);
     * // Sometime later...
     * ref.off('value', onValueChange);
     *
     * // You must also call off() for any child listeners on ref
     * // to cancel those callbacks
     * ref.child('meta-data').off('child_added', onValueAdded);
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // Or you can save a line of code by using an inline function
     * // and on()'s return value.
     * var onValueChange = ref.on('value', function(dataSnapshot) { ... });
     * // Sometime later...
     * ref.off('value', onValueChange);
     * \`\`\`
     *
     * @param eventType One of the following strings: \\"value\\",
     *   \\"child_added\\", \\"child_changed\\", \\"child_removed\\", or \\"child_moved.\\" If
     *   omitted, all callbacks for the \`Reference\` will be removed.
     * @param callback The callback function that was passed to \`on()\` or
     *   \`undefined\` to remove all callbacks.
     * @param context The context that was passed to \`on()\`.
     */",
                          ],
                          "id": "firebase.database.Query.off",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "off",
                          "signature": "off: (
    eventType?: EventType,
    callback?: (a: DataSnapshot, b?: string | null) => any,
    context?: Object | null
) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6168,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6168",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6168",
                          },
                          "type": "(eventType?: EventType, callback?: (a: DataSnapshot, b?: string | null) => any, context?: Object | null) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Listens for data changes at a particular location.
     *
     * This is the primary way to read data from a Database. Your callback
     * will be triggered for the initial data and again whenever the data changes.
     * Use \`off( )\` to stop receiving updates. See
     * {@link https://firebase.google.com/docs/database/web/retrieve-data
     *   Retrieve Data on the Web}
     * for more details.
     *
     * <h4>value event</h4>
     *
     * This event will trigger once with the initial data stored at this location,
     * and then trigger again each time the data changes. The \`DataSnapshot\` passed
     * to the callback will be for the location at which \`on()\` was called. It
     * won't trigger until the entire contents has been synchronized. If the
     * location has no data, it will be triggered with an empty \`DataSnapshot\`
     * (\`val()\` will return \`null\`).
     *
     * <h4>child_added event</h4>
     *
     * This event will be triggered once for each initial child at this location,
     * and it will be triggered again every time a new child is added. The
     * \`DataSnapshot\` passed into the callback will reflect the data for the
     * relevant child. For ordering purposes, it is passed a second argument which
     * is a string containing the key of the previous sibling child by sort order,
     * or \`null\` if it is the first child.
     *
     * <h4>child_removed event</h4>
     *
     * This event will be triggered once every time a child is removed. The
     * \`DataSnapshot\` passed into the callback will be the old data for the child
     * that was removed. A child will get removed when either:
     *
     * - a client explicitly calls \`remove()\` on that child or one of its ancestors
     * - a client calls \`set(null)\` on that child or one of its ancestors
     * - that child has all of its children removed
     * - there is a query in effect which now filters out the child (because it's
     *   sort order changed or the max limit was hit)
     *
     * <h4>child_changed event</h4>
     *
     * This event will be triggered when the data stored in a child (or any of its
     * descendants) changes. Note that a single \`child_changed\` event may represent
     * multiple changes to the child. The \`DataSnapshot\` passed to the callback will
     * contain the new child contents. For ordering purposes, the callback is also
     * passed a second argument which is a string containing the key of the previous
     * sibling child by sort order, or \`null\` if it is the first child.
     *
     * <h4>child_moved event</h4>
     *
     * This event will be triggered when a child's sort order changes such that its
     * position relative to its siblings changes. The \`DataSnapshot\` passed to the
     * callback will be for the data of the child that has moved. It is also passed
     * a second argument which is a string containing the key of the previous
     * sibling child by sort order, or \`null\` if it is the first child.
     *
     * @example **Handle a new value:**
     * \`\`\`javascript
     * ref.on('value', function(dataSnapshot) {
     *   ...
     * });
     * \`\`\`
     *
     * @example **Handle a new child:**
     * \`\`\`javascript
     * ref.on('child_added', function(childSnapshot, prevChildKey) {
     *   ...
     * });
     * \`\`\`
     *
     * @example **Handle child removal:**
     * \`\`\`javascript
     * ref.on('child_removed', function(oldChildSnapshot) {
     *   ...
     * });
     * \`\`\`
     *
     * @example **Handle child data changes:**
     * \`\`\`javascript
     * ref.on('child_changed', function(childSnapshot, prevChildKey) {
     *   ...
     * });
     * \`\`\`
     *
     * @example **Handle child ordering changes:**
     * \`\`\`javascript
     * ref.on('child_moved', function(childSnapshot, prevChildKey) {
     *   ...
     * });
     * \`\`\`
     *
     * @param eventType One of the following strings: \\"value\\",
     *   \\"child_added\\", \\"child_changed\\", \\"child_removed\\", or \\"child_moved.\\"
     * @param callback A
     *   callback that fires when the specified event occurs. The callback will be
     *   passed a DataSnapshot. For ordering purposes, \\"child_added\\",
     *   \\"child_changed\\", and \\"child_moved\\" will also be passed a string containing
     *   the key of the previous child, by sort order, or \`null\` if it is the
     *   first child.
     * @param cancelCallbackOrContext An optional
     *   callback that will be notified if your event subscription is ever canceled
     *   because your client does not have permission to read this data (or it had
     *   permission but has now lost it). This callback will be passed an \`Error\`
     *   object indicating why the failure occurred.
     * @param context If provided, this object will be used as \`this\`
     *   when calling your callback(s).
     * @return The provided
     *   callback function is returned unmodified. This is just for convenience if
     *   you want to pass an inline function to \`on()\` but store the callback
     *   function for later passing to \`off()\`.
     */",
                          ],
                          "id": "firebase.database.Query.on",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "on",
                          "signature": "on: (
    eventType: EventType,
    callback: (a: DataSnapshot, b?: string | null) => any,
    cancelCallbackOrContext?: Object | ((a: Error) => any),
    context?: Object | null
) => (a: DataSnapshot, b?: string | null) => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6296,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6296",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6296",
                          },
                          "type": "(eventType: EventType, callback: (a: DataSnapshot, b?: string | null) => any, cancelCallbackOrContext?: Object | ((a: Error) => any), context?: Object | null) => (a: DataSnapshot, b?: string | null) => any",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Listens for exactly one event of the specified event type, and then stops
     * listening.
     *
     * This is equivalent to calling {@link firebase.database.Query.on \`on()\`}, and
     * then calling {@link firebase.database.Query.off \`off()\`} inside the callback
     * function. See {@link firebase.database.Query.on \`on()\`} for details on the
     * event types.
     *
     * @example
     * \`\`\`javascript
     * // Basic usage of .once() to read the data located at ref.
     * ref.once('value')
     *   .then(function(dataSnapshot) {
     *     // handle read data.
     *   });
     * \`\`\`
     *
     * @param eventType One of the following strings: \\"value\\",
     *   \\"child_added\\", \\"child_changed\\", \\"child_removed\\", or \\"child_moved.\\"
     * @param successCallback A
     *   callback that fires when the specified event occurs. The callback will be
     *   passed a DataSnapshot. For ordering purposes, \\"child_added\\",
     *   \\"child_changed\\", and \\"child_moved\\" will also be passed a string containing
     *   the key of the previous child by sort order, or \`null\` if it is the
     *   first child.
     * @param failureCallbackOrContext An optional
     *   callback that will be notified if your client does not have permission to
     *   read the data. This callback will be passed an \`Error\` object indicating
     *   why the failure occurred.
     * @param context If provided, this object will be used as \`this\`
     *   when calling your callback(s).
     */",
                          ],
                          "id": "firebase.database.Query.once",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "once",
                          "signature": "once: (
    eventType: EventType,
    successCallback?: (a: DataSnapshot, b?: string | null) => any,
    failureCallbackOrContext?: Object | ((a: Error) => void),
    context?: Object | null
) => Promise<DataSnapshot>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6336,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6336",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6336",
                          },
                          "type": "(eventType: EventType, successCallback?: (a: DataSnapshot, b?: string | null) => any, failureCallbackOrContext?: Object | ((a: Error) => void), context?: Object | null) => Promise<DataSnapshot>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Generates a new \`Query\` object ordered by the specified child key.
     *
     * Queries can only order by one key at a time. Calling \`orderByChild()\`
     * multiple times on the same query is an error.
     *
     * Firebase queries allow you to order your data by any child key on the fly.
     * However, if you know in advance what your indexes will be, you can define
     * them via the .indexOn rule in your Security Rules for better performance. See
     * the {@link https://firebase.google.com/docs/database/security/indexing-data
     * .indexOn} rule for more information.
     *
     * You can read more about \`orderByChild()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data
     *  Sort data}.
     *
     * @example
     * \`\`\`javascript
     * var ref = firebase.database().ref(\\"dinosaurs\\");
     * ref.orderByChild(\\"height\\").on(\\"child_added\\", function(snapshot) {
     *   console.log(snapshot.key + \\" was \\" + snapshot.val().height + \\" m tall\\");
     * });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Query.orderByChild",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "orderByChild",
                          "signature": "orderByChild: (path: string) => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6370,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6370",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6370",
                          },
                          "type": "(path: string) => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Generates a new \`Query\` object ordered by key.
     *
     * Sorts the results of a query by their (ascending) key values.
     *
     * You can read more about \`orderByKey()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data
     *  Sort data}.
     *
     * @example
     * \`\`\`javascript
     * var ref = firebase.database().ref(\\"dinosaurs\\");
     * ref.orderByKey().on(\\"child_added\\", function(snapshot) {
     *   console.log(snapshot.key);
     * });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Query.orderByKey",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "orderByKey",
                          "signature": "orderByKey: () => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6389,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6389",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6389",
                          },
                          "type": "() => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Generates a new \`Query\` object ordered by priority.
     *
     * Applications need not use priority but can order collections by
     * ordinary properties (see
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data
     *  Sort data} for alternatives to priority.
     */",
                          ],
                          "id": "firebase.database.Query.orderByPriority",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "orderByPriority",
                          "signature": "orderByPriority: () => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6399,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6399",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6399",
                          },
                          "type": "() => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Generates a new \`Query\` object ordered by value.
     *
     * If the children of a query are all scalar values (string, number, or
     * boolean), you can order the results by their (ascending) values.
     *
     * You can read more about \`orderByValue()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#sort_data
     *  Sort data}.
     *
     * @example
     * \`\`\`javascript
     * var scoresRef = firebase.database().ref(\\"scores\\");
     * scoresRef.orderByValue().limitToLast(3).on(\\"value\\", function(snapshot) {
     *   snapshot.forEach(function(data) {
     *     console.log(\\"The \\" + data.key + \\" score is \\" + data.val());
     *   });
     * });
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Query.orderByValue",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "orderByValue",
                          "signature": "orderByValue: () => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6421,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6421",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6421",
                          },
                          "type": "() => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a \`Query\` with the specified starting point.
     *
     * Using \`startAt()\`, \`endAt()\`, and \`equalTo()\` allows you to choose arbitrary
     * starting and ending points for your queries.
     *
     * The starting point is inclusive, so children with exactly the specified value
     * will be included in the query. The optional key argument can be used to
     * further limit the range of the query. If it is specified, then children that
     * have exactly the specified value must also have a key name greater than or
     * equal to the specified key.
     *
     * You can read more about \`startAt()\` in
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#filtering_data
     *  Filtering data}.
     *
     * @example
     * \`\`\`javascript
     * // Find all dinosaurs that are at least three meters tall.
     * var ref = firebase.database().ref(\\"dinosaurs\\");
     * ref.orderByChild(\\"height\\").startAt(3).on(\\"child_added\\", function(snapshot) {
     *   console.log(snapshot.key)
     * });
     * \`\`\`
     *
     * @param value The value to start at. The argument
     *   type depends on which \`orderBy*()\` function was used in this query.
     *   Specify a value that matches the \`orderBy*()\` type. When used in
     *   combination with \`orderByKey()\`, the value must be a string.
     * @param key The child key to start at. This argument is only allowed
     *   if ordering by child, value, or priority.
     */",
                          ],
                          "id": "firebase.database.Query.startAt",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "startAt",
                          "signature": "startAt: (value: number | string | boolean | null, key?: string) => Query;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6459,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6459",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6459",
                          },
                          "type": "(value: number | string | boolean | null, key?: string) => Query",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a JSON-serializable representation of this object.
     *
     * @return A JSON-serializable representation of this object.
     */",
                          ],
                          "id": "firebase.database.Query.toJSON",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "toJSON",
                          "signature": "toJSON: () => Object;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6468,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6468",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6468",
                          },
                          "type": "() => Object",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the absolute URL for this location.
     *
     * The \`toString()\` method returns a URL that is ready to be put into a browser,
     * curl command, or a \`firebase.database().refFromURL()\` call. Since all of
     * those expect the URL to be url-encoded, \`toString()\` returns an encoded URL.
     *
     * Append '.json' to the returned URL when typed into a browser to download
     * JSON-formatted data. If the location is secured (that is, not publicly
     * readable), you will get a permission-denied error.
     *
     * @example
     * \`\`\`javascript
     * // Calling toString() on a root Firebase reference returns the URL where its
     * // data is stored within the Database:
     * var rootRef = firebase.database().ref();
     * var rootUrl = rootRef.toString();
     * // rootUrl === \\"https://sample-app.firebaseio.com/\\".
     *
     * // Calling toString() at a deeper Firebase reference returns the URL of that
     * // deep path within the Database:
     * var adaRef = rootRef.child('users/ada');
     * var adaURL = adaRef.toString();
     * // adaURL === \\"https://sample-app.firebaseio.com/users/ada\\".
     * \`\`\`
     *
     * @return The absolute URL for this location.
     */",
                          ],
                          "id": "firebase.database.Query.toString",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "toString",
                          "signature": "toString: () => string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6497,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6497",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6497",
                          },
                          "type": "() => string",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns a \`Reference\` to the \`Query\`'s location.
     */",
                          ],
                          "id": "firebase.database.Query.ref",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "ref",
                          "signature": "ref: firebase.database.Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6425,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6425",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6425",
                          },
                          "type": "Reference",
                        },
                      ],
                    },
                    "name": "Query",
                    "signature": "interface Query {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5941,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5941",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5941",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * A \`Reference\` represents a specific location in your Database and can be used
   * for reading or writing data to that Database location.
   *
   * You can reference the root or child location in your Database by calling
   * \`firebase.database().ref()\` or \`firebase.database().ref(\\"child/path\\")\`.
   *
   * Writing is done with the \`set()\` method and reading can be done with the
   * \`on()\` method. See
   * {@link
   *   https://firebase.google.com/docs/database/web/read-and-write
   *   Read and Write Data on the Web}
   */",
                    ],
                    "id": "firebase.database.Reference",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Gets a \`Reference\` for the location at the specified relative path.
     *
     * The relative path can either be a simple child name (for example, \\"ada\\") or
     * a deeper slash-separated path (for example, \\"ada/name/first\\").
     *
     * @example
     * \`\`\`javascript
     * var usersRef = firebase.database().ref('users');
     * var adaRef = usersRef.child('ada');
     * var adaFirstNameRef = adaRef.child('name/first');
     * var path = adaFirstNameRef.toString();
     * // path is now 'https://sample-app.firebaseio.com/users/ada/name/first'
     * \`\`\`
     *
     * @param path A relative path from this location to the desired child
     *   location.
     * @return The specified child location.
     */",
                          ],
                          "id": "firebase.database.Reference.child",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "child",
                          "signature": "child: (path: string) => Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6533,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6533",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6533",
                          },
                          "type": "(path: string) => Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns an \`OnDisconnect\` object - see
     * {@link
     *   https://firebase.google.com/docs/database/web/offline-capabilities
     *   Enabling Offline Capabilities in JavaScript} for more information on how
     * to use it.
     */",
                          ],
                          "id": "firebase.database.Reference.onDisconnect",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onDisconnect",
                          "signature": "onDisconnect: () => OnDisconnect;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6565,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6565",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6565",
                          },
                          "type": "() => OnDisconnect",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Generates a new child location using a unique key and returns its
     * \`Reference\`.
     *
     * This is the most common pattern for adding data to a collection of items.
     *
     * If you provide a value to \`push()\`, the value is written to the
     * generated location. If you don't pass a value, nothing is written to the
     * database and the child remains empty (but you can use the \`Reference\`
     * elsewhere).
     *
     * The unique keys generated by \`push()\` are ordered by the current time, so the
     * resulting list of items is chronologically sorted. The keys are also
     * designed to be unguessable (they contain 72 random bits of entropy).
     *
     *
     * See
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data
     *  Append to a list of data}
     * </br>See
     * {@link
     *  https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html
     *  The 2^120 Ways to Ensure Unique Identifiers}
     *
     * @example
     * \`\`\`javascript
     * var messageListRef = firebase.database().ref('message_list');
     * var newMessageRef = messageListRef.push();
     * newMessageRef.set({
     *   'user_id': 'ada',
     *   'text': 'The Analytical Engine weaves algebraical patterns just as the Jacquard loom weaves flowers and leaves.'
     * });
     * // We've appended a new message to the message_list location.
     * var path = newMessageRef.toString();
     * // path will be something like
     * // 'https://sample-app.firebaseio.com/message_list/-IKo28nwJLH0Nc5XeFmj'
     * \`\`\`
     *
     * @param value Optional value to be written at the generated location.
     * @param onComplete Callback called when write to server is
     *   complete.
     * @return Combined \`Promise\` and \`Reference\`; resolves when write is complete, but can be
     *   used immediately as the \`Reference\` to the child location.
     */",
                          ],
                          "id": "firebase.database.Reference.push",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "push",
                          "signature": "push: (value?: any, onComplete?: (a: Error | null) => any) => ThenableReference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6632,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6632",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6632",
                          },
                          "type": "(value?: any, onComplete?: (a: Error | null) => any) => ThenableReference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Removes the data at this Database location.
     *
     * Any data at child locations will also be deleted.
     *
     * The effect of the remove will be visible immediately and the corresponding
     * event 'value' will be triggered. Synchronization of the remove to the
     * Firebase servers will also be started, and the returned Promise will resolve
     * when complete. If provided, the onComplete callback will be called
     * asynchronously after synchronization has finished.
     *
     * @example
     * \`\`\`javascript
     * var adaRef = firebase.database().ref('users/ada');
     * adaRef.remove()
     *   .then(function() {
     *     console.log(\\"Remove succeeded.\\")
     *   })
     *   .catch(function(error) {
     *     console.log(\\"Remove failed: \\" + error.message)
     *   });
     * \`\`\`
     *
     * @param onComplete Callback called when write to server is
     *   complete.
     * @return Resolves when remove on server is complete.
     */",
                          ],
                          "id": "firebase.database.Reference.remove",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "remove",
                          "signature": "remove: (onComplete?: (a: Error | null) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6663,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6663",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6663",
                          },
                          "type": "(onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Writes data to this Database location.
     *
     * This will overwrite any data at this location and all child locations.
     *
     * The effect of the write will be visible immediately, and the corresponding
     * events (\\"value\\", \\"child_added\\", etc.) will be triggered. Synchronization of
     * the data to the Firebase servers will also be started, and the returned
     * Promise will resolve when complete. If provided, the \`onComplete\` callback
     * will be called asynchronously after synchronization has finished.
     *
     * Passing \`null\` for the new value is equivalent to calling \`remove()\`; namely,
     * all data at this location and all child locations will be deleted.
     *
     * \`set()\` will remove any priority stored at this location, so if priority is
     * meant to be preserved, you need to use \`setWithPriority()\` instead.
     *
     * Note that modifying data with \`set()\` will cancel any pending transactions
     * at that location, so extreme care should be taken if mixing \`set()\` and
     * \`transaction()\` to modify the same data.
     *
     * A single \`set()\` will generate a single \\"value\\" event at the location where
     * the \`set()\` was performed.
     *
     * @example
     * \`\`\`javascript
     * var adaNameRef = firebase.database().ref('users/ada/name');
     * adaNameRef.child('first').set('Ada');
     * adaNameRef.child('last').set('Lovelace');
     * // We've written 'Ada' to the Database location storing Ada's first name,
     * // and 'Lovelace' to the location storing her last name.
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * adaNameRef.set({ first: 'Ada', last: 'Lovelace' });
     * // Exact same effect as the previous example, except we've written
     * // Ada's first and last name simultaneously.
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * adaNameRef.set({ first: 'Ada', last: 'Lovelace' })
     *   .then(function() {
     *     console.log('Synchronization succeeded');
     *   })
     *   .catch(function(error) {
     *     console.log('Synchronization failed');
     *   });
     * // Same as the previous example, except we will also log a message
     * // when the data has finished synchronizing.
     * \`\`\`
     *
     * @param value The value to be written (string, number, boolean, object,
     *   array, or null).
     * @param onComplete Callback called when write to server is
     *   complete.
     * @return Resolves when write to server is complete.
     */",
                          ],
                          "id": "firebase.database.Reference.set",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "set",
                          "signature": "set: (value: any, onComplete?: (a: Error | null) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6741,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6741",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6741",
                          },
                          "type": "(value: any, onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets a priority for the data at this Database location.
     *
     * Applications need not use priority but can order collections by
     * ordinary properties (see
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data
     *  Sorting and filtering data}).
     */",
                          ],
                          "id": "firebase.database.Reference.setPriority",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setPriority",
                          "signature": "setPriority: (
    priority: string | number | null,
    onComplete: (a: Error | null) => any
) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6751,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6751",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6751",
                          },
                          "type": "(priority: string | number | null, onComplete: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Writes data the Database location. Like \`set()\` but also specifies the
     * priority for that data.
     *
     * Applications need not use priority but can order collections by
     * ordinary properties (see
     * {@link
     *  https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data
     *  Sorting and filtering data}).
     */",
                          ],
                          "id": "firebase.database.Reference.setWithPriority",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setWithPriority",
                          "signature": "setWithPriority: (
    newVal: any,
    newPriority: string | number | null,
    onComplete?: (a: Error | null) => any
) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6765,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6765",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6765",
                          },
                          "type": "(newVal: any, newPriority: string | number | null, onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Atomically modifies the data at this location.
     *
     * Atomically modify the data at this location. Unlike a normal \`set()\`, which
     * just overwrites the data regardless of its previous value, \`transaction()\` is
     * used to modify the existing value to a new value, ensuring there are no
     * conflicts with other clients writing to the same location at the same time.
     *
     * To accomplish this, you pass \`transaction()\` an update function which is used
     * to transform the current value into a new value. If another client writes to
     * the location before your new value is successfully written, your update
     * function will be called again with the new current value, and the write will
     * be retried. This will happen repeatedly until your write succeeds without
     * conflict or you abort the transaction by not returning a value from your
     * update function.
     *
     * Note: Modifying data with \`set()\` will cancel any pending transactions at
     * that location, so extreme care should be taken if mixing \`set()\` and
     * \`transaction()\` to update the same data.
     *
     * Note: When using transactions with Security and Firebase Rules in place, be
     * aware that a client needs \`.read\` access in addition to \`.write\` access in
     * order to perform a transaction. This is because the client-side nature of
     * transactions requires the client to read the data in order to transactionally
     * update it.
     *
     * @example
     * \`\`\`javascript
     * // Increment Ada's rank by 1.
     * var adaRankRef = firebase.database().ref('users/ada/rank');
     * adaRankRef.transaction(function(currentRank) {
     *   // If users/ada/rank has never been set, currentRank will be \`null\`.
     *   return currentRank + 1;
     * });
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // Try to create a user for ada, but only if the user id 'ada' isn't
     * // already taken
     * var adaRef = firebase.database().ref('users/ada');
     * adaRef.transaction(function(currentData) {
     *   if (currentData === null) {
     *     return { name: { first: 'Ada', last: 'Lovelace' } };
     *   } else {
     *     console.log('User ada already exists.');
     *     return; // Abort the transaction.
     *   }
     * }, function(error, committed, snapshot) {
     *   if (error) {
     *     console.log('Transaction failed abnormally!', error);
     *   } else if (!committed) {
     *     console.log('We aborted the transaction (because ada already exists).');
     *   } else {
     *     console.log('User ada added!');
     *   }
     *   console.log(\\"Ada's data: \\", snapshot.val());
     * });
     * \`\`\`
     *
     * @param transactionUpdate A developer-supplied function which
     *   will be passed the current data stored at this location (as a JavaScript
     *   object). The function should return the new value it would like written (as
     *   a JavaScript object). If \`undefined\` is returned (i.e. you return with no
     *   arguments) the transaction will be aborted and the data at this location
     *   will not be modified.
     * @param onComplete A callback
     *   function that will be called when the transaction completes. The callback
     *   is passed three arguments: a possibly-null \`Error\`, a \`boolean\` indicating
     *   whether the transaction was committed, and a \`DataSnapshot\` indicating the
     *   final result. If the transaction failed abnormally, the first argument will
     *   be an \`Error\` object indicating the failure cause. If the transaction
     *   finished normally, but no data was committed because no data was returned
     *   from \`transactionUpdate\`, then second argument will be false. If the
     *   transaction completed and committed data to Firebase, the second argument
     *   will be true. Regardless, the third argument will be a \`DataSnapshot\`
     *   containing the resulting data in this location.
     * @param applyLocally By default, events are raised each time the
     *   transaction update function runs. So if it is run multiple times, you may
     *   see intermediate states. You can set this to false to suppress these
     *   intermediate states and instead wait until the transaction has completed
     *   before events are raised.
     * @return Returns a Promise that can optionally be used instead of the onComplete
     *   callback to handle success and failure.
     */",
                          ],
                          "id": "firebase.database.Reference.transaction",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "transaction",
                          "signature": "transaction: (
    transactionUpdate: (a: any) => any,
    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot) => any,
    applyLocally?: boolean
) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6855,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6855",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6855",
                          },
                          "type": "(transactionUpdate: (a: any) => any, onComplete?: (a: Error | null, b: boolean, c: DataSnapshot) => any, applyLocally?: boolean) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Writes multiple values to the Database at once.
     *
     * The \`values\` argument contains multiple property-value pairs that will be
     * written to the Database together. Each child property can either be a simple
     * property (for example, \\"name\\") or a relative path (for example,
     * \\"name/first\\") from the current location to the data to update.
     *
     * As opposed to the \`set()\` method, \`update()\` can be use to selectively update
     * only the referenced properties at the current location (instead of replacing
     * all the child properties at the current location).
     *
     * The effect of the write will be visible immediately, and the corresponding
     * events ('value', 'child_added', etc.) will be triggered. Synchronization of
     * the data to the Firebase servers will also be started, and the returned
     * Promise will resolve when complete. If provided, the \`onComplete\` callback
     * will be called asynchronously after synchronization has finished.
     *
     * A single \`update()\` will generate a single \\"value\\" event at the location
     * where the \`update()\` was performed, regardless of how many children were
     * modified.
     *
     * Note that modifying data with \`update()\` will cancel any pending
     * transactions at that location, so extreme care should be taken if mixing
     * \`update()\` and \`transaction()\` to modify the same data.
     *
     * Passing \`null\` to \`update()\` will remove the data at this location.
     *
     * See
     * {@link
     *  https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html
     *  Introducing multi-location updates and more}.
     *
     * @example
     * \`\`\`javascript
     * var adaNameRef = firebase.database().ref('users/ada/name');
     * // Modify the 'first' and 'last' properties, but leave other data at
     * // adaNameRef unchanged.
     * adaNameRef.update({ first: 'Ada', last: 'Lovelace' });
     * \`\`\`
     *
     * @param values Object containing multiple values.
     * @param onComplete Callback called when write to server is
     *   complete.
     * @return Resolves when update on server is complete.
     */",
                          ],
                          "id": "firebase.database.Reference.update",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "update",
                          "signature": "update: (values: Object, onComplete?: (a: Error | null) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6910,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6910",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6910",
                          },
                          "type": "(values: Object, onComplete?: (a: Error | null) => any) => Promise<any>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The last part of the \`Reference\`'s path.
     *
     * For example, \`\\"ada\\"\` is the key for
     * \`https://<DATABASE_NAME>.firebaseio.com/users/ada\`.
     *
     * The key of a root \`Reference\` is \`null\`.
     *
     * @example
     * \`\`\`javascript
     * // The key of a root reference is null
     * var rootRef = firebase.database().ref();
     * var key = rootRef.key;  // key === null
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // The key of any non-root reference is the last token in the path
     * var adaRef = firebase.database().ref(\\"users/ada\\");
     * var key = adaRef.key;  // key === \\"ada\\"
     * key = adaRef.child(\\"name/last\\").key;  // key === \\"last\\"
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Reference.key",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "key",
                          "signature": "key: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6557,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6557",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6557",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The parent location of a \`Reference\`.
     *
     * The parent of a root \`Reference\` is \`null\`.
     *
     * @example
     * \`\`\`javascript
     * // The parent of a root reference is null
     * var rootRef = firebase.database().ref();
     * parent = rootRef.parent;  // parent === null
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // The parent of any non-root reference is the parent location
     * var usersRef = firebase.database().ref(\\"users\\");
     * var adaRef = firebase.database().ref(\\"users/ada\\");
     * // usersRef and adaRef.parent represent the same location
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Reference.parent",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "parent",
                          "signature": "parent: firebase.database.Reference | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6586,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6586",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6586",
                          },
                          "type": "Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The root \`Reference\` of the Database.
     *
     * @example
     * \`\`\`javascript
     * // The root of a root reference is itself
     * var rootRef = firebase.database().ref();
     * // rootRef and rootRef.root represent the same location
     * \`\`\`
     *
     * @example
     * \`\`\`javascript
     * // The root of any non-root reference is the root location
     * var adaRef = firebase.database().ref(\\"users/ada\\");
     * // rootRef and adaRef.root represent the same location
     * \`\`\`
     */",
                          ],
                          "id": "firebase.database.Reference.root",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "root",
                          "signature": "root: firebase.database.Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6681,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6681",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6681",
                          },
                          "type": "Reference",
                        },
                      ],
                    },
                    "name": "Reference",
                    "signature": "interface Reference extends firebase.database.Query {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 6513,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6513",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6513",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.database.ThenableReference",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [],
                    },
                    "name": "ThenableReference",
                    "signature": "interface ThenableReference
    extends firebase.database.Reference,
        Pick<Promise<Reference>, 'then' | 'catch'> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 6913,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6913",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6913",
                    },
                  },
                ],
                "namespaces": Array [
                  Object {
                    "declarations": Object {
                      "classes": Array [],
                      "enums": Array [],
                      "functions": Array [
                        Object {
                          "docs": Array [
                            "/**
   * Returns a placeholder value that can be used to atomically increment the
   * current database value by the provided delta.
   *
   * @param delta the amount to modify the current value atomically.
   * @return a placeholder value for modifying data atomically server-side.
   */",
                          ],
                          "id": "firebase.database.ServerValue.increment",
                          "kind": "FunctionDeclaration",
                          "name": "increment",
                          "signature": "increment: (delta: number) => Object;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6981,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6981",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6981",
                          },
                          "type": "(delta: number) => Object",
                        },
                      ],
                      "interfaces": Array [],
                      "namespaces": Array [],
                      "typeAliases": Array [],
                      "variables": Array [
                        Object {
                          "docs": Array [
                            "/**
   * A placeholder value for auto-populating the current timestamp (time
   * since the Unix epoch, in milliseconds) as determined by the Firebase
   * servers.
   *
   * @example
   * \`\`\`javascript
   * var sessionsRef = firebase.database().ref(\\"sessions\\");
   * sessionsRef.push({
   *   startedAt: firebase.database.ServerValue.TIMESTAMP
   * });
   * \`\`\`
   */",
                          ],
                          "id": "firebase.database.ServerValue.TIMESTAMP",
                          "kind": "VariableDeclaration",
                          "name": "TIMESTAMP",
                          "signature": "var TIMESTAMP: Object;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 6972,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6972",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6972",
                          },
                          "type": "Object",
                          "variableKind": "var",
                        },
                      ],
                    },
                    "docs": Array [],
                    "id": "firebase.database.ServerValue",
                    "kind": "NamespaceDeclaration",
                    "name": "firebase.database.ServerValue",
                    "signature": "namespace firebase.database.ServerValue {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 6958,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6958",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6958",
                    },
                  },
                ],
                "typeAliases": Array [
                  Object {
                    "docs": Array [],
                    "id": "firebase.database.EventType",
                    "kind": "TypeAliasDeclaration",
                    "name": "EventType",
                    "signature": "type EventType =
    | 'value'
    | 'child_added'
    | 'child_changed'
    | 'child_moved'
    | 'child_removed';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5917,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5917",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5917",
                    },
                  },
                ],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.database",
              "kind": "NamespaceDeclaration",
              "name": "firebase.database",
              "signature": "namespace firebase.database {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 5313,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5313",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5313",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * An immutable object representing an array of bytes.
   */",
                    ],
                    "id": "firebase.firestore.Blob",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates a new Blob from the given Base64 string, converting it to
     * bytes.
     *
     * @param base64
     *   The Base64 string used to create the Blob object.
     */",
                          ],
                          "id": "firebase.firestore.Blob.fromBase64String",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "fromBase64String",
                          "signature": "static fromBase64String: (base64: string) => Blob;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8531,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8531",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8531",
                          },
                          "type": "(base64: string) => Blob",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a new Blob from the given Uint8Array.
     *
     * @param array
     *   The Uint8Array used to create the Blob object.
     */",
                          ],
                          "id": "firebase.firestore.Blob.fromUint8Array",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "fromUint8Array",
                          "signature": "static fromUint8Array: (array: Uint8Array) => Blob;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8539,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8539",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8539",
                          },
                          "type": "(array: Uint8Array) => Blob",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`Blob\` is equal to the provided one.
     *
     * @param other The \`Blob\` to compare against.
     * @return true if this \`Blob\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.Blob.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: Blob) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8563,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8563",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8563",
                          },
                          "type": "(other: Blob) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns the bytes of a Blob as a Base64-encoded string.
     *
     * @return
     *   The Base64-encoded string created from the Blob object.
     */",
                          ],
                          "id": "firebase.firestore.Blob.toBase64",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "toBase64",
                          "signature": "toBase64: () => string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8547,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8547",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8547",
                          },
                          "type": "() => string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns the bytes of a Blob in a new Uint8Array.
     *
     * @return
     *   The Uint8Array created from the Blob object.
     */",
                          ],
                          "id": "firebase.firestore.Blob.toUint8Array",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "toUint8Array",
                          "signature": "toUint8Array: () => Uint8Array;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8555,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8555",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8555",
                          },
                          "type": "() => Uint8Array",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "Blob",
                    "signature": "class Blob {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8521,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8521",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8521",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * A \`CollectionReference\` object can be used for adding documents, getting
   * document references, and querying for documents (using the methods
   * inherited from \`Query\`).
   */",
                    ],
                    "id": "firebase.firestore.CollectionReference",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Add a new document to this collection with the specified data, assigning
     * it a document ID automatically.
     *
     * @param data An Object containing the data for the new document.
     * @return A Promise resolved with a \`DocumentReference\` pointing to the
     * newly created document after it has been written to the backend.
     */",
                          ],
                          "id": "firebase.firestore.CollectionReference.add",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "add",
                          "signature": "add: (data: T) => Promise<DocumentReference<T>>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9623,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9623",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9623",
                          },
                          "type": "(data: T) => Promise<DocumentReference<T>>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Get a \`DocumentReference\` for the document within the collection at the
     * specified path. If no path is specified, an automatically-generated
     * unique ID will be used for the returned DocumentReference.
     *
     * @param documentPath A slash-separated path to a document.
     * @return The \`DocumentReference\` instance.
     */",
                          ],
                          "id": "firebase.firestore.CollectionReference.doc",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "doc",
                          "signature": "doc: (documentPath?: string) => DocumentReference<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9613,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9613",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9613",
                          },
                          "type": "(documentPath?: string) => DocumentReference<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`CollectionReference\` is equal to the provided one.
     *
     * @param other The \`CollectionReference\` to compare against.
     * @return true if this \`CollectionReference\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.CollectionReference.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: CollectionReference<T>) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9631,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9631",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9631",
                          },
                          "type": "(other: CollectionReference<T>) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Applies a custom data converter to this CollectionReference, allowing you
     * to use your own custom model objects with Firestore. When you call add()
     * on the returned CollectionReference instance, the provided converter will
     * convert between Firestore data and your custom type U.
     *
     * @param converter Converts objects to and from Firestore.
     * @return A CollectionReference<U> that uses the provided converter.
     */",
                          ],
                          "id": "firebase.firestore.CollectionReference.withConverter",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "withConverter",
                          "signature": "withConverter: <U>(
    converter: FirestoreDataConverter<U>
) => CollectionReference<U>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9642,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9642",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9642",
                          },
                          "type": "<U>(converter: FirestoreDataConverter<U>) => CollectionReference<U>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/** The collection's identifier. */",
                          ],
                          "id": "firebase.firestore.CollectionReference.id",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "id",
                          "signature": "readonly id: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9591,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9591",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9591",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * A reference to the containing \`DocumentReference\` if this is a subcollection.
     * If this isn't a subcollection, the reference is null.
     */",
                          ],
                          "id": "firebase.firestore.CollectionReference.parent",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "parent",
                          "signature": "readonly parent: DocumentReference<DocumentData>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9597,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9597",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9597",
                          },
                          "type": "DocumentReference<DocumentData>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * A string representing the path of the referenced collection (relative
     * to the root of the database).
     */",
                          ],
                          "id": "firebase.firestore.CollectionReference.path",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "path",
                          "signature": "readonly path: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9603,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9603",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9603",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "CollectionReference",
                    "signature": "class CollectionReference<T = DocumentData> extends Query<T> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9587,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9587",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9587",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * A \`DocumentReference\` refers to a document location in a Firestore database
   * and can be used to write, read, or listen to the location. The document at
   * the referenced location may or may not exist. A \`DocumentReference\` can
   * also be used to create a \`CollectionReference\` to a subcollection.
   */",
                    ],
                    "id": "firebase.firestore.DocumentReference",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Gets a \`CollectionReference\` instance that refers to the collection at
     * the specified path.
     *
     * @param collectionPath A slash-separated path to a collection.
     * @return The \`CollectionReference\` instance.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.collection",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "collection",
                          "signature": "collection: (collectionPath: string) => CollectionReference<DocumentData>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8853,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8853",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8853",
                          },
                          "type": "(collectionPath: string) => CollectionReference<DocumentData>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Deletes the document referred to by this \`DocumentReference\`.
     *
     * @return A Promise resolved once the document has been successfully
     * deleted from the backend (Note that it won't resolve while you're
     * offline).
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.delete",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "delete",
                          "signature": "delete: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8924,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8924",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8924",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Reads the document referred to by this \`DocumentReference\`.
     *
     * Note: By default, get() attempts to provide up-to-date data when possible
     * by waiting for data from the server, but it may return cached data or fail
     * if you are offline and the server cannot be reached. This behavior can be
     * altered via the \`GetOptions\` parameter.
     *
     * @param options An object to configure the get behavior.
     * @return A Promise resolved with a DocumentSnapshot containing the
     * current document contents.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.get",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "get",
                          "signature": "get: (options?: GetOptions) => Promise<DocumentSnapshot<T>>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8938,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8938",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8938",
                          },
                          "type": "(options?: GetOptions) => Promise<DocumentSnapshot<T>>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`DocumentReference\` is equal to the provided one.
     *
     * @param other The \`DocumentReference\` to compare against.
     * @return true if this \`DocumentReference\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: DocumentReference<T>) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8861,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8861",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8861",
                          },
                          "type": "(other: DocumentReference<T>) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Attaches a listener for DocumentSnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param observer A single object containing \`next\` and \`error\` callbacks.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                            "/**
     * Attaches a listener for DocumentSnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param options Options controlling the listen behavior.
     * @param observer A single object containing \`next\` and \`error\` callbacks.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                            "/**
     * Attaches a listener for DocumentSnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param onNext A callback to be called every time a new \`DocumentSnapshot\`
     * is available.
     * @param onError A callback to be called if the listen fails or is
     * cancelled. No further callbacks will occur.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                            "/**
     * Attaches a listener for DocumentSnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param options Options controlling the listen behavior.
     * @param onNext A callback to be called every time a new \`DocumentSnapshot\`
     * is available.
     * @param onError A callback to be called if the listen fails or is
     * cancelled. No further callbacks will occur.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.onSnapshot",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "onSnapshot",
                          "signature": "onSnapshot: {
    (observer: {
        next?: (snapshot: DocumentSnapshot<T>) => void;
        error?: (error: FirestoreError) => void;
        complete?: () => void;
    }): () => void;
    (
        options: SnapshotListenOptions,
        observer: {
            next?: (snapshot: DocumentSnapshot<T>) => void;
            error?: (error: FirestoreError) => void;
            complete?: () => void;
        }
    ): () => void;
    (
        onNext: (snapshot: DocumentSnapshot<T>) => void,
        onError?: (error: FirestoreError) => void,
        onCompletion?: () => void
    ): () => void;
    (
        options: SnapshotListenOptions,
        onNext: (snapshot: DocumentSnapshot<T>) => void,
        onError?: (error: FirestoreError) => void,
        onCompletion?: () => void
    ): () => void;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8952,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8952",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8952",
                          },
                          "type": "{ (observer: { next?: (snapshot: DocumentSnapshot<T>) => void; error?: (error: FirestoreError) => void; complete?: () => void; }): () => void; (options: SnapshotListenOptions, observer: { next?: (snapshot: DocumentSnapshot<T>) => void; error?: (error: FirestoreError) => void; complete?: () => void; }): () => void; (onNext: (snapshot: DocumentSnapshot<T>) => void, onError?: (error: FirestoreError) => void, onCompletion?: () => void): () => void; (options: SnapshotListenOptions, onNext: (snapshot: DocumentSnapshot<T>) => void, onError?: (error: FirestoreError) => void, onCompletion?: () => void): () => void; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Writes to the document referred to by this \`DocumentReference\`. If the
     * document does not yet exist, it will be created. If you pass
     * \`SetOptions\`, the provided data can be merged into an existing document.
     *
     * @param data A map of the fields and values for the document.
     * @param options An object to configure the set behavior.
     * @return A Promise resolved once the data has been successfully written
     * to the backend (Note that it won't resolve while you're offline).
     */",
                            "/**
     * Writes to the document referred to by this \`DocumentReference\`. If the
     * document does not yet exist, it will be created. If you pass
     * \`SetOptions\`, the provided data can be merged into an existing document.
     *
     * @param data A map of the fields and values for the document.
     * @return A Promise resolved once the data has been successfully written
     * to the backend (Note that it won't resolve while you're offline).
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.set",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "set",
                          "signature": "set: {
    (data: Partial<T>, options: SetOptions): Promise<void>;
    (data: T): Promise<void>;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8873,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8873",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8873",
                          },
                          "type": "{ (data: Partial<T>, options: SetOptions): Promise<void>; (data: T): Promise<void>; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Updates fields in the document referred to by this \`DocumentReference\`.
     * The update will fail if applied to a document that does not exist.
     *
     * @param data An object containing the fields and values with which to
     * update the document. Fields can contain dots to reference nested fields
     * within the document.
     * @return A Promise resolved once the data has been successfully written
     * to the backend (Note that it won't resolve while you're offline).
     */",
                            "/**
     * Updates fields in the document referred to by this \`DocumentReference\`.
     * The update will fail if applied to a document that does not exist.
     *
     * Nested fields can be updated by providing dot-separated field path
     * strings or by providing FieldPath objects.
     *
     * @param field The first field to update.
     * @param value The first value.
     * @param moreFieldsAndValues Additional key value pairs.
     * @return A Promise resolved once the data has been successfully written
     * to the backend (Note that it won't resolve while you're offline).
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.update",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "update",
                          "signature": "update: {
    (data: UpdateData): Promise<void>;
    (
        field: string | FieldPath,
        value: any,
        ...moreFieldsAndValues: any[]
    ): Promise<void>;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8896,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8896",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8896",
                          },
                          "type": "{ (data: UpdateData): Promise<void>; (field: string | FieldPath, value: any, ...moreFieldsAndValues: any[]): Promise<void>; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Applies a custom data converter to this DocumentReference, allowing you
     * to use your own custom model objects with Firestore. When you call
     * set(), get(), etc. on the returned DocumentReference instance, the
     * provided converter will convert between Firestore data and your custom
     * type U.
     *
     * @param converter Converts objects to and from Firestore.
     * @return A DocumentReference<U> that uses the provided converter.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.withConverter",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "withConverter",
                          "signature": "withConverter: <U>(converter: FirestoreDataConverter<U>) => DocumentReference<U>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9031,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9031",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9031",
                          },
                          "type": "<U>(converter: FirestoreDataConverter<U>) => DocumentReference<U>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The {@link firebase.firestore.Firestore} the document is in.
     * This is useful for performing transactions, for example.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.firestore",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "firestore",
                          "signature": "readonly firestore: Firestore;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8833,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8833",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8833",
                          },
                          "type": "Firestore",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The document's identifier within its collection.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.id",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "id",
                          "signature": "readonly id: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8827,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8827",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8827",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The Collection this \`DocumentReference\` belongs to.
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.parent",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "parent",
                          "signature": "readonly parent: CollectionReference<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8838,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8838",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8838",
                          },
                          "type": "CollectionReference<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * A string representing the path of the referenced document (relative
     * to the root of the database).
     */",
                          ],
                          "id": "firebase.firestore.DocumentReference.path",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "path",
                          "signature": "readonly path: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8844,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8844",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8844",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "DocumentReference",
                    "signature": "class DocumentReference<T = DocumentData> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8821,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8821",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8821",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [],
                        "id": "firebase.firestore.DocumentSnapshot.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "protected constructor();",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 9101,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9101",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9101",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * A \`DocumentSnapshot\` contains data read from a document in your Firestore
   * database. The data can be extracted with \`.data()\` or \`.get(<field>)\` to
   * get a specific field.
   *
   * For a \`DocumentSnapshot\` that points to a non-existing document, any data
   * access will return 'undefined'. You can use the \`exists\` property to
   * explicitly verify a document's existence.
   */",
                    ],
                    "id": "firebase.firestore.DocumentSnapshot",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Retrieves all fields in the document as an Object. Returns 'undefined' if
     * the document doesn't exist.
     *
     * By default, \`FieldValue.serverTimestamp()\` values that have not yet been
     * set to their final value will be returned as \`null\`. You can override
     * this by passing an options object.
     *
     * @param options An options object to configure how data is retrieved from
     * the snapshot (e.g. the desired behavior for server timestamps that have
     * not yet been set to their final value).
     * @return An Object containing all fields in the document or 'undefined' if
     * the document doesn't exist.
     */",
                          ],
                          "id": "firebase.firestore.DocumentSnapshot.data",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "data",
                          "signature": "data: (options?: SnapshotOptions) => T | undefined;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9136,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9136",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9136",
                          },
                          "type": "(options?: SnapshotOptions) => T | undefined",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Retrieves the field specified by \`fieldPath\`. Returns \`undefined\` if the
     * document or field doesn't exist.
     *
     * By default, a \`FieldValue.serverTimestamp()\` that has not yet been set to
     * its final value will be returned as \`null\`. You can override this by
     * passing an options object.
     *
     * @param fieldPath The path (e.g. 'foo' or 'foo.bar') to a specific field.
     * @param options An options object to configure how the field is retrieved
     * from the snapshot (e.g. the desired behavior for server timestamps that have
     * not yet been set to their final value).
     * @return The data at the specified field location or undefined if no such
     * field exists in the document.
     */",
                          ],
                          "id": "firebase.firestore.DocumentSnapshot.get",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "get",
                          "signature": "get: (fieldPath: string | FieldPath, options?: SnapshotOptions) => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9153,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9153",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9153",
                          },
                          "type": "(fieldPath: string | FieldPath, options?: SnapshotOptions) => any",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`DocumentSnapshot\` is equal to the provided one.
     *
     * @param other The \`DocumentSnapshot\` to compare against.
     * @return true if this \`DocumentSnapshot\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.DocumentSnapshot.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: DocumentSnapshot<T>) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9161,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9161",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9161",
                          },
                          "type": "(other: DocumentSnapshot<T>) => boolean",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Property of the \`DocumentSnapshot\` that signals whether or not the data
     * exists. True if the document exists.
     */",
                          ],
                          "id": "firebase.firestore.DocumentSnapshot.exists",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "exists",
                          "signature": "readonly exists: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9107,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9107",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9107",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Property of the \`DocumentSnapshot\` that provides the document's ID.
     */",
                          ],
                          "id": "firebase.firestore.DocumentSnapshot.id",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "id",
                          "signature": "readonly id: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9115,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9115",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9115",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     *  Metadata about the \`DocumentSnapshot\`, including information about its
     *  source and local modifications.
     */",
                          ],
                          "id": "firebase.firestore.DocumentSnapshot.metadata",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "metadata",
                          "signature": "readonly metadata: SnapshotMetadata;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9120,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9120",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9120",
                          },
                          "type": "SnapshotMetadata",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The \`DocumentReference\` for the document included in the \`DocumentSnapshot\`.
     */",
                          ],
                          "id": "firebase.firestore.DocumentSnapshot.ref",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "ref",
                          "signature": "readonly ref: DocumentReference<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9111,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9111",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9111",
                          },
                          "type": "DocumentReference<T>",
                        },
                      ],
                    },
                    "name": "DocumentSnapshot",
                    "signature": "class DocumentSnapshot<T = DocumentData> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9100,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9100",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9100",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [
                          "/**
     * Creates a FieldPath from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames A list of field names.
     */",
                        ],
                        "id": "firebase.firestore.FieldPath.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "constructor(...fieldNames: string[]);",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 9734,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9734",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9734",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * A FieldPath refers to a field in a document. The path may consist of a
   * single field name (referring to a top-level field in the document), or a
   * list of field names (referring to a nested field in the document).
   *
   * Create a FieldPath by providing field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   */",
                    ],
                    "id": "firebase.firestore.FieldPath",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns a special sentinel \`FieldPath\` to refer to the ID of a document.
     * It can be used in queries to sort or filter by the document ID.
     */",
                          ],
                          "id": "firebase.firestore.FieldPath.documentId",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "documentId",
                          "signature": "static documentId: () => FieldPath;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9740,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9740",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9740",
                          },
                          "type": "() => FieldPath",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`FieldPath\` is equal to the provided one.
     *
     * @param other The \`FieldPath\` to compare against.
     * @return true if this \`FieldPath\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.FieldPath.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: FieldPath) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9748,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9748",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9748",
                          },
                          "type": "(other: FieldPath) => boolean",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "FieldPath",
                    "signature": "class FieldPath {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9727,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9727",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9727",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * Sentinel values that can be used when writing document fields with \`set()\`
   * or \`update()\`.
   */",
                    ],
                    "id": "firebase.firestore.FieldValue",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns a special value that can be used with \`set()\` or \`update()\` that tells
     * the server to remove the given elements from any array value that already
     * exists on the server. All instances of each element specified will be
     * removed from the array. If the field being modified is not already an
     * array it will be overwritten with an empty array.
     *
     * @param elements The elements to remove from the array.
     * @return The FieldValue sentinel for use in a call to \`set()\` or \`update()\`.
     */",
                          ],
                          "id": "firebase.firestore.FieldValue.arrayRemove",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "arrayRemove",
                          "signature": "static arrayRemove: (...elements: any[]) => FieldValue;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9688,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9688",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9688",
                          },
                          "type": "(...elements: any[]) => FieldValue",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a special value that can be used with \`set()\` or \`update()\` that tells
     * the server to union the given elements with any array value that already
     * exists on the server. Each specified element that doesn't already exist in
     * the array will be added to the end. If the field being modified is not
     * already an array it will be overwritten with an array containing exactly
     * the specified elements.
     *
     * @param elements The elements to union into the array.
     * @return The FieldValue sentinel for use in a call to \`set()\` or \`update()\`.
     */",
                          ],
                          "id": "firebase.firestore.FieldValue.arrayUnion",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "arrayUnion",
                          "signature": "static arrayUnion: (...elements: any[]) => FieldValue;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9676,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9676",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9676",
                          },
                          "type": "(...elements: any[]) => FieldValue",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a sentinel for use with \`update()\` to mark a field for deletion.
     */",
                          ],
                          "id": "firebase.firestore.FieldValue.delete",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "delete",
                          "signature": "static delete: () => FieldValue;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9663,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9663",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9663",
                          },
                          "type": "() => FieldValue",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a special value that can be used with \`set()\` or \`update()\` that tells
     * the server to increment the field's current value by the given value.
     *
     * If either the operand or the current field value uses floating point precision,
     * all arithmetic follows IEEE 754 semantics. If both values are integers,
     * values outside of JavaScript's safe number range (\`Number.MIN_SAFE_INTEGER\` to
     * \`Number.MAX_SAFE_INTEGER\`) are also subject to precision loss. Furthermore,
     * once processed by the Firestore backend, all integer operations are capped
     * between -2^63 and 2^63-1.
     *
     * If the current field value is not of type \`number\`, or if the field does not
     * yet exist, the transformation sets the field to the given value.
     *
     * @param n The value to increment by.
     * @return The FieldValue sentinel for use in a call to \`set()\` or \`update()\`.
     */",
                          ],
                          "id": "firebase.firestore.FieldValue.increment",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "increment",
                          "signature": "static increment: (n: number) => FieldValue;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9707,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9707",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9707",
                          },
                          "type": "(n: number) => FieldValue",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`FieldValue\` is equal to the provided one.
     *
     * @param other The \`FieldValue\` to compare against.
     * @return true if this \`FieldValue\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.FieldValue.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: FieldValue) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9715,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9715",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9715",
                          },
                          "type": "(other: FieldValue) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a sentinel used with \`set()\` or \`update()\` to include a
     * server-generated timestamp in the written data.
     */",
                          ],
                          "id": "firebase.firestore.FieldValue.serverTimestamp",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "serverTimestamp",
                          "signature": "static serverTimestamp: () => FieldValue;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9658,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9658",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9658",
                          },
                          "type": "() => FieldValue",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "FieldValue",
                    "signature": "class FieldValue {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9651,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9651",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9651",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * The Cloud Firestore service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.firestore \`firebase.firestore()\`}.
   */",
                    ],
                    "id": "firebase.firestore.Firestore",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates a write batch, used for performing multiple writes as a single
     * atomic operation. The maximum number of writes allowed in a single WriteBatch
     * is 500, but note that each usage of \`FieldValue.serverTimestamp()\`,
     * \`FieldValue.arrayUnion()\`, \`FieldValue.arrayRemove()\`, or
     * \`FieldValue.increment()\` inside a WriteBatch counts as an additional write.
     *
     * @return
     *   A \`WriteBatch\` that can be used to atomically execute multiple writes.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.batch",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "batch",
                          "signature": "batch: () => WriteBatch;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8165,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8165",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8165",
                          },
                          "type": "() => WriteBatch",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Clears the persistent storage. This includes pending writes and cached
     * documents.
     *
     * Must be called while the firestore instance is not started (after the app
     * is shutdown or when the app is first initialized). On startup, this
     * method must be called before other methods (other than settings()). If
     * the firestore instance is still running, the promise will be rejected
     * with the error code of \`failed-precondition\`.
     *
     * Note: clearPersistence() is primarily intended to help write reliable
     * tests that use Cloud Firestore. It uses an efficient mechanism for
     * dropping existing data but does not attempt to securely overwrite or
     * otherwise make cached data unrecoverable. For applications that are
     * sensitive to the disclosure of cached data in between user sessions, we
     * strongly recommend not enabling persistence at all.
     *
     * @return A promise that is resolved when the persistent storage is
     * cleared. Otherwise, the promise is rejected with an error.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.clearPersistence",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "clearPersistence",
                          "signature": "clearPersistence: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8193,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8193",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8193",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets a \`CollectionReference\` instance that refers to the collection at
     * the specified path.
     *
     * @param collectionPath A slash-separated path to a collection.
     * @return The \`CollectionReference\` instance.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.collection",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "collection",
                          "signature": "collection: (collectionPath: string) => CollectionReference<DocumentData>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8107,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8107",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8107",
                          },
                          "type": "(collectionPath: string) => CollectionReference<DocumentData>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given collectionId.
     *
     * @param collectionId Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.collectionGroup",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "collectionGroup",
                          "signature": "collectionGroup: (collectionId: string) => Query<DocumentData>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8128,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8128",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8128",
                          },
                          "type": "(collectionId: string) => Query<DocumentData>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Disables network usage for this instance. It can be re-enabled via
     * {@link firebase.firestore.Firestore.enableNetwork \`enableNetwork()\`}. While
     * the network is disabled, any snapshot listeners or get() calls will return
     * results from cache, and any write operations will be queued until the network
     * is restored.
     *
     * @return A promise that is resolved once the network has been
     *   disabled.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.disableNetwork",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "disableNetwork",
                          "signature": "disableNetwork: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8215,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8215",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8215",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets a \`DocumentReference\` instance that refers to the document at the
     * specified path.
     *
     * @param documentPath A slash-separated path to a document.
     * @return The \`DocumentReference\` instance.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.doc",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "doc",
                          "signature": "doc: (documentPath: string) => DocumentReference<DocumentData>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8116,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8116",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8116",
                          },
                          "type": "(documentPath: string) => DocumentReference<DocumentData>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Re-enables use of the network for this Firestore instance after a prior
     * call to {@link firebase.firestore.Firestore.disableNetwork
     * \`disableNetwork()\`}.
     *
     * @return A promise that is resolved once the network has been
     *   enabled.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.enableNetwork",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "enableNetwork",
                          "signature": "enableNetwork: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8203,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8203",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8203",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Attempts to enable persistent storage, if possible.
     *
     * Must be called before any other methods (other than settings() and
     * clearPersistence()).
     *
     * If this fails, enablePersistence() will reject the promise it returns.
     * Note that even after this failure, the firestore instance will remain
     * usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the \`code\` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param settings Optional settings object to configure persistence.
     * @return A promise that represents successfully enabling persistent
     * storage.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.enablePersistence",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "enablePersistence",
                          "signature": "enablePersistence: (settings?: PersistenceSettings) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8098,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8098",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8098",
                          },
                          "type": "(settings?: PersistenceSettings) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Loads a Firestore bundle into the local cache.
     *
     * @param bundleData
     *   An object representing the bundle to be loaded. Valid objects are \`ArrayBuffer\`,
     *   \`ReadableStream<Uint8Array>\` or \`string\`.
     *
     * @return
     *   A \`LoadBundleTask\` object, which notifies callers with progress updates, and completion
     *   or error events. It can be used as a \`Promise<LoadBundleTaskProgress>\`.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.loadBundle",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "loadBundle",
                          "signature": "loadBundle: (
    bundleData: ArrayBuffer | ReadableStream<Uint8Array> | string
) => LoadBundleTask;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8303,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8303",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8303",
                          },
                          "type": "(bundleData: ArrayBuffer | ReadableStream<Uint8Array> | string) => LoadBundleTask",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Reads a Firestore \`Query\` from local cache, identified by the given name.
     *
     * The named queries are packaged  into bundles on the server side (along
     * with resulting documents), and loaded to local cache using \`loadBundle\`. Once in local
     * cache, use this method to extract a \`Query\` by name.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.namedQuery",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "namedQuery",
                          "signature": "namedQuery: (name: string) => Promise<Query<DocumentData>>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8314,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8314",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8314",
                          },
                          "type": "(name: string) => Promise<Query<DocumentData>>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Attaches a listener for a snapshots-in-sync event. The snapshots-in-sync
     * event indicates that all listeners affected by a given change have fired,
     * even if a single server-generated change affects multiple listeners.
     *
     * NOTE: The snapshots-in-sync event only indicates that listeners are in sync
     * with each other, but does not relate to whether those snapshots are in sync
     * with the server. Use SnapshotMetadata in the individual listeners to
     * determine if a snapshot is from the cache or the server.
     *
     * @param observer A single object containing \`next\` and \`error\` callbacks.
     * @return An unsubscribe function that can be called to cancel the snapshot
     * listener.
     */",
                            "/**
     * Attaches a listener for a snapshots-in-sync event. The snapshots-in-sync
     * event indicates that all listeners affected by a given change have fired,
     * even if a single server-generated change affects multiple listeners.
     *
     * NOTE: The snapshots-in-sync event only indicates that listeners are in sync
     * with each other, but does not relate to whether those snapshots are in sync
     * with the server. Use SnapshotMetadata in the individual listeners to
     * determine if a snapshot is from the cache or the server.
     *
     * @param onSync A callback to be called every time all snapshot listeners are
     * in sync with each other.
     * @return An unsubscribe function that can be called to cancel the snapshot
     * listener.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.onSnapshotsInSync",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "onSnapshotsInSync",
                          "signature": "onSnapshotsInSync: {
    (observer: {
        next?: (value: void) => void;
        error?: (error: FirestoreError) => void;
        complete?: () => void;
    }): () => void;
    (onSync: () => void): () => void;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8247,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8247",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8247",
                          },
                          "type": "{ (observer: { next?: (value: void) => void; error?: (error: FirestoreError) => void; complete?: () => void; }): () => void; (onSync: () => void): () => void; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Executes the given \`updateFunction\` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the \`updateFunction\`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500, but
     * note that each usage of \`FieldValue.serverTimestamp()\`,
     * \`FieldValue.arrayUnion()\`, \`FieldValue.arrayRemove()\`, or
     * \`FieldValue.increment()\` inside a transaction counts as an additional write.
     *
     * @param updateFunction
     *   The function to execute within the transaction context.
     *
     * @return
     *   If the transaction completed successfully or was explicitly aborted
     *   (the \`updateFunction\` returned a failed promise),
     *   the promise returned by the updateFunction is returned here. Else, if the
     *   transaction failed, a rejected promise with the corresponding failure
     *   error will be returned.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.runTransaction",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "runTransaction",
                          "signature": "runTransaction: <T>(
    updateFunction: (transaction: Transaction) => Promise<T>
) => Promise<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8151,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8151",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8151",
                          },
                          "type": "<T>(updateFunction: (transaction: Transaction) => Promise<T>) => Promise<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Specifies custom settings to be used to configure the \`Firestore\`
     * instance. Must be set before invoking any other methods.
     *
     * @param settings The settings to use.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.settings",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "settings",
                          "signature": "settings: (settings: Settings) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8065,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8065",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8065",
                          },
                          "type": "(settings: Settings) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Terminates this Firestore instance.
     *
     * After calling \`terminate()\` only the \`clearPersistence()\` method may be used. Any other method
     * will throw a \`FirestoreError\`.
     *
     * To restart after termination, create a new instance of FirebaseFirestore with
     * \`firebase.firestore()\`.
     *
     * Termination does not cancel any pending writes, and any promises that are awaiting a response
     * from the server will not be resolved. If you have persistence enabled, the next time you
     * start this instance, it will resume sending these writes to the server.
     *
     * Note: Under normal circumstances, calling \`terminate()\` is not required. This
     * method is useful only when you want to force this instance to release all of its resources or
     * in combination with \`clearPersistence()\` to ensure that all local state is destroyed
     * between test runs.
     *
     * @return A promise that is resolved when the instance has been successfully terminated.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.terminate",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "terminate",
                          "signature": "terminate: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8290,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8290",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8290",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Modify this instance to communicate with the Cloud Firestore emulator.
     *
     * <p>Note: this must be called before this instance has been used to do any operations.
     *
     * @param host the emulator host (ex: localhost).
     * @param port the emulator port (ex: 9000).
     */",
                          ],
                          "id": "firebase.firestore.Firestore.useEmulator",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "useEmulator",
                          "signature": "useEmulator: (host: string, port: number) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8075,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8075",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8075",
                          },
                          "type": "(host: string, port: number) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Waits until all currently pending writes for the active user have been acknowledged by the
     * backend.
     *
     * The returned Promise resolves immediately if there are no outstanding writes. Otherwise, the
     * Promise waits for all previously issued writes (including those written in a previous app
     * session), but it does not wait for writes that were added after the method is called. If you
     * want to wait for additional writes, call \`waitForPendingWrites()\` again.
     *
     * Any outstanding \`waitForPendingWrites()\` Promises are rejected during user changes.
     *
     * @return A Promise which resolves when all currently pending writes have been
     * acknowledged by the backend.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.waitForPendingWrites",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "waitForPendingWrites",
                          "signature": "waitForPendingWrites: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8231,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8231",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8231",
                          },
                          "type": "() => Promise<void>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The {@link firebase.app.App app} associated with this \`Firestore\` service
     * instance.
     */",
                          ],
                          "id": "firebase.firestore.Firestore.app",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "app",
                          "signature": "app: app.App;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8171,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8171",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8171",
                          },
                          "type": "app.App",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * @hidden
     */",
                          ],
                          "id": "firebase.firestore.Firestore.INTERNAL",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "INTERNAL",
                          "signature": "INTERNAL: { delete: () => Promise<void> };",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8319,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8319",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8319",
                          },
                          "type": "{ delete: () => Promise<void>; }",
                        },
                      ],
                    },
                    "name": "Firestore",
                    "signature": "class Firestore {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8057,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8057",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8057",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [
                          "/**
     * Creates a new immutable GeoPoint object with the provided latitude and
     * longitude values.
     * @param latitude The latitude as number between -90 and 90.
     * @param longitude The longitude as number between -180 and 180.
     */",
                        ],
                        "id": "firebase.firestore.GeoPoint.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "constructor(latitude: number, longitude: number);",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 8409,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8409",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8409",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * An immutable object representing a geo point in Firestore. The geo point
   * is represented as latitude/longitude pair.
   *
   * Latitude values are in the range of [-90, 90].
   * Longitude values are in the range of [-180, 180].
   */",
                    ],
                    "id": "firebase.firestore.GeoPoint",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`GeoPoint\` is equal to the provided one.
     *
     * @param other The \`GeoPoint\` to compare against.
     * @return true if this \`GeoPoint\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.GeoPoint.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: GeoPoint) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8426,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8426",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8426",
                          },
                          "type": "(other: GeoPoint) => boolean",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The latitude of this GeoPoint instance.
     */",
                          ],
                          "id": "firebase.firestore.GeoPoint.latitude",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "latitude",
                          "signature": "readonly latitude: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8414,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8414",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8414",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The longitude of this GeoPoint instance.
     */",
                          ],
                          "id": "firebase.firestore.GeoPoint.longitude",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "longitude",
                          "signature": "readonly longitude: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8418,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8418",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8418",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "GeoPoint",
                    "signature": "class GeoPoint {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8402,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8402",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8402",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [],
                        "id": "firebase.firestore.Query.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "protected constructor();",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 9224,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9224",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9224",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * A \`Query\` refers to a Query which you can read or listen to. You can also
   * construct refined \`Query\` objects by adding filters and ordering.
   */",
                    ],
                    "id": "firebase.firestore.Query",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that ends at the provided document
     * (inclusive). The end position is relative to the order of the query. The
     * document must contain all of the fields provided in the orderBy of this
     * query.
     *
     * @param snapshot The snapshot of the document to end at.
     * @return The created Query.
     */",
                            "/**
     * Creates and returns a new Query that ends at the provided fields
     * relative to the order of the query. The order of the field values
     * must match the order of the order by clauses of the query.
     *
     * @param fieldValues The field values to end this query at, in order
     * of the query's order by.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.endAt",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "endAt",
                          "signature": "endAt: {
    (snapshot: DocumentSnapshot<any>): Query<T>;
    (...fieldValues: any[]): Query<T>;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9358,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9358",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9358",
                          },
                          "type": "{ (snapshot: DocumentSnapshot<any>): Query<T>; (...fieldValues: any[]): Query<T>; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that ends before the provided document
     * (exclusive). The end position is relative to the order of the query. The
     * document must contain all of the fields provided in the orderBy of this
     * query.
     *
     * @param snapshot The snapshot of the document to end before.
     * @return The created Query.
     */",
                            "/**
     * Creates and returns a new Query that ends before the provided fields
     * relative to the order of the query. The order of the field values
     * must match the order of the order by clauses of the query.
     *
     * @param fieldValues The field values to end this query before, in order
     * of the query's order by.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.endBefore",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "endBefore",
                          "signature": "endBefore: {
    (snapshot: DocumentSnapshot<any>): Query<T>;
    (...fieldValues: any[]): Query<T>;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9336,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9336",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9336",
                          },
                          "type": "{ (snapshot: DocumentSnapshot<any>): Query<T>; (...fieldValues: any[]): Query<T>; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Executes the query and returns the results as a \`QuerySnapshot\`.
     *
     * Note: By default, get() attempts to provide up-to-date data when possible
     * by waiting for data from the server, but it may return cached data or fail
     * if you are offline and the server cannot be reached. This behavior can be
     * altered via the \`GetOptions\` parameter.
     *
     * @param options An object to configure the get behavior.
     * @return A Promise that will be resolved with the results of the Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.get",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "get",
                          "signature": "get: (options?: GetOptions) => Promise<QuerySnapshot<T>>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9390,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9390",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9390",
                          },
                          "type": "(options?: GetOptions) => Promise<QuerySnapshot<T>>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`Query\` is equal to the provided one.
     *
     * @param other The \`Query\` to compare against.
     * @return true if this \`Query\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.Query.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: Query<T>) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9377,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9377",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9377",
                          },
                          "type": "(other: Query<T>) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that only returns the first matching
     * documents.
     *
     * @param limit The maximum number of items to return.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.limit",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "limit",
                          "signature": "limit: (limit: number) => Query<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9269,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9269",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9269",
                          },
                          "type": "(limit: number) => Query<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that only returns the last matching
     * documents.
     *
     * You must specify at least one \`orderBy\` clause for \`limitToLast\` queries,
     * otherwise an exception will be thrown during execution.
     *
     * @param limit The maximum number of items to return.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.limitToLast",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "limitToLast",
                          "signature": "limitToLast: (limit: number) => Query<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9281,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9281",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9281",
                          },
                          "type": "(limit: number) => Query<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Attaches a listener for QuerySnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks. The listener can be cancelled by
     * calling the function that is returned when \`onSnapshot\` is called.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param observer A single object containing \`next\` and \`error\` callbacks.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                            "/**
     * Attaches a listener for QuerySnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks. The listener can be cancelled by
     * calling the function that is returned when \`onSnapshot\` is called.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param options Options controlling the listen behavior.
     * @param observer A single object containing \`next\` and \`error\` callbacks.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                            "/**
     * Attaches a listener for QuerySnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks. The listener can be cancelled by
     * calling the function that is returned when \`onSnapshot\` is called.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param onNext A callback to be called every time a new \`QuerySnapshot\`
     * is available.
     * @param onError A callback to be called if the listen fails or is
     * cancelled. No further callbacks will occur.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                            "/**
     * Attaches a listener for QuerySnapshot events. You may either pass
     * individual \`onNext\` and \`onError\` callbacks or pass a single observer
     * object with \`next\` and \`error\` callbacks. The listener can be cancelled by
     * calling the function that is returned when \`onSnapshot\` is called.
     *
     * NOTE: Although an \`onCompletion\` callback can be provided, it will
     * never be called because the snapshot stream is never-ending.
     *
     * @param options Options controlling the listen behavior.
     * @param onNext A callback to be called every time a new \`QuerySnapshot\`
     * is available.
     * @param onError A callback to be called if the listen fails or is
     * cancelled. No further callbacks will occur.
     * @return An unsubscribe function that can be called to cancel
     * the snapshot listener.
     */",
                          ],
                          "id": "firebase.firestore.Query.onSnapshot",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "onSnapshot",
                          "signature": "onSnapshot: {
    (observer: {
        next?: (snapshot: QuerySnapshot<T>) => void;
        error?: (error: FirestoreError) => void;
        complete?: () => void;
    }): () => void;
    (
        options: SnapshotListenOptions,
        observer: {
            next?: (snapshot: QuerySnapshot<T>) => void;
            error?: (error: FirestoreError) => void;
            complete?: () => void;
        }
    ): () => void;
    (
        onNext: (snapshot: QuerySnapshot<T>) => void,
        onError?: (error: FirestoreError) => void,
        onCompletion?: () => void
    ): () => void;
    (
        options: SnapshotListenOptions,
        onNext: (snapshot: QuerySnapshot<T>) => void,
        onError?: (error: FirestoreError) => void,
        onCompletion?: () => void
    ): () => void;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9405,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9405",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9405",
                          },
                          "type": "{ (observer: { next?: (snapshot: QuerySnapshot<T>) => void; error?: (error: FirestoreError) => void; complete?: () => void; }): () => void; (options: SnapshotListenOptions, observer: { next?: (snapshot: QuerySnapshot<T>) => void; error?: (error: FirestoreError) => void; complete?: () => void; }): () => void; (onNext: (snapshot: QuerySnapshot<T>) => void, onError?: (error: FirestoreError) => void, onCompletion?: () => void): () => void; (options: SnapshotListenOptions, onNext: (snapshot: QuerySnapshot<T>) => void, onError?: (error: FirestoreError) => void, onCompletion?: () => void): () => void; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that's additionally sorted by the
     * specified field, optionally in descending order instead of ascending.
     *
     * @param fieldPath The field to sort by.
     * @param directionStr Optional direction to sort by (\`asc\` or \`desc\`). If
     * not specified, order will be ascending.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.orderBy",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "orderBy",
                          "signature": "orderBy: (
    fieldPath: string | FieldPath,
    directionStr?: OrderByDirection
) => Query<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9257,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9257",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9257",
                          },
                          "type": "(fieldPath: string | FieldPath, directionStr?: OrderByDirection) => Query<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that starts after the provided document
     * (exclusive). The starting position is relative to the order of the query.
     * The document must contain all of the fields provided in the orderBy of
     * this query.
     *
     * @param snapshot The snapshot of the document to start after.
     * @return The created Query.
     */",
                            "/**
     * Creates and returns a new Query that starts after the provided fields
     * relative to the order of the query. The order of the field values
     * must match the order of the order by clauses of the query.
     *
     * @param fieldValues The field values to start this query after, in order
     * of the query's order by.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.startAfter",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "startAfter",
                          "signature": "startAfter: {
    (snapshot: DocumentSnapshot<any>): Query<T>;
    (...fieldValues: any[]): Query<T>;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9314,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9314",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9314",
                          },
                          "type": "{ (snapshot: DocumentSnapshot<any>): Query<T>; (...fieldValues: any[]): Query<T>; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query that starts at the provided document
     * (inclusive). The starting position is relative to the order of the query.
     * The document must contain all of the fields provided in the \`orderBy\` of
     * this query.
     *
     * @param snapshot The snapshot of the document to start at.
     * @return The created Query.
     */",
                            "/**
     * Creates and returns a new Query that starts at the provided fields
     * relative to the order of the query. The order of the field values
     * must match the order of the order by clauses of the query.
     *
     * @param fieldValues The field values to start this query at, in order
     * of the query's order by.
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.startAt",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "startAt",
                          "signature": "startAt: {
    (snapshot: DocumentSnapshot<any>): Query<T>;
    (...fieldValues: any[]): Query<T>;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9292,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9292",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9292",
                          },
                          "type": "{ (snapshot: DocumentSnapshot<any>): Query<T>; (...fieldValues: any[]): Query<T>; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates and returns a new Query with the additional filter that documents
     * must contain the specified field and the value should satisfy the
     * relation constraint provided.
     *
     * @param fieldPath The path to compare
     * @param opStr The operation string (e.g \\"<\\", \\"<=\\", \\"==\\", \\">\\", \\">=\\").
     * @param value The value for comparison
     * @return The created Query.
     */",
                          ],
                          "id": "firebase.firestore.Query.where",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "where",
                          "signature": "where: (
    fieldPath: string | FieldPath,
    opStr: WhereFilterOp,
    value: any
) => Query<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9242,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9242",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9242",
                          },
                          "type": "(fieldPath: string | FieldPath, opStr: WhereFilterOp, value: any) => Query<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Applies a custom data converter to this Query, allowing you to use your
     * own custom model objects with Firestore. When you call get() on the
     * returned Query, the provided converter will convert between Firestore
     * data and your custom type U.
     *
     * @param converter Converts objects to and from Firestore.
     * @return A Query<U> that uses the provided converter.
     */",
                          ],
                          "id": "firebase.firestore.Query.withConverter",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "withConverter",
                          "signature": "withConverter: <U>(converter: FirestoreDataConverter<U>) => Query<U>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9486,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9486",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9486",
                          },
                          "type": "<U>(converter: FirestoreDataConverter<U>) => Query<U>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The \`Firestore\` for the Firestore database (useful for performing
     * transactions, etc.).
     */",
                          ],
                          "id": "firebase.firestore.Query.firestore",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "firestore",
                          "signature": "readonly firestore: Firestore;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9230,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9230",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9230",
                          },
                          "type": "Firestore",
                        },
                      ],
                    },
                    "name": "Query",
                    "signature": "class Query<T = DocumentData> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9223,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9223",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9223",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * A \`QueryDocumentSnapshot\` contains data read from a document in your
   * Firestore database as part of a query. The document is guaranteed to exist
   * and its data can be extracted with \`.data()\` or \`.get(<field>)\` to get a
   * specific field.
   *
   * A \`QueryDocumentSnapshot\` offers the same API surface as a
   * \`DocumentSnapshot\`. Since query results contain only existing documents, the
   * \`exists\` property will always be true and \`data()\` will never return
   * 'undefined'.
   */",
                    ],
                    "id": "firebase.firestore.QueryDocumentSnapshot",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Retrieves all fields in the document as an Object.
     *
     * By default, \`FieldValue.serverTimestamp()\` values that have not yet been
     * set to their final value will be returned as \`null\`. You can override
     * this by passing an options object.
     *
     * @override
     * @param options An options object to configure how data is retrieved from
     * the snapshot (e.g. the desired behavior for server timestamps that have
     * not yet been set to their final value).
     * @return An Object containing all fields in the document.
     */",
                          ],
                          "id": "firebase.firestore.QueryDocumentSnapshot.data",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "data",
                          "signature": "data: (options?: SnapshotOptions) => T;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9193,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9193",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9193",
                          },
                          "type": "(options?: SnapshotOptions) => T",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "QueryDocumentSnapshot",
                    "signature": "class QueryDocumentSnapshot<T = DocumentData> extends DocumentSnapshot<T> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9175,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9175",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9175",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * A \`QuerySnapshot\` contains zero or more \`DocumentSnapshot\` objects
   * representing the results of a query. The documents can be accessed as an
   * array via the \`docs\` property or enumerated using the \`forEach\` method. The
   * number of documents can be determined via the \`empty\` and \`size\`
   * properties.
   */",
                    ],
                    "id": "firebase.firestore.QuerySnapshot",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as added changes.
     *
     * @param options \`SnapshotListenOptions\` that control whether metadata-only
     * changes (i.e. only \`DocumentSnapshot.metadata\` changed) should trigger
     * snapshot events.
     */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.docChanges",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "docChanges",
                          "signature": "docChanges: (options?: SnapshotListenOptions) => Array<DocumentChange<T>>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9527,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9527",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9527",
                          },
                          "type": "(options?: SnapshotListenOptions) => Array<DocumentChange<T>>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Enumerates all of the documents in the \`QuerySnapshot\`.
     *
     * @param callback A callback to be called with a \`QueryDocumentSnapshot\` for
     * each document in the snapshot.
     * @param thisArg The \`this\` binding for the callback.
     */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.forEach",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "forEach",
                          "signature": "forEach: (
    callback: (result: QueryDocumentSnapshot<T>) => void,
    thisArg?: any
) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9536,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9536",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9536",
                          },
                          "type": "(callback: (result: QueryDocumentSnapshot<T>) => void, thisArg?: any) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`QuerySnapshot\` is equal to the provided one.
     *
     * @param other The \`QuerySnapshot\` to compare against.
     * @return true if this \`QuerySnapshot\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: QuerySnapshot<T>) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9547,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9547",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9547",
                          },
                          "type": "(other: QuerySnapshot<T>) => boolean",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/** An array of all the documents in the \`QuerySnapshot\`. */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.docs",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "docs",
                          "signature": "readonly docs: QueryDocumentSnapshot<T>[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9511,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9511",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9511",
                          },
                          "type": "QueryDocumentSnapshot<T>[]",
                        },
                        Object {
                          "docs": Array [
                            "/** True if there are no documents in the \`QuerySnapshot\`. */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.empty",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "empty",
                          "signature": "readonly empty: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9517,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9517",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9517",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Metadata about this snapshot, concerning its source and if it has local
     * modifications.
     */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.metadata",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "metadata",
                          "signature": "readonly metadata: SnapshotMetadata;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9508,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9508",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9508",
                          },
                          "type": "SnapshotMetadata",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The query on which you called \`get\` or \`onSnapshot\` in order to get this
     * \`QuerySnapshot\`.
     */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.query",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "query",
                          "signature": "readonly query: Query<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9503,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9503",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9503",
                          },
                          "type": "Query<T>",
                        },
                        Object {
                          "docs": Array [
                            "/** The number of documents in the \`QuerySnapshot\`. */",
                          ],
                          "id": "firebase.firestore.QuerySnapshot.size",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "size",
                          "signature": "readonly size: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9514,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9514",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9514",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "QuerySnapshot",
                    "signature": "class QuerySnapshot<T = DocumentData> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9496,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9496",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9496",
                    },
                  },
                  Object {
                    "constructors": Array [
                      Object {
                        "docs": Array [
                          "/**
     * Creates a new timestamp.
     *
     * @param seconds The number of seconds of UTC time since Unix epoch
     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     *     9999-12-31T23:59:59Z inclusive.
     * @param nanoseconds The non-negative fractions of a second at nanosecond
     *     resolution. Negative second values with fractions must still have
     *     non-negative nanoseconds values that count forward in time. Must be
     *     from 0 to 999,999,999 inclusive.
     */",
                        ],
                        "id": "firebase.firestore.Timestamp.0-constructor",
                        "kind": "ClassConstructorDeclaration",
                        "name": "constructor",
                        "signature": "constructor(seconds: number, nanoseconds: number);",
                        "source": Object {
                          "filename": "index.d.ts",
                          "line": 8454,
                          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8454",
                          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8454",
                        },
                      },
                    ],
                    "docs": Array [
                      "/**
   * A Timestamp represents a point in time independent of any time zone or
   * calendar, represented as seconds and fractions of seconds at nanosecond
   * resolution in UTC Epoch time.
   *
   * It is encoded using the Proleptic Gregorian
   * Calendar which extends the Gregorian calendar backwards to year one. It is
   * encoded assuming all minutes are 60 seconds long, i.e. leap seconds are
   * \\"smeared\\" so that no leap second table is needed for interpretation. Range is
   * from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
   *
   * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
   */",
                    ],
                    "id": "firebase.firestore.Timestamp",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates a new timestamp from the given date.
     *
     * @param date The date to initialize the \`Timestamp\` from.
     * @return A new \`Timestamp\` representing the same point in time as the given
     *     date.
     */",
                          ],
                          "id": "firebase.firestore.Timestamp.fromDate",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "fromDate",
                          "signature": "static fromDate: (date: Date) => Timestamp;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8470,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8470",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8470",
                          },
                          "type": "(date: Date) => Timestamp",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @return A new \`Timestamp\` representing the same point in time as the given
     *     number of milliseconds.
     */",
                          ],
                          "id": "firebase.firestore.Timestamp.fromMillis",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "fromMillis",
                          "signature": "static fromMillis: (milliseconds: number) => Timestamp;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8480,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8480",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8480",
                          },
                          "type": "(milliseconds: number) => Timestamp",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`Timestamp\` is equal to the provided one.
     *
     * @param other The \`Timestamp\` to compare against.
     * @return true if this \`Timestamp\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.Timestamp.isEqual",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: Timestamp) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8509,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8509",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8509",
                          },
                          "type": "(other: Timestamp) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a new timestamp with the current date, with millisecond precision.
     *
     * @return a new timestamp representing the current date.
     */",
                          ],
                          "id": "firebase.firestore.Timestamp.now",
                          "isStatic": true,
                          "kind": "ClassMethodDeclaration",
                          "name": "now",
                          "signature": "static now: () => Timestamp;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8461,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8461",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8461",
                          },
                          "type": "() => Timestamp",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Convert a Timestamp to a JavaScript \`Date\` object. This conversion causes
     * a loss of precision since \`Date\` objects only support millisecond precision.
     *
     * @return JavaScript \`Date\` object representing the same point in time as
     *     this \`Timestamp\`, with millisecond precision.
     */",
                          ],
                          "id": "firebase.firestore.Timestamp.toDate",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "toDate",
                          "signature": "toDate: () => Date;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8492,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8492",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8492",
                          },
                          "type": "() => Date",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Convert a timestamp to a numeric timestamp (in milliseconds since epoch).
     * This operation causes a loss of precision.
     *
     * @return The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */",
                          ],
                          "id": "firebase.firestore.Timestamp.toMillis",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "toMillis",
                          "signature": "toMillis: () => number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8501,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8501",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8501",
                          },
                          "type": "() => number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Converts this object to a primitive string, which allows Timestamp objects to be compared
     * using the \`>\`, \`<=\`, \`>=\` and \`>\` operators.
     */",
                          ],
                          "id": "firebase.firestore.Timestamp.valueOf",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "valueOf",
                          "signature": "valueOf: () => string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8515,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8515",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8515",
                          },
                          "type": "() => string",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.firestore.Timestamp.nanoseconds",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "nanoseconds",
                          "signature": "readonly nanoseconds: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8483,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8483",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8483",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.firestore.Timestamp.seconds",
                          "isStatic": false,
                          "kind": "ClassPropertyDeclaration",
                          "name": "seconds",
                          "signature": "readonly seconds: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8482,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8482",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8482",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "Timestamp",
                    "signature": "class Timestamp {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8442,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8442",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8442",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * A reference to a transaction.
   * The \`Transaction\` object passed to a transaction's updateFunction provides
   * the methods to read and write data within the transaction context. See
   * \`Firestore.runTransaction()\`.
   */",
                    ],
                    "id": "firebase.firestore.Transaction",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Deletes the document referred to by the provided \`DocumentReference\`.
     *
     * @param documentRef A reference to the document to be deleted.
     * @return This \`Transaction\` instance. Used for chaining method calls.
     */",
                          ],
                          "id": "firebase.firestore.Transaction.delete",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "delete",
                          "signature": "delete: (documentRef: DocumentReference<any>) => Transaction;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8651,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8651",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8651",
                          },
                          "type": "(documentRef: DocumentReference<any>) => Transaction",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Reads the document referenced by the provided \`DocumentReference.\`
     *
     * @param documentRef A reference to the document to be read.
     * @return A DocumentSnapshot for the read data.
     */",
                          ],
                          "id": "firebase.firestore.Transaction.get",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "get",
                          "signature": "get: <T>(documentRef: DocumentReference<T>) => Promise<DocumentSnapshot<T>>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8581,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8581",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8581",
                          },
                          "type": "<T>(documentRef: DocumentReference<T>) => Promise<DocumentSnapshot<T>>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Writes to the document referred to by the provided \`DocumentReference\`.
     * If the document does not exist yet, it will be created. If you pass
     * \`SetOptions\`, the provided data can be merged into the existing document.
     *
     * @param documentRef A reference to the document to be set.
     * @param data An object of the fields and values for the document.
     * @param options An object to configure the set behavior.
     * @return This \`Transaction\` instance. Used for chaining method calls.
     */",
                            "/**
     * Writes to the document referred to by the provided \`DocumentReference\`.
     * If the document does not exist yet, it will be created. If you pass
     * \`SetOptions\`, the provided data can be merged into the existing document.
     *
     * @param documentRef A reference to the document to be set.
     * @param data An object of the fields and values for the document.
     * @return This \`Transaction\` instance. Used for chaining method calls.
     */",
                          ],
                          "id": "firebase.firestore.Transaction.set",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "set",
                          "signature": "set: {
    <T>(
        documentRef: DocumentReference<T>,
        data: Partial<T>,
        options: SetOptions
    ): Transaction;
    <T>(documentRef: DocumentReference<T>, data: T): Transaction;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8593,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8593",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8593",
                          },
                          "type": "{ <T>(documentRef: DocumentReference<T>, data: Partial<T>, options: SetOptions): Transaction; <T>(documentRef: DocumentReference<T>, data: T): Transaction; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Updates fields in the document referred to by the provided
     * \`DocumentReference\`. The update will fail if applied to a document that
     * does not exist.
     *
     * @param documentRef A reference to the document to be updated.
     * @param data An object containing the fields and values with which to
     * update the document. Fields can contain dots to reference nested fields
     * within the document.
     * @return This \`Transaction\` instance. Used for chaining method calls.
     */",
                            "/**
     * Updates fields in the document referred to by the provided
     * \`DocumentReference\`. The update will fail if applied to a document that
     * does not exist.
     *
     * Nested fields can be updated by providing dot-separated field path
     * strings or by providing FieldPath objects.
     *
     * @param documentRef A reference to the document to be updated.
     * @param field The first field to update.
     * @param value The first value.
     * @param moreFieldsAndValues Additional key/value pairs.
     * @return A Promise resolved once the data has been successfully written
     * to the backend (Note that it won't resolve while you're offline).
     */",
                          ],
                          "id": "firebase.firestore.Transaction.update",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "update",
                          "signature": "update: {
    (documentRef: DocumentReference<any>, data: UpdateData): Transaction;
    (
        documentRef: DocumentReference<any>,
        field: string | FieldPath,
        value: any,
        ...moreFieldsAndValues: any[]
    ): Transaction;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8621,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8621",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8621",
                          },
                          "type": "{ (documentRef: DocumentReference<any>, data: UpdateData): Transaction; (documentRef: DocumentReference<any>, field: string | FieldPath, value: any, ...moreFieldsAndValues: any[]): Transaction; }",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "Transaction",
                    "signature": "class Transaction {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8572,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8572",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8572",
                    },
                  },
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * A write batch, used to perform multiple writes as a single atomic unit.
   *
   * A \`WriteBatch\` object can be acquired by calling \`Firestore.batch()\`. It
   * provides methods for adding writes to the write batch. None of the
   * writes will be committed (or visible locally) until \`WriteBatch.commit()\`
   * is called.
   *
   * Unlike transactions, write batches are persisted offline and therefore are
   * preferable when you don't need to condition your writes on read data.
   */",
                    ],
                    "id": "firebase.firestore.WriteBatch",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * @return A Promise resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit. Note that it won't
     * resolve while you're offline.
     */",
                          ],
                          "id": "firebase.firestore.WriteBatch.commit",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "commit",
                          "signature": "commit: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8744,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8744",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8744",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Deletes the document referred to by the provided \`DocumentReference\`.
     *
     * @param documentRef A reference to the document to be deleted.
     * @return This \`WriteBatch\` instance. Used for chaining method calls.
     */",
                          ],
                          "id": "firebase.firestore.WriteBatch.delete",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "delete",
                          "signature": "delete: (documentRef: DocumentReference<any>) => WriteBatch;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8735,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8735",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8735",
                          },
                          "type": "(documentRef: DocumentReference<any>) => WriteBatch",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Writes to the document referred to by the provided \`DocumentReference\`.
     * If the document does not exist yet, it will be created. If you pass
     * \`SetOptions\`, the provided data can be merged into the existing document.
     *
     * @param documentRef A reference to the document to be set.
     * @param data An object of the fields and values for the document.
     * @param options An object to configure the set behavior.
     * @return This \`WriteBatch\` instance. Used for chaining method calls.
     */",
                            "/**
     * Writes to the document referred to by the provided \`DocumentReference\`.
     * If the document does not exist yet, it will be created. If you pass
     * \`SetOptions\`, the provided data can be merged into the existing document.
     *
     * @param documentRef A reference to the document to be set.
     * @param data An object of the fields and values for the document.
     * @return This \`WriteBatch\` instance. Used for chaining method calls.
     */",
                          ],
                          "id": "firebase.firestore.WriteBatch.set",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "set",
                          "signature": "set: {
    <T>(
        documentRef: DocumentReference<T>,
        data: Partial<T>,
        options: SetOptions
    ): WriteBatch;
    <T>(documentRef: DocumentReference<T>, data: T): WriteBatch;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8678,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8678",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8678",
                          },
                          "type": "{ <T>(documentRef: DocumentReference<T>, data: Partial<T>, options: SetOptions): WriteBatch; <T>(documentRef: DocumentReference<T>, data: T): WriteBatch; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Updates fields in the document referred to by the provided
     * \`DocumentReference\`. The update will fail if applied to a document that
     * does not exist.
     *
     * @param documentRef A reference to the document to be updated.
     * @param data An object containing the fields and values with which to
     * update the document. Fields can contain dots to reference nested fields
     * within the document.
     * @return This \`WriteBatch\` instance. Used for chaining method calls.
     */",
                            "/**
     * Updates fields in the document referred to by this \`DocumentReference\`.
     * The update will fail if applied to a document that does not exist.
     *
     * Nested fields can be update by providing dot-separated field path strings
     * or by providing FieldPath objects.
     *
     * @param documentRef A reference to the document to be updated.
     * @param field The first field to update.
     * @param value The first value.
     * @param moreFieldsAndValues Additional key value pairs.
     * @return A Promise resolved once the data has been successfully written
     * to the backend (Note that it won't resolve while you're offline).
     */",
                          ],
                          "id": "firebase.firestore.WriteBatch.update",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "update",
                          "signature": "update: {
    (documentRef: DocumentReference<any>, data: UpdateData): WriteBatch;
    (
        documentRef: DocumentReference<any>,
        field: string | FieldPath,
        value: any,
        ...moreFieldsAndValues: any[]
    ): WriteBatch;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8706,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8706",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8706",
                          },
                          "type": "{ (documentRef: DocumentReference<any>, data: UpdateData): WriteBatch; (documentRef: DocumentReference<any>, field: string | FieldPath, value: any, ...moreFieldsAndValues: any[]): WriteBatch; }",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "WriteBatch",
                    "signature": "class WriteBatch {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8665,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8665",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8665",
                    },
                  },
                ],
                "enums": Array [],
                "functions": Array [
                  Object {
                    "docs": Array [
                      "/**
   * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
   *
   * @param logLevel
   *   The verbosity you set for activity and error logging. Can be any of
   *   the following values:
   *
   *   <ul>
   *     <li><code>debug</code> for the most verbose logging level, primarily for
   *     debugging.</li>
   *     <li><code>error</code> to log errors only.</li>
   *     <li><code>silent</code> to turn off logging.</li>
   *   </ul>
   */",
                    ],
                    "id": "firebase.firestore.setLogLevel",
                    "kind": "FunctionDeclaration",
                    "name": "setLogLevel",
                    "signature": "setLogLevel: (logLevel: LogLevel) => void;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7987,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7987",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7987",
                    },
                    "type": "(logLevel: LogLevel) => void",
                  },
                ],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * A \`DocumentChange\` represents a change to the documents matching a query.
   * It contains the document affected and the type of change that occurred.
   */",
                    ],
                    "id": "firebase.firestore.DocumentChange",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/** The document affected by this change. */",
                          ],
                          "id": "firebase.firestore.DocumentChange.doc",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "doc",
                          "signature": "readonly doc: QueryDocumentSnapshot<T>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9564,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9564",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9564",
                          },
                          "type": "QueryDocumentSnapshot<T>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The index of the changed document in the result set immediately after
     * this \`DocumentChange\` (i.e. supposing that all prior \`DocumentChange\`
     * objects and the current \`DocumentChange\` object have been applied).
     * Is -1 for 'removed' events.
     */",
                          ],
                          "id": "firebase.firestore.DocumentChange.newIndex",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "newIndex",
                          "signature": "readonly newIndex: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9579,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9579",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9579",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The index of the changed document in the result set immediately prior to
     * this \`DocumentChange\` (i.e. supposing that all prior \`DocumentChange\` objects
     * have been applied). Is -1 for 'added' events.
     */",
                          ],
                          "id": "firebase.firestore.DocumentChange.oldIndex",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "oldIndex",
                          "signature": "readonly oldIndex: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9571,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9571",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9571",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/** The type of change ('added', 'modified', or 'removed'). */",
                          ],
                          "id": "firebase.firestore.DocumentChange.type",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "type",
                          "signature": "readonly type: DocumentChangeType;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9561,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9561",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9561",
                          },
                          "type": "DocumentChangeType",
                        },
                      ],
                    },
                    "name": "DocumentChange",
                    "signature": "interface DocumentChange<T = DocumentData> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9559,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9559",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9559",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Converter used by \`withConverter()\` to transform user objects of type T
   * into Firestore data.
   *
   * Using the converter allows you to specify generic type arguments when
   * storing and retrieving objects from Firestore.
   *
   * @example
   * \`\`\`typescript
   * class Post {
   *   constructor(readonly title: string, readonly author: string) {}
   *
   *   toString(): string {
   *     return this.title + ', by ' + this.author;
   *   }
   * }
   *
   * const postConverter = {
   *   toFirestore(post: Post): firebase.firestore.DocumentData {
   *     return {title: post.title, author: post.author};
   *   },
   *   fromFirestore(
   *     snapshot: firebase.firestore.QueryDocumentSnapshot,
   *     options: firebase.firestore.SnapshotOptions
   *   ): Post {
   *     const data = snapshot.data(options)!;
   *     return new Post(data.title, data.author);
   *   }
   * };
   *
   * const postSnap = await firebase.firestore()
   *   .collection('posts')
   *   .withConverter(postConverter)
   *   .doc().get();
   * const post = postSnap.data();
   * if (post !== undefined) {
   *   post.title; // string
   *   post.toString(); // Should be defined
   *   post.someNonExistentProperty; // TS error
   * }
   * \`\`\`
   */",
                    ],
                    "id": "firebase.firestore.FirestoreDataConverter",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Called by the Firestore SDK to convert Firestore data into an object of
     * type T. You can access your data by calling: \`snapshot.data(options)\`.
     *
     * @param snapshot A QueryDocumentSnapshot containing your data and metadata.
     * @param options The SnapshotOptions from the initial call to \`data()\`.
     */",
                          ],
                          "id": "firebase.firestore.FirestoreDataConverter.fromFirestore",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "fromFirestore",
                          "signature": "fromFirestore: (
    snapshot: QueryDocumentSnapshot<DocumentData>,
    options: SnapshotOptions
) => T;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8048,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8048",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8048",
                          },
                          "type": "(snapshot: QueryDocumentSnapshot<DocumentData>, options: SnapshotOptions) => T",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Called by the Firestore SDK to convert a custom model object of type T
     * into a plain Javascript object (suitable for writing directly to the
     * Firestore database). To use \`set()\` with \`merge\` and \`mergeFields\`,
     * \`toFirestore()\` must be defined with \`Partial<T>\`.
     */",
                          ],
                          "id": "firebase.firestore.FirestoreDataConverter.toFirestore",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "toFirestore",
                          "signature": "toFirestore: {
    (modelObject: T): DocumentData;
    (modelObject: Partial<T>, options: SetOptions): DocumentData;
};",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8038,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8038",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8038",
                          },
                          "type": "{ (modelObject: T): DocumentData; (modelObject: Partial<T>, options: SetOptions): DocumentData; }",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "FirestoreDataConverter",
                    "signature": "interface FirestoreDataConverter<T> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8031,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8031",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8031",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/** An error returned by a Firestore operation. */",
                    ],
                    "id": "firebase.firestore.FirestoreError",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.firestore.FirestoreError.code",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "code",
                          "signature": "code: FirestoreErrorCode;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9811,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9811",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9811",
                          },
                          "type": "FirestoreErrorCode",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.firestore.FirestoreError.message",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "message",
                          "signature": "message: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9812,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9812",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9812",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.firestore.FirestoreError.name",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "name",
                          "signature": "name: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9813,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9813",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9813",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.firestore.FirestoreError.stack",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "stack",
                          "signature": "stack?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9814,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9814",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9814",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "FirestoreError",
                    "signature": "interface FirestoreError {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9810,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9810",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9810",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * An options object that configures the behavior of \`get()\` calls on
   * \`DocumentReference\` and \`Query\`. By providing a \`GetOptions\` object, these
   * methods can be configured to fetch results only from the server, only from
   * the local cache or attempt to fetch results from the server and fall back to
   * the cache (which is the default).
   */",
                    ],
                    "id": "firebase.firestore.GetOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Describes whether we should get from server or cache.
     *
     * Setting to \`default\` (or not setting at all), causes Firestore to try to
     * retrieve an up-to-date (server-retrieved) snapshot, but fall back to
     * returning cached data if the server can't be reached.
     *
     * Setting to \`server\` causes Firestore to avoid the cache, generating an
     * error if the server cannot be reached. Note that the cache will still be
     * updated if the server request succeeds. Also note that latency-compensation
     * still takes effect, so any pending write operations will be visible in the
     * returned data (merged into the server-provided data).
     *
     * Setting to \`cache\` causes Firestore to immediately return a value from the
     * cache, ignoring the server completely (implying that the returned value
     * may be stale with respect to the value on the server.) If there is no data
     * in the cache to satisfy the \`get()\` call, \`DocumentReference.get()\` will
     * return an error and \`QuerySnapshot.get()\` will return an empty
     * \`QuerySnapshot\` with no documents.
     */",
                          ],
                          "id": "firebase.firestore.GetOptions.source",
                          "isOptional": true,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "source",
                          "signature": "readonly source?: 'default' | 'server' | 'cache';",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8812,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8812",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8812",
                          },
                          "type": "\\"default\\" | \\"server\\" | \\"cache\\"",
                        },
                      ],
                    },
                    "name": "GetOptions",
                    "signature": "interface GetOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8791,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8791",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8791",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Represents the task of loading a Firestore bundle. It provides progress of bundle
   * loading, as well as task completion and error events.
   *
   * The API is compatible with \`Promise<LoadBundleTaskProgress>\`.
   */",
                    ],
                    "id": "firebase.firestore.LoadBundleTask",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Implements the \`Promise<LoadBundleTaskProgress>.catch\` interface.
     *
     * @param onRejected
     *   Called when an error occurs during bundle loading.
     */",
                          ],
                          "id": "firebase.firestore.LoadBundleTask.catch",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "catch",
                          "signature": "catch: <R>(
    onRejected: (a: Error) => R | PromiseLike<R>
) => Promise<R | LoadBundleTaskProgress>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8366,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8366",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8366",
                          },
                          "type": "<R>(onRejected: (a: Error) => R | PromiseLike<R>) => Promise<R | LoadBundleTaskProgress>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Registers functions to listen to bundle loading progress events.
     * @param next
     *   Called when there is a progress update from bundle loading. Typically \`next\` calls occur
     *   each time a Firestore document is loaded from the bundle.
     * @param error
     *   Called when an error occurs during bundle loading. The task aborts after reporting the
     *   error, and there should be no more updates after this.
     * @param complete
     *   Called when the loading task is complete.
     */",
                          ],
                          "id": "firebase.firestore.LoadBundleTask.onProgress",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onProgress",
                          "signature": "onProgress: (
    next?: (progress: LoadBundleTaskProgress) => any,
    error?: (error: Error) => any,
    complete?: () => void
) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8340,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8340",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8340",
                          },
                          "type": "(next?: (progress: LoadBundleTaskProgress) => any, error?: (error: Error) => any, complete?: () => void) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Implements the \`Promise<LoadBundleTaskProgress>.then\` interface.
     *
     * @param onFulfilled
     *   Called on the completion of the loading task with a final \`LoadBundleTaskProgress\` update.
     *   The update will always have its \`taskState\` set to \`\\"Success\\"\`.
     * @param onRejected
     *   Called when an error occurs during bundle loading.
     */",
                          ],
                          "id": "firebase.firestore.LoadBundleTask.then",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "then",
                          "signature": "then: <T, R>(
    onFulfilled?: (a: LoadBundleTaskProgress) => T | PromiseLike<T>,
    onRejected?: (a: Error) => R | PromiseLike<R>
) => Promise<T | R>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8355,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8355",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8355",
                          },
                          "type": "<T, R>(onFulfilled?: (a: LoadBundleTaskProgress) => T | PromiseLike<T>, onRejected?: (a: Error) => R | PromiseLike<R>) => Promise<T | R>",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "LoadBundleTask",
                    "signature": "interface LoadBundleTask extends PromiseLike<LoadBundleTaskProgress> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8328,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8328",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8328",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Represents a progress update or a final state from loading bundles.
   */",
                    ],
                    "id": "firebase.firestore.LoadBundleTaskProgress",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/** How many bytes have been loaded. */",
                          ],
                          "id": "firebase.firestore.LoadBundleTaskProgress.bytesLoaded",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "bytesLoaded",
                          "signature": "bytesLoaded: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8380,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8380",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8380",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/** How many documents have been loaded. */",
                          ],
                          "id": "firebase.firestore.LoadBundleTaskProgress.documentsLoaded",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "documentsLoaded",
                          "signature": "documentsLoaded: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8376,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8376",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8376",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/** Current task state. */",
                          ],
                          "id": "firebase.firestore.LoadBundleTaskProgress.taskState",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "taskState",
                          "signature": "taskState: TaskState;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8384,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8384",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8384",
                          },
                          "type": "TaskState",
                        },
                        Object {
                          "docs": Array [
                            "/** How many bytes are in the bundle being loaded. */",
                          ],
                          "id": "firebase.firestore.LoadBundleTaskProgress.totalBytes",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "totalBytes",
                          "signature": "totalBytes: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8382,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8382",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8382",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/** How many documents are in the bundle being loaded. */",
                          ],
                          "id": "firebase.firestore.LoadBundleTaskProgress.totalDocuments",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "totalDocuments",
                          "signature": "totalDocuments: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8378,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8378",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8378",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "LoadBundleTaskProgress",
                    "signature": "interface LoadBundleTaskProgress {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8374,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8374",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8374",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Settings that can be passed to Firestore.enablePersistence() to configure
   * Firestore persistence.
   */",
                    ],
                    "id": "firebase.firestore.PersistenceSettings",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Whether to force enable persistence for the client. This cannot be used
     * with \`synchronizeTabs:true\` and is primarily intended for use with Web
     * Workers. Setting this to \`true\` will enable persistence, but cause other
     * tabs using persistence to fail.
     *
     * This setting may be removed in a future release. If you find yourself
     * using it for a specific use case or run into any issues, please tell us
     * about it in
     * https://github.com/firebase/firebase-js-sdk/issues/983.
     */",
                          ],
                          "id": "firebase.firestore.PersistenceSettings.experimentalForceOwningTab",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "experimentalForceOwningTab",
                          "signature": "experimentalForceOwningTab?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7968,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7968",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7968",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Whether to synchronize the in-memory state of multiple tabs. Setting this
     * to \`true\` in all open tabs enables shared access to local persistence,
     * shared execution of queries and latency-compensated local document updates
     * across all connected instances.
     *
     * To enable this mode, \`synchronizeTabs:true\` needs to be set globally in all
     * active tabs. If omitted or set to 'false', \`enablePersistence()\` will fail
     * in all but the first tab.
     */",
                          ],
                          "id": "firebase.firestore.PersistenceSettings.synchronizeTabs",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "synchronizeTabs",
                          "signature": "synchronizeTabs?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7955,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7955",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7955",
                          },
                          "type": "boolean",
                        },
                      ],
                    },
                    "name": "PersistenceSettings",
                    "signature": "interface PersistenceSettings {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7944,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7944",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7944",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * An options object that configures the behavior of \`set()\` calls in
   * {@link firebase.firestore.DocumentReference.set DocumentReference}, {@link
   * firebase.firestore.WriteBatch.set WriteBatch} and {@link
   * firebase.firestore.Transaction.set Transaction}. These calls can be
   * configured to perform granular merges instead of overwriting the target
   * documents in their entirety by providing a \`SetOptions\` with \`merge: true\`.
   */",
                    ],
                    "id": "firebase.firestore.SetOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Changes the behavior of a set() call to only replace the values specified
     * in its data argument. Fields omitted from the set() call remain
     * untouched.
     */",
                          ],
                          "id": "firebase.firestore.SetOptions.merge",
                          "isOptional": true,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "merge",
                          "signature": "readonly merge?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8774,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8774",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8774",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Changes the behavior of set() calls to only replace the specified field
     * paths. Any field path that is not specified is ignored and remains
     * untouched.
     */",
                          ],
                          "id": "firebase.firestore.SetOptions.mergeFields",
                          "isOptional": true,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "mergeFields",
                          "signature": "readonly mergeFields?: (string | FieldPath)[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8781,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8781",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8781",
                          },
                          "type": "(string | FieldPath)[]",
                        },
                      ],
                    },
                    "name": "SetOptions",
                    "signature": "interface SetOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8768,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8768",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8768",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Specifies custom configurations for your Cloud Firestore instance.
   * You must set these before invoking any other methods.
   */",
                    ],
                    "id": "firebase.firestore.Settings",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * An approximate cache size threshold for the on-disk data. If the cache grows beyond this
     * size, Firestore will start removing data that hasn't been recently used. The size is not a
     * guarantee that the cache will stay below that size, only that if the cache exceeds the given
     * size, cleanup will be attempted.
     *
     * The default value is 40 MB. The threshold must be set to at least 1 MB, and can be set to
     * CACHE_SIZE_UNLIMITED to disable garbage collection.
     */",
                          ],
                          "id": "firebase.firestore.Settings.cacheSizeBytes",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "cacheSizeBytes",
                          "signature": "cacheSizeBytes?: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7891,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7891",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7891",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Configures the SDK's underlying transport (WebChannel) to automatically detect if
     * long-polling should be used. This is very similar to \`experimentalForceLongPolling\`,
     * but only uses long-polling if required.
     *
     * This setting will likely be enabled by default in future releases and cannot be
     * combined with \`experimentalForceLongPolling\`.
     *
     * @webonly
     */",
                          ],
                          "id": "firebase.firestore.Settings.experimentalAutoDetectLongPolling",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "experimentalAutoDetectLongPolling",
                          "signature": "experimentalAutoDetectLongPolling?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7921,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7921",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7921",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Forces the SDK’s underlying network transport (WebChannel) to use
     * long-polling. Each response from the backend will be closed immediately
     * after the backend sends data (by default responses are kept open in
     * case the backend has more data to send). This avoids incompatibility
     * issues with certain proxies, antivirus software, etc. that incorrectly
     * buffer traffic indefinitely. Use of this option will cause some
     * performance degradation though.
     *
     * This setting cannot be used with \`experimentalAutoDetectLongPolling\` and
     * may be removed in a future release. If you find yourself using it to
     * work around a specific network reliability issue, please tell us about
     * it in https://github.com/firebase/firebase-js-sdk/issues/1674.
     *
     * @webonly
     */",
                          ],
                          "id": "firebase.firestore.Settings.experimentalForceLongPolling",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "experimentalForceLongPolling",
                          "signature": "experimentalForceLongPolling?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7909,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7909",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7909",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/** The hostname to connect to. */",
                          ],
                          "id": "firebase.firestore.Settings.host",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "host",
                          "signature": "host?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7878,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7878",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7878",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Whether to skip nested properties that are set to \`undefined\` during
     * object serialization. If set to \`true\`, these properties are skipped
     * and not written to Firestore. If set to \`false\` or omitted, the SDK
     * throws an exception when it encounters properties of type \`undefined\`.
     */",
                          ],
                          "id": "firebase.firestore.Settings.ignoreUndefinedProperties",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "ignoreUndefinedProperties",
                          "signature": "ignoreUndefinedProperties?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7929,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7929",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7929",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Whether to merge the provided settings with the existing settings. If
     * set to \`true\`, the settings are merged with existing settings. If
     * set to \`false\` or left unset, the settings replace the existing
     * settings.
     */",
                          ],
                          "id": "firebase.firestore.Settings.merge",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "merge",
                          "signature": "merge?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7937,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7937",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7937",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/** Whether to use SSL when connecting. */",
                          ],
                          "id": "firebase.firestore.Settings.ssl",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "ssl",
                          "signature": "ssl?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7880,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7880",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7880",
                          },
                          "type": "boolean",
                        },
                      ],
                    },
                    "name": "Settings",
                    "signature": "interface Settings {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7876,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7876",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7876",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * An options object that can be passed to \`DocumentReference.onSnapshot()\`,
   * \`Query.onSnapshot()\` and \`QuerySnapshot.docChanges()\` to control which
   * types of changes to include in the result set.
   */",
                    ],
                    "id": "firebase.firestore.SnapshotListenOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Include a change even if only the metadata of the query or of a document
     * changed. Default is false.
     */",
                          ],
                          "id": "firebase.firestore.SnapshotListenOptions.includeMetadataChanges",
                          "isOptional": true,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "includeMetadataChanges",
                          "signature": "readonly includeMetadataChanges?: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 8757,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8757",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8757",
                          },
                          "type": "boolean",
                        },
                      ],
                    },
                    "name": "SnapshotListenOptions",
                    "signature": "interface SnapshotListenOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8752,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8752",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8752",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Metadata about a snapshot, describing the state of the snapshot.
   */",
                    ],
                    "id": "firebase.firestore.SnapshotMetadata",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns true if this \`SnapshotMetadata\` is equal to the provided one.
     *
     * @param other The \`SnapshotMetadata\` to compare against.
     * @return true if this \`SnapshotMetadata\` is equal to the provided one.
     */",
                          ],
                          "id": "firebase.firestore.SnapshotMetadata.isEqual",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "isEqual",
                          "signature": "isEqual: (other: SnapshotMetadata) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9088,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9088",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9088",
                          },
                          "type": "(other: SnapshotMetadata) => boolean",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * True if the snapshot was created from cached data rather than guaranteed
     * up-to-date server data. If your listener has opted into metadata updates
     * (via \`SnapshotListenOptions\`)
     * you will receive another snapshot with \`fromCache\` set to false once
     * the client has received up-to-date data from the backend.
     */",
                          ],
                          "id": "firebase.firestore.SnapshotMetadata.fromCache",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "fromCache",
                          "signature": "readonly fromCache: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9080,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9080",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9080",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * True if the snapshot contains the result of local writes (e.g. set() or
     * update() calls) that have not yet been committed to the backend.
     * If your listener has opted into metadata updates (via
     * \`SnapshotListenOptions\`) you will receive another
     * snapshot with \`hasPendingWrites\` equal to false once the writes have been
     * committed to the backend.
     */",
                          ],
                          "id": "firebase.firestore.SnapshotMetadata.hasPendingWrites",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "hasPendingWrites",
                          "signature": "readonly hasPendingWrites: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9071,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9071",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9071",
                          },
                          "type": "boolean",
                        },
                      ],
                    },
                    "name": "SnapshotMetadata",
                    "signature": "interface SnapshotMetadata {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9062,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9062",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9062",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Options that configure how data is retrieved from a \`DocumentSnapshot\`
   * (e.g. the desired behavior for server timestamps that have not yet been set
   * to their final value).
   */",
                    ],
                    "id": "firebase.firestore.SnapshotOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * If set, controls the return value for server timestamps that have not yet
     * been set to their final value.
     *
     * By specifying 'estimate', pending server timestamps return an estimate
     * based on the local clock. This estimate will differ from the final value
     * and cause these values to change once the server result becomes available.
     *
     * By specifying 'previous', pending timestamps will be ignored and return
     * their previous value instead.
     *
     * If omitted or set to 'none', \`null\` will be returned by default until the
     * server value becomes available.
     */",
                          ],
                          "id": "firebase.firestore.SnapshotOptions.serverTimestamps",
                          "isOptional": true,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "serverTimestamps",
                          "signature": "readonly serverTimestamps?: 'estimate' | 'previous' | 'none';",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 9056,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9056",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9056",
                          },
                          "type": "\\"estimate\\" | \\"previous\\" | \\"none\\"",
                        },
                      ],
                    },
                    "name": "SnapshotOptions",
                    "signature": "interface SnapshotOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9041,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9041",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9041",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [
                  Object {
                    "docs": Array [
                      "/**
   * The type of a \`DocumentChange\` may be 'added', 'removed', or 'modified'.
   */",
                    ],
                    "id": "firebase.firestore.DocumentChangeType",
                    "kind": "TypeAliasDeclaration",
                    "name": "DocumentChangeType",
                    "signature": "type DocumentChangeType = 'added' | 'removed' | 'modified';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9553,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9553",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9553",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Document data (for use with \`DocumentReference.set()\`) consists of fields
   * mapped to values.
   */",
                    ],
                    "id": "firebase.firestore.DocumentData",
                    "kind": "TypeAliasDeclaration",
                    "name": "DocumentData",
                    "signature": "type DocumentData = { [field: string]: any };",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7856,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7856",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7856",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The set of Firestore status codes. The codes are the same at the ones
   * exposed by gRPC here:
   * https://github.com/grpc/grpc/blob/master/doc/statuscodes.md
   *
   * Possible values:
   * - 'cancelled': The operation was cancelled (typically by the caller).
   * - 'unknown': Unknown error or an error from a different error domain.
   * - 'invalid-argument': Client specified an invalid argument. Note that this
   *   differs from 'failed-precondition'. 'invalid-argument' indicates
   *   arguments that are problematic regardless of the state of the system
   *   (e.g. an invalid field name).
   * - 'deadline-exceeded': Deadline expired before operation could complete.
   *   For operations that change the state of the system, this error may be
   *   returned even if the operation has completed successfully. For example,
   *   a successful response from a server could have been delayed long enough
   *   for the deadline to expire.
   * - 'not-found': Some requested document was not found.
   * - 'already-exists': Some document that we attempted to create already
   *   exists.
   * - 'permission-denied': The caller does not have permission to execute the
   *   specified operation.
   * - 'resource-exhausted': Some resource has been exhausted, perhaps a
   *   per-user quota, or perhaps the entire file system is out of space.
   * - 'failed-precondition': Operation was rejected because the system is not
   *   in a state required for the operation's execution.
   * - 'aborted': The operation was aborted, typically due to a concurrency
   *   issue like transaction aborts, etc.
   * - 'out-of-range': Operation was attempted past the valid range.
   * - 'unimplemented': Operation is not implemented or not supported/enabled.
   * - 'internal': Internal errors. Means some invariants expected by
   *   underlying system has been broken. If you see one of these errors,
   *   something is very broken.
   * - 'unavailable': The service is currently unavailable. This is most likely
   *   a transient condition and may be corrected by retrying with a backoff.
   * - 'data-loss': Unrecoverable data loss or corruption.
   * - 'unauthenticated': The request does not have valid authentication
   *   credentials for the operation.
   */",
                    ],
                    "id": "firebase.firestore.FirestoreErrorCode",
                    "kind": "TypeAliasDeclaration",
                    "name": "FirestoreErrorCode",
                    "signature": "type FirestoreErrorCode =
    | 'cancelled'
    | 'unknown'
    | 'invalid-argument'
    | 'deadline-exceeded'
    | 'not-found'
    | 'already-exists'
    | 'permission-denied'
    | 'resource-exhausted'
    | 'failed-precondition'
    | 'aborted'
    | 'out-of-range'
    | 'unimplemented'
    | 'internal'
    | 'unavailable'
    | 'data-loss'
    | 'unauthenticated';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9790,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9790",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9790",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.firestore.LogLevel",
                    "kind": "TypeAliasDeclaration",
                    "name": "LogLevel",
                    "signature": "type LogLevel = 'debug' | 'error' | 'silent';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7971,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7971",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7971",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The direction of a \`Query.orderBy()\` clause is specified as 'desc' or 'asc'
   * (descending or ascending).
   */",
                    ],
                    "id": "firebase.firestore.OrderByDirection",
                    "kind": "TypeAliasDeclaration",
                    "name": "OrderByDirection",
                    "signature": "type OrderByDirection = 'desc' | 'asc';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9200,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9200",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9200",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Represents the state of bundle loading tasks.
   *
   * Both 'Error' and 'Success' are sinking state: task will abort or complete and there will
   * be no more updates after they are reported.
   */",
                    ],
                    "id": "firebase.firestore.TaskState",
                    "kind": "TypeAliasDeclaration",
                    "name": "TaskState",
                    "signature": "type TaskState = 'Error' | 'Running' | 'Success';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 8393,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L8393",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L8393",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Update data (for use with \`DocumentReference.update()\`) consists of field
   * paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that contain dots
   * reference nested fields within the document.
   */",
                    ],
                    "id": "firebase.firestore.UpdateData",
                    "kind": "TypeAliasDeclaration",
                    "name": "UpdateData",
                    "signature": "type UpdateData = { [fieldPath: string]: any };",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7863,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7863",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7863",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Filter conditions in a \`Query.where()\` clause are specified using the
   * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in',
   * 'array-contains-any', and 'not-in'.
   */",
                    ],
                    "id": "firebase.firestore.WhereFilterOp",
                    "kind": "TypeAliasDeclaration",
                    "name": "WhereFilterOp",
                    "signature": "type WhereFilterOp =
    | '<'
    | '<='
    | '=='
    | '!='
    | '>='
    | '>'
    | 'array-contains'
    | 'in'
    | 'array-contains-any'
    | 'not-in';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 9207,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L9207",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L9207",
                    },
                  },
                ],
                "variables": Array [
                  Object {
                    "docs": Array [
                      "/**
   * Constant used to indicate the LRU garbage collection should be disabled.
   * Set this value as the \`cacheSizeBytes\` on the settings passed to the
   * \`Firestore\` instance.
   */",
                    ],
                    "id": "firebase.firestore.CACHE_SIZE_UNLIMITED",
                    "kind": "VariableDeclaration",
                    "name": "CACHE_SIZE_UNLIMITED",
                    "signature": "const CACHE_SIZE_UNLIMITED: number;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7870,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7870",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7870",
                    },
                    "type": "number",
                    "variableKind": "const",
                  },
                ],
              },
              "docs": Array [],
              "id": "firebase.firestore",
              "kind": "NamespaceDeclaration",
              "name": "firebase.firestore",
              "signature": "namespace firebase.firestore {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 7851,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7851",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7851",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [
                  Object {
                    "constructors": Array [],
                    "docs": Array [
                      "/**
   * The Cloud Functions for Firebase service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.functions \`firebase.functions()\`}.
   */",
                    ],
                    "id": "firebase.functions.Functions",
                    "isAbstract": false,
                    "kind": "ClassDeclaration",
                    "members": Object {
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Gets an \`HttpsCallable\` instance that refers to the function with the given
     * name.
     *
     * @param name The name of the https callable function.
     * @param options The options for this HttpsCallable instance.
     * @return The \`HttpsCallable\` instance.
     */",
                          ],
                          "id": "firebase.functions.Functions.httpsCallable",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "httpsCallable",
                          "signature": "httpsCallable: (name: string, options?: HttpsCallableOptions) => HttpsCallable;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1830,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1830",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1830",
                          },
                          "type": "(name: string, options?: HttpsCallableOptions) => HttpsCallable",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Modify this instance to communicate with the Cloud Functions emulator.
     *
     * Note: this must be called before this instance has been used to do any operations.
     *
     * @param host The emulator host (ex: localhost)
     * @param port The emulator port (ex: 5001)
     */",
                          ],
                          "id": "firebase.functions.Functions.useEmulator",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "useEmulator",
                          "signature": "useEmulator: (host: string, port: number) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1811,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1811",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1811",
                          },
                          "type": "(host: string, port: number) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Changes this instance to point to a Cloud Functions emulator running
     * locally. See https://firebase.google.com/docs/functions/local-emulator
     *
     * @deprecated Prefer the useEmulator(host, port) method.
     * @param origin The origin of the local emulator, such as
     * \\"http://localhost:5005\\".
     */",
                          ],
                          "id": "firebase.functions.Functions.useFunctionsEmulator",
                          "isStatic": false,
                          "kind": "ClassMethodDeclaration",
                          "name": "useFunctionsEmulator",
                          "signature": "useFunctionsEmulator: (url: string) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1821,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1821",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1821",
                          },
                          "type": "(url: string) => void",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "Functions",
                    "signature": "class Functions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1800,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1800",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1800",
                    },
                  },
                ],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * An HttpsCallable is a reference to a \\"callable\\" http trigger in
   * Google Cloud Functions.
   */",
                    ],
                    "id": "firebase.functions.HttpsCallable",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.functions.HttpsCallable.0-call-signature",
                          "kind": "InterfaceCallSignatureDeclaration",
                          "name": "call signature",
                          "signature": "(data?: any): Promise<HttpsCallableResult>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1789,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1789",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1789",
                          },
                        },
                      ],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [],
                    },
                    "name": "HttpsCallable",
                    "signature": "interface HttpsCallable {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1788,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1788",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1788",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.functions.HttpsCallableOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.functions.HttpsCallableOptions.timeout",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "timeout",
                          "signature": "timeout?: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1792,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1792",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1792",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "HttpsCallableOptions",
                    "signature": "interface HttpsCallableOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1791,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1791",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1791",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * An HttpsCallableResult wraps a single result from a function call.
   */",
                    ],
                    "id": "firebase.functions.HttpsCallableResult",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.functions.HttpsCallableResult.data",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "data",
                          "signature": "readonly data: any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1782,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1782",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1782",
                          },
                          "type": "any",
                        },
                      ],
                    },
                    "name": "HttpsCallableResult",
                    "signature": "interface HttpsCallableResult {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1781,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1781",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1781",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.functions.HttpsError",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * A standard error code that will be returned to the client. This also
     * determines the HTTP status code of the response, as defined in code.proto.
     */",
                          ],
                          "id": "firebase.functions.HttpsError.code",
                          "isOptional": false,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "code",
                          "signature": "readonly code: FunctionsErrorCode;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1894,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1894",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1894",
                          },
                          "type": "FunctionsErrorCode",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Extra data to be converted to JSON and included in the error response.
     */",
                          ],
                          "id": "firebase.functions.HttpsError.details",
                          "isOptional": true,
                          "isReadonly": true,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "details",
                          "signature": "readonly details?: any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1898,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1898",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1898",
                          },
                          "type": "any",
                        },
                      ],
                    },
                    "name": "HttpsError",
                    "signature": "interface HttpsError extends Error {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1889,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1889",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1889",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [
                  Object {
                    "docs": Array [
                      "/**
   * The set of Firebase Functions status codes. The codes are the same at the
   * ones exposed by gRPC here:
   * https://github.com/grpc/grpc/blob/master/doc/statuscodes.md
   *
   * Possible values:
   * - 'cancelled': The operation was cancelled (typically by the caller).
   * - 'unknown': Unknown error or an error from a different error domain.
   * - 'invalid-argument': Client specified an invalid argument. Note that this
   *   differs from 'failed-precondition'. 'invalid-argument' indicates
   *   arguments that are problematic regardless of the state of the system
   *   (e.g. an invalid field name).
   * - 'deadline-exceeded': Deadline expired before operation could complete.
   *   For operations that change the state of the system, this error may be
   *   returned even if the operation has completed successfully. For example,
   *   a successful response from a server could have been delayed long enough
   *   for the deadline to expire.
   * - 'not-found': Some requested document was not found.
   * - 'already-exists': Some document that we attempted to create already
   *   exists.
   * - 'permission-denied': The caller does not have permission to execute the
   *   specified operation.
   * - 'resource-exhausted': Some resource has been exhausted, perhaps a
   *   per-user quota, or perhaps the entire file system is out of space.
   * - 'failed-precondition': Operation was rejected because the system is not
   *   in a state required for the operation's execution.
   * - 'aborted': The operation was aborted, typically due to a concurrency
   *   issue like transaction aborts, etc.
   * - 'out-of-range': Operation was attempted past the valid range.
   * - 'unimplemented': Operation is not implemented or not supported/enabled.
   * - 'internal': Internal errors. Means some invariants expected by
   *   underlying system has been broken. If you see one of these errors,
   *   something is very broken.
   * - 'unavailable': The service is currently unavailable. This is most likely
   *   a transient condition and may be corrected by retrying with a backoff.
   * - 'data-loss': Unrecoverable data loss or corruption.
   * - 'unauthenticated': The request does not have valid authentication
   *   credentials for the operation.
   */",
                    ],
                    "id": "firebase.functions.FunctionsErrorCode",
                    "kind": "TypeAliasDeclaration",
                    "name": "FunctionsErrorCode",
                    "signature": "type FunctionsErrorCode =
    | 'ok'
    | 'cancelled'
    | 'unknown'
    | 'invalid-argument'
    | 'deadline-exceeded'
    | 'not-found'
    | 'already-exists'
    | 'permission-denied'
    | 'resource-exhausted'
    | 'failed-precondition'
    | 'aborted'
    | 'out-of-range'
    | 'unimplemented'
    | 'internal'
    | 'unavailable'
    | 'data-loss'
    | 'unauthenticated';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1871,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1871",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1871",
                    },
                  },
                ],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.functions",
              "kind": "NamespaceDeclaration",
              "name": "firebase.functions",
              "signature": "namespace firebase.functions {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1777,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1777",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1777",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Installations service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.installations \`firebase.installations()\`}.
   */",
                    ],
                    "id": "firebase.installations.Installations",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Deletes the Firebase Installation and all associated data.
     */",
                          ],
                          "id": "firebase.installations.Installations.delete",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "delete",
                          "signature": "delete: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1485,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1485",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1485",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Creates a Firebase Installation if there isn't one for the app and
     * returns the Installation ID.
     *
     * @return Firebase Installation ID
     */",
                          ],
                          "id": "firebase.installations.Installations.getId",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getId",
                          "signature": "getId: () => Promise<string>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1473,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1473",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1473",
                          },
                          "type": "() => Promise<string>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns an Authentication Token for the current Firebase Installation.
     *
     * @return Firebase Installation Authentication Token
     */",
                          ],
                          "id": "firebase.installations.Installations.getToken",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getToken",
                          "signature": "getToken: (forceRefresh?: boolean) => Promise<string>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1480,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1480",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1480",
                          },
                          "type": "(forceRefresh?: boolean) => Promise<string>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets a new callback that will get called when Installlation ID changes.
     * Returns an unsubscribe function that will remove the callback when called.
     */",
                          ],
                          "id": "firebase.installations.Installations.onIdChange",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onIdChange",
                          "signature": "onIdChange: (callback: (installationId: string) => void) => () => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1491,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1491",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1491",
                          },
                          "type": "(callback: (installationId: string) => void) => () => void",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "Installations",
                    "signature": "interface Installations {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1466,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1466",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1466",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.installations",
              "kind": "NamespaceDeclaration",
              "name": "firebase.installations",
              "signature": "namespace firebase.installations {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1459,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1459",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1459",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [
                  Object {
                    "docs": Array [],
                    "id": "firebase.messaging.isSupported",
                    "kind": "FunctionDeclaration",
                    "name": "isSupported",
                    "signature": "isSupported: () => boolean;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7227,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7227",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7227",
                    },
                    "type": "() => boolean",
                  },
                ],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * Options for features provided by the FCM SDK for Web. See
   * {@link https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions
   * WebpushFcmOptions}.
   */",
                    ],
                    "id": "firebase.messaging.FcmOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Label associated with the message's analytics data. See
     * {@link https://firebase.google.com/docs/cloud-messaging/understand-delivery#adding-analytics-labels-to-messages
     * Adding analytics labels}.
     */",
                          ],
                          "id": "firebase.messaging.FcmOptions.analyticsLabel",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "analyticsLabel",
                          "signature": "analyticsLabel?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7202,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7202",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7202",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The link to open when the user clicks on the notification. For all URL values, HTTPS is
     * required. For example, by setting this value to your app's URL, a notification click event
     * will put your app in focus for the user.
     */",
                          ],
                          "id": "firebase.messaging.FcmOptions.link",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "link",
                          "signature": "link?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7195,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7195",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7195",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "FcmOptions",
                    "signature": "interface FcmOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7189,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7189",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7189",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Message payload that contains the notification payload that is represented with
   * {@link firebase.messaging.NotificationPayload} and the data payload that contains an arbitrary
   * number of key-value pairs sent by developers through the
   * {@link https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#notification Send API}
   */",
                    ],
                    "id": "firebase.messaging.MessagePayload",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The collapse key of this message. See
     * {@link https://firebase.google.com/docs/cloud-messaging/concept-options#collapsible_and_non-collapsible_messages
     * Collapsible and non-collapsible messages}.
     */",
                          ],
                          "id": "firebase.messaging.MessagePayload.collapseKey",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "collapseKey",
                          "signature": "collapseKey: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7181,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7181",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7181",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Arbitrary key/value pairs.
     */",
                          ],
                          "id": "firebase.messaging.MessagePayload.data",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "data",
                          "signature": "data?: { [key: string]: string };",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7164,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7164",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7164",
                          },
                          "type": "{ [key: string]: string; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * See {@link firebase.messaging.FcmOptions}.
     */",
                          ],
                          "id": "firebase.messaging.MessagePayload.fcmOptions",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "fcmOptions",
                          "signature": "fcmOptions?: FcmOptions;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7169,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7169",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7169",
                          },
                          "type": "FcmOptions",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The sender of this message.
     */",
                          ],
                          "id": "firebase.messaging.MessagePayload.from",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "from",
                          "signature": "from: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7174,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7174",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7174",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * See {@link firebase.messaging.NotificationPayload}.
     */",
                          ],
                          "id": "firebase.messaging.MessagePayload.notification",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "notification",
                          "signature": "notification?: NotificationPayload;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7159,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7159",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7159",
                          },
                          "type": "NotificationPayload",
                        },
                      ],
                    },
                    "name": "MessagePayload",
                    "signature": "interface MessagePayload {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7155,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7155",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7155",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Messaging service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.messaging \`firebase.messaging()\`}.
   *
   * See {@link https://firebase.google.com/docs/cloud-messaging/js/client
   * Set Up a JavaScript Firebase Cloud Messaging Client App} for a full guide on how to use the
   * Firebase Messaging service.
   *
   */",
                    ],
                    "id": "firebase.messaging.Messaging",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Deletes the registration token associated with this messaging instance and unsubscribes the
     * messaging instance from the push subscription.
     *
     * @return The promise resolves when the token has been successfully deleted.
     */",
                            "/**
     * To forcibly stop a registration token from being used, delete it by calling this method.
     *
     * @param token The token to delete.
     * @return The promise resolves when the token has been successfully deleted.
     *
     * @deprecated Use deleteToken() instead.
     */",
                          ],
                          "id": "firebase.messaging.Messaging.deleteToken",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "deleteToken",
                          "signature": "deleteToken: { (): Promise<boolean>; (token: string): Promise<boolean> };",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7006,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7006",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7006",
                          },
                          "type": "{ (): Promise<boolean>; (token: string): Promise<boolean>; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Subscribes the messaging instance to push notifications. Returns an FCM registration token
     * that can be used to send push messages to that messaging instance.
     *
     * If a notification permission isn't already granted, this method asks the user for permission.
     * The returned promise rejects if the user does not allow the app to show notifications.
     *
     * @param options.vapidKey The public server key provided to push services. It is used to
     * authenticate the push subscribers to receive push messages only from sending servers that
     * hold the corresponding private key. If it is not provided, a default VAPID key is used. Note
     * that some push services (Chrome Push Service) require a non-default VAPID key. Therefore, it
     * is recommended to generate and import a VAPID key for your project with
     * {@link https://firebase.google.com/docs/cloud-messaging/js/client#configure_web_credentials_with_fcm Configure Web Credentials with FCM}.
     * See
     * {@link https://developers.google.com/web/fundamentals/push-notifications/web-push-protocol The Web Push Protocol}
     * for details on web push services.}
     *
     * @param options.serviceWorkerRegistration The service worker registration for receiving push
     * messaging. If the registration is not provided explicitly, you need to have a
     * \`firebase-messaging-sw.js\` at your root location. See
     * {@link https://firebase.google.com/docs/cloud-messaging/js/client#retrieve-the-current-registration-token Retrieve the current registration token}
     * for more details.
     *
     * @return The promise resolves with an FCM registration token.
     *
     */",
                          ],
                          "id": "firebase.messaging.Messaging.getToken",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getToken",
                          "signature": "getToken: (options?: {
    vapidKey?: string;
    serviceWorkerRegistration?: ServiceWorkerRegistration;
}) => Promise<string>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7044,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7044",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7044",
                          },
                          "type": "(options?: {    vapidKey?: string;    serviceWorkerRegistration?: ServiceWorkerRegistration;}) => Promise<string>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Called when a message is received while the app is in the background. An app is considered to
     * be in the background if no active window is displayed.
     *
     * @param
     *     nextOrObserver This function, or observer object with \`next\` defined,
     *     is called when a message is received and the app is currently in the background.
     *
     * @return To stop listening for messages execute this returned function
     */",
                          ],
                          "id": "firebase.messaging.Messaging.onBackgroundMessage",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onBackgroundMessage",
                          "signature": "onBackgroundMessage: (
    nextOrObserver:
        | firebase.NextFn<MessagePayload>
        | firebase.Observer<MessagePayload>,
    error?: firebase.ErrorFn,
    completed?: firebase.CompleteFn
) => firebase.Unsubscribe;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7075,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7075",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7075",
                          },
                          "type": "(nextOrObserver: firebase.NextFn<MessagePayload> | firebase.Observer<MessagePayload>, error?: firebase.ErrorFn, completed?: firebase.CompleteFn) => firebase.Unsubscribe",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * When a push message is received and the user is currently on a page for your origin, the
     * message is passed to the page and an \`onMessage()\` event is dispatched with the payload of
     * the push message.
     *
     * @param
     *     nextOrObserver This function, or observer object with \`next\` defined,
     *     is called when a message is received and the user is currently viewing your page.
     * @return To stop listening for messages execute this returned function.
     */",
                          ],
                          "id": "firebase.messaging.Messaging.onMessage",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onMessage",
                          "signature": "onMessage: (
    nextOrObserver: firebase.NextFn<any> | firebase.Observer<any>,
    error?: firebase.ErrorFn,
    completed?: firebase.CompleteFn
) => firebase.Unsubscribe;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7059,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7059",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7059",
                          },
                          "type": "(nextOrObserver: firebase.NextFn<any> | firebase.Observer<any>, error?: firebase.ErrorFn, completed?: firebase.CompleteFn) => firebase.Unsubscribe",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * You should listen for token refreshes so your web app knows when FCM has invalidated your
     * existing token and you need to call \`getToken()\` to get a new token.
     *
     * @param
     *     nextOrObserver This function, or observer object with \`next\` defined,
     *     is called when a token refresh has occurred.
     * @return To stop listening for token refresh events execute this returned function.
     *
     * @deprecated There is no need to handle token rotation.
     */",
                          ],
                          "id": "firebase.messaging.Messaging.onTokenRefresh",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "onTokenRefresh",
                          "signature": "onTokenRefresh: (
    nextOrObserver: firebase.NextFn<any> | firebase.Observer<any>,
    error?: firebase.ErrorFn,
    completed?: firebase.CompleteFn
) => firebase.Unsubscribe;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7094,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7094",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7094",
                          },
                          "type": "(nextOrObserver: firebase.NextFn<any> | firebase.Observer<any>, error?: firebase.ErrorFn, completed?: firebase.CompleteFn) => firebase.Unsubscribe",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Notification permissions are required to send a user push messages. Calling this method
     * displays the permission dialog to the user and resolves if the permission is granted. It is
     * not necessary to call this method, as \`getToken()\` will do this automatically if required.
     *
     * @return The promise resolves if permission is granted. Otherwise, the promise is rejected
     * with an error.
     *
     * @deprecated Use
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission Notification.requestPermission()}
     * instead.
     */",
                          ],
                          "id": "firebase.messaging.Messaging.requestPermission",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "requestPermission",
                          "signature": "requestPermission: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7112,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7112",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7112",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * FCM directs push messages to your web page's \`onMessage()\` callback if the user currently has
     * it open. Otherwise, it calls your callback passed into \`setBackgroundMessageHandler()\`.
     *
     * Your callback should return a promise that, once resolved, has shown a notification.
     *
     * @param callback The function to handle the push message.
     *
     * @deprecated onBackgroundMessage(nextOrObserver: firebase.NextFn<MessagePayload>|
     * firebase.Observer<MessagePayload>, error?: firebase.ErrorFn,completed?: firebase.CompleteFn):
     * firebase.Unsubscribe.
     */",
                          ],
                          "id": "firebase.messaging.Messaging.setBackgroundMessageHandler",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setBackgroundMessageHandler",
                          "signature": "setBackgroundMessageHandler: (
    callback: (payload: any) => Promise<any> | void
) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7126,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7126",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7126",
                          },
                          "type": "(callback: (payload: any) => Promise<any> | void) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * @deprecated Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:
     * ServiceWorkerRegistration;}): Promise<string>;.
     */",
                          ],
                          "id": "firebase.messaging.Messaging.usePublicVapidKey",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "usePublicVapidKey",
                          "signature": "usePublicVapidKey: (b64PublicKey: string) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7146,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7146",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7146",
                          },
                          "type": "(b64PublicKey: string) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * To use your own service worker for receiving push messages, you can pass in your service
     * worker registration in this method.
     *
     * @param registration The service worker registration you wish to use for push messaging.
     *
     * @deprecated Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:
     * ServiceWorkerRegistration;}: Promise<string>;.
     */",
                          ],
                          "id": "firebase.messaging.Messaging.useServiceWorker",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "useServiceWorker",
                          "signature": "useServiceWorker: (registration: ServiceWorkerRegistration) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7140,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7140",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7140",
                          },
                          "type": "(registration: ServiceWorkerRegistration) => void",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "Messaging",
                    "signature": "interface Messaging {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 6999,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6999",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6999",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Parameters that define how a push notification is displayed to users.
   */",
                    ],
                    "id": "firebase.messaging.NotificationPayload",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The body of a notification.
     */",
                          ],
                          "id": "firebase.messaging.NotificationPayload.body",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "body",
                          "signature": "body?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7217,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7217",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7217",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The URL of the image that is shown with the notification. See
     * {@link https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#notification
     * \`notification.image\`} for supported image format.
     */",
                          ],
                          "id": "firebase.messaging.NotificationPayload.image",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "image",
                          "signature": "image?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7224,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7224",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7224",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The title of a notification.
     */",
                          ],
                          "id": "firebase.messaging.NotificationPayload.title",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "title",
                          "signature": "title?: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7212,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7212",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7212",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "NotificationPayload",
                    "signature": "interface NotificationPayload {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7208,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7208",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7208",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.messaging",
              "kind": "NamespaceDeclaration",
              "name": "firebase.messaging",
              "signature": "namespace firebase.messaging {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 6987,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L6987",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L6987",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Performance Monitoring service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.performance \`firebase.performance()\`}.
   */",
                    ],
                    "id": "firebase.performance.Performance",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Creates an uninitialized instance of {@link firebase.performance.Trace \`trace\`} and returns
     * it.
     *
     * @param traceName The name of the trace instance.
     * @return The Trace instance.
     */",
                          ],
                          "id": "firebase.performance.Performance.trace",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "trace",
                          "signature": "trace: (traceName: string) => Trace;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1513,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1513",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1513",
                          },
                          "type": "(traceName: string) => Trace",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Controls the logging of custom traces.
     */",
                          ],
                          "id": "firebase.performance.Performance.dataCollectionEnabled",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "dataCollectionEnabled",
                          "signature": "dataCollectionEnabled: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1522,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1522",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1522",
                          },
                          "type": "boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Controls the logging of automatic traces and HTTP/S network monitoring.
     */",
                          ],
                          "id": "firebase.performance.Performance.instrumentationEnabled",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "instrumentationEnabled",
                          "signature": "instrumentationEnabled: boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1518,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1518",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1518",
                          },
                          "type": "boolean",
                        },
                      ],
                    },
                    "name": "Performance",
                    "signature": "interface Performance {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1505,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1505",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1505",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.performance.Trace",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Retrieves the value that the custom attribute is set to.
     *
     * @param attr Name of the custom attribute.
     */",
                          ],
                          "id": "firebase.performance.Trace.getAttribute",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getAttribute",
                          "signature": "getAttribute: (attr: string) => string | undefined;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1591,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1591",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1591",
                          },
                          "type": "(attr: string) => string | undefined",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a map of all custom attributes of a {@link firebase.performance.Trace \`trace\`}
     * instance.
     */",
                          ],
                          "id": "firebase.performance.Trace.getAttributes",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getAttributes",
                          "signature": "getAttributes: () => { [key: string]: string };",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1604,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1604",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1604",
                          },
                          "type": "() => { [key: string]: string; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns the value of the custom metric by that name. If a custom metric with that name does
     * not exist returns zero.
     *
     * @param metricName Name of the custom metric.
     */",
                          ],
                          "id": "firebase.performance.Trace.getMetric",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getMetric",
                          "signature": "getMetric: (metricName: string) => number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1578,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1578",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1578",
                          },
                          "type": "(metricName: string) => number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Adds to the value of a custom metric. If a custom metric with the provided name does not
     * exist, it creates one with that name and the value equal to the given number.
     *
     * @param metricName The name of the custom metric.
     * @param num The number to be added to the value of the custom metric. If not provided, it
     * uses a default value of one.
     */",
                          ],
                          "id": "firebase.performance.Trace.incrementMetric",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "incrementMetric",
                          "signature": "incrementMetric: (metricName: string, num?: number) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1562,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1562",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1562",
                          },
                          "type": "(metricName: string, num?: number) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Set a custom attribute of a {@link firebase.performance.Trace \`trace\`} to a certain value.
     *
     * @param attr Name of the custom attribute.
     * @param value Value of the custom attribute.
     */",
                          ],
                          "id": "firebase.performance.Trace.putAttribute",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "putAttribute",
                          "signature": "putAttribute: (attr: string, value: string) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1585,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1585",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1585",
                          },
                          "type": "(attr: string, value: string) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Sets the value of the specified custom metric to the given number regardless of whether
     * a metric with that name already exists on the {@link firebase.performance.Trace \`trace\`}
     * instance or not.
     *
     * @param metricName Name of the custom metric.
     * @param num Value to of the custom metric.
     */",
                          ],
                          "id": "firebase.performance.Trace.putMetric",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "putMetric",
                          "signature": "putMetric: (metricName: string, num: number) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1571,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1571",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1571",
                          },
                          "type": "(metricName: string, num: number) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Records a {@link firebase.performance.Trace \`trace\`} from given parameters. This provides a
     * direct way to use {@link firebase.performance.Trace \`trace\`} without a need to start/stop.
     * This is useful for use cases in which the {@link firebase.performance.Trace \`trace\`} cannot
     * directly be used (e.g. if the duration was captured before the Performance SDK was loaded).
     *
     * @param startTime Trace start time since epoch in millisec.
     * @param duration The duraction of the trace in millisec.
     * @param options An object which can optionally hold maps of custom metrics and
     * custom attributes.
     */",
                          ],
                          "id": "firebase.performance.Trace.record",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "record",
                          "signature": "record: (
    startTime: number,
    duration: number,
    options?: {
        metrics?: { [key: string]: number };
        attributes?: { [key: string]: string };
    }
) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1546,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1546",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1546",
                          },
                          "type": "(startTime: number, duration: number, options?: { metrics?: { [key: string]: number; }; attributes?: { [key: string]: string; }; }) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Removes the specified custom attribute from a {@link firebase.performance.Trace \`trace\`}
     * instance.
     *
     * @param attr Name of the custom attribute.
     */",
                          ],
                          "id": "firebase.performance.Trace.removeAttribute",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "removeAttribute",
                          "signature": "removeAttribute: (attr: string) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1599,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1599",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1599",
                          },
                          "type": "(attr: string) => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Starts the timing for the {@link firebase.performance.Trace \`trace\`} instance.
     */",
                          ],
                          "id": "firebase.performance.Trace.start",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "start",
                          "signature": "start: () => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1529,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1529",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1529",
                          },
                          "type": "() => void",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Stops the timing of the {@link firebase.performance.Trace \`trace\`} instance and logs the
     * data of the instance.
     */",
                          ],
                          "id": "firebase.performance.Trace.stop",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "stop",
                          "signature": "stop: () => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1534,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1534",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1534",
                          },
                          "type": "() => void",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "Trace",
                    "signature": "interface Trace {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1525,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1525",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1525",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.performance",
              "kind": "NamespaceDeclaration",
              "name": "firebase.performance",
              "signature": "namespace firebase.performance {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1498,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1498",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1498",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Remote Config service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.remoteConfig \`firebase.remoteConfig()\`}.
   */",
                    ],
                    "id": "firebase.remoteConfig.RemoteConfig",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Makes the last fetched config available to the getters.
     * Returns a promise which resolves to true if the current call activated the fetched configs.
     * If the fetched configs were already activated, the promise will resolve to false.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.activate",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "activate",
                          "signature": "activate: () => Promise<boolean>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1646,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1646",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1646",
                          },
                          "type": "() => Promise<boolean>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Ensures the last activated config are available to the getters.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.ensureInitialized",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "ensureInitialized",
                          "signature": "ensureInitialized: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1651,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1651",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1651",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Fetches and caches configuration from the Remote Config service.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.fetch",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "fetch",
                          "signature": "fetch: () => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1656,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1656",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1656",
                          },
                          "type": "() => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Performs fetch and activate operations, as a convenience.
     * Returns a promise which resolves to true if the current call activated the fetched configs.
     * If the fetched configs were already activated, the promise will resolve to false.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.fetchAndActivate",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "fetchAndActivate",
                          "signature": "fetchAndActivate: () => Promise<boolean>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1663,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1663",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1663",
                          },
                          "type": "() => Promise<boolean>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets all config.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.getAll",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getAll",
                          "signature": "getAll: () => { [key: string]: Value };",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1668,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1668",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1668",
                          },
                          "type": "() => { [key: string]: Value; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the value for the given key as a boolean.
     *
     * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.getBoolean",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getBoolean",
                          "signature": "getBoolean: (key: string) => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1675,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1675",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1675",
                          },
                          "type": "(key: string) => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the value for the given key as a number.
     *
     * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.getNumber",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getNumber",
                          "signature": "getNumber: (key: string) => number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1682,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1682",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1682",
                          },
                          "type": "(key: string) => number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the value for the given key as a String.
     *
     * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.getString",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getString",
                          "signature": "getString: (key: string) => string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1689,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1689",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1689",
                          },
                          "type": "(key: string) => string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link Value} for the given key.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.getValue",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getValue",
                          "signature": "getValue: (key: string) => Value;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1694,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1694",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1694",
                          },
                          "type": "(key: string) => Value",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Defines the log level to use.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.setLogLevel",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setLogLevel",
                          "signature": "setLogLevel: (logLevel: LogLevel) => void;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1699,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1699",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1699",
                          },
                          "type": "(logLevel: LogLevel) => void",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Object containing default values for conigs.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.defaultConfig",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "defaultConfig",
                          "signature": "defaultConfig: { [key: string]: string | number | boolean };",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1627,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1627",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1627",
                          },
                          "type": "{ [key: string]: string | number | boolean; }",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The Unix timestamp in milliseconds of the last <i>successful</i> fetch, or negative one if
     * the {@link RemoteConfig} instance either hasn't fetched or initialization
     * is incomplete.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.fetchTimeMillis",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "fetchTimeMillis",
                          "signature": "fetchTimeMillis: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1634,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1634",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1634",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The status of the last fetch <i>attempt</i>.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.lastFetchStatus",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "lastFetchStatus",
                          "signature": "lastFetchStatus: FetchStatus;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1639,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1639",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1639",
                          },
                          "type": "FetchStatus",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Defines configuration for the Remote Config SDK.
     */",
                          ],
                          "id": "firebase.remoteConfig.RemoteConfig.settings",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "settings",
                          "signature": "settings: Settings;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1622,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1622",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1622",
                          },
                          "type": "Settings",
                        },
                      ],
                    },
                    "name": "RemoteConfig",
                    "signature": "interface RemoteConfig {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1618,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1618",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1618",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Defines configuration options for the Remote Config SDK.
   */",
                    ],
                    "id": "firebase.remoteConfig.Settings",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Defines the maximum amount of milliseconds to wait for a response when fetching
     * configuration from the Remote Config server. Defaults to 60000 (One minute).
     */",
                          ],
                          "id": "firebase.remoteConfig.Settings.fetchTimeoutMillis",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "fetchTimeoutMillis",
                          "signature": "fetchTimeoutMillis: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1755,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1755",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1755",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Defines the maximum age in milliseconds of an entry in the config cache before
     * it is considered stale. Defaults to 43200000 (Twelve hours).
     */",
                          ],
                          "id": "firebase.remoteConfig.Settings.minimumFetchIntervalMillis",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "minimumFetchIntervalMillis",
                          "signature": "minimumFetchIntervalMillis: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1749,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1749",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1749",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "Settings",
                    "signature": "interface Settings {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1744,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1744",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1744",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Wraps a value with metadata and type-safe getters.
   */",
                    ],
                    "id": "firebase.remoteConfig.Value",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Gets the value as a boolean.
     *
     * The following values (case insensitive) are interpreted as true:
     * \\"1\\", \\"true\\", \\"t\\", \\"yes\\", \\"y\\", \\"on\\". Other values are interpreted as false.
     */",
                          ],
                          "id": "firebase.remoteConfig.Value.asBoolean",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "asBoolean",
                          "signature": "asBoolean: () => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1723,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1723",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1723",
                          },
                          "type": "() => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the value as a number. Comparable to calling <code>Number(value) || 0</code>.
     */",
                          ],
                          "id": "firebase.remoteConfig.Value.asNumber",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "asNumber",
                          "signature": "asNumber: () => number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1728,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1728",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1728",
                          },
                          "type": "() => number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the value as a string.
     */",
                          ],
                          "id": "firebase.remoteConfig.Value.asString",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "asString",
                          "signature": "asString: () => string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1733,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1733",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1733",
                          },
                          "type": "() => string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Gets the {@link ValueSource} for the given key.
     */",
                          ],
                          "id": "firebase.remoteConfig.Value.getSource",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getSource",
                          "signature": "getSource: () => ValueSource;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 1738,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1738",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1738",
                          },
                          "type": "() => ValueSource",
                        },
                      ],
                      "properties": Array [],
                    },
                    "name": "Value",
                    "signature": "interface Value {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1716,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1716",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1716",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [
                  Object {
                    "docs": Array [
                      "/**
   * Summarizes the outcome of the last attempt to fetch config from the Firebase Remote Config server.
   *
   * <ul>
   *   <li>\\"no-fetch-yet\\" indicates the {@link RemoteConfig} instance has not yet attempted
   *       to fetch config, or that SDK initialization is incomplete.</li>
   *   <li>\\"success\\" indicates the last attempt succeeded.</li>
   *   <li>\\"failure\\" indicates the last attempt failed.</li>
   *   <li>\\"throttle\\" indicates the last attempt was rate-limited.</li>
   * </ul>
   */",
                    ],
                    "id": "firebase.remoteConfig.FetchStatus",
                    "kind": "TypeAliasDeclaration",
                    "name": "FetchStatus",
                    "signature": "type FetchStatus = 'no-fetch-yet' | 'success' | 'failure' | 'throttle';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1769,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1769",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1769",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Defines levels of Remote Config logging.
   */",
                    ],
                    "id": "firebase.remoteConfig.LogLevel",
                    "kind": "TypeAliasDeclaration",
                    "name": "LogLevel",
                    "signature": "type LogLevel = 'debug' | 'error' | 'silent';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1774,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1774",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1774",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Indicates the source of a value.
   *
   * <ul>
   *   <li>\\"static\\" indicates the value was defined by a static constant.</li>
   *   <li>\\"default\\" indicates the value was defined by default config.</li>
   *   <li>\\"remote\\" indicates the value was defined by fetched config.</li>
   * </ul>
   */",
                    ],
                    "id": "firebase.remoteConfig.ValueSource",
                    "kind": "TypeAliasDeclaration",
                    "name": "ValueSource",
                    "signature": "type ValueSource = 'static' | 'default' | 'remote';",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 1711,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1711",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1711",
                    },
                  },
                ],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.remoteConfig",
              "kind": "NamespaceDeclaration",
              "name": "firebase.remoteConfig",
              "signature": "namespace firebase.remoteConfig {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1611,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1611",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1611",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * An error returned by the Firebase Storage SDK.
   */",
                    ],
                    "id": "firebase.storage.FirebaseStorageError",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.storage.FirebaseStorageError.serverResponse",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "serverResponse",
                          "signature": "serverResponse: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7643,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7643",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7643",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "FirebaseStorageError",
                    "signature": "interface FirebaseStorageError extends FirebaseError {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7642,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7642",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7642",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The full set of object metadata, including read-only properties.
   */",
                    ],
                    "id": "firebase.storage.FullMetadata",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The bucket this object is contained in.
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.bucket",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "bucket",
                          "signature": "bucket: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7241,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7241",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7241",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * @deprecated
     * Use Reference.getDownloadURL instead. This property will be removed in a
     * future release.
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.downloadURLs",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "downloadURLs",
                          "signature": "downloadURLs: string[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7247,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7247",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7247",
                          },
                          "type": "string[]",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The full path of this object.
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.fullPath",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "fullPath",
                          "signature": "fullPath: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7251,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7251",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7251",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The object's generation.
     * @see {@link https://cloud.google.com/storage/docs/generations-preconditions}
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.generation",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "generation",
                          "signature": "generation: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7256,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7256",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7256",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The object's metageneration.
     * @see {@link https://cloud.google.com/storage/docs/generations-preconditions}
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.metageneration",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "metageneration",
                          "signature": "metageneration: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7261,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7261",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7261",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The short name of this object, which is the last component of the full path.
     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.name",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "name",
                          "signature": "name: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7266,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7266",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7266",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The size of this object, in bytes.
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.size",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "size",
                          "signature": "size: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7270,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7270",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7270",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * A date string representing when this object was created.
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.timeCreated",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "timeCreated",
                          "signature": "timeCreated: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7274,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7274",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7274",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * A date string representing when this object was last updated.
     */",
                          ],
                          "id": "firebase.storage.FullMetadata.updated",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "updated",
                          "signature": "updated: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7278,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7278",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7278",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "FullMetadata",
                    "signature": "interface FullMetadata extends firebase.storage.UploadMetadata {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7237,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7237",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7237",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The options \`list()\` accepts.
   */",
                    ],
                    "id": "firebase.storage.ListOptions",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * If set, limits the total number of \`prefixes\` and \`items\` to return.
     * The default and maximum maxResults is 1000.
     */",
                          ],
                          "id": "firebase.storage.ListOptions.maxResults",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "maxResults",
                          "signature": "maxResults?: number | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7455,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7455",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7455",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The \`nextPageToken\` from a previous call to \`list()\`. If provided,
     * listing is resumed from the previous position.
     */",
                          ],
                          "id": "firebase.storage.ListOptions.pageToken",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "pageToken",
                          "signature": "pageToken?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7460,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7460",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7460",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "ListOptions",
                    "signature": "interface ListOptions {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7450,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7450",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7450",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Result returned by list().
   */",
                    ],
                    "id": "firebase.storage.ListResult",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Objects in this directory.
     * You can call getMetadata() and getDownloadUrl() on them.
     */",
                          ],
                          "id": "firebase.storage.ListResult.items",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "items",
                          "signature": "items: Reference[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7440,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7440",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7440",
                          },
                          "type": "Reference[]",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * If set, there might be more results for this list. Use this token to resume the list.
     */",
                          ],
                          "id": "firebase.storage.ListResult.nextPageToken",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "nextPageToken",
                          "signature": "nextPageToken: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7444,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7444",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7444",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * References to prefixes (sub-folders). You can call list() on them to
     * get its contents.
     *
     * Folders are implicit based on '/' in the object paths.
     * For example, if a bucket has two objects '/a/b/1' and '/a/b/2', list('/a')
     * will return '/a/b' as a prefix.
     */",
                          ],
                          "id": "firebase.storage.ListResult.prefixes",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "prefixes",
                          "signature": "prefixes: Reference[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7435,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7435",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7435",
                          },
                          "type": "Reference[]",
                        },
                      ],
                    },
                    "name": "ListResult",
                    "signature": "interface ListResult {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7426,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7426",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7426",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Represents a reference to a Google Cloud Storage object. Developers can
   * upload, download, and delete objects, as well as get/set object metadata.
   */",
                    ],
                    "id": "firebase.storage.Reference",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns a reference to a relative path from this reference.
     * @param path The relative path from this reference.
     *     Leading, trailing, and consecutive slashes are removed.
     * @return The reference to the given path.
     */",
                          ],
                          "id": "firebase.storage.Reference.child",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "child",
                          "signature": "child: (path: string) => Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7296,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7296",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7296",
                          },
                          "type": "(path: string) => Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Deletes the object at this reference's location.
     * @return A Promise that resolves if the deletion
     *     succeeded and rejects if it failed, including if the object didn't exist.
     */",
                          ],
                          "id": "firebase.storage.Reference.delete",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "delete",
                          "signature": "delete: () => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7302,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7302",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7302",
                          },
                          "type": "() => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Fetches a long lived download URL for this object.
     * @return A Promise that resolves with the download
     *     URL or rejects if the fetch failed, including if the object did not
     *     exist.
     */",
                          ],
                          "id": "firebase.storage.Reference.getDownloadURL",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getDownloadURL",
                          "signature": "getDownloadURL: () => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7313,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7313",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7313",
                          },
                          "type": "() => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Fetches metadata for the object at this location, if one exists.
     * @return A Promise that
     *     resolves with the metadata, or rejects if the fetch failed, including if
     *     the object did not exist.
     */",
                          ],
                          "id": "firebase.storage.Reference.getMetadata",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getMetadata",
                          "signature": "getMetadata: () => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7320,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7320",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7320",
                          },
                          "type": "() => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * List items (files) and prefixes (folders) under this storage reference.
     *
     * List API is only available for Firebase Rules Version 2.
     *
     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
     * delimited folder structure.
     * Refer to GCS's List API if you want to learn more.
     *
     * To adhere to Firebase Rules's Semantics, Firebase Storage does not
     * support objects whose paths end with \\"/\\" or contain two consecutive
     * \\"/\\"s. Firebase Storage List API will filter these unsupported objects.
     * \`list()\` may fail if there are too many unsupported objects in the bucket.
     *
     * @param options See \`ListOptions\` for details.
     * @return A Promise that resolves with the items and prefixes.
     *      \`prefixes\` contains references to sub-folders and \`items\`
     *      contains references to objects in this folder. \`nextPageToken\`
     *      can be used to get the rest of the results.
     */",
                          ],
                          "id": "firebase.storage.Reference.list",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "list",
                          "signature": "list: (options?: ListOptions) => Promise<ListResult>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7420,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7420",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7420",
                          },
                          "type": "(options?: ListOptions) => Promise<ListResult>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * List all items (files) and prefixes (folders) under this storage reference.
     *
     * This is a helper method for calling \`list()\` repeatedly until there are
     * no more results. The default pagination size is 1000.
     *
     * Note: The results may not be consistent if objects are changed while this
     * operation is running.
     *
     * Warning: \`listAll\` may potentially consume too many resources if there are
     * too many results.
     *
     * @return A Promise that resolves with all the items and prefixes under
     *      the current storage reference. \`prefixes\` contains references to
     *      sub-directories and \`items\` contains references to objects in this
     *      folder. \`nextPageToken\` is never returned.
     */",
                          ],
                          "id": "firebase.storage.Reference.listAll",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "listAll",
                          "signature": "listAll: () => Promise<ListResult>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7399,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7399",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7399",
                          },
                          "type": "() => Promise<ListResult>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Uploads data to this reference's location.
     * @param data The data to upload.
     * @param metadata Metadata for the newly
     *     uploaded object.
     * @return An object that can be used to monitor
     *     and manage the upload.
     */",
                          ],
                          "id": "firebase.storage.Reference.put",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "put",
                          "signature": "put: (
    data: Blob | Uint8Array | ArrayBuffer,
    metadata?: UploadMetadata
) => UploadTask;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7339,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7339",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7339",
                          },
                          "type": "(data: Blob | Uint8Array | ArrayBuffer, metadata?: UploadMetadata) => UploadTask",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Uploads string data to this reference's location.
     * @param data The string to upload.
     * @param format The format of the string to
     *     upload.
     * @param metadata Metadata for the newly
     *     uploaded object.
     * @throws If the format is not an allowed format, or if the given string
     *     doesn't conform to the specified format.
     */",
                          ],
                          "id": "firebase.storage.Reference.putString",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "putString",
                          "signature": "putString: (
    data: string,
    format?: string,
    metadata?: UploadMetadata
) => UploadTask;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7353,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7353",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7353",
                          },
                          "type": "(data: string, format?: string, metadata?: UploadMetadata) => UploadTask",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a gs:// URL for this object in the form
     *   \`gs://<bucket>/<path>/<to>/<object>\`
     * @return The gs:// URL.
     */",
                          ],
                          "id": "firebase.storage.Reference.toString",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "toString",
                          "signature": "toString: () => string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7371,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7371",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7371",
                          },
                          "type": "() => string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Updates the metadata for the object at this location, if one exists.
     * @param metadata The new metadata.
     *     Setting a property to 'null' removes it on the server, while leaving
     *     a property as 'undefined' has no effect.
     * @return A Promise that
     *     resolves with the full updated metadata or rejects if the updated failed,
     *     including if the object did not exist.
     */",
                          ],
                          "id": "firebase.storage.Reference.updateMetadata",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "updateMetadata",
                          "signature": "updateMetadata: (metadata: SettableMetadata) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7381,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7381",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7381",
                          },
                          "type": "(metadata: SettableMetadata) => Promise<any>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The name of the bucket containing this reference's object.
     */",
                          ],
                          "id": "firebase.storage.Reference.bucket",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "bucket",
                          "signature": "bucket: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7289,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7289",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7289",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The full path of this object.
     */",
                          ],
                          "id": "firebase.storage.Reference.fullPath",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "fullPath",
                          "signature": "fullPath: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7306,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7306",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7306",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The short name of this object, which is the last component of the full path.
     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
     */",
                          ],
                          "id": "firebase.storage.Reference.name",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "name",
                          "signature": "name: string;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7325,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7325",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7325",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * A reference pointing to the parent location of this reference, or null if
     * this reference is the root.
     */",
                          ],
                          "id": "firebase.storage.Reference.parent",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "parent",
                          "signature": "parent: firebase.storage.Reference | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7330,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7330",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7330",
                          },
                          "type": "Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * A reference to the root of this reference's bucket.
     */",
                          ],
                          "id": "firebase.storage.Reference.root",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "root",
                          "signature": "root: firebase.storage.Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7361,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7361",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7361",
                          },
                          "type": "Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The storage service associated with this reference.
     */",
                          ],
                          "id": "firebase.storage.Reference.storage",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "storage",
                          "signature": "storage: firebase.storage.Storage;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7365,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7365",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7365",
                          },
                          "type": "Storage",
                        },
                      ],
                    },
                    "name": "Reference",
                    "signature": "interface Reference {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7285,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7285",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7285",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Object metadata that can be set at any time.
   */",
                    ],
                    "id": "firebase.storage.SettableMetadata",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Served as the 'Cache-Control' header on object download.
     */",
                          ],
                          "id": "firebase.storage.SettableMetadata.cacheControl",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "cacheControl",
                          "signature": "cacheControl?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7470,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7470",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7470",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.storage.SettableMetadata.contentDisposition",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "contentDisposition",
                          "signature": "contentDisposition?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7471,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7471",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7471",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Served as the 'Content-Encoding' header on object download.
     */",
                          ],
                          "id": "firebase.storage.SettableMetadata.contentEncoding",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "contentEncoding",
                          "signature": "contentEncoding?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7475,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7475",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7475",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Served as the 'Content-Language' header on object download.
     */",
                          ],
                          "id": "firebase.storage.SettableMetadata.contentLanguage",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "contentLanguage",
                          "signature": "contentLanguage?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7479,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7479",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7479",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Served as the 'Content-Type' header on object download.
     */",
                          ],
                          "id": "firebase.storage.SettableMetadata.contentType",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "contentType",
                          "signature": "contentType?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7483,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7483",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7483",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Additional user-defined custom metadata.
     */",
                          ],
                          "id": "firebase.storage.SettableMetadata.customMetadata",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "customMetadata",
                          "signature": "customMetadata?: {
    [/* warning: coerced from ? */ key: string]: string;
} | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7487,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7487",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7487",
                          },
                          "type": "{ [key: string]: string; }",
                        },
                      ],
                    },
                    "name": "SettableMetadata",
                    "signature": "interface SettableMetadata {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7466,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7466",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7466",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * The Firebase Storage service interface.
   *
   * Do not call this constructor directly. Instead, use
   * {@link firebase.storage \`firebase.storage()\`}.
   *
   * See
   * {@link
   *   https://firebase.google.com/docs/storage/web/start/
   *   Get Started on Web}
   * for a full guide on how to use the Firebase Storage service.
   */",
                    ],
                    "id": "firebase.storage.Storage",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns a reference for the given path in the default bucket.
     * @param path A relative path to initialize the reference with,
     *     for example \`path/to/image.jpg\`. If not passed, the returned reference
     *     points to the bucket root.
     * @return A reference for the given path.
     */",
                          ],
                          "id": "firebase.storage.Storage.ref",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "ref",
                          "signature": "ref: (path?: string) => Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7531,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7531",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7531",
                          },
                          "type": "(path?: string) => Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns a reference for the given absolute URL.
     * @param url A URL in the form: <br />
     *     1) a gs:// URL, for example \`gs://bucket/files/image.png\` <br />
     *     2) a download URL taken from object metadata. <br />
     *     @see {@link firebase.storage.FullMetadata.downloadURLs}
     * @return A reference for the given URL.
     */",
                          ],
                          "id": "firebase.storage.Storage.refFromURL",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "refFromURL",
                          "signature": "refFromURL: (url: string) => Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7540,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7540",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7540",
                          },
                          "type": "(url: string) => Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * @param time The new maximum operation retry time in milliseconds.
     * @see {@link firebase.storage.Storage.maxOperationRetryTime}
     */",
                          ],
                          "id": "firebase.storage.Storage.setMaxOperationRetryTime",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setMaxOperationRetryTime",
                          "signature": "setMaxOperationRetryTime: (time: number) => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7545,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7545",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7545",
                          },
                          "type": "(time: number) => any",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * @param time The new maximum upload retry time in milliseconds.
     * @see {@link firebase.storage.Storage.maxUploadRetryTime}
     */",
                          ],
                          "id": "firebase.storage.Storage.setMaxUploadRetryTime",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "setMaxUploadRetryTime",
                          "signature": "setMaxUploadRetryTime: (time: number) => any;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7550,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7550",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7550",
                          },
                          "type": "(time: number) => any",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The {@link firebase.app.App app} associated with the \`Storage\` service
     * instance.
     *
     * @example
     * \`\`\`javascript
     * var app = storage.app;
     * \`\`\`
     */",
                          ],
                          "id": "firebase.storage.Storage.app",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "app",
                          "signature": "app: firebase.app.App;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7514,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7514",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7514",
                          },
                          "type": "app.App",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The maximum time to retry operations other than uploads or downloads in
     * milliseconds.
     */",
                          ],
                          "id": "firebase.storage.Storage.maxOperationRetryTime",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "maxOperationRetryTime",
                          "signature": "maxOperationRetryTime: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7519,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7519",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7519",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The maximum time to retry uploads in milliseconds.
     */",
                          ],
                          "id": "firebase.storage.Storage.maxUploadRetryTime",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "maxUploadRetryTime",
                          "signature": "maxUploadRetryTime: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7523,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7523",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7523",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "Storage",
                    "signature": "interface Storage {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7504,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7504",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7504",
                    },
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.storage.StorageObserver",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [],
                          "id": "firebase.storage.StorageObserver.complete",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "complete",
                          "signature": "complete?: CompleteFn | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7649,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7649",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7649",
                          },
                          "type": "CompleteFn",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.storage.StorageObserver.error",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "error",
                          "signature": "error?: (error: FirebaseStorageError) => void | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7648,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7648",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7648",
                          },
                          "type": "(error: FirebaseStorageError) => void | null",
                        },
                        Object {
                          "docs": Array [],
                          "id": "firebase.storage.StorageObserver.next",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "next",
                          "signature": "next?: NextFn<T> | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7647,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7647",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7647",
                          },
                          "type": "NextFn<T>",
                        },
                      ],
                    },
                    "name": "StorageObserver",
                    "signature": "interface StorageObserver<T> {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7646,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7646",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7646",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Object metadata that can be set at upload.
   */",
                    ],
                    "id": "firebase.storage.UploadMetadata",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * A Base64-encoded MD5 hash of the object being uploaded.
     */",
                          ],
                          "id": "firebase.storage.UploadMetadata.md5Hash",
                          "isOptional": true,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "md5Hash",
                          "signature": "md5Hash?: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7636,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7636",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7636",
                          },
                          "type": "string",
                        },
                      ],
                    },
                    "name": "UploadMetadata",
                    "signature": "interface UploadMetadata extends firebase.storage.SettableMetadata {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7632,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7632",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7632",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Represents the process of uploading an object. Allows you to monitor and
   * manage the upload.
   */",
                    ],
                    "id": "firebase.storage.UploadTask",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Cancels a running task. Has no effect on a complete or failed task.
     * @return True if the cancel had an effect.
     */",
                          ],
                          "id": "firebase.storage.UploadTask.cancel",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "cancel",
                          "signature": "cancel: () => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7661,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7661",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7661",
                          },
                          "type": "() => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Equivalent to calling \`then(null, onRejected)\`.
     */",
                          ],
                          "id": "firebase.storage.UploadTask.catch",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "catch",
                          "signature": "catch: (onRejected: (error: FirebaseStorageError) => any) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7665,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7665",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7665",
                          },
                          "type": "(onRejected: (error: FirebaseStorageError) => any) => Promise<any>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Listens for events on this task.
     *
     * Events have three callback functions (referred to as \`next\`, \`error\`, and
     * \`complete\`).
     *
     * If only the event is passed, a function that can be used to register the
     * callbacks is returned. Otherwise, the callbacks are passed after the event.
     *
     * Callbacks can be passed either as three separate arguments <em>or</em> as the
     * \`next\`, \`error\`, and \`complete\` properties of an object. Any of the three
     * callbacks is optional, as long as at least one is specified. In addition,
     * when you add your callbacks, you get a function back. You can call this
     * function to unregister the associated callbacks.
     *
     * @example **Pass callbacks separately or in an object.**
     * \`\`\`javascript
     * var next = function(snapshot) {};
     * var error = function(error) {};
     * var complete = function() {};
     *
     * // The first example.
     * uploadTask.on(
     *     firebase.storage.TaskEvent.STATE_CHANGED,
     *     next,
     *     error,
     *     complete);
     *
     * // This is equivalent to the first example.
     * uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {
     *   'next': next,
     *   'error': error,
     *   'complete': complete
     * });
     *
     * // This is equivalent to the first example.
     * var subscribe = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);
     * subscribe(next, error, complete);
     *
     * // This is equivalent to the first example.
     * var subscribe = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);
     * subscribe({
     *   'next': next,
     *   'error': error,
     *   'complete': complete
     * });
     * \`\`\`
     *
     * @example **Any callback is optional.**
     * \`\`\`javascript
     * // Just listening for completion, this is legal.
     * uploadTask.on(
     *     firebase.storage.TaskEvent.STATE_CHANGED,
     *     null,
     *     null,
     *     function() {
     *       console.log('upload complete!');
     *     });
     *
     * // Just listening for progress/state changes, this is legal.
     * uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function(snapshot) {
     *   var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;
     *   console.log(percent + \\"% done\\");
     * });
     *
     * // This is also legal.
     * uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {
     *   'complete': function() {
     *     console.log('upload complete!');
     *   }
     * });
     * \`\`\`
     *
     * @example **Use the returned function to remove callbacks.**
     * \`\`\`javascript
     * var unsubscribe = uploadTask.on(
     *     firebase.storage.TaskEvent.STATE_CHANGED,
     *     function(snapshot) {
     *       var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;
     *       console.log(percent + \\"% done\\");
     *       // Stop after receiving one update.
     *       unsubscribe();
     *     });
     *
     * // This code is equivalent to the above.
     * var handle = uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED);
     * unsubscribe = handle(function(snapshot) {
     *   var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;
     *   console.log(percent + \\"% done\\");
     *   // Stop after receiving one update.
     *   unsubscribe();
     * });
     * \`\`\`
     *
     * @param event The event to listen for.
     * @param nextOrObserver
     *     The \`next\` function, which gets called for each item in
     *     the event stream, or an observer object with some or all of these three
     *     properties (\`next\`, \`error\`, \`complete\`).
     * @param error A function that gets called with a \`FirebaseStorageError\`
     *     if the event stream ends due to an error.
     * @param complete A function that gets called if the
     *     event stream ends normally.
     * @return
     *     If only the event argument is passed, returns a function you can use to
     *     add callbacks (see the examples above). If more than just the event
     *     argument is passed, returns a function you can call to unregister the
     *     callbacks.
     */",
                          ],
                          "id": "firebase.storage.UploadTask.on",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "on",
                          "signature": "on: (
    event: string,
    nextOrObserver?:
        | StorageObserver<UploadTaskSnapshot>
        | ((snapshot: UploadTaskSnapshot) => any),
    error?: (error: FirebaseStorageError) => any,
    complete?: firebase.Unsubscribe | null
) => Function;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7775,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7775",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7775",
                          },
                          "type": "(event: string, nextOrObserver?: StorageObserver<UploadTaskSnapshot> | ((snapshot: UploadTaskSnapshot) => any), error?: (error: FirebaseStorageError) => any, complete?: firebase.Unsubscribe | null) => Function",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Pauses a running task. Has no effect on a paused or failed task.
     * @return True if the pause had an effect.
     */",
                          ],
                          "id": "firebase.storage.UploadTask.pause",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "pause",
                          "signature": "pause: () => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7788,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7788",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7788",
                          },
                          "type": "() => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Resumes a paused task. Has no effect on a running or failed task.
     * @return True if the resume had an effect.
     */",
                          ],
                          "id": "firebase.storage.UploadTask.resume",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "resume",
                          "signature": "resume: () => boolean;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7793,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7793",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7793",
                          },
                          "type": "() => boolean",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * This object behaves like a Promise, and resolves with its snapshot data when
     * the upload completes.
     * @param onFulfilled
     *     The fulfillment callback. Promise chaining works as normal.
     * @param onRejected The rejection callback.
     */",
                          ],
                          "id": "firebase.storage.UploadTask.then",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "then",
                          "signature": "then: (
    onFulfilled?: (snapshot: UploadTaskSnapshot) => any,
    onRejected?: (error: FirebaseStorageError) => any
) => Promise<any>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7805,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7805",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7805",
                          },
                          "type": "(onFulfilled?: (snapshot: UploadTaskSnapshot) => any, onRejected?: (error: FirebaseStorageError) => any) => Promise<any>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * A snapshot of the current task state.
     */",
                          ],
                          "id": "firebase.storage.UploadTask.snapshot",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "snapshot",
                          "signature": "snapshot: firebase.storage.UploadTaskSnapshot;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7797,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7797",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7797",
                          },
                          "type": "UploadTaskSnapshot",
                        },
                      ],
                    },
                    "name": "UploadTask",
                    "signature": "interface UploadTask {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7656,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7656",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7656",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Holds data about the current state of the upload task.
   */",
                    ],
                    "id": "firebase.storage.UploadTaskSnapshot",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * The number of bytes that have been successfully uploaded so far.
     */",
                          ],
                          "id": "firebase.storage.UploadTaskSnapshot.bytesTransferred",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "bytesTransferred",
                          "signature": "bytesTransferred: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7820,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7820",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7820",
                          },
                          "type": "number",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * @deprecated
     * Use Reference.getDownloadURL instead. This property will be removed in a
     * future release.
     */",
                          ],
                          "id": "firebase.storage.UploadTaskSnapshot.downloadURL",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "downloadURL",
                          "signature": "downloadURL: string | null;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7826,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7826",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7826",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Before the upload completes, contains the metadata sent to the server.
     * After the upload completes, contains the metadata sent back from the server.
     */",
                          ],
                          "id": "firebase.storage.UploadTaskSnapshot.metadata",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "metadata",
                          "signature": "metadata: firebase.storage.FullMetadata;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7831,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7831",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7831",
                          },
                          "type": "FullMetadata",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The reference that spawned this snapshot's upload task.
     */",
                          ],
                          "id": "firebase.storage.UploadTaskSnapshot.ref",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "ref",
                          "signature": "ref: firebase.storage.Reference;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7835,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7835",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7835",
                          },
                          "type": "Reference",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The current state of the task.
     */",
                          ],
                          "id": "firebase.storage.UploadTaskSnapshot.state",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "state",
                          "signature": "state: firebase.storage.TaskState;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7839,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7839",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7839",
                          },
                          "type": "string",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The task of which this is a snapshot.
     */",
                          ],
                          "id": "firebase.storage.UploadTaskSnapshot.task",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "task",
                          "signature": "task: firebase.storage.UploadTask;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7843,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7843",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7843",
                          },
                          "type": "UploadTask",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * The total number of bytes to be uploaded.
     */",
                          ],
                          "id": "firebase.storage.UploadTaskSnapshot.totalBytes",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "totalBytes",
                          "signature": "totalBytes: number;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 7847,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7847",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7847",
                          },
                          "type": "number",
                        },
                      ],
                    },
                    "name": "UploadTaskSnapshot",
                    "signature": "interface UploadTaskSnapshot {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7816,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7816",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7816",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [
                  Object {
                    "docs": Array [
                      "/**
   * @enum {string}
   * An enumeration of the possible string formats for upload.
   */",
                    ],
                    "id": "firebase.storage.StringFormat",
                    "kind": "TypeAliasDeclaration",
                    "name": "StringFormat",
                    "signature": "type StringFormat = string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7557,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7557",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7557",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * An event that is triggered on a task.
   * @enum {string}
   * @see {@link firebase.storage.UploadTask.on}
   */",
                    ],
                    "id": "firebase.storage.TaskEvent",
                    "kind": "TypeAliasDeclaration",
                    "name": "TaskEvent",
                    "signature": "type TaskEvent = string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7598,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7598",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7598",
                    },
                  },
                  Object {
                    "docs": Array [
                      "/**
   * Represents the current state of a running upload.
   * @enum {string}
   */",
                    ],
                    "id": "firebase.storage.TaskState",
                    "kind": "TypeAliasDeclaration",
                    "name": "TaskState",
                    "signature": "type TaskState = string;",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7620,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7620",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7620",
                    },
                  },
                ],
                "variables": Array [
                  Object {
                    "docs": Array [],
                    "id": "firebase.storage.StringFormat",
                    "kind": "VariableDeclaration",
                    "name": "StringFormat",
                    "signature": "var StringFormat: {
    BASE64: string;
    BASE64URL: string;
    DATA_URL: string;
    RAW: string;
};",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7558,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7558",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7558",
                    },
                    "type": "{ BASE64: string; BASE64URL: string; DATA_URL: string; RAW: string; }",
                    "variableKind": "var",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.storage.TaskEvent",
                    "kind": "VariableDeclaration",
                    "name": "TaskEvent",
                    "signature": "var TaskEvent: { STATE_CHANGED: string };",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7599,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7599",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7599",
                    },
                    "type": "{ STATE_CHANGED: string; }",
                    "variableKind": "var",
                  },
                  Object {
                    "docs": Array [],
                    "id": "firebase.storage.TaskState",
                    "kind": "VariableDeclaration",
                    "name": "TaskState",
                    "signature": "var TaskState: {
    CANCELED: string;
    ERROR: string;
    PAUSED: string;
    RUNNING: string;
    SUCCESS: string;
};",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 7621,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7621",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7621",
                    },
                    "type": "{ CANCELED: string; ERROR: string; PAUSED: string; RUNNING: string; SUCCESS: string; }",
                    "variableKind": "var",
                  },
                ],
              },
              "docs": Array [],
              "id": "firebase.storage",
              "kind": "NamespaceDeclaration",
              "name": "firebase.storage",
              "signature": "namespace firebase.storage {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 7233,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L7233",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L7233",
              },
            },
            Object {
              "declarations": Object {
                "classes": Array [],
                "enums": Array [],
                "functions": Array [],
                "interfaces": Array [
                  Object {
                    "docs": Array [
                      "/**
   * This is the interface that defines the multi-factor related properties and
   * operations pertaining to a {@link firebase.User}.
   */",
                    ],
                    "id": "firebase.User.MultiFactorUser",
                    "kind": "InterfaceDeclaration",
                    "members": Object {
                      "callSignatures": Array [],
                      "constructSignatures": Array [],
                      "indexSignatures": Array [],
                      "methods": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Enrolls a second factor as identified by the
     * {@link firebase.auth.MultiFactorAssertion} for the current user.
     * On resolution, the user tokens are updated to reflect the change in the
     * JWT payload.
     * Accepts an additional display name parameter used to identify the second
     * factor to the end user.
     * Recent re-authentication is required for this operation to succeed.
     * On successful enrollment, existing Firebase sessions (refresh tokens) are
     * revoked. When a new factor is enrolled, an email notification is sent
     * to the user’s email.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/invalid-verification-code</dt>
     * <dd>Thrown if the verification code is not valid.</dd>
     * <dt>auth/missing-verification-code</dt>
     * <dd>Thrown if the verification code is missing.</dd>
     * <dt>auth/invalid-verification-id</dt>
     * <dd>Thrown if the credential is a
     *     {@link firebase.auth.PhoneAuthProvider.credential} and the verification
     *     ID of the credential is not valid.</dd>
     * <dt>auth/missing-verification-id</dt>
     * <dd>Thrown if the verification ID is missing.</dd>
     * <dt>auth/code-expired</dt>
     * <dd>Thrown if the verification code has expired.</dd>
     * <dt>auth/maximum-second-factor-count-exceeded</dt>
     * <dd>Thrown if The maximum allowed number of second factors on a user
     *     has been exceeded.</dd>
     * <dt>auth/second-factor-already-in-use</dt>
     * <dd>Thrown if the second factor is already enrolled on this account.</dd>
     * <dt>auth/unsupported-first-factor</dt>
     * <dd>Thrown if the first factor being used to sign in is not supported.</dd>
     * <dt>auth/unverified-email</dt>
     * <dd>Thrown if the email of the account is not verified.</dd>
     * <dt>auth/requires-recent-login</dt>
     * <dd>Thrown if the user's last sign-in time does not meet the security
     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to
     *     resolve.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * firebase.auth().currentUser.multiFactor.getSession()
     *     .then(function(multiFactorSession) {
     *       // Send verification code
     *     var phoneAuthProvider = new firebase.auth.PhoneAuthProvider();
     *     var phoneInfoOptions = {
     *       phoneNumber: phoneNumber,
     *       session: multiFactorSession
     *     };
     *     return phoneAuthProvider.verifyPhoneNumber(
     *         phoneInfoOptions, appVerifier);
     *     }).then(function(verificationId) {
     *       // Store verificationID and show UI to let user enter verification code.
     *     });
     *
     * var phoneAuthCredential =
     *     firebase.auth.PhoneAuthProvider.credential(verificationId, verificationCode);
     * var multiFactorAssertion =
     *     firebase.auth.PhoneMultiFactorGenerator.assertion(phoneAuthCredential);
     * firebase.auth().currentUser.multiFactor.enroll(multiFactorAssertion)
     *     .then(function() {
     *       // Second factor enrolled.
     *     });
     * \`\`\`
     *
     * @param assertion The multi-factor assertion to enroll with.
     * @param displayName The display name of the second factor.
     */",
                          ],
                          "id": "firebase.User.MultiFactorUser.enroll",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "enroll",
                          "signature": "enroll: (
    assertion: firebase.auth.MultiFactorAssertion,
    displayName?: string | null
) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5223,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5223",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5223",
                          },
                          "type": "(assertion: firebase.auth.MultiFactorAssertion, displayName?: string | null) => Promise<void>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Returns the session identifier for a second factor enrollment operation.
     * This is used to identify the current user trying to enroll a second factor.
     * @return The promise that resolves with the
     * {@link firebase.auth.MultiFactorSession}.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/user-token-expired</dt>
     * <dd>Thrown if the token of the user is expired.</dd>
     * </dl>
     */",
                          ],
                          "id": "firebase.User.MultiFactorUser.getSession",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "getSession",
                          "signature": "getSession: () => Promise<firebase.auth.MultiFactorSession>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5239,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5239",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5239",
                          },
                          "type": "() => Promise<firebase.auth.MultiFactorSession>",
                        },
                        Object {
                          "docs": Array [
                            "/**
     * Unenrolls the specified second factor. To specify the factor to remove, pass
     * a {@link firebase.auth.MultiFactorInfo} object
     * (retrieved from <code>enrolledFactors()</code>)
     * or the factor's UID string.
     * Sessions are not revoked when the account is downgraded. An email
     * notification is likely to be sent to the user notifying them of the change.
     * Recent re-authentication is required for this operation to succeed.
     * When an existing factor is unenrolled, an email notification is sent to the
     * user’s email.
     *
     * <h4>Error Codes</h4>
     * <dl>
     * <dt>auth/multi-factor-info-not-found</dt>
     * <dd>Thrown if the user does not have a second factor matching the
     *     identifier provided.</dd>
     * <dt>auth/requires-recent-login</dt>
     * <dd>Thrown if the user's last sign-in time does not meet the security
     *     threshold. Use {@link firebase.User.reauthenticateWithCredential} to
     *     resolve.</dd>
     * </dl>
     *
     * @example
     * \`\`\`javascript
     * var options = firebase.auth().currentUser.multiFactor.enrolledFactors;
     * // Present user the option to unenroll.
     * return firebase.auth().currentUser.multiFactor.unenroll(options[i])
     *   .then(function() {
     *     // User successfully unenrolled selected factor.
     *   }).catch(function(error) {
     *     // Handler error.
     *   });
     * \`\`\`
     *
     * @param option The multi-factor option to unenroll.
     */",
                          ],
                          "id": "firebase.User.MultiFactorUser.unenroll",
                          "kind": "InterfaceMethodDeclaration",
                          "name": "unenroll",
                          "signature": "unenroll: (option: firebase.auth.MultiFactorInfo | string) => Promise<void>;",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5276,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5276",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5276",
                          },
                          "type": "(option: firebase.auth.MultiFactorInfo | string) => Promise<void>",
                        },
                      ],
                      "properties": Array [
                        Object {
                          "docs": Array [
                            "/**
     * Returns a list of the user's enrolled second factors.
     */",
                          ],
                          "id": "firebase.User.MultiFactorUser.enrolledFactors",
                          "isOptional": false,
                          "isReadonly": false,
                          "kind": "InterfacePropertyDeclaration",
                          "name": "enrolledFactors",
                          "signature": "enrolledFactors: firebase.auth.MultiFactorInfo[];",
                          "source": Object {
                            "filename": "index.d.ts",
                            "line": 5152,
                            "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5152",
                            "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5152",
                          },
                          "type": "auth.MultiFactorInfo[]",
                        },
                      ],
                    },
                    "name": "MultiFactorUser",
                    "signature": "interface MultiFactorUser {}",
                    "source": Object {
                      "filename": "index.d.ts",
                      "line": 5148,
                      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5148",
                      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5148",
                    },
                  },
                ],
                "namespaces": Array [],
                "typeAliases": Array [],
                "variables": Array [],
              },
              "docs": Array [],
              "id": "firebase.User",
              "kind": "NamespaceDeclaration",
              "name": "firebase.User",
              "signature": "namespace firebase.User {}",
              "source": Object {
                "filename": "index.d.ts",
                "line": 5143,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L5143",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L5143",
              },
            },
          ],
          "typeAliases": Array [
            Object {
              "docs": Array [
                "/**
   * @hidden
   */",
              ],
              "id": "firebase.CompleteFn",
              "kind": "TypeAliasDeclaration",
              "name": "CompleteFn",
              "signature": "type CompleteFn = () => void;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 34,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L34",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L34",
              },
            },
            Object {
              "docs": Array [
                "/**
   * @hidden
   */",
              ],
              "id": "firebase.ErrorFn",
              "kind": "TypeAliasDeclaration",
              "name": "ErrorFn",
              "signature": "type ErrorFn<E = Error> = (error: E) => void;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 30,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L30",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L30",
              },
            },
            Object {
              "docs": Array [
                "/**
   * The JS SDK supports 5 log levels and also allows a user the ability to
   * silence the logs altogether.
   *
   * The order is as follows:
   * silent < debug < verbose < info < warn < error
   */",
              ],
              "id": "firebase.LogLevel",
              "kind": "TypeAliasDeclaration",
              "name": "LogLevel",
              "signature": "type LogLevel = 'debug' | 'verbose' | 'info' | 'warn' | 'error' | 'silent';",
              "source": Object {
                "filename": "index.d.ts",
                "line": 88,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L88",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L88",
              },
            },
            Object {
              "docs": Array [
                "/**
   * @hidden
   */",
              ],
              "id": "firebase.NextFn",
              "kind": "TypeAliasDeclaration",
              "name": "NextFn",
              "signature": "type NextFn<T> = (value: T) => void;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 26,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L26",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L26",
              },
            },
            Object {
              "docs": Array [
                "/**
   * @hidden
   */",
              ],
              "id": "firebase.Unsubscribe",
              "kind": "TypeAliasDeclaration",
              "name": "Unsubscribe",
              "signature": "type Unsubscribe = () => void;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 153,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L153",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L153",
              },
            },
          ],
          "variables": Array [
            Object {
              "docs": Array [
                "/**
   * A (read-only) array of all initialized apps.
   */",
              ],
              "id": "firebase.apps",
              "kind": "VariableDeclaration",
              "name": "apps",
              "signature": "var apps: app.App[];",
              "source": Object {
                "filename": "index.d.ts",
                "line": 1041,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L1041",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L1041",
              },
              "type": "app.App[]",
              "variableKind": "var",
            },
            Object {
              "docs": Array [
                "/**
   * The current SDK version.
   */",
              ],
              "id": "firebase.SDK_VERSION",
              "kind": "VariableDeclaration",
              "name": "SDK_VERSION",
              "signature": "var SDK_VERSION: string;",
              "source": Object {
                "filename": "index.d.ts",
                "line": 93,
                "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L93",
                "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L93",
              },
              "type": "string",
              "variableKind": "var",
            },
          ],
        },
        "docs": Array [
          "/**
 * <code>firebase</code> is a global namespace from which all Firebase
 * services are accessed.
 */",
        ],
        "id": "firebase",
        "kind": "NamespaceDeclaration",
        "name": "firebase",
        "signature": "namespace firebase {}",
        "source": Object {
          "filename": "index.d.ts",
          "line": 22,
          "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts#L22",
          "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts#L22",
        },
      },
    ],
    "typeAliases": Array [],
    "variables": Array [],
  },
  "files": Array [
    Object {
      "filename": "index.d.ts",
      "isIndexFile": true,
      "unpkgURL": "https://unpkg.com/browse/firebase@8.2.4/index.d.ts",
      "url": "https://github.com/firebase/firebase-js-sdk/tree/v8.2.4/index.d.ts",
    },
  ],
  "overview": undefined,
}
`;
